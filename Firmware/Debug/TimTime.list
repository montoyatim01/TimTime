
TimTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa58  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001700  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2e8  0800c2e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2e8  0800c2e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2e8  0800c2e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c2e8  0800c2e8  0001c2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2f0  0800c2f0  0001c2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c2f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a28  20000070  0800c364  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a98  0800c364  00020a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023072  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e81  00000000  00000000  00043112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00046f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002753b  00000000  00000000  000487d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001dbac  00000000  00000000  0006fd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e5c9a  00000000  00000000  0008d8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00173559  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001658  00000000  00000000  001735b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000665c  00000000  00000000  00174c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abd0 	.word	0x0800abd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800abd0 	.word	0x0800abd0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <_Z11batteryReadv>:
#include "Battery.h"
#include "Global.h"
#include "stm32l4xx_hal.h"

float batteryRead()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
    uint16_t averageReading = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	82fb      	strh	r3, [r7, #22]
    //uint8_t bufferPosition = 0;
    uint16_t readBuffer[8];

    HAL_ADC_Start(battADC);
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 ff8c 	bl	8006988 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(battADC, HAL_MAX_DELAY);
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f005 ffe8 	bl	8006a4e <HAL_ADC_PollForConversion>
    for (int i=0; i<8; i++){
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	dc1b      	bgt.n	8000ac0 <_Z11batteryReadv+0x64>
        readBuffer[i] = HAL_ADC_GetValue(battADC);
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f006 f866 	bl	8006b5e <HAL_ADC_GetValue>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	f107 0118 	add.w	r1, r7, #24
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f823 2c18 	strh.w	r2, [r3, #-24]
        averageReading += readBuffer[i];
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	f107 0218 	add.w	r2, r7, #24
 8000aac:	4413      	add	r3, r2
 8000aae:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000ab2:	8afb      	ldrh	r3, [r7, #22]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	82fb      	strh	r3, [r7, #22]
    for (int i=0; i<8; i++){
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	3301      	adds	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	e7e0      	b.n	8000a82 <_Z11batteryReadv+0x26>
    }
    batteryRemaining = (battPercent((averageReading / 8)));
 8000ac0:	8afb      	ldrh	r3, [r7, #22]
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f816 	bl	8000af8 <_Z11battPercentt>
 8000acc:	eef0 7a40 	vmov.f32	s15, s0
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_Z11batteryReadv+0x98>)
 8000ad2:	edc3 7a00 	vstr	s15, [r3]
    return (battPercent((averageReading / 8)));
 8000ad6:	8afb      	ldrh	r3, [r7, #22]
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f80b 	bl	8000af8 <_Z11battPercentt>
 8000ae2:	eef0 7a40 	vmov.f32	s15, s0
    
    
}
 8000ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000048 	.word	0x20000048
 8000af4:	200000bc 	.word	0x200000bc

08000af8 <_Z11battPercentt>:


float battPercent(uint16_t analogReading){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
    if (analogReading >= 2700) {
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	f640 228b 	movw	r2, #2699	; 0xa8b
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d902      	bls.n	8000b12 <_Z11battPercentt+0x1a>
        return 1.0;
 8000b0c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b10:	e331      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2675 && analogReading < 2700) {
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	f640 2272 	movw	r2, #2674	; 0xa72
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d907      	bls.n	8000b2c <_Z11battPercentt+0x34>
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	f640 228b 	movw	r2, #2699	; 0xa8b
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d802      	bhi.n	8000b2c <_Z11battPercentt+0x34>
        return 1.0;
 8000b26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b2a:	e324      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2650 && analogReading < 2675) {
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	f640 2259 	movw	r2, #2649	; 0xa59
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d92c      	bls.n	8000b90 <_Z11battPercentt+0x98>
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f640 2272 	movw	r2, #2674	; 0xa72
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d827      	bhi.n	8000b90 <_Z11battPercentt+0x98>
        return ( (0.08*((float)analogReading)) - 115.0 )/100.0;
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b4a:	ee17 0a90 	vmov	r0, s15
 8000b4e:	f7ff fca3 	bl	8000498 <__aeabi_f2d>
 8000b52:	a3d8      	add	r3, pc, #864	; (adr r3, 8000eb4 <_Z11battPercentt+0x3bc>)
 8000b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b58:	f7ff fcf6 	bl	8000548 <__aeabi_dmul>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	a3d5      	add	r3, pc, #852	; (adr r3, 8000ebc <_Z11battPercentt+0x3c4>)
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	f7ff fb35 	bl	80001d8 <__aeabi_dsub>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	4bcb      	ldr	r3, [pc, #812]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000b7c:	f7ff fe0e 	bl	800079c <__aeabi_ddiv>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f7ff ff18 	bl	80009bc <__aeabi_d2f>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	e2f2      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2625 && analogReading < 2650) {
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	f5b3 6f24 	cmp.w	r3, #2624	; 0xa40
 8000b96:	d92c      	bls.n	8000bf2 <_Z11battPercentt+0xfa>
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	f640 2259 	movw	r2, #2649	; 0xa59
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d827      	bhi.n	8000bf2 <_Z11battPercentt+0xfa>
        return ( (0.12*((float)analogReading)) - 221.0 )/100.0;
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bac:	ee17 0a90 	vmov	r0, s15
 8000bb0:	f7ff fc72 	bl	8000498 <__aeabi_f2d>
 8000bb4:	a3a4      	add	r3, pc, #656	; (adr r3, 8000e48 <_Z11battPercentt+0x350>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fcc5 	bl	8000548 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	a3a2      	add	r3, pc, #648	; (adr r3, 8000e50 <_Z11battPercentt+0x358>)
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fb04 	bl	80001d8 <__aeabi_dsub>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	4bb2      	ldr	r3, [pc, #712]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000bde:	f7ff fddd 	bl	800079c <__aeabi_ddiv>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4610      	mov	r0, r2
 8000be8:	4619      	mov	r1, r3
 8000bea:	f7ff fee7 	bl	80009bc <__aeabi_d2f>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	e2c1      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2600 && analogReading < 2625) {
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f640 2227 	movw	r2, #2599	; 0xa27
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d92b      	bls.n	8000c54 <_Z11battPercentt+0x15c>
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	f5b3 6f24 	cmp.w	r3, #2624	; 0xa40
 8000c02:	d827      	bhi.n	8000c54 <_Z11battPercentt+0x15c>
        return ( (0.16*((float)analogReading)) - 326.0 )/100.0;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c0e:	ee17 0a90 	vmov	r0, s15
 8000c12:	f7ff fc41 	bl	8000498 <__aeabi_f2d>
 8000c16:	a390      	add	r3, pc, #576	; (adr r3, 8000e58 <_Z11battPercentt+0x360>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fc94 	bl	8000548 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	a38d      	add	r3, pc, #564	; (adr r3, 8000e60 <_Z11battPercentt+0x368>)
 8000c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2e:	f7ff fad3 	bl	80001d8 <__aeabi_dsub>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	4b9a      	ldr	r3, [pc, #616]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000c40:	f7ff fdac 	bl	800079c <__aeabi_ddiv>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff feb6 	bl	80009bc <__aeabi_d2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	e290      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2575 && analogReading < 2600) {
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	f640 220e 	movw	r2, #2574	; 0xa0e
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d92c      	bls.n	8000cb8 <_Z11battPercentt+0x1c0>
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	f640 2227 	movw	r2, #2599	; 0xa27
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d827      	bhi.n	8000cb8 <_Z11battPercentt+0x1c0>
        return ( (0.24*((float)analogReading)) - 534.0 )/100.0;
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c72:	ee17 0a90 	vmov	r0, s15
 8000c76:	f7ff fc0f 	bl	8000498 <__aeabi_f2d>
 8000c7a:	a37b      	add	r3, pc, #492	; (adr r3, 8000e68 <_Z11battPercentt+0x370>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	f7ff fc62 	bl	8000548 <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4610      	mov	r0, r2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b86      	ldr	r3, [pc, #536]	; (8000eac <_Z11battPercentt+0x3b4>)
 8000c92:	f7ff faa1 	bl	80001d8 <__aeabi_dsub>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000ca4:	f7ff fd7a 	bl	800079c <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fe84 	bl	80009bc <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	e25e      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2540 && analogReading < 2575) {
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	f640 12eb 	movw	r2, #2539	; 0x9eb
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d92c      	bls.n	8000d1c <_Z11battPercentt+0x224>
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	f640 220e 	movw	r2, #2574	; 0xa0e
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d827      	bhi.n	8000d1c <_Z11battPercentt+0x224>
        return ( (0.11428*((float)analogReading)) - 210.28 )/100.0;
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ee17 0a90 	vmov	r0, s15
 8000cda:	f7ff fbdd 	bl	8000498 <__aeabi_f2d>
 8000cde:	a364      	add	r3, pc, #400	; (adr r3, 8000e70 <_Z11battPercentt+0x378>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fc30 	bl	8000548 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	a361      	add	r3, pc, #388	; (adr r3, 8000e78 <_Z11battPercentt+0x380>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f7ff fa6f 	bl	80001d8 <__aeabi_dsub>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	4b68      	ldr	r3, [pc, #416]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000d08:	f7ff fd48 	bl	800079c <__aeabi_ddiv>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fe52 	bl	80009bc <__aeabi_d2f>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	e22c      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2525 && analogReading < 2540) {
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	f640 12dc 	movw	r2, #2524	; 0x9dc
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d92c      	bls.n	8000d80 <_Z11battPercentt+0x288>
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f640 12eb 	movw	r2, #2539	; 0x9eb
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d827      	bhi.n	8000d80 <_Z11battPercentt+0x288>
        return ( (0.4*((float)analogReading)) - 936.0 )/100.0;
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3a:	ee17 0a90 	vmov	r0, s15
 8000d3e:	f7ff fbab 	bl	8000498 <__aeabi_f2d>
 8000d42:	a34f      	add	r3, pc, #316	; (adr r3, 8000e80 <_Z11battPercentt+0x388>)
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	f7ff fbfe 	bl	8000548 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <_Z11battPercentt+0x3b8>)
 8000d5a:	f7ff fa3d 	bl	80001d8 <__aeabi_dsub>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000d6c:	f7ff fd16 	bl	800079c <__aeabi_ddiv>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fe20 	bl	80009bc <__aeabi_d2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	e1fa      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2500 && analogReading < 2525) {
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d92c      	bls.n	8000de4 <_Z11battPercentt+0x2ec>
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	f640 12dc 	movw	r2, #2524	; 0x9dc
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d827      	bhi.n	8000de4 <_Z11battPercentt+0x2ec>
        return ( (0.36*((float)analogReading)) - 835.0 )/100.0;
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9e:	ee17 0a90 	vmov	r0, s15
 8000da2:	f7ff fb79 	bl	8000498 <__aeabi_f2d>
 8000da6:	a338      	add	r3, pc, #224	; (adr r3, 8000e88 <_Z11battPercentt+0x390>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fbcc 	bl	8000548 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	a335      	add	r3, pc, #212	; (adr r3, 8000e90 <_Z11battPercentt+0x398>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fa0b 	bl	80001d8 <__aeabi_dsub>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000dd0:	f7ff fce4 	bl	800079c <__aeabi_ddiv>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f7ff fdee 	bl	80009bc <__aeabi_d2f>
 8000de0:	4603      	mov	r3, r0
 8000de2:	e1c8      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2470 && analogReading < 2500) {
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	f640 12a5 	movw	r2, #2469	; 0x9a5
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d96a      	bls.n	8000ec4 <_Z11battPercentt+0x3cc>
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d865      	bhi.n	8000ec4 <_Z11battPercentt+0x3cc>
        return ( (0.366*((float)analogReading)) - 851.66 )/100.0;
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e02:	ee17 0a90 	vmov	r0, s15
 8000e06:	f7ff fb47 	bl	8000498 <__aeabi_f2d>
 8000e0a:	a323      	add	r3, pc, #140	; (adr r3, 8000e98 <_Z11battPercentt+0x3a0>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fb9a 	bl	8000548 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	a320      	add	r3, pc, #128	; (adr r3, 8000ea0 <_Z11battPercentt+0x3a8>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff f9d9 	bl	80001d8 <__aeabi_dsub>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000e34:	f7ff fcb2 	bl	800079c <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fdbc 	bl	80009bc <__aeabi_d2f>
 8000e44:	4603      	mov	r3, r0
 8000e46:	e196      	b.n	8001176 <_Z11battPercentt+0x67e>
 8000e48:	eb851eb8 	.word	0xeb851eb8
 8000e4c:	3fbeb851 	.word	0x3fbeb851
 8000e50:	00000000 	.word	0x00000000
 8000e54:	406ba000 	.word	0x406ba000
 8000e58:	47ae147b 	.word	0x47ae147b
 8000e5c:	3fc47ae1 	.word	0x3fc47ae1
 8000e60:	00000000 	.word	0x00000000
 8000e64:	40746000 	.word	0x40746000
 8000e68:	eb851eb8 	.word	0xeb851eb8
 8000e6c:	3fceb851 	.word	0x3fceb851
 8000e70:	3e963dc5 	.word	0x3e963dc5
 8000e74:	3fbd4174 	.word	0x3fbd4174
 8000e78:	c28f5c29 	.word	0xc28f5c29
 8000e7c:	406a48f5 	.word	0x406a48f5
 8000e80:	9999999a 	.word	0x9999999a
 8000e84:	3fd99999 	.word	0x3fd99999
 8000e88:	70a3d70a 	.word	0x70a3d70a
 8000e8c:	3fd70a3d 	.word	0x3fd70a3d
 8000e90:	00000000 	.word	0x00000000
 8000e94:	408a1800 	.word	0x408a1800
 8000e98:	43958106 	.word	0x43958106
 8000e9c:	3fd76c8b 	.word	0x3fd76c8b
 8000ea0:	ae147ae1 	.word	0xae147ae1
 8000ea4:	408a9d47 	.word	0x408a9d47
 8000ea8:	40590000 	.word	0x40590000
 8000eac:	4080b000 	.word	0x4080b000
 8000eb0:	408d4000 	.word	0x408d4000
 8000eb4:	47ae147b 	.word	0x47ae147b
 8000eb8:	3fb47ae1 	.word	0x3fb47ae1
 8000ebc:	00000000 	.word	0x00000000
 8000ec0:	405cc000 	.word	0x405cc000
    }
    if (analogReading >= 2450 && analogReading < 2470) {
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	f640 1291 	movw	r2, #2449	; 0x991
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d92c      	bls.n	8000f28 <_Z11battPercentt+0x430>
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	f640 12a5 	movw	r2, #2469	; 0x9a5
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d827      	bhi.n	8000f28 <_Z11battPercentt+0x430>
        return ( (1.1*((float)analogReading)) - 2663.0 )/100.0;
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee2:	ee17 0a90 	vmov	r0, s15
 8000ee6:	f7ff fad7 	bl	8000498 <__aeabi_f2d>
 8000eea:	a3b8      	add	r3, pc, #736	; (adr r3, 80011cc <_Z11battPercentt+0x6d4>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb2a 	bl	8000548 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	a3b5      	add	r3, pc, #724	; (adr r3, 80011d4 <_Z11battPercentt+0x6dc>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff f969 	bl	80001d8 <__aeabi_dsub>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4bab      	ldr	r3, [pc, #684]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000f14:	f7ff fc42 	bl	800079c <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd4c 	bl	80009bc <__aeabi_d2f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	e126      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2435 && analogReading < 2450) {
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	f640 1282 	movw	r2, #2434	; 0x982
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d92c      	bls.n	8000f8c <_Z11battPercentt+0x494>
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f640 1291 	movw	r2, #2449	; 0x991
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d827      	bhi.n	8000f8c <_Z11battPercentt+0x494>
        return ( (0.9333*((float)analogReading)) - 2254.66 )/100.0;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f46:	ee17 0a90 	vmov	r0, s15
 8000f4a:	f7ff faa5 	bl	8000498 <__aeabi_f2d>
 8000f4e:	a38e      	add	r3, pc, #568	; (adr r3, 8001188 <_Z11battPercentt+0x690>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff faf8 	bl	8000548 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	a38b      	add	r3, pc, #556	; (adr r3, 8001190 <_Z11battPercentt+0x698>)
 8000f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f66:	f7ff f937 	bl	80001d8 <__aeabi_dsub>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b92      	ldr	r3, [pc, #584]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000f78:	f7ff fc10 	bl	800079c <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd1a 	bl	80009bc <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	e0f4      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2400 && analogReading < 2435) {
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000f92:	d32c      	bcc.n	8000fee <_Z11battPercentt+0x4f6>
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f640 1282 	movw	r2, #2434	; 0x982
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d827      	bhi.n	8000fee <_Z11battPercentt+0x4f6>
        return ( (0.1714285*((float)analogReading)) - 399.0 )/100.0;
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa8:	ee17 0a90 	vmov	r0, s15
 8000fac:	f7ff fa74 	bl	8000498 <__aeabi_f2d>
 8000fb0:	a379      	add	r3, pc, #484	; (adr r3, 8001198 <_Z11battPercentt+0x6a0>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fac7 	bl	8000548 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	a377      	add	r3, pc, #476	; (adr r3, 80011a0 <_Z11battPercentt+0x6a8>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff f906 	bl	80001d8 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b79      	ldr	r3, [pc, #484]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000fda:	f7ff fbdf 	bl	800079c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fce9 	bl	80009bc <__aeabi_d2f>
 8000fea:	4603      	mov	r3, r0
 8000fec:	e0c3      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2380 && analogReading < 2400) {
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f640 124b 	movw	r2, #2379	; 0x94b
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d92b      	bls.n	8001050 <_Z11battPercentt+0x558>
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000ffe:	d227      	bcs.n	8001050 <_Z11battPercentt+0x558>
        return ( (0.2*((float)analogReading)) - 468.0 )/100.0;
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100a:	ee17 0a90 	vmov	r0, s15
 800100e:	f7ff fa43 	bl	8000498 <__aeabi_f2d>
 8001012:	a365      	add	r3, pc, #404	; (adr r3, 80011a8 <_Z11battPercentt+0x6b0>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa96 	bl	8000548 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <_Z11battPercentt+0x6cc>)
 800102a:	f7ff f8d5 	bl	80001d8 <__aeabi_dsub>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <_Z11battPercentt+0x6c8>)
 800103c:	f7ff fbae 	bl	800079c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fcb8 	bl	80009bc <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	e092      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2344 && analogReading < 2380) {
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	f640 1227 	movw	r2, #2343	; 0x927
 8001056:	4293      	cmp	r3, r2
 8001058:	d92c      	bls.n	80010b4 <_Z11battPercentt+0x5bc>
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	f640 124b 	movw	r2, #2379	; 0x94b
 8001060:	4293      	cmp	r3, r2
 8001062:	d827      	bhi.n	80010b4 <_Z11battPercentt+0x5bc>
        return ( (0.111111*((float)analogReading)) - 256.0 )/100.0;
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106e:	ee17 0a90 	vmov	r0, s15
 8001072:	f7ff fa11 	bl	8000498 <__aeabi_f2d>
 8001076:	a34e      	add	r3, pc, #312	; (adr r3, 80011b0 <_Z11battPercentt+0x6b8>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fa64 	bl	8000548 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <_Z11battPercentt+0x6d0>)
 800108e:	f7ff f8a3 	bl	80001d8 <__aeabi_dsub>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <_Z11battPercentt+0x6c8>)
 80010a0:	f7ff fb7c 	bl	800079c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fc86 	bl	80009bc <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	e060      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2320 && analogReading < 2344) {
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80010ba:	d32d      	bcc.n	8001118 <_Z11battPercentt+0x620>
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	f640 1227 	movw	r2, #2343	; 0x927
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d828      	bhi.n	8001118 <_Z11battPercentt+0x620>
        return ( (0.125*((float)analogReading)) - 289.0 )/100.0;
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff f9e0 	bl	8000498 <__aeabi_f2d>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80010e0:	f7ff fa32 	bl	8000548 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	a332      	add	r3, pc, #200	; (adr r3, 80011b8 <_Z11battPercentt+0x6c0>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f871 	bl	80001d8 <__aeabi_dsub>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8001104:	f7ff fb4a 	bl	800079c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fc54 	bl	80009bc <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	e02e      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2300 && analogReading < 2320) {
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	f640 02fb 	movw	r2, #2299	; 0x8fb
 800111e:	4293      	cmp	r3, r2
 8001120:	d906      	bls.n	8001130 <_Z11battPercentt+0x638>
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8001128:	d202      	bcs.n	8001130 <_Z11battPercentt+0x638>
        return 0.0;
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	e022      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2260 && analogReading < 2300) {
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	f640 02d3 	movw	r2, #2259	; 0x8d3
 8001136:	4293      	cmp	r3, r2
 8001138:	d907      	bls.n	800114a <_Z11battPercentt+0x652>
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001140:	4293      	cmp	r3, r2
 8001142:	d802      	bhi.n	800114a <_Z11battPercentt+0x652>
        return 0.0;
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e015      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 1900 && analogReading < 2260) {
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	f240 726b 	movw	r2, #1899	; 0x76b
 8001150:	4293      	cmp	r3, r2
 8001152:	d907      	bls.n	8001164 <_Z11battPercentt+0x66c>
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	f640 02d3 	movw	r2, #2259	; 0x8d3
 800115a:	4293      	cmp	r3, r2
 800115c:	d802      	bhi.n	8001164 <_Z11battPercentt+0x66c>
        return 0.0;
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	e008      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading < 1900){
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f240 726b 	movw	r2, #1899	; 0x76b
 800116a:	4293      	cmp	r3, r2
 800116c:	d802      	bhi.n	8001174 <_Z11battPercentt+0x67c>
        return 0.0;
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e000      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    


 8001174:	e001      	b.n	800117a <_Z11battPercentt+0x682>
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f3af 8000 	nop.w
 8001188:	f62b6ae8 	.word	0xf62b6ae8
 800118c:	3feddd97 	.word	0x3feddd97
 8001190:	eb851eb8 	.word	0xeb851eb8
 8001194:	40a19d51 	.word	0x40a19d51
 8001198:	7c8d1959 	.word	0x7c8d1959
 800119c:	3fc5f15e 	.word	0x3fc5f15e
 80011a0:	00000000 	.word	0x00000000
 80011a4:	4078f000 	.word	0x4078f000
 80011a8:	9999999a 	.word	0x9999999a
 80011ac:	3fc99999 	.word	0x3fc99999
 80011b0:	3f39d1b3 	.word	0x3f39d1b3
 80011b4:	3fbc71c5 	.word	0x3fbc71c5
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40721000 	.word	0x40721000
 80011c0:	40590000 	.word	0x40590000
 80011c4:	407d4000 	.word	0x407d4000
 80011c8:	40700000 	.word	0x40700000
 80011cc:	9999999a 	.word	0x9999999a
 80011d0:	3ff19999 	.word	0x3ff19999
 80011d4:	00000000 	.word	0x00000000
 80011d8:	40a4ce00 	.word	0x40a4ce00

080011dc <_Z15calibrationMenuv>:


//00 Number
//01 OK
//02 Cancel
void calibrationMenu(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
    uint32_t buttonTime;
    bool inMenu = true;
 80011e2:	2301      	movs	r3, #1
 80011e4:	70fb      	strb	r3, [r7, #3]
    menuItemSelect = false;
 80011e6:	4ba6      	ldr	r3, [pc, #664]	; (8001480 <_Z15calibrationMenuv+0x2a4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
    
    updateDisplay(d_calibration);
 80011ec:	2008      	movs	r0, #8
 80011ee:	f000 fac9 	bl	8001784 <_Z13updateDisplayh>
    while(GPIOB->IDR & GPIO_PIN_8 || GPIOB->IDR & GPIO_PIN_9){
 80011f2:	4ba4      	ldr	r3, [pc, #656]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d105      	bne.n	800120a <_Z15calibrationMenuv+0x2e>
 80011fe:	4ba1      	ldr	r3, [pc, #644]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <_Z15calibrationMenuv+0x32>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <_Z15calibrationMenuv+0x34>
 800120e:	2300      	movs	r3, #0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d000      	beq.n	8001216 <_Z15calibrationMenuv+0x3a>
 8001214:	e7ed      	b.n	80011f2 <_Z15calibrationMenuv+0x16>
        //Do nothing while holding buttons
    }
    displayTimeout = HAL_GetTick();
 8001216:	f005 f879 	bl	800630c <HAL_GetTick>
 800121a:	4603      	mov	r3, r0
 800121c:	4a9a      	ldr	r2, [pc, #616]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 800121e:	6013      	str	r3, [r2, #0]
    while (inMenu){
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 814d 	beq.w	80014c2 <_Z15calibrationMenuv+0x2e6>
        updateDisplay(d_calibration);
 8001228:	2008      	movs	r0, #8
 800122a:	f000 faab 	bl	8001784 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 30000){
 800122e:	f005 f86d 	bl	800630c <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	4b94      	ldr	r3, [pc, #592]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f247 5230 	movw	r2, #30000	; 0x7530
 800123e:	4293      	cmp	r3, r2
 8001240:	bf8c      	ite	hi
 8001242:	2301      	movhi	r3, #1
 8001244:	2300      	movls	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <_Z15calibrationMenuv+0x74>
            inMenu = false;
 800124c:	2300      	movs	r3, #0
 800124e:	70fb      	strb	r3, [r7, #3]
        }


        if (GPIOB->IDR & GPIO_PIN_9)
 8001250:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d043      	beq.n	80012ee <_Z15calibrationMenuv+0x112>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8001266:	f005 f851 	bl	800630c <HAL_GetTick>
 800126a:	4603      	mov	r3, r0
 800126c:	4a86      	ldr	r2, [pc, #536]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 800126e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001270:	f005 f84c 	bl	800630c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800127e:	bf8c      	ite	hi
 8001280:	2301      	movhi	r3, #1
 8001282:	2300      	movls	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d031      	beq.n	80012ee <_Z15calibrationMenuv+0x112>
            {
                if (menuItemSelect)
 800128a:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <_Z15calibrationMenuv+0x2a4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d01d      	beq.n	80012ce <_Z15calibrationMenuv+0xf2>
                { //Menu item selected, scrolling through values
                    switch (menuItem)
 8001292:	4b7e      	ldr	r3, [pc, #504]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d826      	bhi.n	80012e8 <_Z15calibrationMenuv+0x10c>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <_Z15calibrationMenuv+0xc4>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012e9 	.word	0x080012e9
 80012a8:	080012e9 	.word	0x080012e9
 80012ac:	080012e9 	.word	0x080012e9
                    {
                    case 0: //Number
                        if (newCal == 23000000)
 80012b0:	4b77      	ldr	r3, [pc, #476]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a77      	ldr	r2, [pc, #476]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d103      	bne.n	80012c2 <_Z15calibrationMenuv+0xe6>
                            newCal = 23000000;
 80012ba:	4b75      	ldr	r3, [pc, #468]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80012bc:	4a75      	ldr	r2, [pc, #468]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 80012be:	601a      	str	r2, [r3, #0]
                        else
                            newCal--;
                        break;
 80012c0:	e012      	b.n	80012e8 <_Z15calibrationMenuv+0x10c>
                            newCal--;
 80012c2:	4b73      	ldr	r3, [pc, #460]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4a71      	ldr	r2, [pc, #452]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80012ca:	6013      	str	r3, [r2, #0]
                        break;
 80012cc:	e00c      	b.n	80012e8 <_Z15calibrationMenuv+0x10c>
                        
                    }
                }
                else
                { //Scrolling through menu
                    menuItem++;
 80012ce:	4b6f      	ldr	r3, [pc, #444]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b6d      	ldr	r3, [pc, #436]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 80012d8:	701a      	strb	r2, [r3, #0]
                    if (menuItem > 2)
 80012da:	4b6c      	ldr	r3, [pc, #432]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d902      	bls.n	80012e8 <_Z15calibrationMenuv+0x10c>
                        menuItem = 0;
 80012e2:	4b6a      	ldr	r3, [pc, #424]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 80012e8:	f005 f810 	bl	800630c <HAL_GetTick>
 80012ec:	6078      	str	r0, [r7, #4]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 80012ee:	4b65      	ldr	r3, [pc, #404]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf14      	ite	ne
 80012fa:	2301      	movne	r3, #1
 80012fc:	2300      	moveq	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d042      	beq.n	800138a <_Z15calibrationMenuv+0x1ae>
        { //Minus button

            displayTimeout = HAL_GetTick();
 8001304:	f005 f802 	bl	800630c <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	4a5f      	ldr	r2, [pc, #380]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 800130c:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 800130e:	f004 fffd 	bl	800630c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800131c:	bf8c      	ite	hi
 800131e:	2301      	movhi	r3, #1
 8001320:	2300      	movls	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d030      	beq.n	800138a <_Z15calibrationMenuv+0x1ae>
            {
                if (menuItemSelect)
 8001328:	4b55      	ldr	r3, [pc, #340]	; (8001480 <_Z15calibrationMenuv+0x2a4>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d017      	beq.n	8001360 <_Z15calibrationMenuv+0x184>
                { //Scrolling through option
                    switch (menuItem)
 8001330:	4b56      	ldr	r3, [pc, #344]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d022      	beq.n	800137e <_Z15calibrationMenuv+0x1a2>
 8001338:	2b02      	cmp	r3, #2
 800133a:	dc23      	bgt.n	8001384 <_Z15calibrationMenuv+0x1a8>
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <_Z15calibrationMenuv+0x168>
 8001340:	2b01      	cmp	r3, #1
                        if (newCal > 25000000)
                            newCal = 25000000;
                        break;
                        
                    case 1: //OK
                        break;
 8001342:	e01f      	b.n	8001384 <_Z15calibrationMenuv+0x1a8>
                        newCal++;
 8001344:	4b52      	ldr	r3, [pc, #328]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a51      	ldr	r2, [pc, #324]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 800134c:	6013      	str	r3, [r2, #0]
                        if (newCal > 25000000)
 800134e:	4b50      	ldr	r3, [pc, #320]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a51      	ldr	r2, [pc, #324]	; (8001498 <_Z15calibrationMenuv+0x2bc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d914      	bls.n	8001382 <_Z15calibrationMenuv+0x1a6>
                            newCal = 25000000;
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 800135a:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <_Z15calibrationMenuv+0x2bc>)
 800135c:	601a      	str	r2, [r3, #0]
                        break;
 800135e:	e010      	b.n	8001382 <_Z15calibrationMenuv+0x1a6>
                        break;
                    }
                }
                else
                { //Scrolling through menu
                    if (menuItem == 0)
 8001360:	4b4a      	ldr	r3, [pc, #296]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <_Z15calibrationMenuv+0x194>
                        menuItem = 2;
 8001368:	4b48      	ldr	r3, [pc, #288]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 800136a:	2202      	movs	r2, #2
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	e009      	b.n	8001384 <_Z15calibrationMenuv+0x1a8>
                    else
                        menuItem--;
 8001370:	4b46      	ldr	r3, [pc, #280]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b44      	ldr	r3, [pc, #272]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e002      	b.n	8001384 <_Z15calibrationMenuv+0x1a8>
                        break;
 800137e:	bf00      	nop
 8001380:	e000      	b.n	8001384 <_Z15calibrationMenuv+0x1a8>
                        break;
 8001382:	bf00      	nop
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8001384:	f004 ffc2 	bl	800630c <HAL_GetTick>
 8001388:	6078      	str	r0, [r7, #4]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <_Z15calibrationMenuv+0x2c0>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf14      	ite	ne
 8001396:	2301      	movne	r3, #1
 8001398:	2300      	moveq	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	f43f af3f 	beq.w	8001220 <_Z15calibrationMenuv+0x44>
        { //Menu button
            displayTimeout = HAL_GetTick();
 80013a2:	f004 ffb3 	bl	800630c <HAL_GetTick>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a37      	ldr	r2, [pc, #220]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 80013aa:	6013      	str	r3, [r2, #0]
            if (!(GPIOB->IDR & GPIO_PIN_8))
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f43f af2e 	beq.w	8001220 <_Z15calibrationMenuv+0x44>
            {

                displayTimeout = HAL_GetTick();
 80013c4:	f004 ffa2 	bl	800630c <HAL_GetTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 80013cc:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - buttonTime > 350) //Debounce
 80013ce:	f004 ff9d 	bl	800630c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80013dc:	bf8c      	ite	hi
 80013de:	2301      	movhi	r3, #1
 80013e0:	2300      	movls	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f43f af1b 	beq.w	8001220 <_Z15calibrationMenuv+0x44>
                {
                    if (!menuItemSelect)
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <_Z15calibrationMenuv+0x2a4>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	f083 0301 	eor.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d055      	beq.n	80014a4 <_Z15calibrationMenuv+0x2c8>
                    { //if scrolling through menu items
                        switch (menuItem)
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d02b      	beq.n	8001458 <_Z15calibrationMenuv+0x27c>
 8001400:	2b02      	cmp	r3, #2
 8001402:	dc5a      	bgt.n	80014ba <_Z15calibrationMenuv+0x2de>
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <_Z15calibrationMenuv+0x232>
 8001408:	2b01      	cmp	r3, #1
 800140a:	d004      	beq.n	8001416 <_Z15calibrationMenuv+0x23a>
 800140c:	e055      	b.n	80014ba <_Z15calibrationMenuv+0x2de>
                        {
                        case 0: //Number
                            menuItemSelect = true;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <_Z15calibrationMenuv+0x2a4>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
                            break;
 8001414:	e051      	b.n	80014ba <_Z15calibrationMenuv+0x2de>
                        case 1: //OK
                            calibrateSuccess = writeCalibration(newCal);
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f85a 	bl	80014d4 <_Z16writeCalibrationm>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <_Z15calibrationMenuv+0x2c4>)
 8001426:	701a      	strb	r2, [r3, #0]
                            //calibration = newCal;
                            calibrationStatus();
 8001428:	f000 f89c 	bl	8001564 <_Z17calibrationStatusv>

                            inMenu = false;
 800142c:	2300      	movs	r3, #0
 800142e:	70fb      	strb	r3, [r7, #3]
                            //Try writing cal
                            //Exit menu
                            menuItemSelect = true;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_Z15calibrationMenuv+0x2a4>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
                            //offsetAlert();
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <_Z15calibrationMenuv+0x2c0>)
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf14      	ite	ne
 8001442:	2301      	movne	r3, #1
 8001444:	2300      	moveq	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d033      	beq.n	80014b4 <_Z15calibrationMenuv+0x2d8>
                            {displayTimeout = HAL_GetTick();}
 800144c:	f004 ff5e 	bl	800630c <HAL_GetTick>
 8001450:	4603      	mov	r3, r0
 8001452:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 8001454:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001456:	e7ee      	b.n	8001436 <_Z15calibrationMenuv+0x25a>
                            break;
                        case 2: //Cancel
                            inMenu = false;
 8001458:	2300      	movs	r3, #0
 800145a:	70fb      	strb	r3, [r7, #3]
                            while (GPIOC->IDR & GPIO_PIN_13)
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <_Z15calibrationMenuv+0x2c0>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001464:	2b00      	cmp	r3, #0
 8001466:	bf14      	ite	ne
 8001468:	2301      	movne	r3, #1
 800146a:	2300      	moveq	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d022      	beq.n	80014b8 <_Z15calibrationMenuv+0x2dc>
                            {displayTimeout = HAL_GetTick();}
 8001472:	f004 ff4b 	bl	800630c <HAL_GetTick>
 8001476:	4603      	mov	r3, r0
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 800147a:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 800147c:	e7ee      	b.n	800145c <_Z15calibrationMenuv+0x280>
 800147e:	bf00      	nop
 8001480:	200000ee 	.word	0x200000ee
 8001484:	48000400 	.word	0x48000400
 8001488:	200000e4 	.word	0x200000e4
 800148c:	200000ef 	.word	0x200000ef
 8001490:	2000008c 	.word	0x2000008c
 8001494:	015ef3c0 	.word	0x015ef3c0
 8001498:	017d7840 	.word	0x017d7840
 800149c:	48000800 	.word	0x48000800
 80014a0:	20000090 	.word	0x20000090
                            break;
                        }
                    }
                    else //Exit menu option
                    {
                        switch (menuItem)
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <_Z15calibrationMenuv+0x2f0>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d106      	bne.n	80014ba <_Z15calibrationMenuv+0x2de>
                        {
                        case 0: //Rate
                            menuItemSelect = false;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_Z15calibrationMenuv+0x2f4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
                            //calibration = newCal;
                            break;
 80014b2:	e002      	b.n	80014ba <_Z15calibrationMenuv+0x2de>
                            break;
 80014b4:	bf00      	nop
 80014b6:	e000      	b.n	80014ba <_Z15calibrationMenuv+0x2de>
                            break;
 80014b8:	bf00      	nop
                        }
                    }
                    buttonTime = HAL_GetTick(); //Debounce timer
 80014ba:	f004 ff27 	bl	800630c <HAL_GetTick>
 80014be:	6078      	str	r0, [r7, #4]
    while (inMenu){
 80014c0:	e6ae      	b.n	8001220 <_Z15calibrationMenuv+0x44>
            }
        }


    }
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000ef 	.word	0x200000ef
 80014d0:	200000ee 	.word	0x200000ee

080014d4 <_Z16writeCalibrationm>:
/* Write Calibration
* Write the values of the user inputted calibration
* to the EEPROM
*
*/
bool writeCalibration(uint32_t calibrationWrite){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af04      	add	r7, sp, #16
 80014da:	6078      	str	r0, [r7, #4]
HAL_Delay(10);
 80014dc:	200a      	movs	r0, #10
 80014de:	f004 ff21 	bl	8006324 <HAL_Delay>
uint8_t calWrite[4];
calWrite[0] = calibrationWrite;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	723b      	strb	r3, [r7, #8]
calWrite[1] = calibrationWrite >> 8;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	727b      	strb	r3, [r7, #9]
calWrite[2] = calibrationWrite >> 16;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	72bb      	strb	r3, [r7, #10]
calWrite[3] = calibrationWrite >> 24;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	0e1b      	lsrs	r3, r3, #24
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	72fb      	strb	r3, [r7, #11]
for (int i=0; i<4; i++){
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b03      	cmp	r3, #3
 8001508:	dc25      	bgt.n	8001556 <_Z16writeCalibrationm+0x82>
	if(HAL_I2C_Mem_Write(memI2C , 0x50<<1, 0x0005+i, 1, &calWrite[i], 1,1000)!= HAL_OK)	//offset
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <_Z16writeCalibrationm+0x8c>)
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	b29b      	uxth	r3, r3
 8001512:	3305      	adds	r3, #5
 8001514:	b299      	uxth	r1, r3
 8001516:	f107 0208 	add.w	r2, r7, #8
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4413      	add	r3, r2
 800151e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001522:	9202      	str	r2, [sp, #8]
 8001524:	2201      	movs	r2, #1
 8001526:	9201      	str	r2, [sp, #4]
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	460a      	mov	r2, r1
 800152e:	21a0      	movs	r1, #160	; 0xa0
 8001530:	f006 fc38 	bl	8007da4 <HAL_I2C_Mem_Write>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bf14      	ite	ne
 800153a:	2301      	movne	r3, #1
 800153c:	2300      	moveq	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <_Z16writeCalibrationm+0x74>
				{
						  return false;
 8001544:	2300      	movs	r3, #0
 8001546:	e007      	b.n	8001558 <_Z16writeCalibrationm+0x84>
				}
				 HAL_Delay(10);
 8001548:	200a      	movs	r0, #10
 800154a:	f004 feeb 	bl	8006324 <HAL_Delay>
for (int i=0; i<4; i++){
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	e7d6      	b.n	8001504 <_Z16writeCalibrationm+0x30>
}
        
        return true;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000050 	.word	0x20000050

08001564 <_Z17calibrationStatusv>:

void calibrationStatus(){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
    menuItemSelect = false;
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <_Z17calibrationStatusv+0x134>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
    bool inScreen = true;
 8001570:	2301      	movs	r3, #1
 8001572:	71fb      	strb	r3, [r7, #7]
    uint32_t dispTimeout = HAL_GetTick();
 8001574:	f004 feca 	bl	800630c <HAL_GetTick>
 8001578:	6038      	str	r0, [r7, #0]
    if (calibrateSuccess){
 800157a:	4b48      	ldr	r3, [pc, #288]	; (800169c <_Z17calibrationStatusv+0x138>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <_Z17calibrationStatusv+0x2e>
        calibration = newCal;
 8001582:	4b47      	ldr	r3, [pc, #284]	; (80016a0 <_Z17calibrationStatusv+0x13c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a47      	ldr	r2, [pc, #284]	; (80016a4 <_Z17calibrationStatusv+0x140>)
 8001588:	6013      	str	r3, [r2, #0]
        updateDisplay(d_calOK);
 800158a:	2009      	movs	r0, #9
 800158c:	f000 f8fa 	bl	8001784 <_Z13updateDisplayh>
 8001590:	e002      	b.n	8001598 <_Z17calibrationStatusv+0x34>
    } else {
        updateDisplay(d_calFail);
 8001592:	2010      	movs	r0, #16
 8001594:	f000 f8f6 	bl	8001784 <_Z13updateDisplayh>
    }
    while(GPIOC->IDR & GPIO_PIN_13){
 8001598:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <_Z17calibrationStatusv+0x144>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	bf14      	ite	ne
 80015a4:	2301      	movne	r3, #1
 80015a6:	2300      	moveq	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d000      	beq.n	80015b0 <_Z17calibrationStatusv+0x4c>
 80015ae:	e7f3      	b.n	8001598 <_Z17calibrationStatusv+0x34>
        //do nothing
    }
    if (calibrateSuccess){
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <_Z17calibrationStatusv+0x138>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d035      	beq.n	8001624 <_Z17calibrationStatusv+0xc0>
        while(inScreen){
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d02d      	beq.n	800161a <_Z17calibrationStatusv+0xb6>
            updateDisplay(d_calOK);
 80015be:	2009      	movs	r0, #9
 80015c0:	f000 f8e0 	bl	8001784 <_Z13updateDisplayh>
            if(HAL_GetTick() - dispTimeout > 5000){
 80015c4:	f004 fea2 	bl	800630c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	bf8c      	ite	hi
 80015d6:	2301      	movhi	r3, #1
 80015d8:	2300      	movls	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <_Z17calibrationStatusv+0x8e>
                menuItemSelect = true;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <_Z17calibrationStatusv+0x134>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
                updateDisplay(d_calOK);
 80015e6:	2009      	movs	r0, #9
 80015e8:	f000 f8cc 	bl	8001784 <_Z13updateDisplayh>
                inScreen = false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	71fb      	strb	r3, [r7, #7]
                break;
 80015f0:	e013      	b.n	800161a <_Z17calibrationStatusv+0xb6>
            }
            if (GPIOC->IDR & GPIO_PIN_13) //Menu button
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <_Z17calibrationStatusv+0x144>)
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf14      	ite	ne
 80015fe:	2301      	movne	r3, #1
 8001600:	2300      	moveq	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0d7      	beq.n	80015b8 <_Z17calibrationStatusv+0x54>
            {
                menuItemSelect = true;
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <_Z17calibrationStatusv+0x134>)
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
                updateDisplay(d_calOK);
 800160e:	2009      	movs	r0, #9
 8001610:	f000 f8b8 	bl	8001784 <_Z13updateDisplayh>
                inScreen = false; 
 8001614:	2300      	movs	r3, #0
 8001616:	71fb      	strb	r3, [r7, #7]
        while(inScreen){
 8001618:	e7ce      	b.n	80015b8 <_Z17calibrationStatusv+0x54>
            }
        }
        HAL_Delay(500);
 800161a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800161e:	f004 fe81 	bl	8006324 <HAL_Delay>
                inScreen = false; 
            }
        }
        HAL_Delay(500);
    }
}
 8001622:	e034      	b.n	800168e <_Z17calibrationStatusv+0x12a>
        while(inScreen){
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d02d      	beq.n	8001686 <_Z17calibrationStatusv+0x122>
            updateDisplay(d_calFail);
 800162a:	2010      	movs	r0, #16
 800162c:	f000 f8aa 	bl	8001784 <_Z13updateDisplayh>
            if(HAL_GetTick() - dispTimeout > 5000){
 8001630:	f004 fe6c 	bl	800630c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	bf8c      	ite	hi
 8001642:	2301      	movhi	r3, #1
 8001644:	2300      	movls	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <_Z17calibrationStatusv+0xfa>
                menuItemSelect = true;
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <_Z17calibrationStatusv+0x134>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
                updateDisplay(d_calFail);
 8001652:	2010      	movs	r0, #16
 8001654:	f000 f896 	bl	8001784 <_Z13updateDisplayh>
                inScreen = false;
 8001658:	2300      	movs	r3, #0
 800165a:	71fb      	strb	r3, [r7, #7]
                break;
 800165c:	e013      	b.n	8001686 <_Z17calibrationStatusv+0x122>
        if (GPIOC->IDR & GPIO_PIN_13) //Menu button
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <_Z17calibrationStatusv+0x144>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0d7      	beq.n	8001624 <_Z17calibrationStatusv+0xc0>
                menuItemSelect = true;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_Z17calibrationStatusv+0x134>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
                updateDisplay(d_calFail);
 800167a:	2010      	movs	r0, #16
 800167c:	f000 f882 	bl	8001784 <_Z13updateDisplayh>
                inScreen = false; 
 8001680:	2300      	movs	r3, #0
 8001682:	71fb      	strb	r3, [r7, #7]
        while(inScreen){
 8001684:	e7ce      	b.n	8001624 <_Z17calibrationStatusv+0xc0>
        HAL_Delay(500);
 8001686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800168a:	f004 fe4b 	bl	8006324 <HAL_Delay>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000ee 	.word	0x200000ee
 800169c:	20000090 	.word	0x20000090
 80016a0:	2000008c 	.word	0x2000008c
 80016a4:	20000014 	.word	0x20000014
 80016a8:	48000800 	.word	0x48000800

080016ac <_Z11calReadFailv>:

void calReadFail(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
    menuItemSelect = false;
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <_Z11calReadFailv+0x88>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
    bool inScreen = true;
 80016b8:	2301      	movs	r3, #1
 80016ba:	71fb      	strb	r3, [r7, #7]
    uint32_t dispTimeout = HAL_GetTick();
 80016bc:	f004 fe26 	bl	800630c <HAL_GetTick>
 80016c0:	6038      	str	r0, [r7, #0]
    while (inScreen){
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d02d      	beq.n	8001724 <_Z11calReadFailv+0x78>
        updateDisplay(d_calReadFail);
 80016c8:	2011      	movs	r0, #17
 80016ca:	f000 f85b 	bl	8001784 <_Z13updateDisplayh>
        if(HAL_GetTick() - dispTimeout > 10000){
 80016ce:	f004 fe1d 	bl	800630c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80016dc:	4293      	cmp	r3, r2
 80016de:	bf8c      	ite	hi
 80016e0:	2301      	movhi	r3, #1
 80016e2:	2300      	movls	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <_Z11calReadFailv+0x50>
                menuItemSelect = true;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <_Z11calReadFailv+0x88>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
                updateDisplay(d_calReadFail);
 80016f0:	2011      	movs	r0, #17
 80016f2:	f000 f847 	bl	8001784 <_Z13updateDisplayh>
                inScreen = false;
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
                break;
 80016fa:	e013      	b.n	8001724 <_Z11calReadFailv+0x78>
            }
        if (GPIOC->IDR & GPIO_PIN_13) //Menu button
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <_Z11calReadFailv+0x8c>)
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0d7      	beq.n	80016c2 <_Z11calReadFailv+0x16>
            {
                menuItemSelect = true;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_Z11calReadFailv+0x88>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
                updateDisplay(d_calReadFail);
 8001718:	2011      	movs	r0, #17
 800171a:	f000 f833 	bl	8001784 <_Z13updateDisplayh>
                inScreen = false; 
 800171e:	2300      	movs	r3, #0
 8001720:	71fb      	strb	r3, [r7, #7]
    while (inScreen){
 8001722:	e7ce      	b.n	80016c2 <_Z11calReadFailv+0x16>
            }
    }
    HAL_Delay(500);
 8001724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001728:	f004 fdfc 	bl	8006324 <HAL_Delay>
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200000ee 	.word	0x200000ee
 8001738:	48000800 	.word	0x48000800

0800173c <_Z41__static_initialization_and_destruction_0ii>:
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d108      	bne.n	800175e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001752:	4293      	cmp	r3, r2
 8001754:	d103      	bne.n	800175e <_Z41__static_initialization_and_destruction_0ii+0x22>
uint32_t newCal = calibration;
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000014 	.word	0x20000014
 8001770:	2000008c 	.word	0x2000008c

08001774 <_GLOBAL__sub_I_newCal>:
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
 8001778:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800177c:	2001      	movs	r0, #1
 800177e:	f7ff ffdd 	bl	800173c <_Z41__static_initialization_and_destruction_0ii>
 8001782:	bd80      	pop	{r7, pc}

08001784 <_Z13updateDisplayh>:

//#include "fonts.h"
const char* foo = "0123456789";
char tcDisplay[11] = {0};
void updateDisplay(uint8_t state)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	switch (state)
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b12      	cmp	r3, #18
 8001792:	d850      	bhi.n	8001836 <_Z13updateDisplayh+0xb2>
 8001794:	a201      	add	r2, pc, #4	; (adr r2, 800179c <_Z13updateDisplayh+0x18>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017e9 	.word	0x080017e9
 80017a0:	080017ef 	.word	0x080017ef
 80017a4:	080017f5 	.word	0x080017f5
 80017a8:	080017fb 	.word	0x080017fb
 80017ac:	08001801 	.word	0x08001801
 80017b0:	08001807 	.word	0x08001807
 80017b4:	0800180d 	.word	0x0800180d
 80017b8:	08001813 	.word	0x08001813
 80017bc:	08001819 	.word	0x08001819
 80017c0:	0800181f 	.word	0x0800181f
 80017c4:	08001837 	.word	0x08001837
 80017c8:	08001837 	.word	0x08001837
 80017cc:	08001837 	.word	0x08001837
 80017d0:	08001837 	.word	0x08001837
 80017d4:	08001837 	.word	0x08001837
 80017d8:	08001837 	.word	0x08001837
 80017dc:	08001825 	.word	0x08001825
 80017e0:	0800182b 	.word	0x0800182b
 80017e4:	08001831 	.word	0x08001831
	{
	case d_off:
		displayOff();
 80017e8:	f000 f82a 	bl	8001840 <_Z10displayOffv>
		break;
 80017ec:	e024      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_home:
		displayMain();
 80017ee:	f000 f835 	bl	800185c <_Z11displayMainv>
		break;
 80017f2:	e021      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_menu:
		displayMenu();
 80017f4:	f000 f9e8 	bl	8001bc8 <_Z11displayMenuv>
		break;
 80017f8:	e01e      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_lock:
		displayLocked();
 80017fa:	f000 f941 	bl	8001a80 <_Z13displayLockedv>
		break;
 80017fe:	e01b      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_power:
		displayPower();
 8001800:	f000 f9ae 	bl	8001b60 <_Z12displayPowerv>
		break;
 8001804:	e018      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_rateWarn:
		displayConfirmationRateChange();
 8001806:	f000 fbf9 	bl	8001ffc <_Z29displayConfirmationRateChangev>
		break;
 800180a:	e015      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_offsetWarn:
		displayConfirmationOffsetChange();
 800180c:	f000 fc76 	bl	80020fc <_Z31displayConfirmationOffsetChangev>
		break;
 8001810:	e012      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_rejamWarn:
		displayConfirmationRejam();
 8001812:	f000 fccb 	bl	80021ac <_Z24displayConfirmationRejamv>
		break;
 8001816:	e00f      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_calibration:
		displayCalibration();
 8001818:	f000 fe84 	bl	8002524 <_Z18displayCalibrationv>
		break;
 800181c:	e00c      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_calOK:
		displayCalibrationOK();
 800181e:	f000 ffe5 	bl	80027ec <_Z20displayCalibrationOKv>
		break;
 8001822:	e009      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_calFail:
		displayCalibrationFail();
 8001824:	f001 f834 	bl	8002890 <_Z22displayCalibrationFailv>
		break;
 8001828:	e006      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_calReadFail:
		displayCalibrationReadFail();
 800182a:	f001 f883 	bl	8002934 <_Z26displayCalibrationReadFailv>
		break;
 800182e:	e003      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	case d_userBits:
		displayUserBitsMenu();
 8001830:	f001 f8ea 	bl	8002a08 <_Z19displayUserBitsMenuv>
		break;
 8001834:	e000      	b.n	8001838 <_Z13updateDisplayh+0xb4>
	default:
		break;
 8001836:	bf00      	nop
	}
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_Z10displayOffv>:

void displayOff()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001844:	2000      	movs	r0, #0
 8001846:	f003 ffa5 	bl	8005794 <ssd1306_Fill>
	ssd1306_UpdateScreen(dispI2C);
 800184a:	4b03      	ldr	r3, [pc, #12]	; (8001858 <_Z10displayOffv+0x18>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f003 ffc4 	bl	80057dc <ssd1306_UpdateScreen>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000004c 	.word	0x2000004c

0800185c <_Z11displayMainv>:

void displayMain()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
	//tcbreakout()
	char offsetStr[3];
	timecodeDisplay();
 8001862:	f000 fda7 	bl	80023b4 <_Z15timecodeDisplayv>
	ssd1306_SetCursor(4, 24);
 8001866:	2118      	movs	r1, #24
 8001868:	2004      	movs	r0, #4
 800186a:	f004 f8ef 	bl	8005a4c <ssd1306_SetCursor>
	//TODO TC DISPLAY STRING
	ssd1306_WriteString(tcDisplay, Font_11x18, White);
 800186e:	4a71      	ldr	r2, [pc, #452]	; (8001a34 <_Z11displayMainv+0x1d8>)
 8001870:	2301      	movs	r3, #1
 8001872:	ca06      	ldmia	r2, {r1, r2}
 8001874:	4870      	ldr	r0, [pc, #448]	; (8001a38 <_Z11displayMainv+0x1dc>)
 8001876:	f004 f8c3 	bl	8005a00 <ssd1306_WriteString>

	ssd1306_SetCursor(8, 0);
 800187a:	2100      	movs	r1, #0
 800187c:	2008      	movs	r0, #8
 800187e:	f004 f8e5 	bl	8005a4c <ssd1306_SetCursor>
	switch (frameRate)
 8001882:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <_Z11displayMainv+0x1e0>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d838      	bhi.n	80018fc <_Z11displayMainv+0xa0>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <_Z11displayMainv+0x34>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	080018a9 	.word	0x080018a9
 8001894:	080018b7 	.word	0x080018b7
 8001898:	080018c5 	.word	0x080018c5
 800189c:	080018d3 	.word	0x080018d3
 80018a0:	080018e1 	.word	0x080018e1
 80018a4:	080018ef 	.word	0x080018ef
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 80018a8:	4a65      	ldr	r2, [pc, #404]	; (8001a40 <_Z11displayMainv+0x1e4>)
 80018aa:	2301      	movs	r3, #1
 80018ac:	ca06      	ldmia	r2, {r1, r2}
 80018ae:	4865      	ldr	r0, [pc, #404]	; (8001a44 <_Z11displayMainv+0x1e8>)
 80018b0:	f004 f8a6 	bl	8005a00 <ssd1306_WriteString>
		break;
 80018b4:	e022      	b.n	80018fc <_Z11displayMainv+0xa0>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 80018b6:	4a62      	ldr	r2, [pc, #392]	; (8001a40 <_Z11displayMainv+0x1e4>)
 80018b8:	2301      	movs	r3, #1
 80018ba:	ca06      	ldmia	r2, {r1, r2}
 80018bc:	4862      	ldr	r0, [pc, #392]	; (8001a48 <_Z11displayMainv+0x1ec>)
 80018be:	f004 f89f 	bl	8005a00 <ssd1306_WriteString>
		break;
 80018c2:	e01b      	b.n	80018fc <_Z11displayMainv+0xa0>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 80018c4:	4a5e      	ldr	r2, [pc, #376]	; (8001a40 <_Z11displayMainv+0x1e4>)
 80018c6:	2301      	movs	r3, #1
 80018c8:	ca06      	ldmia	r2, {r1, r2}
 80018ca:	4860      	ldr	r0, [pc, #384]	; (8001a4c <_Z11displayMainv+0x1f0>)
 80018cc:	f004 f898 	bl	8005a00 <ssd1306_WriteString>
		break;
 80018d0:	e014      	b.n	80018fc <_Z11displayMainv+0xa0>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 80018d2:	4a5b      	ldr	r2, [pc, #364]	; (8001a40 <_Z11displayMainv+0x1e4>)
 80018d4:	2301      	movs	r3, #1
 80018d6:	ca06      	ldmia	r2, {r1, r2}
 80018d8:	485d      	ldr	r0, [pc, #372]	; (8001a50 <_Z11displayMainv+0x1f4>)
 80018da:	f004 f891 	bl	8005a00 <ssd1306_WriteString>
		break;
 80018de:	e00d      	b.n	80018fc <_Z11displayMainv+0xa0>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 80018e0:	4a57      	ldr	r2, [pc, #348]	; (8001a40 <_Z11displayMainv+0x1e4>)
 80018e2:	2301      	movs	r3, #1
 80018e4:	ca06      	ldmia	r2, {r1, r2}
 80018e6:	485b      	ldr	r0, [pc, #364]	; (8001a54 <_Z11displayMainv+0x1f8>)
 80018e8:	f004 f88a 	bl	8005a00 <ssd1306_WriteString>
		break;
 80018ec:	e006      	b.n	80018fc <_Z11displayMainv+0xa0>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 80018ee:	4a54      	ldr	r2, [pc, #336]	; (8001a40 <_Z11displayMainv+0x1e4>)
 80018f0:	2301      	movs	r3, #1
 80018f2:	ca06      	ldmia	r2, {r1, r2}
 80018f4:	4858      	ldr	r0, [pc, #352]	; (8001a58 <_Z11displayMainv+0x1fc>)
 80018f6:	f004 f883 	bl	8005a00 <ssd1306_WriteString>
		break;
 80018fa:	bf00      	nop
	}

	ssd1306_SetCursor(92, 52);
 80018fc:	2134      	movs	r1, #52	; 0x34
 80018fe:	205c      	movs	r0, #92	; 0x5c
 8001900:	f004 f8a4 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8001904:	4a4e      	ldr	r2, [pc, #312]	; (8001a40 <_Z11displayMainv+0x1e4>)
 8001906:	2301      	movs	r3, #1
 8001908:	ca06      	ldmia	r2, {r1, r2}
 800190a:	4854      	ldr	r0, [pc, #336]	; (8001a5c <_Z11displayMainv+0x200>)
 800190c:	f004 f878 	bl	8005a00 <ssd1306_WriteString>

	
	if (tcJammed)
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <_Z11displayMainv+0x204>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <_Z11displayMainv+0xd4>
	{
		ssd1306_SetCursor(84, 0);
 800191a:	2100      	movs	r1, #0
 800191c:	2054      	movs	r0, #84	; 0x54
 800191e:	f004 f895 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("Jammed", Font_7x10, White);
 8001922:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <_Z11displayMainv+0x1e4>)
 8001924:	2301      	movs	r3, #1
 8001926:	ca06      	ldmia	r2, {r1, r2}
 8001928:	484e      	ldr	r0, [pc, #312]	; (8001a64 <_Z11displayMainv+0x208>)
 800192a:	f004 f869 	bl	8005a00 <ssd1306_WriteString>
 800192e:	e009      	b.n	8001944 <_Z11displayMainv+0xe8>
	}
	else
	{
		ssd1306_SetCursor(90, 0);
 8001930:	2100      	movs	r1, #0
 8001932:	205a      	movs	r0, #90	; 0x5a
 8001934:	f004 f88a 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("Ready", Font_7x10, White);
 8001938:	4a41      	ldr	r2, [pc, #260]	; (8001a40 <_Z11displayMainv+0x1e4>)
 800193a:	2301      	movs	r3, #1
 800193c:	ca06      	ldmia	r2, {r1, r2}
 800193e:	484a      	ldr	r0, [pc, #296]	; (8001a68 <_Z11displayMainv+0x20c>)
 8001940:	f004 f85e 	bl	8005a00 <ssd1306_WriteString>
	}
	if (intOffset != 30)
 8001944:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <_Z11displayMainv+0x210>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b1e      	cmp	r3, #30
 800194a:	d067      	beq.n	8001a1c <_Z11displayMainv+0x1c0>
	{
		ssd1306_SetCursor(30, 12);
 800194c:	210c      	movs	r1, #12
 800194e:	201e      	movs	r0, #30
 8001950:	f004 f87c 	bl	8005a4c <ssd1306_SetCursor>
		if (intOffset > 30)
 8001954:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <_Z11displayMainv+0x210>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b1e      	cmp	r3, #30
 800195a:	d925      	bls.n	80019a8 <_Z11displayMainv+0x14c>
		{
			offsetStr[0] = '+';
 800195c:	232b      	movs	r3, #43	; 0x2b
 800195e:	713b      	strb	r3, [r7, #4]
			offsetStr[1] = foo[(intOffset-30)/10];
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <_Z11displayMainv+0x214>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <_Z11displayMainv+0x210>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	3b1e      	subs	r3, #30
 800196a:	4942      	ldr	r1, [pc, #264]	; (8001a74 <_Z11displayMainv+0x218>)
 800196c:	fb81 0103 	smull	r0, r1, r1, r3
 8001970:	1089      	asrs	r1, r1, #2
 8001972:	17db      	asrs	r3, r3, #31
 8001974:	1acb      	subs	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	717b      	strb	r3, [r7, #5]
			offsetStr[2] = foo[(intOffset-30)%10];
 800197c:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <_Z11displayMainv+0x214>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <_Z11displayMainv+0x210>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f1a3 021e 	sub.w	r2, r3, #30
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <_Z11displayMainv+0x218>)
 800198a:	fb83 1302 	smull	r1, r3, r3, r2
 800198e:	1099      	asrs	r1, r3, #2
 8001990:	17d3      	asrs	r3, r2, #31
 8001992:	1ac9      	subs	r1, r1, r3
 8001994:	460b      	mov	r3, r1
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	1ad1      	subs	r1, r2, r3
 800199e:	460b      	mov	r3, r1
 80019a0:	4403      	add	r3, r0
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	e029      	b.n	80019fc <_Z11displayMainv+0x1a0>
		}
		else if (intOffset < 30)
 80019a8:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <_Z11displayMainv+0x210>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b1d      	cmp	r3, #29
 80019ae:	d825      	bhi.n	80019fc <_Z11displayMainv+0x1a0>
		{
			offsetStr[0] = '-';		
 80019b0:	232d      	movs	r3, #45	; 0x2d
 80019b2:	713b      	strb	r3, [r7, #4]
			offsetStr[1] = foo[(30-intOffset)/10];
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <_Z11displayMainv+0x214>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <_Z11displayMainv+0x210>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	f1c3 031e 	rsb	r3, r3, #30
 80019c0:	492c      	ldr	r1, [pc, #176]	; (8001a74 <_Z11displayMainv+0x218>)
 80019c2:	fb81 0103 	smull	r0, r1, r1, r3
 80019c6:	1089      	asrs	r1, r1, #2
 80019c8:	17db      	asrs	r3, r3, #31
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	717b      	strb	r3, [r7, #5]
			offsetStr[2] = foo[(30-intOffset)%10];
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <_Z11displayMainv+0x214>)
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <_Z11displayMainv+0x210>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	f1c3 021e 	rsb	r2, r3, #30
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <_Z11displayMainv+0x218>)
 80019e0:	fb83 1302 	smull	r1, r3, r3, r2
 80019e4:	1099      	asrs	r1, r3, #2
 80019e6:	17d3      	asrs	r3, r2, #31
 80019e8:	1ac9      	subs	r1, r1, r3
 80019ea:	460b      	mov	r3, r1
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	1ad1      	subs	r1, r2, r3
 80019f4:	460b      	mov	r3, r1
 80019f6:	4403      	add	r3, r0
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	71bb      	strb	r3, [r7, #6]
		}
		ssd1306_WriteString(offsetStr, Font_7x10, White);
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <_Z11displayMainv+0x1e4>)
 80019fe:	1d38      	adds	r0, r7, #4
 8001a00:	2301      	movs	r3, #1
 8001a02:	ca06      	ldmia	r2, {r1, r2}
 8001a04:	f003 fffc 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(48, 12);
 8001a08:	210c      	movs	r1, #12
 8001a0a:	2030      	movs	r0, #48	; 0x30
 8001a0c:	f004 f81e 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(" Offset", Font_7x10, White);
 8001a10:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <_Z11displayMainv+0x1e4>)
 8001a12:	2301      	movs	r3, #1
 8001a14:	ca06      	ldmia	r2, {r1, r2}
 8001a16:	4818      	ldr	r0, [pc, #96]	; (8001a78 <_Z11displayMainv+0x21c>)
 8001a18:	f003 fff2 	bl	8005a00 <ssd1306_WriteString>
	}
	displayBattery();
 8001a1c:	f000 fc46 	bl	80022ac <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <_Z11displayMainv+0x220>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fed9 	bl	80057dc <ssd1306_UpdateScreen>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000094 	.word	0x20000094
 8001a3c:	200000a9 	.word	0x200000a9
 8001a40:	20000000 	.word	0x20000000
 8001a44:	0800abf4 	.word	0x0800abf4
 8001a48:	0800abfc 	.word	0x0800abfc
 8001a4c:	0800ac00 	.word	0x0800ac00
 8001a50:	0800ac04 	.word	0x0800ac04
 8001a54:	0800ac0c 	.word	0x0800ac0c
 8001a58:	0800ac18 	.word	0x0800ac18
 8001a5c:	0800ac1c 	.word	0x0800ac1c
 8001a60:	200000a8 	.word	0x200000a8
 8001a64:	0800ac24 	.word	0x0800ac24
 8001a68:	0800ac2c 	.word	0x0800ac2c
 8001a6c:	20000018 	.word	0x20000018
 8001a70:	20000010 	.word	0x20000010
 8001a74:	66666667 	.word	0x66666667
 8001a78:	0800ac34 	.word	0x0800ac34
 8001a7c:	2000004c 	.word	0x2000004c

08001a80 <_Z13displayLockedv>:

void displayLocked()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
	timecodeDisplay();
 8001a86:	f000 fc95 	bl	80023b4 <_Z15timecodeDisplayv>
	ssd1306_Fill(Black);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f003 fe82 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(44, 20);
 8001a90:	2114      	movs	r1, #20
 8001a92:	202c      	movs	r0, #44	; 0x2c
 8001a94:	f003 ffda 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Locked", Font_7x10, White);
 8001a98:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <_Z13displayLockedv+0xb8>)
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	ca06      	ldmia	r2, {r1, r2}
 8001a9e:	4827      	ldr	r0, [pc, #156]	; (8001b3c <_Z13displayLockedv+0xbc>)
 8001aa0:	f003 ffae 	bl	8005a00 <ssd1306_WriteString>
	if (buttonsHeld)	
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <_Z13displayLockedv+0xc0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d011      	beq.n	8001ad0 <_Z13displayLockedv+0x50>
	{
		ssd1306_SetCursor(60, 32);
 8001aac:	2120      	movs	r1, #32
 8001aae:	203c      	movs	r0, #60	; 0x3c
 8001ab0:	f003 ffcc 	bl	8005a4c <ssd1306_SetCursor>
		char lockDisplay = foo[lockCountdown];
 8001ab4:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <_Z13displayLockedv+0xc4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <_Z13displayLockedv+0xc8>)
 8001aba:	7812      	ldrb	r2, [r2, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	71fb      	strb	r3, [r7, #7]
		ssd1306_WriteChar(lockDisplay, Font_7x10, White);	//TODO Lock Countdown
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <_Z13displayLockedv+0xb8>)
 8001ac4:	79f8      	ldrb	r0, [r7, #7]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	ca06      	ldmia	r2, {r1, r2}
 8001aca:	f003 ff19 	bl	8005900 <ssd1306_WriteChar>
 8001ace:	e013      	b.n	8001af8 <_Z13displayLockedv+0x78>
	}
	else
	{
		ssd1306_SetCursor(24, 30);
 8001ad0:	211e      	movs	r1, #30
 8001ad2:	2018      	movs	r0, #24
 8001ad4:	f003 ffba 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("Hold < and >", Font_7x10, White);
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <_Z13displayLockedv+0xb8>)
 8001ada:	2301      	movs	r3, #1
 8001adc:	ca06      	ldmia	r2, {r1, r2}
 8001ade:	481b      	ldr	r0, [pc, #108]	; (8001b4c <_Z13displayLockedv+0xcc>)
 8001ae0:	f003 ff8e 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(34, 40);
 8001ae4:	2128      	movs	r1, #40	; 0x28
 8001ae6:	2022      	movs	r0, #34	; 0x22
 8001ae8:	f003 ffb0 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("to unlock", Font_7x10, White);
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <_Z13displayLockedv+0xb8>)
 8001aee:	2301      	movs	r3, #1
 8001af0:	ca06      	ldmia	r2, {r1, r2}
 8001af2:	4817      	ldr	r0, [pc, #92]	; (8001b50 <_Z13displayLockedv+0xd0>)
 8001af4:	f003 ff84 	bl	8005a00 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(2, 6);
 8001af8:	2106      	movs	r1, #6
 8001afa:	2002      	movs	r0, #2
 8001afc:	f003 ffa6 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString(tcDisplay, Font_7x10, White);
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <_Z13displayLockedv+0xb8>)
 8001b02:	2301      	movs	r3, #1
 8001b04:	ca06      	ldmia	r2, {r1, r2}
 8001b06:	4813      	ldr	r0, [pc, #76]	; (8001b54 <_Z13displayLockedv+0xd4>)
 8001b08:	f003 ff7a 	bl	8005a00 <ssd1306_WriteString>

	ssd1306_SetCursor(90, 6);
 8001b0c:	2106      	movs	r1, #6
 8001b0e:	205a      	movs	r0, #90	; 0x5a
 8001b10:	f003 ff9c 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("23.98", Font_7x10, White);
 8001b14:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <_Z13displayLockedv+0xb8>)
 8001b16:	2301      	movs	r3, #1
 8001b18:	ca06      	ldmia	r2, {r1, r2}
 8001b1a:	480f      	ldr	r0, [pc, #60]	; (8001b58 <_Z13displayLockedv+0xd8>)
 8001b1c:	f003 ff70 	bl	8005a00 <ssd1306_WriteString>
	displayBattery();	
 8001b20:	f000 fbc4 	bl	80022ac <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <_Z13displayLockedv+0xdc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fe57 	bl	80057dc <ssd1306_UpdateScreen>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	0800ac3c 	.word	0x0800ac3c
 8001b40:	200000c6 	.word	0x200000c6
 8001b44:	20000010 	.word	0x20000010
 8001b48:	200000c7 	.word	0x200000c7
 8001b4c:	0800ac44 	.word	0x0800ac44
 8001b50:	0800ac54 	.word	0x0800ac54
 8001b54:	20000094 	.word	0x20000094
 8001b58:	0800abf4 	.word	0x0800abf4
 8001b5c:	2000004c 	.word	0x2000004c

08001b60 <_Z12displayPowerv>:

void displayPower()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f003 fe14 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(14, 10);
 8001b6c:	210a      	movs	r1, #10
 8001b6e:	200e      	movs	r0, #14
 8001b70:	f003 ff6c 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Power Off", Font_11x18, White);
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <_Z12displayPowerv+0x54>)
 8001b76:	2301      	movs	r3, #1
 8001b78:	ca06      	ldmia	r2, {r1, r2}
 8001b7a:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <_Z12displayPowerv+0x58>)
 8001b7c:	f003 ff40 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(60, 36);
 8001b80:	2124      	movs	r1, #36	; 0x24
 8001b82:	203c      	movs	r0, #60	; 0x3c
 8001b84:	f003 ff62 	bl	8005a4c <ssd1306_SetCursor>
	char powerDisplay = foo[powerCountdown];
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <_Z12displayPowerv+0x5c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <_Z12displayPowerv+0x60>)
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteChar(powerDisplay, Font_11x18, White); //TODO Power countdown
 8001b96:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <_Z12displayPowerv+0x54>)
 8001b98:	79f8      	ldrb	r0, [r7, #7]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	ca06      	ldmia	r2, {r1, r2}
 8001b9e:	f003 feaf 	bl	8005900 <ssd1306_WriteChar>
	ssd1306_UpdateScreen(dispI2C);
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <_Z12displayPowerv+0x64>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fe18 	bl	80057dc <ssd1306_UpdateScreen>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	0800ac60 	.word	0x0800ac60
 8001bbc:	20000010 	.word	0x20000010
 8001bc0:	200000e0 	.word	0x200000e0
 8001bc4:	2000004c 	.word	0x2000004c

08001bc8 <_Z11displayMenuv>:

void displayMenu()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f003 fde0 	bl	8005794 <ssd1306_Fill>
	//Frame rate
	//Auto power off
	//Exit
	ssd1306_SetCursor(50, 0);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2032      	movs	r0, #50	; 0x32
 8001bd8:	f003 ff38 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8001bdc:	4ab5      	ldr	r2, [pc, #724]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001bde:	2301      	movs	r3, #1
 8001be0:	ca06      	ldmia	r2, {r1, r2}
 8001be2:	48b5      	ldr	r0, [pc, #724]	; (8001eb8 <_Z11displayMenuv+0x2f0>)
 8001be4:	f003 ff0c 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 12);
 8001be8:	210c      	movs	r1, #12
 8001bea:	200a      	movs	r0, #10
 8001bec:	f003 ff2e 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Rate: ", Font_7x10, White);
 8001bf0:	4ab0      	ldr	r2, [pc, #704]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	ca06      	ldmia	r2, {r1, r2}
 8001bf6:	48b1      	ldr	r0, [pc, #708]	; (8001ebc <_Z11displayMenuv+0x2f4>)
 8001bf8:	f003 ff02 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 22);
 8001bfc:	2116      	movs	r1, #22
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f003 ff24 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Offset: ", Font_7x10, White);
 8001c04:	4aab      	ldr	r2, [pc, #684]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001c06:	2301      	movs	r3, #1
 8001c08:	ca06      	ldmia	r2, {r1, r2}
 8001c0a:	48ad      	ldr	r0, [pc, #692]	; (8001ec0 <_Z11displayMenuv+0x2f8>)
 8001c0c:	f003 fef8 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 32);
 8001c10:	2120      	movs	r1, #32
 8001c12:	200a      	movs	r0, #10
 8001c14:	f003 ff1a 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Re-jam", Font_7x10, White);
 8001c18:	4aa6      	ldr	r2, [pc, #664]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	ca06      	ldmia	r2, {r1, r2}
 8001c1e:	48a9      	ldr	r0, [pc, #676]	; (8001ec4 <_Z11displayMenuv+0x2fc>)
 8001c20:	f003 feee 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 42);
 8001c24:	212a      	movs	r1, #42	; 0x2a
 8001c26:	200a      	movs	r0, #10
 8001c28:	f003 ff10 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Auto-Off: ", Font_7x10, White);
 8001c2c:	4aa1      	ldr	r2, [pc, #644]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001c2e:	2301      	movs	r3, #1
 8001c30:	ca06      	ldmia	r2, {r1, r2}
 8001c32:	48a5      	ldr	r0, [pc, #660]	; (8001ec8 <_Z11displayMenuv+0x300>)
 8001c34:	f003 fee4 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(50, 52);
 8001c38:	2134      	movs	r1, #52	; 0x34
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f003 ff06 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Exit", Font_7x10, White);
 8001c40:	4a9c      	ldr	r2, [pc, #624]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001c42:	2301      	movs	r3, #1
 8001c44:	ca06      	ldmia	r2, {r1, r2}
 8001c46:	48a1      	ldr	r0, [pc, #644]	; (8001ecc <_Z11displayMenuv+0x304>)
 8001c48:	f003 feda 	bl	8005a00 <ssd1306_WriteString>

	ssd1306_SetCursor(50, 12);
 8001c4c:	210c      	movs	r1, #12
 8001c4e:	2032      	movs	r0, #50	; 0x32
 8001c50:	f003 fefc 	bl	8005a4c <ssd1306_SetCursor>
	uint8_t dispRate;
	uint8_t dispOffset;
	char offsetStr[3];
	if (menuItemSelect){
 8001c54:	4b9e      	ldr	r3, [pc, #632]	; (8001ed0 <_Z11displayMenuv+0x308>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d006      	beq.n	8001c6a <_Z11displayMenuv+0xa2>
		dispRate = rateAdjust;
 8001c5c:	4b9d      	ldr	r3, [pc, #628]	; (8001ed4 <_Z11displayMenuv+0x30c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	71fb      	strb	r3, [r7, #7]
		dispOffset = offsetAdjust;
 8001c62:	4b9d      	ldr	r3, [pc, #628]	; (8001ed8 <_Z11displayMenuv+0x310>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	71bb      	strb	r3, [r7, #6]
 8001c68:	e005      	b.n	8001c76 <_Z11displayMenuv+0xae>
	} else {
		dispRate = frameRate;
 8001c6a:	4b9c      	ldr	r3, [pc, #624]	; (8001edc <_Z11displayMenuv+0x314>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
		dispOffset = intOffset;
 8001c70:	4b9b      	ldr	r3, [pc, #620]	; (8001ee0 <_Z11displayMenuv+0x318>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	71bb      	strb	r3, [r7, #6]
	}
	switch (dispRate)
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d839      	bhi.n	8001cf0 <_Z11displayMenuv+0x128>
 8001c7c:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <_Z11displayMenuv+0xbc>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001cab 	.word	0x08001cab
 8001c8c:	08001cb9 	.word	0x08001cb9
 8001c90:	08001cc7 	.word	0x08001cc7
 8001c94:	08001cd5 	.word	0x08001cd5
 8001c98:	08001ce3 	.word	0x08001ce3
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 8001c9c:	4a85      	ldr	r2, [pc, #532]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	ca06      	ldmia	r2, {r1, r2}
 8001ca2:	4890      	ldr	r0, [pc, #576]	; (8001ee4 <_Z11displayMenuv+0x31c>)
 8001ca4:	f003 feac 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001ca8:	e022      	b.n	8001cf0 <_Z11displayMenuv+0x128>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 8001caa:	4a82      	ldr	r2, [pc, #520]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001cac:	2301      	movs	r3, #1
 8001cae:	ca06      	ldmia	r2, {r1, r2}
 8001cb0:	488d      	ldr	r0, [pc, #564]	; (8001ee8 <_Z11displayMenuv+0x320>)
 8001cb2:	f003 fea5 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001cb6:	e01b      	b.n	8001cf0 <_Z11displayMenuv+0x128>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 8001cb8:	4a7e      	ldr	r2, [pc, #504]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001cba:	2301      	movs	r3, #1
 8001cbc:	ca06      	ldmia	r2, {r1, r2}
 8001cbe:	488b      	ldr	r0, [pc, #556]	; (8001eec <_Z11displayMenuv+0x324>)
 8001cc0:	f003 fe9e 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001cc4:	e014      	b.n	8001cf0 <_Z11displayMenuv+0x128>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 8001cc6:	4a7b      	ldr	r2, [pc, #492]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001cc8:	2301      	movs	r3, #1
 8001cca:	ca06      	ldmia	r2, {r1, r2}
 8001ccc:	4888      	ldr	r0, [pc, #544]	; (8001ef0 <_Z11displayMenuv+0x328>)
 8001cce:	f003 fe97 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001cd2:	e00d      	b.n	8001cf0 <_Z11displayMenuv+0x128>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 8001cd4:	4a77      	ldr	r2, [pc, #476]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	ca06      	ldmia	r2, {r1, r2}
 8001cda:	4886      	ldr	r0, [pc, #536]	; (8001ef4 <_Z11displayMenuv+0x32c>)
 8001cdc:	f003 fe90 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001ce0:	e006      	b.n	8001cf0 <_Z11displayMenuv+0x128>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 8001ce2:	4a74      	ldr	r2, [pc, #464]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	ca06      	ldmia	r2, {r1, r2}
 8001ce8:	4883      	ldr	r0, [pc, #524]	; (8001ef8 <_Z11displayMenuv+0x330>)
 8001cea:	f003 fe89 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001cee:	bf00      	nop
	}
	ssd1306_SetCursor(58, 22);
 8001cf0:	2116      	movs	r1, #22
 8001cf2:	203a      	movs	r0, #58	; 0x3a
 8001cf4:	f003 feaa 	bl	8005a4c <ssd1306_SetCursor>
	//Insert offset
	if (dispOffset == 30)
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	2b1e      	cmp	r3, #30
 8001cfc:	d106      	bne.n	8001d0c <_Z11displayMenuv+0x144>
	{
		offsetStr[0] = ' ';
 8001cfe:	2320      	movs	r3, #32
 8001d00:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = '0';
 8001d02:	2330      	movs	r3, #48	; 0x30
 8001d04:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = '0';
 8001d06:	2330      	movs	r3, #48	; 0x30
 8001d08:	70bb      	strb	r3, [r7, #2]
 8001d0a:	e04d      	b.n	8001da8 <_Z11displayMenuv+0x1e0>
	}
	else if (dispOffset > 30)
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	2b1e      	cmp	r3, #30
 8001d10:	d923      	bls.n	8001d5a <_Z11displayMenuv+0x192>
	{
		offsetStr[0] = '+';
 8001d12:	232b      	movs	r3, #43	; 0x2b
 8001d14:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = foo[(dispOffset-30)/10];
 8001d16:	4b79      	ldr	r3, [pc, #484]	; (8001efc <_Z11displayMenuv+0x334>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	3b1e      	subs	r3, #30
 8001d1e:	4978      	ldr	r1, [pc, #480]	; (8001f00 <_Z11displayMenuv+0x338>)
 8001d20:	fb81 0103 	smull	r0, r1, r1, r3
 8001d24:	1089      	asrs	r1, r1, #2
 8001d26:	17db      	asrs	r3, r3, #31
 8001d28:	1acb      	subs	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = foo[(dispOffset-30)%10];
 8001d30:	4b72      	ldr	r3, [pc, #456]	; (8001efc <_Z11displayMenuv+0x334>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	f1a3 021e 	sub.w	r2, r3, #30
 8001d3a:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <_Z11displayMenuv+0x338>)
 8001d3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d40:	1099      	asrs	r1, r3, #2
 8001d42:	17d3      	asrs	r3, r2, #31
 8001d44:	1ac9      	subs	r1, r1, r3
 8001d46:	460b      	mov	r3, r1
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	1ad1      	subs	r1, r2, r3
 8001d50:	460b      	mov	r3, r1
 8001d52:	4403      	add	r3, r0
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	70bb      	strb	r3, [r7, #2]
 8001d58:	e026      	b.n	8001da8 <_Z11displayMenuv+0x1e0>
	}
	else if (dispOffset < 30)
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	2b1d      	cmp	r3, #29
 8001d5e:	d823      	bhi.n	8001da8 <_Z11displayMenuv+0x1e0>
	{
		offsetStr[0] = '-';		
 8001d60:	232d      	movs	r3, #45	; 0x2d
 8001d62:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = foo[(30-dispOffset)/10];
 8001d64:	4b65      	ldr	r3, [pc, #404]	; (8001efc <_Z11displayMenuv+0x334>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	79bb      	ldrb	r3, [r7, #6]
 8001d6a:	f1c3 031e 	rsb	r3, r3, #30
 8001d6e:	4964      	ldr	r1, [pc, #400]	; (8001f00 <_Z11displayMenuv+0x338>)
 8001d70:	fb81 0103 	smull	r0, r1, r1, r3
 8001d74:	1089      	asrs	r1, r1, #2
 8001d76:	17db      	asrs	r3, r3, #31
 8001d78:	1acb      	subs	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = foo[(30-dispOffset)%10];
 8001d80:	4b5e      	ldr	r3, [pc, #376]	; (8001efc <_Z11displayMenuv+0x334>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	f1c3 021e 	rsb	r2, r3, #30
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <_Z11displayMenuv+0x338>)
 8001d8c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d90:	1099      	asrs	r1, r3, #2
 8001d92:	17d3      	asrs	r3, r2, #31
 8001d94:	1ac9      	subs	r1, r1, r3
 8001d96:	460b      	mov	r3, r1
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	1ad1      	subs	r1, r2, r3
 8001da0:	460b      	mov	r3, r1
 8001da2:	4403      	add	r3, r0
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	70bb      	strb	r3, [r7, #2]
	}
	
	ssd1306_WriteString(offsetStr, Font_7x10, White);
 8001da8:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001daa:	4638      	mov	r0, r7
 8001dac:	2301      	movs	r3, #1
 8001dae:	ca06      	ldmia	r2, {r1, r2}
 8001db0:	f003 fe26 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(78,22);
 8001db4:	2116      	movs	r1, #22
 8001db6:	204e      	movs	r0, #78	; 0x4e
 8001db8:	f003 fe48 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("     ", Font_7x10, White); 
 8001dbc:	4a3d      	ldr	r2, [pc, #244]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	ca06      	ldmia	r2, {r1, r2}
 8001dc2:	4850      	ldr	r0, [pc, #320]	; (8001f04 <_Z11displayMenuv+0x33c>)
 8001dc4:	f003 fe1c 	bl	8005a00 <ssd1306_WriteString>

	ssd1306_SetCursor(75, 42);
 8001dc8:	212a      	movs	r1, #42	; 0x2a
 8001dca:	204b      	movs	r0, #75	; 0x4b
 8001dcc:	f003 fe3e 	bl	8005a4c <ssd1306_SetCursor>
	switch (autoOff)
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <_Z11displayMenuv+0x340>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d830      	bhi.n	8001e3a <_Z11displayMenuv+0x272>
 8001dd8:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <_Z11displayMenuv+0x218>)
 8001dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dde:	bf00      	nop
 8001de0:	08001df5 	.word	0x08001df5
 8001de4:	08001e03 	.word	0x08001e03
 8001de8:	08001e11 	.word	0x08001e11
 8001dec:	08001e1f 	.word	0x08001e1f
 8001df0:	08001e2d 	.word	0x08001e2d
	{
	case 0:
		ssd1306_WriteString("1 hr", Font_7x10, White);
 8001df4:	4a2f      	ldr	r2, [pc, #188]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001df6:	2301      	movs	r3, #1
 8001df8:	ca06      	ldmia	r2, {r1, r2}
 8001dfa:	4844      	ldr	r0, [pc, #272]	; (8001f0c <_Z11displayMenuv+0x344>)
 8001dfc:	f003 fe00 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001e00:	e01b      	b.n	8001e3a <_Z11displayMenuv+0x272>
	case 1:
		ssd1306_WriteString("2 hr", Font_7x10, White);
 8001e02:	4a2c      	ldr	r2, [pc, #176]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001e04:	2301      	movs	r3, #1
 8001e06:	ca06      	ldmia	r2, {r1, r2}
 8001e08:	4841      	ldr	r0, [pc, #260]	; (8001f10 <_Z11displayMenuv+0x348>)
 8001e0a:	f003 fdf9 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001e0e:	e014      	b.n	8001e3a <_Z11displayMenuv+0x272>
	case 2:
		ssd1306_WriteString("4 hr", Font_7x10, White);
 8001e10:	4a28      	ldr	r2, [pc, #160]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001e12:	2301      	movs	r3, #1
 8001e14:	ca06      	ldmia	r2, {r1, r2}
 8001e16:	483f      	ldr	r0, [pc, #252]	; (8001f14 <_Z11displayMenuv+0x34c>)
 8001e18:	f003 fdf2 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001e1c:	e00d      	b.n	8001e3a <_Z11displayMenuv+0x272>
	case 3:
		ssd1306_WriteString("8 hr", Font_7x10, White);
 8001e1e:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001e20:	2301      	movs	r3, #1
 8001e22:	ca06      	ldmia	r2, {r1, r2}
 8001e24:	483c      	ldr	r0, [pc, #240]	; (8001f18 <_Z11displayMenuv+0x350>)
 8001e26:	f003 fdeb 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001e2a:	e006      	b.n	8001e3a <_Z11displayMenuv+0x272>
	case 4:
		ssd1306_WriteString("12 hr", Font_7x10, White);
 8001e2c:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001e2e:	2301      	movs	r3, #1
 8001e30:	ca06      	ldmia	r2, {r1, r2}
 8001e32:	483a      	ldr	r0, [pc, #232]	; (8001f1c <_Z11displayMenuv+0x354>)
 8001e34:	f003 fde4 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001e38:	bf00      	nop
	}

	switch (menuItem)
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <_Z11displayMenuv+0x358>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	f200 80c8 	bhi.w	8001fd4 <_Z11displayMenuv+0x40c>
 8001e44:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <_Z11displayMenuv+0x284>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001e61 	.word	0x08001e61
 8001e50:	08001e95 	.word	0x08001e95
 8001e54:	08001f43 	.word	0x08001f43
 8001e58:	08001f77 	.word	0x08001f77
 8001e5c:	08001fab 	.word	0x08001fab
	{
	case 0:
		if (menuItemSelect)
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <_Z11displayMenuv+0x308>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00a      	beq.n	8001e7e <_Z11displayMenuv+0x2b6>
		{
			ssd1306_SetCursor(120, 12);
 8001e68:	210c      	movs	r1, #12
 8001e6a:	2078      	movs	r0, #120	; 0x78
 8001e6c:	f003 fdee 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001e70:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001e72:	2301      	movs	r3, #1
 8001e74:	ca06      	ldmia	r2, {r1, r2}
 8001e76:	482b      	ldr	r0, [pc, #172]	; (8001f24 <_Z11displayMenuv+0x35c>)
 8001e78:	f003 fdc2 	bl	8005a00 <ssd1306_WriteString>
		else
		{
			ssd1306_SetCursor(2, 12);
			ssd1306_WriteString(">", Font_7x10, White);
		}
		break;
 8001e7c:	e0aa      	b.n	8001fd4 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 12);
 8001e7e:	210c      	movs	r1, #12
 8001e80:	2002      	movs	r0, #2
 8001e82:	f003 fde3 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001e88:	2301      	movs	r3, #1
 8001e8a:	ca06      	ldmia	r2, {r1, r2}
 8001e8c:	4826      	ldr	r0, [pc, #152]	; (8001f28 <_Z11displayMenuv+0x360>)
 8001e8e:	f003 fdb7 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001e92:	e09f      	b.n	8001fd4 <_Z11displayMenuv+0x40c>
	case 1:
		if (menuItemSelect)
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <_Z11displayMenuv+0x308>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d047      	beq.n	8001f2c <_Z11displayMenuv+0x364>
		{
			ssd1306_SetCursor(120, 22);
 8001e9c:	2116      	movs	r1, #22
 8001e9e:	2078      	movs	r0, #120	; 0x78
 8001ea0:	f003 fdd4 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <_Z11displayMenuv+0x2ec>)
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	ca06      	ldmia	r2, {r1, r2}
 8001eaa:	481e      	ldr	r0, [pc, #120]	; (8001f24 <_Z11displayMenuv+0x35c>)
 8001eac:	f003 fda8 	bl	8005a00 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 22);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8001eb0:	e090      	b.n	8001fd4 <_Z11displayMenuv+0x40c>
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	0800ac1c 	.word	0x0800ac1c
 8001ebc:	0800ac6c 	.word	0x0800ac6c
 8001ec0:	0800ac74 	.word	0x0800ac74
 8001ec4:	0800ac80 	.word	0x0800ac80
 8001ec8:	0800ac88 	.word	0x0800ac88
 8001ecc:	0800ac94 	.word	0x0800ac94
 8001ed0:	200000ee 	.word	0x200000ee
 8001ed4:	200000ec 	.word	0x200000ec
 8001ed8:	200000ed 	.word	0x200000ed
 8001edc:	200000a9 	.word	0x200000a9
 8001ee0:	20000018 	.word	0x20000018
 8001ee4:	0800abf4 	.word	0x0800abf4
 8001ee8:	0800abfc 	.word	0x0800abfc
 8001eec:	0800ac00 	.word	0x0800ac00
 8001ef0:	0800ac04 	.word	0x0800ac04
 8001ef4:	0800ac0c 	.word	0x0800ac0c
 8001ef8:	0800ac18 	.word	0x0800ac18
 8001efc:	20000010 	.word	0x20000010
 8001f00:	66666667 	.word	0x66666667
 8001f04:	0800ac9c 	.word	0x0800ac9c
 8001f08:	200000b8 	.word	0x200000b8
 8001f0c:	0800aca4 	.word	0x0800aca4
 8001f10:	0800acac 	.word	0x0800acac
 8001f14:	0800acb4 	.word	0x0800acb4
 8001f18:	0800acbc 	.word	0x0800acbc
 8001f1c:	0800acc4 	.word	0x0800acc4
 8001f20:	200000ef 	.word	0x200000ef
 8001f24:	0800accc 	.word	0x0800accc
 8001f28:	0800acd0 	.word	0x0800acd0
			ssd1306_SetCursor(2, 22);
 8001f2c:	2116      	movs	r1, #22
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f003 fd8c 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001f34:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <_Z11displayMenuv+0x420>)
 8001f36:	2301      	movs	r3, #1
 8001f38:	ca06      	ldmia	r2, {r1, r2}
 8001f3a:	482c      	ldr	r0, [pc, #176]	; (8001fec <_Z11displayMenuv+0x424>)
 8001f3c:	f003 fd60 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001f40:	e048      	b.n	8001fd4 <_Z11displayMenuv+0x40c>
	case 2:
		if (menuItemSelect)
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <_Z11displayMenuv+0x428>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00a      	beq.n	8001f60 <_Z11displayMenuv+0x398>
		{
			ssd1306_SetCursor(120, 32);
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	2078      	movs	r0, #120	; 0x78
 8001f4e:	f003 fd7d 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001f52:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <_Z11displayMenuv+0x420>)
 8001f54:	2301      	movs	r3, #1
 8001f56:	ca06      	ldmia	r2, {r1, r2}
 8001f58:	4826      	ldr	r0, [pc, #152]	; (8001ff4 <_Z11displayMenuv+0x42c>)
 8001f5a:	f003 fd51 	bl	8005a00 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 32);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8001f5e:	e039      	b.n	8001fd4 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 32);
 8001f60:	2120      	movs	r1, #32
 8001f62:	2002      	movs	r0, #2
 8001f64:	f003 fd72 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001f68:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <_Z11displayMenuv+0x420>)
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	ca06      	ldmia	r2, {r1, r2}
 8001f6e:	481f      	ldr	r0, [pc, #124]	; (8001fec <_Z11displayMenuv+0x424>)
 8001f70:	f003 fd46 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001f74:	e02e      	b.n	8001fd4 <_Z11displayMenuv+0x40c>
	case 3:
		if (menuItemSelect)
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <_Z11displayMenuv+0x428>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <_Z11displayMenuv+0x3cc>
		{
			ssd1306_SetCursor(120, 42);
 8001f7e:	212a      	movs	r1, #42	; 0x2a
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f003 fd63 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001f86:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <_Z11displayMenuv+0x420>)
 8001f88:	2301      	movs	r3, #1
 8001f8a:	ca06      	ldmia	r2, {r1, r2}
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <_Z11displayMenuv+0x42c>)
 8001f8e:	f003 fd37 	bl	8005a00 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 42);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8001f92:	e01f      	b.n	8001fd4 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 42);
 8001f94:	212a      	movs	r1, #42	; 0x2a
 8001f96:	2002      	movs	r0, #2
 8001f98:	f003 fd58 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <_Z11displayMenuv+0x420>)
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	ca06      	ldmia	r2, {r1, r2}
 8001fa2:	4812      	ldr	r0, [pc, #72]	; (8001fec <_Z11displayMenuv+0x424>)
 8001fa4:	f003 fd2c 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001fa8:	e014      	b.n	8001fd4 <_Z11displayMenuv+0x40c>
	case 4:
		ssd1306_SetCursor(41, 52);
 8001faa:	2134      	movs	r1, #52	; 0x34
 8001fac:	2029      	movs	r0, #41	; 0x29
 8001fae:	f003 fd4d 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001fb2:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <_Z11displayMenuv+0x420>)
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	ca06      	ldmia	r2, {r1, r2}
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <_Z11displayMenuv+0x424>)
 8001fba:	f003 fd21 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(79, 52);
 8001fbe:	2134      	movs	r1, #52	; 0x34
 8001fc0:	204f      	movs	r0, #79	; 0x4f
 8001fc2:	f003 fd43 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <_Z11displayMenuv+0x420>)
 8001fc8:	2301      	movs	r3, #1
 8001fca:	ca06      	ldmia	r2, {r1, r2}
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <_Z11displayMenuv+0x42c>)
 8001fce:	f003 fd17 	bl	8005a00 <ssd1306_WriteString>
		break;
 8001fd2:	bf00      	nop
	}

	ssd1306_UpdateScreen(dispI2C);
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <_Z11displayMenuv+0x430>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 fbff 	bl	80057dc <ssd1306_UpdateScreen>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	0800acd0 	.word	0x0800acd0
 8001ff0:	200000ee 	.word	0x200000ee
 8001ff4:	0800accc 	.word	0x0800accc
 8001ff8:	2000004c 	.word	0x2000004c

08001ffc <_Z29displayConfirmationRateChangev>:

void displayConfirmationRateChange()
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8002000:	2000      	movs	r0, #0
 8002002:	f003 fbc7 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(8, 4);
 8002006:	2104      	movs	r1, #4
 8002008:	2008      	movs	r0, #8
 800200a:	f003 fd1f 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Changing the rate", Font_7x10, White);
 800200e:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 8002010:	2301      	movs	r3, #1
 8002012:	ca06      	ldmia	r2, {r1, r2}
 8002014:	4830      	ldr	r0, [pc, #192]	; (80020d8 <_Z29displayConfirmationRateChangev+0xdc>)
 8002016:	f003 fcf3 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 18);
 800201a:	2112      	movs	r1, #18
 800201c:	2010      	movs	r0, #16
 800201e:	f003 fd15 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("will clear jam.", Font_7x10, White);
 8002022:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 8002024:	2301      	movs	r3, #1
 8002026:	ca06      	ldmia	r2, {r1, r2}
 8002028:	482c      	ldr	r0, [pc, #176]	; (80020dc <_Z29displayConfirmationRateChangev+0xe0>)
 800202a:	f003 fce9 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 32);
 800202e:	2120      	movs	r1, #32
 8002030:	2020      	movs	r0, #32
 8002032:	f003 fd0b 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 8002036:	4a27      	ldr	r2, [pc, #156]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 8002038:	2301      	movs	r3, #1
 800203a:	ca06      	ldmia	r2, {r1, r2}
 800203c:	4828      	ldr	r0, [pc, #160]	; (80020e0 <_Z29displayConfirmationRateChangev+0xe4>)
 800203e:	f003 fcdf 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 8002042:	2132      	movs	r1, #50	; 0x32
 8002044:	201e      	movs	r0, #30
 8002046:	f003 fd01 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 800204a:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 800204c:	2301      	movs	r3, #1
 800204e:	ca06      	ldmia	r2, {r1, r2}
 8002050:	4824      	ldr	r0, [pc, #144]	; (80020e4 <_Z29displayConfirmationRateChangev+0xe8>)
 8002052:	f003 fcd5 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 8002056:	2132      	movs	r1, #50	; 0x32
 8002058:	2050      	movs	r0, #80	; 0x50
 800205a:	f003 fcf7 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 800205e:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 8002060:	2301      	movs	r3, #1
 8002062:	ca06      	ldmia	r2, {r1, r2}
 8002064:	4820      	ldr	r0, [pc, #128]	; (80020e8 <_Z29displayConfirmationRateChangev+0xec>)
 8002066:	f003 fccb 	bl	8005a00 <ssd1306_WriteString>
	if (highlightYes)
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <_Z29displayConfirmationRateChangev+0xf0>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d014      	beq.n	800209c <_Z29displayConfirmationRateChangev+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 8002072:	2132      	movs	r1, #50	; 0x32
 8002074:	2048      	movs	r0, #72	; 0x48
 8002076:	f003 fce9 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 800207a:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 800207c:	2301      	movs	r3, #1
 800207e:	ca06      	ldmia	r2, {r1, r2}
 8002080:	481b      	ldr	r0, [pc, #108]	; (80020f0 <_Z29displayConfirmationRateChangev+0xf4>)
 8002082:	f003 fcbd 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8002086:	2132      	movs	r1, #50	; 0x32
 8002088:	2066      	movs	r0, #102	; 0x66
 800208a:	f003 fcdf 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 800208e:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 8002090:	2301      	movs	r3, #1
 8002092:	ca06      	ldmia	r2, {r1, r2}
 8002094:	4817      	ldr	r0, [pc, #92]	; (80020f4 <_Z29displayConfirmationRateChangev+0xf8>)
 8002096:	f003 fcb3 	bl	8005a00 <ssd1306_WriteString>
 800209a:	e013      	b.n	80020c4 <_Z29displayConfirmationRateChangev+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 800209c:	2132      	movs	r1, #50	; 0x32
 800209e:	2016      	movs	r0, #22
 80020a0:	f003 fcd4 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 80020a6:	2301      	movs	r3, #1
 80020a8:	ca06      	ldmia	r2, {r1, r2}
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <_Z29displayConfirmationRateChangev+0xf4>)
 80020ac:	f003 fca8 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 80020b0:	2132      	movs	r1, #50	; 0x32
 80020b2:	202d      	movs	r0, #45	; 0x2d
 80020b4:	f003 fcca 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <_Z29displayConfirmationRateChangev+0xd8>)
 80020ba:	2301      	movs	r3, #1
 80020bc:	ca06      	ldmia	r2, {r1, r2}
 80020be:	480d      	ldr	r0, [pc, #52]	; (80020f4 <_Z29displayConfirmationRateChangev+0xf8>)
 80020c0:	f003 fc9e 	bl	8005a00 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <_Z29displayConfirmationRateChangev+0xfc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 fb87 	bl	80057dc <ssd1306_UpdateScreen>
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000
 80020d8:	0800acd4 	.word	0x0800acd4
 80020dc:	0800ace8 	.word	0x0800ace8
 80020e0:	0800acf8 	.word	0x0800acf8
 80020e4:	0800ad04 	.word	0x0800ad04
 80020e8:	0800ad08 	.word	0x0800ad08
 80020ec:	200000f0 	.word	0x200000f0
 80020f0:	0800acd0 	.word	0x0800acd0
 80020f4:	0800accc 	.word	0x0800accc
 80020f8:	2000004c 	.word	0x2000004c

080020fc <_Z31displayConfirmationOffsetChangev>:

void displayConfirmationOffsetChange()
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8002100:	2000      	movs	r0, #0
 8002102:	f003 fb47 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(10, 10);
 8002106:	210a      	movs	r1, #10
 8002108:	200a      	movs	r0, #10
 800210a:	f003 fc9f 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("The offset will", Font_7x10, White);
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <_Z31displayConfirmationOffsetChangev+0x90>)
 8002110:	2301      	movs	r3, #1
 8002112:	ca06      	ldmia	r2, {r1, r2}
 8002114:	481e      	ldr	r0, [pc, #120]	; (8002190 <_Z31displayConfirmationOffsetChangev+0x94>)
 8002116:	f003 fc73 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(14, 22);
 800211a:	2116      	movs	r1, #22
 800211c:	200e      	movs	r0, #14
 800211e:	f003 fc95 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("take effect on", Font_7x10, White);
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <_Z31displayConfirmationOffsetChangev+0x90>)
 8002124:	2301      	movs	r3, #1
 8002126:	ca06      	ldmia	r2, {r1, r2}
 8002128:	481a      	ldr	r0, [pc, #104]	; (8002194 <_Z31displayConfirmationOffsetChangev+0x98>)
 800212a:	f003 fc69 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(36, 34);
 800212e:	2122      	movs	r1, #34	; 0x22
 8002130:	2024      	movs	r0, #36	; 0x24
 8002132:	f003 fc8b 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("next jam.", Font_7x10, White);
 8002136:	4a15      	ldr	r2, [pc, #84]	; (800218c <_Z31displayConfirmationOffsetChangev+0x90>)
 8002138:	2301      	movs	r3, #1
 800213a:	ca06      	ldmia	r2, {r1, r2}
 800213c:	4816      	ldr	r0, [pc, #88]	; (8002198 <_Z31displayConfirmationOffsetChangev+0x9c>)
 800213e:	f003 fc5f 	bl	8005a00 <ssd1306_WriteString>
	//ssd1306_SetCursor(14, 34);
	//ssd1306_WriteString("Continue?", Font_7x10, White);
	//ssd1306_SetCursor(30, 48);
	//ssd1306_WriteString("NO", Font_11x18, White);
	ssd1306_SetCursor(52, 50);
 8002142:	2132      	movs	r1, #50	; 0x32
 8002144:	2034      	movs	r0, #52	; 0x34
 8002146:	f003 fc81 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <_Z31displayConfirmationOffsetChangev+0x90>)
 800214c:	2301      	movs	r3, #1
 800214e:	ca06      	ldmia	r2, {r1, r2}
 8002150:	4812      	ldr	r0, [pc, #72]	; (800219c <_Z31displayConfirmationOffsetChangev+0xa0>)
 8002152:	f003 fc55 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(44, 50);
 8002156:	2132      	movs	r1, #50	; 0x32
 8002158:	202c      	movs	r0, #44	; 0x2c
 800215a:	f003 fc77 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <_Z31displayConfirmationOffsetChangev+0x90>)
 8002160:	2301      	movs	r3, #1
 8002162:	ca06      	ldmia	r2, {r1, r2}
 8002164:	480e      	ldr	r0, [pc, #56]	; (80021a0 <_Z31displayConfirmationOffsetChangev+0xa4>)
 8002166:	f003 fc4b 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(66, 50);
 800216a:	2132      	movs	r1, #50	; 0x32
 800216c:	2042      	movs	r0, #66	; 0x42
 800216e:	f003 fc6d 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002172:	4a06      	ldr	r2, [pc, #24]	; (800218c <_Z31displayConfirmationOffsetChangev+0x90>)
 8002174:	2301      	movs	r3, #1
 8002176:	ca06      	ldmia	r2, {r1, r2}
 8002178:	480a      	ldr	r0, [pc, #40]	; (80021a4 <_Z31displayConfirmationOffsetChangev+0xa8>)
 800217a:	f003 fc41 	bl	8005a00 <ssd1306_WriteString>
	
	ssd1306_UpdateScreen(dispI2C);
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <_Z31displayConfirmationOffsetChangev+0xac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fb2a 	bl	80057dc <ssd1306_UpdateScreen>
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000000 	.word	0x20000000
 8002190:	0800ad0c 	.word	0x0800ad0c
 8002194:	0800ad1c 	.word	0x0800ad1c
 8002198:	0800ad2c 	.word	0x0800ad2c
 800219c:	0800ad38 	.word	0x0800ad38
 80021a0:	0800acd0 	.word	0x0800acd0
 80021a4:	0800accc 	.word	0x0800accc
 80021a8:	2000004c 	.word	0x2000004c

080021ac <_Z24displayConfirmationRejamv>:

void displayConfirmationRejam()
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f003 faef 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(12, 6);
 80021b6:	2106      	movs	r1, #6
 80021b8:	200c      	movs	r0, #12
 80021ba:	f003 fc47 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("This will clear", Font_7x10, White);
 80021be:	4a31      	ldr	r2, [pc, #196]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 80021c0:	2301      	movs	r3, #1
 80021c2:	ca06      	ldmia	r2, {r1, r2}
 80021c4:	4830      	ldr	r0, [pc, #192]	; (8002288 <_Z24displayConfirmationRejamv+0xdc>)
 80021c6:	f003 fc1b 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(24, 18);
 80021ca:	2112      	movs	r1, #18
 80021cc:	2018      	movs	r0, #24
 80021ce:	f003 fc3d 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("current jam.", Font_7x10, White);
 80021d2:	4a2c      	ldr	r2, [pc, #176]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 80021d4:	2301      	movs	r3, #1
 80021d6:	ca06      	ldmia	r2, {r1, r2}
 80021d8:	482c      	ldr	r0, [pc, #176]	; (800228c <_Z24displayConfirmationRejamv+0xe0>)
 80021da:	f003 fc11 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(34, 32);
 80021de:	2120      	movs	r1, #32
 80021e0:	2022      	movs	r0, #34	; 0x22
 80021e2:	f003 fc33 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 80021e6:	4a27      	ldr	r2, [pc, #156]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 80021e8:	2301      	movs	r3, #1
 80021ea:	ca06      	ldmia	r2, {r1, r2}
 80021ec:	4828      	ldr	r0, [pc, #160]	; (8002290 <_Z24displayConfirmationRejamv+0xe4>)
 80021ee:	f003 fc07 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 80021f2:	2132      	movs	r1, #50	; 0x32
 80021f4:	201e      	movs	r0, #30
 80021f6:	f003 fc29 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 80021fa:	4a22      	ldr	r2, [pc, #136]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 80021fc:	2301      	movs	r3, #1
 80021fe:	ca06      	ldmia	r2, {r1, r2}
 8002200:	4824      	ldr	r0, [pc, #144]	; (8002294 <_Z24displayConfirmationRejamv+0xe8>)
 8002202:	f003 fbfd 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 8002206:	2132      	movs	r1, #50	; 0x32
 8002208:	2050      	movs	r0, #80	; 0x50
 800220a:	f003 fc1f 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 8002210:	2301      	movs	r3, #1
 8002212:	ca06      	ldmia	r2, {r1, r2}
 8002214:	4820      	ldr	r0, [pc, #128]	; (8002298 <_Z24displayConfirmationRejamv+0xec>)
 8002216:	f003 fbf3 	bl	8005a00 <ssd1306_WriteString>
	if (highlightYes)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <_Z24displayConfirmationRejamv+0xf0>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d014      	beq.n	800224c <_Z24displayConfirmationRejamv+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 8002222:	2132      	movs	r1, #50	; 0x32
 8002224:	2048      	movs	r0, #72	; 0x48
 8002226:	f003 fc11 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 800222c:	2301      	movs	r3, #1
 800222e:	ca06      	ldmia	r2, {r1, r2}
 8002230:	481b      	ldr	r0, [pc, #108]	; (80022a0 <_Z24displayConfirmationRejamv+0xf4>)
 8002232:	f003 fbe5 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8002236:	2132      	movs	r1, #50	; 0x32
 8002238:	2066      	movs	r0, #102	; 0x66
 800223a:	f003 fc07 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 800223e:	4a11      	ldr	r2, [pc, #68]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 8002240:	2301      	movs	r3, #1
 8002242:	ca06      	ldmia	r2, {r1, r2}
 8002244:	4817      	ldr	r0, [pc, #92]	; (80022a4 <_Z24displayConfirmationRejamv+0xf8>)
 8002246:	f003 fbdb 	bl	8005a00 <ssd1306_WriteString>
 800224a:	e013      	b.n	8002274 <_Z24displayConfirmationRejamv+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 800224c:	2132      	movs	r1, #50	; 0x32
 800224e:	2016      	movs	r0, #22
 8002250:	f003 fbfc 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 8002256:	2301      	movs	r3, #1
 8002258:	ca06      	ldmia	r2, {r1, r2}
 800225a:	4811      	ldr	r0, [pc, #68]	; (80022a0 <_Z24displayConfirmationRejamv+0xf4>)
 800225c:	f003 fbd0 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 8002260:	2132      	movs	r1, #50	; 0x32
 8002262:	202d      	movs	r0, #45	; 0x2d
 8002264:	f003 fbf2 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <_Z24displayConfirmationRejamv+0xd8>)
 800226a:	2301      	movs	r3, #1
 800226c:	ca06      	ldmia	r2, {r1, r2}
 800226e:	480d      	ldr	r0, [pc, #52]	; (80022a4 <_Z24displayConfirmationRejamv+0xf8>)
 8002270:	f003 fbc6 	bl	8005a00 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <_Z24displayConfirmationRejamv+0xfc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f003 faaf 	bl	80057dc <ssd1306_UpdateScreen>
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000
 8002288:	0800ad3c 	.word	0x0800ad3c
 800228c:	0800ad4c 	.word	0x0800ad4c
 8002290:	0800acf8 	.word	0x0800acf8
 8002294:	0800ad04 	.word	0x0800ad04
 8002298:	0800ad08 	.word	0x0800ad08
 800229c:	200000f0 	.word	0x200000f0
 80022a0:	0800acd0 	.word	0x0800acd0
 80022a4:	0800accc 	.word	0x0800accc
 80022a8:	2000004c 	.word	0x2000004c

080022ac <_Z14displayBatteryv>:

void displayBattery()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
	char battDisp[4];
	ssd1306_DrawBattery(batteryRemaining); //TODO BATTERY
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <_Z14displayBatteryv+0xec>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	eeb0 0a67 	vmov.f32	s0, s15
 80022bc:	f003 fbde 	bl	8005a7c <ssd1306_DrawBattery>
	ssd1306_SetCursor(34, 52);
 80022c0:	2134      	movs	r1, #52	; 0x34
 80022c2:	2022      	movs	r0, #34	; 0x22
 80022c4:	f003 fbc2 	bl	8005a4c <ssd1306_SetCursor>
	int battPrint = int(batteryRemaining * 100.0);
 80022c8:	4b33      	ldr	r3, [pc, #204]	; (8002398 <_Z14displayBatteryv+0xec>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f8e3 	bl	8000498 <__aeabi_f2d>
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <_Z14displayBatteryv+0xf0>)
 80022d8:	f7fe f936 	bl	8000548 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fb42 	bl	800096c <__aeabi_d2iz>
 80022e8:	4603      	mov	r3, r0
 80022ea:	607b      	str	r3, [r7, #4]
	if (battPrint == 100)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d108      	bne.n	8002304 <_Z14displayBatteryv+0x58>
	{
		battDisp[0] = '1';
 80022f2:	2331      	movs	r3, #49	; 0x31
 80022f4:	703b      	strb	r3, [r7, #0]
		battDisp[1] = '0';
 80022f6:	2330      	movs	r3, #48	; 0x30
 80022f8:	707b      	strb	r3, [r7, #1]
		battDisp[2] = '0';
 80022fa:	2330      	movs	r3, #48	; 0x30
 80022fc:	70bb      	strb	r3, [r7, #2]
		battDisp[3] = '%';
 80022fe:	2325      	movs	r3, #37	; 0x25
 8002300:	70fb      	strb	r3, [r7, #3]
 8002302:	e03d      	b.n	8002380 <_Z14displayBatteryv+0xd4>
	}
	else
	{
		battDisp[0] = ' ';
 8002304:	2320      	movs	r3, #32
 8002306:	703b      	strb	r3, [r7, #0]
		battDisp[1] = foo[battPrint / 10];
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <_Z14displayBatteryv+0xf4>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4925      	ldr	r1, [pc, #148]	; (80023a4 <_Z14displayBatteryv+0xf8>)
 8002310:	fb81 0103 	smull	r0, r1, r1, r3
 8002314:	1089      	asrs	r1, r1, #2
 8002316:	17db      	asrs	r3, r3, #31
 8002318:	1acb      	subs	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	707b      	strb	r3, [r7, #1]
		battDisp[2] = foo[battPrint % 10];
 8002320:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <_Z14displayBatteryv+0xf4>)
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <_Z14displayBatteryv+0xf8>)
 8002328:	fb83 1302 	smull	r1, r3, r3, r2
 800232c:	1099      	asrs	r1, r3, #2
 800232e:	17d3      	asrs	r3, r2, #31
 8002330:	1ac9      	subs	r1, r1, r3
 8002332:	460b      	mov	r3, r1
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	1ad1      	subs	r1, r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	4403      	add	r3, r0
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	70bb      	strb	r3, [r7, #2]
		if (!stat1 && stat2)
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <_Z14displayBatteryv+0xfc>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	f083 0301 	eor.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <_Z14displayBatteryv+0xb4>
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <_Z14displayBatteryv+0x100>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <_Z14displayBatteryv+0xb4>
			battDisp[3] = '^';
 800235a:	235e      	movs	r3, #94	; 0x5e
 800235c:	70fb      	strb	r3, [r7, #3]
 800235e:	e00f      	b.n	8002380 <_Z14displayBatteryv+0xd4>
		else if (stat1 && !stat2)
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_Z14displayBatteryv+0xfc>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <_Z14displayBatteryv+0xd0>
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <_Z14displayBatteryv+0x100>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <_Z14displayBatteryv+0xd0>
			battDisp[3] = '!';
 8002376:	2321      	movs	r3, #33	; 0x21
 8002378:	70fb      	strb	r3, [r7, #3]
 800237a:	e001      	b.n	8002380 <_Z14displayBatteryv+0xd4>
		else
			battDisp[3] = '%';
 800237c:	2325      	movs	r3, #37	; 0x25
 800237e:	70fb      	strb	r3, [r7, #3]
	}
	battDisp[4] = ' ';
 8002380:	2320      	movs	r3, #32
 8002382:	713b      	strb	r3, [r7, #4]
	ssd1306_WriteString(battDisp, Font_7x10, White);
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <_Z14displayBatteryv+0x104>)
 8002386:	4638      	mov	r0, r7
 8002388:	2301      	movs	r3, #1
 800238a:	ca06      	ldmia	r2, {r1, r2}
 800238c:	f003 fb38 	bl	8005a00 <ssd1306_WriteString>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200000bc 	.word	0x200000bc
 800239c:	40590000 	.word	0x40590000
 80023a0:	20000010 	.word	0x20000010
 80023a4:	66666667 	.word	0x66666667
 80023a8:	200000c4 	.word	0x200000c4
 80023ac:	200000c5 	.word	0x200000c5
 80023b0:	20000000 	.word	0x20000000

080023b4 <_Z15timecodeDisplayv>:
void timecodeDisplay()
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
	tcDisplay[0] = foo[hr / 10];
 80023b8:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <_Z15timecodeDisplayv+0x124>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a47      	ldr	r2, [pc, #284]	; (80024dc <_Z15timecodeDisplayv+0x128>)
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	4947      	ldr	r1, [pc, #284]	; (80024e0 <_Z15timecodeDisplayv+0x12c>)
 80023c2:	fba1 1202 	umull	r1, r2, r1, r2
 80023c6:	08d2      	lsrs	r2, r2, #3
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	4413      	add	r3, r2
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	4b45      	ldr	r3, [pc, #276]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 80023d0:	701a      	strb	r2, [r3, #0]
	tcDisplay[1] = foo[hr % 10];
 80023d2:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <_Z15timecodeDisplayv+0x124>)
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <_Z15timecodeDisplayv+0x128>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <_Z15timecodeDisplayv+0x12c>)
 80023dc:	fba3 1302 	umull	r1, r3, r3, r2
 80023e0:	08d9      	lsrs	r1, r3, #3
 80023e2:	460b      	mov	r3, r1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4403      	add	r3, r0
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 80023f4:	705a      	strb	r2, [r3, #1]
	tcDisplay[2] = ':';
 80023f6:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 80023f8:	223a      	movs	r2, #58	; 0x3a
 80023fa:	709a      	strb	r2, [r3, #2]
	tcDisplay[3] = foo[mn / 10];
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <_Z15timecodeDisplayv+0x124>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <_Z15timecodeDisplayv+0x134>)
 8002402:	7812      	ldrb	r2, [r2, #0]
 8002404:	4936      	ldr	r1, [pc, #216]	; (80024e0 <_Z15timecodeDisplayv+0x12c>)
 8002406:	fba1 1202 	umull	r1, r2, r1, r2
 800240a:	08d2      	lsrs	r2, r2, #3
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	4413      	add	r3, r2
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	4b34      	ldr	r3, [pc, #208]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 8002414:	70da      	strb	r2, [r3, #3]
	tcDisplay[4] = foo[mn % 10];
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <_Z15timecodeDisplayv+0x124>)
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <_Z15timecodeDisplayv+0x134>)
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <_Z15timecodeDisplayv+0x12c>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	08d9      	lsrs	r1, r3, #3
 8002426:	460b      	mov	r3, r1
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4403      	add	r3, r0
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 8002438:	711a      	strb	r2, [r3, #4]
	tcDisplay[5] = ':';
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 800243c:	223a      	movs	r2, #58	; 0x3a
 800243e:	715a      	strb	r2, [r3, #5]
	tcDisplay[6] = foo[sc / 10];
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <_Z15timecodeDisplayv+0x124>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a29      	ldr	r2, [pc, #164]	; (80024ec <_Z15timecodeDisplayv+0x138>)
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	4925      	ldr	r1, [pc, #148]	; (80024e0 <_Z15timecodeDisplayv+0x12c>)
 800244a:	fba1 1202 	umull	r1, r2, r1, r2
 800244e:	08d2      	lsrs	r2, r2, #3
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	4413      	add	r3, r2
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 8002458:	719a      	strb	r2, [r3, #6]
	tcDisplay[7] = foo[sc % 10];
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <_Z15timecodeDisplayv+0x124>)
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <_Z15timecodeDisplayv+0x138>)
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <_Z15timecodeDisplayv+0x12c>)
 8002464:	fba3 1302 	umull	r1, r3, r3, r2
 8002468:	08d9      	lsrs	r1, r3, #3
 800246a:	460b      	mov	r3, r1
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	4403      	add	r3, r0
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 800247c:	71da      	strb	r2, [r3, #7]
	tcDisplay[8] = (frameRate == 4) ? ';' : ':';
 800247e:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <_Z15timecodeDisplayv+0x13c>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d101      	bne.n	800248a <_Z15timecodeDisplayv+0xd6>
 8002486:	223b      	movs	r2, #59	; 0x3b
 8002488:	e000      	b.n	800248c <_Z15timecodeDisplayv+0xd8>
 800248a:	223a      	movs	r2, #58	; 0x3a
 800248c:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 800248e:	721a      	strb	r2, [r3, #8]
	tcDisplay[9] = foo[fr / 10];
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <_Z15timecodeDisplayv+0x124>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <_Z15timecodeDisplayv+0x140>)
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	4911      	ldr	r1, [pc, #68]	; (80024e0 <_Z15timecodeDisplayv+0x12c>)
 800249a:	fba1 1202 	umull	r1, r2, r1, r2
 800249e:	08d2      	lsrs	r2, r2, #3
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	4413      	add	r3, r2
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 80024a8:	725a      	strb	r2, [r3, #9]
	tcDisplay[10] = foo[fr % 10];
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <_Z15timecodeDisplayv+0x124>)
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <_Z15timecodeDisplayv+0x140>)
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <_Z15timecodeDisplayv+0x12c>)
 80024b4:	fba3 1302 	umull	r1, r3, r3, r2
 80024b8:	08d9      	lsrs	r1, r3, #3
 80024ba:	460b      	mov	r3, r1
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4403      	add	r3, r0
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <_Z15timecodeDisplayv+0x130>)
 80024cc:	729a      	strb	r2, [r3, #10]
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	20000010 	.word	0x20000010
 80024dc:	200000c0 	.word	0x200000c0
 80024e0:	cccccccd 	.word	0xcccccccd
 80024e4:	20000094 	.word	0x20000094
 80024e8:	200000c1 	.word	0x200000c1
 80024ec:	200000c2 	.word	0x200000c2
 80024f0:	200000a9 	.word	0x200000a9
 80024f4:	200000c3 	.word	0x200000c3

080024f8 <_Z11initDisplayv>:
void initDisplay()
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	 if (ssd1306_Init(dispI2C) != 0) {
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <_Z11initDisplayv+0x28>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 f827 	bl	8005554 <ssd1306_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <_Z11initDisplayv+0x22>
     Error_Handler();
 8002516:	f003 f801 	bl	800551c <Error_Handler>
   }
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000004c 	.word	0x2000004c

08002524 <_Z18displayCalibrationv>:

void displayCalibration(){
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
	char calStr[8];
	calStr[0] = foo[(newCal % 100000000)/10000000];
 800252a:	4b97      	ldr	r3, [pc, #604]	; (8002788 <_Z18displayCalibrationv+0x264>)
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	4b97      	ldr	r3, [pc, #604]	; (800278c <_Z18displayCalibrationv+0x268>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b97      	ldr	r3, [pc, #604]	; (8002790 <_Z18displayCalibrationv+0x26c>)
 8002534:	fba3 0302 	umull	r0, r3, r3, r2
 8002538:	0e5b      	lsrs	r3, r3, #25
 800253a:	4896      	ldr	r0, [pc, #600]	; (8002794 <_Z18displayCalibrationv+0x270>)
 800253c:	fb00 f303 	mul.w	r3, r0, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	4a95      	ldr	r2, [pc, #596]	; (8002798 <_Z18displayCalibrationv+0x274>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	0d9b      	lsrs	r3, r3, #22
 800254a:	440b      	add	r3, r1
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	703b      	strb	r3, [r7, #0]
	calStr[1] = foo[(newCal % 10000000)/1000000];
 8002550:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <_Z18displayCalibrationv+0x264>)
 8002552:	6819      	ldr	r1, [r3, #0]
 8002554:	4b8d      	ldr	r3, [pc, #564]	; (800278c <_Z18displayCalibrationv+0x268>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b8f      	ldr	r3, [pc, #572]	; (8002798 <_Z18displayCalibrationv+0x274>)
 800255a:	fba3 0302 	umull	r0, r3, r3, r2
 800255e:	0d9b      	lsrs	r3, r3, #22
 8002560:	488e      	ldr	r0, [pc, #568]	; (800279c <_Z18displayCalibrationv+0x278>)
 8002562:	fb00 f303 	mul.w	r3, r0, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	4a8d      	ldr	r2, [pc, #564]	; (80027a0 <_Z18displayCalibrationv+0x27c>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0c9b      	lsrs	r3, r3, #18
 8002570:	440b      	add	r3, r1
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	707b      	strb	r3, [r7, #1]
	calStr[2] = foo[(newCal % 1000000)/100000];
 8002576:	4b84      	ldr	r3, [pc, #528]	; (8002788 <_Z18displayCalibrationv+0x264>)
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	4b84      	ldr	r3, [pc, #528]	; (800278c <_Z18displayCalibrationv+0x268>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b88      	ldr	r3, [pc, #544]	; (80027a0 <_Z18displayCalibrationv+0x27c>)
 8002580:	fba3 0302 	umull	r0, r3, r3, r2
 8002584:	0c9b      	lsrs	r3, r3, #18
 8002586:	4887      	ldr	r0, [pc, #540]	; (80027a4 <_Z18displayCalibrationv+0x280>)
 8002588:	fb00 f303 	mul.w	r3, r0, r3
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	4a85      	ldr	r2, [pc, #532]	; (80027a8 <_Z18displayCalibrationv+0x284>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	09db      	lsrs	r3, r3, #7
 8002598:	440b      	add	r3, r1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	70bb      	strb	r3, [r7, #2]
	calStr[3] = foo[(newCal % 100000)/10000];
 800259e:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <_Z18displayCalibrationv+0x264>)
 80025a0:	6819      	ldr	r1, [r3, #0]
 80025a2:	4b7a      	ldr	r3, [pc, #488]	; (800278c <_Z18displayCalibrationv+0x268>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	0953      	lsrs	r3, r2, #5
 80025a8:	487f      	ldr	r0, [pc, #508]	; (80027a8 <_Z18displayCalibrationv+0x284>)
 80025aa:	fba0 0303 	umull	r0, r3, r0, r3
 80025ae:	09db      	lsrs	r3, r3, #7
 80025b0:	487e      	ldr	r0, [pc, #504]	; (80027ac <_Z18displayCalibrationv+0x288>)
 80025b2:	fb00 f303 	mul.w	r3, r0, r3
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	4a7d      	ldr	r2, [pc, #500]	; (80027b0 <_Z18displayCalibrationv+0x28c>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0b5b      	lsrs	r3, r3, #13
 80025c0:	440b      	add	r3, r1
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	70fb      	strb	r3, [r7, #3]
	calStr[4] = foo[(newCal % 10000)/1000];
 80025c6:	4b70      	ldr	r3, [pc, #448]	; (8002788 <_Z18displayCalibrationv+0x264>)
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	4b70      	ldr	r3, [pc, #448]	; (800278c <_Z18displayCalibrationv+0x268>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b78      	ldr	r3, [pc, #480]	; (80027b0 <_Z18displayCalibrationv+0x28c>)
 80025d0:	fba3 0302 	umull	r0, r3, r3, r2
 80025d4:	0b5b      	lsrs	r3, r3, #13
 80025d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80025da:	fb00 f303 	mul.w	r3, r0, r3
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	4a74      	ldr	r2, [pc, #464]	; (80027b4 <_Z18displayCalibrationv+0x290>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	440b      	add	r3, r1
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	713b      	strb	r3, [r7, #4]
	calStr[5] = foo[(newCal % 1000)/100];
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <_Z18displayCalibrationv+0x264>)
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	4b66      	ldr	r3, [pc, #408]	; (800278c <_Z18displayCalibrationv+0x268>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b6f      	ldr	r3, [pc, #444]	; (80027b4 <_Z18displayCalibrationv+0x290>)
 80025f8:	fba3 0302 	umull	r0, r3, r3, r2
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002602:	fb00 f303 	mul.w	r3, r0, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	4a6b      	ldr	r2, [pc, #428]	; (80027b8 <_Z18displayCalibrationv+0x294>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	440b      	add	r3, r1
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	717b      	strb	r3, [r7, #5]
	calStr[6] = foo[(newCal % 100)/10];
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <_Z18displayCalibrationv+0x264>)
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	4b5c      	ldr	r3, [pc, #368]	; (800278c <_Z18displayCalibrationv+0x268>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b66      	ldr	r3, [pc, #408]	; (80027b8 <_Z18displayCalibrationv+0x294>)
 8002620:	fba3 0302 	umull	r0, r3, r3, r2
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	2064      	movs	r0, #100	; 0x64
 8002628:	fb00 f303 	mul.w	r3, r0, r3
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	4a63      	ldr	r2, [pc, #396]	; (80027bc <_Z18displayCalibrationv+0x298>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	08db      	lsrs	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	71bb      	strb	r3, [r7, #6]
	calStr[7] = foo[newCal % 10];
 800263c:	4b52      	ldr	r3, [pc, #328]	; (8002788 <_Z18displayCalibrationv+0x264>)
 800263e:	6818      	ldr	r0, [r3, #0]
 8002640:	4b52      	ldr	r3, [pc, #328]	; (800278c <_Z18displayCalibrationv+0x268>)
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <_Z18displayCalibrationv+0x298>)
 8002646:	fba3 2301 	umull	r2, r3, r3, r1
 800264a:	08da      	lsrs	r2, r3, #3
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	1aca      	subs	r2, r1, r3
 8002656:	1883      	adds	r3, r0, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 800265c:	2000      	movs	r0, #0
 800265e:	f003 f899 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(24, 0);
 8002662:	2100      	movs	r1, #0
 8002664:	2018      	movs	r0, #24
 8002666:	f003 f9f1 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Calibration", Font_7x10, White);
 800266a:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 800266c:	2301      	movs	r3, #1
 800266e:	ca06      	ldmia	r2, {r1, r2}
 8002670:	4854      	ldr	r0, [pc, #336]	; (80027c4 <_Z18displayCalibrationv+0x2a0>)
 8002672:	f003 f9c5 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 12);
 8002676:	210c      	movs	r1, #12
 8002678:	200a      	movs	r0, #10
 800267a:	f003 f9e7 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Val:", Font_7x10, White);
 800267e:	4a50      	ldr	r2, [pc, #320]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 8002680:	2301      	movs	r3, #1
 8002682:	ca06      	ldmia	r2, {r1, r2}
 8002684:	4850      	ldr	r0, [pc, #320]	; (80027c8 <_Z18displayCalibrationv+0x2a4>)
 8002686:	f003 f9bb 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 12);
 800268a:	210c      	movs	r1, #12
 800268c:	2028      	movs	r0, #40	; 0x28
 800268e:	f003 f9dd 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString(calStr, Font_7x10, White);
 8002692:	4a4b      	ldr	r2, [pc, #300]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 8002694:	4638      	mov	r0, r7
 8002696:	2301      	movs	r3, #1
 8002698:	ca06      	ldmia	r2, {r1, r2}
 800269a:	f003 f9b1 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(96,12);
 800269e:	210c      	movs	r1, #12
 80026a0:	2060      	movs	r0, #96	; 0x60
 80026a2:	f003 f9d3 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("    ",Font_7x10,White);
 80026a6:	4a46      	ldr	r2, [pc, #280]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 80026a8:	2301      	movs	r3, #1
 80026aa:	ca06      	ldmia	r2, {r1, r2}
 80026ac:	4847      	ldr	r0, [pc, #284]	; (80027cc <_Z18displayCalibrationv+0x2a8>)
 80026ae:	f003 f9a7 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(14, 50);
 80026b2:	2132      	movs	r1, #50	; 0x32
 80026b4:	200e      	movs	r0, #14
 80026b6:	f003 f9c9 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 80026ba:	4a41      	ldr	r2, [pc, #260]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 80026bc:	2301      	movs	r3, #1
 80026be:	ca06      	ldmia	r2, {r1, r2}
 80026c0:	4843      	ldr	r0, [pc, #268]	; (80027d0 <_Z18displayCalibrationv+0x2ac>)
 80026c2:	f003 f99d 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(60, 50);
 80026c6:	2132      	movs	r1, #50	; 0x32
 80026c8:	203c      	movs	r0, #60	; 0x3c
 80026ca:	f003 f9bf 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Cancel", Font_7x10, White);
 80026ce:	4a3c      	ldr	r2, [pc, #240]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 80026d0:	2301      	movs	r3, #1
 80026d2:	ca06      	ldmia	r2, {r1, r2}
 80026d4:	483f      	ldr	r0, [pc, #252]	; (80027d4 <_Z18displayCalibrationv+0x2b0>)
 80026d6:	f003 f993 	bl	8005a00 <ssd1306_WriteString>
	if (menuItem == 0){
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <_Z18displayCalibrationv+0x2b4>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <_Z18displayCalibrationv+0x1f0>
		if (menuItemSelect){
 80026e2:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <_Z18displayCalibrationv+0x2b8>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <_Z18displayCalibrationv+0x1dc>
			ssd1306_SetCursor(120, 12);
 80026ea:	210c      	movs	r1, #12
 80026ec:	2078      	movs	r0, #120	; 0x78
 80026ee:	f003 f9ad 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 80026f2:	4a33      	ldr	r2, [pc, #204]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 80026f4:	2301      	movs	r3, #1
 80026f6:	ca06      	ldmia	r2, {r1, r2}
 80026f8:	4839      	ldr	r0, [pc, #228]	; (80027e0 <_Z18displayCalibrationv+0x2bc>)
 80026fa:	f003 f981 	bl	8005a00 <ssd1306_WriteString>
 80026fe:	e009      	b.n	8002714 <_Z18displayCalibrationv+0x1f0>
		} else {
			ssd1306_SetCursor(2, 12);
 8002700:	210c      	movs	r1, #12
 8002702:	2002      	movs	r0, #2
 8002704:	f003 f9a2 	bl	8005a4c <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8002708:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 800270a:	2301      	movs	r3, #1
 800270c:	ca06      	ldmia	r2, {r1, r2}
 800270e:	4835      	ldr	r0, [pc, #212]	; (80027e4 <_Z18displayCalibrationv+0x2c0>)
 8002710:	f003 f976 	bl	8005a00 <ssd1306_WriteString>
		}
	}
	if (menuItem == 1)
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <_Z18displayCalibrationv+0x2b4>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d113      	bne.n	8002744 <_Z18displayCalibrationv+0x220>
	{
		ssd1306_SetCursor(6, 50);
 800271c:	2132      	movs	r1, #50	; 0x32
 800271e:	2006      	movs	r0, #6
 8002720:	f003 f994 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 8002726:	2301      	movs	r3, #1
 8002728:	ca06      	ldmia	r2, {r1, r2}
 800272a:	482e      	ldr	r0, [pc, #184]	; (80027e4 <_Z18displayCalibrationv+0x2c0>)
 800272c:	f003 f968 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(28, 50);
 8002730:	2132      	movs	r1, #50	; 0x32
 8002732:	201c      	movs	r0, #28
 8002734:	f003 f98a 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002738:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 800273a:	2301      	movs	r3, #1
 800273c:	ca06      	ldmia	r2, {r1, r2}
 800273e:	4828      	ldr	r0, [pc, #160]	; (80027e0 <_Z18displayCalibrationv+0x2bc>)
 8002740:	f003 f95e 	bl	8005a00 <ssd1306_WriteString>
	}
	if (menuItem == 2)
 8002744:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <_Z18displayCalibrationv+0x2b4>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d113      	bne.n	8002774 <_Z18displayCalibrationv+0x250>
	{
		ssd1306_SetCursor(52, 50);
 800274c:	2132      	movs	r1, #50	; 0x32
 800274e:	2034      	movs	r0, #52	; 0x34
 8002750:	f003 f97c 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 8002756:	2301      	movs	r3, #1
 8002758:	ca06      	ldmia	r2, {r1, r2}
 800275a:	4822      	ldr	r0, [pc, #136]	; (80027e4 <_Z18displayCalibrationv+0x2c0>)
 800275c:	f003 f950 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8002760:	2132      	movs	r1, #50	; 0x32
 8002762:	2066      	movs	r0, #102	; 0x66
 8002764:	f003 f972 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002768:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <_Z18displayCalibrationv+0x29c>)
 800276a:	2301      	movs	r3, #1
 800276c:	ca06      	ldmia	r2, {r1, r2}
 800276e:	481c      	ldr	r0, [pc, #112]	; (80027e0 <_Z18displayCalibrationv+0x2bc>)
 8002770:	f003 f946 	bl	8005a00 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8002774:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <_Z18displayCalibrationv+0x2c4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f003 f82f 	bl	80057dc <ssd1306_UpdateScreen>


}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000010 	.word	0x20000010
 800278c:	2000008c 	.word	0x2000008c
 8002790:	55e63b89 	.word	0x55e63b89
 8002794:	05f5e100 	.word	0x05f5e100
 8002798:	6b5fca6b 	.word	0x6b5fca6b
 800279c:	00989680 	.word	0x00989680
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	000f4240 	.word	0x000f4240
 80027a8:	0a7c5ac5 	.word	0x0a7c5ac5
 80027ac:	000186a0 	.word	0x000186a0
 80027b0:	d1b71759 	.word	0xd1b71759
 80027b4:	10624dd3 	.word	0x10624dd3
 80027b8:	51eb851f 	.word	0x51eb851f
 80027bc:	cccccccd 	.word	0xcccccccd
 80027c0:	20000000 	.word	0x20000000
 80027c4:	0800ad5c 	.word	0x0800ad5c
 80027c8:	0800ad68 	.word	0x0800ad68
 80027cc:	0800ad70 	.word	0x0800ad70
 80027d0:	0800ad38 	.word	0x0800ad38
 80027d4:	0800ad78 	.word	0x0800ad78
 80027d8:	200000ef 	.word	0x200000ef
 80027dc:	200000ee 	.word	0x200000ee
 80027e0:	0800accc 	.word	0x0800accc
 80027e4:	0800acd0 	.word	0x0800acd0
 80027e8:	2000004c 	.word	0x2000004c

080027ec <_Z20displayCalibrationOKv>:
void displayCalibrationOK(){
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f002 ffcf 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(24, 0);
 80027f6:	2100      	movs	r1, #0
 80027f8:	2018      	movs	r0, #24
 80027fa:	f003 f927 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Calibration", Font_7x10, White);
 80027fe:	4a1c      	ldr	r2, [pc, #112]	; (8002870 <_Z20displayCalibrationOKv+0x84>)
 8002800:	2301      	movs	r3, #1
 8002802:	ca06      	ldmia	r2, {r1, r2}
 8002804:	481b      	ldr	r0, [pc, #108]	; (8002874 <_Z20displayCalibrationOKv+0x88>)
 8002806:	f003 f8fb 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(38,12);
 800280a:	210c      	movs	r1, #12
 800280c:	2026      	movs	r0, #38	; 0x26
 800280e:	f003 f91d 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Success", Font_7x10, White);
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <_Z20displayCalibrationOKv+0x84>)
 8002814:	2301      	movs	r3, #1
 8002816:	ca06      	ldmia	r2, {r1, r2}
 8002818:	4817      	ldr	r0, [pc, #92]	; (8002878 <_Z20displayCalibrationOKv+0x8c>)
 800281a:	f003 f8f1 	bl	8005a00 <ssd1306_WriteString>

	ssd1306_SetCursor(58,50);
 800281e:	2132      	movs	r1, #50	; 0x32
 8002820:	203a      	movs	r0, #58	; 0x3a
 8002822:	f003 f913 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <_Z20displayCalibrationOKv+0x84>)
 8002828:	2301      	movs	r3, #1
 800282a:	ca06      	ldmia	r2, {r1, r2}
 800282c:	4813      	ldr	r0, [pc, #76]	; (800287c <_Z20displayCalibrationOKv+0x90>)
 800282e:	f003 f8e7 	bl	8005a00 <ssd1306_WriteString>
	if (menuItemSelect){
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <_Z20displayCalibrationOKv+0x94>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d013      	beq.n	8002862 <_Z20displayCalibrationOKv+0x76>
		ssd1306_SetCursor(50, 50);
 800283a:	2132      	movs	r1, #50	; 0x32
 800283c:	2032      	movs	r0, #50	; 0x32
 800283e:	f003 f905 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002842:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <_Z20displayCalibrationOKv+0x84>)
 8002844:	2301      	movs	r3, #1
 8002846:	ca06      	ldmia	r2, {r1, r2}
 8002848:	480e      	ldr	r0, [pc, #56]	; (8002884 <_Z20displayCalibrationOKv+0x98>)
 800284a:	f003 f8d9 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(72, 50);
 800284e:	2132      	movs	r1, #50	; 0x32
 8002850:	2048      	movs	r0, #72	; 0x48
 8002852:	f003 f8fb 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002856:	4a06      	ldr	r2, [pc, #24]	; (8002870 <_Z20displayCalibrationOKv+0x84>)
 8002858:	2301      	movs	r3, #1
 800285a:	ca06      	ldmia	r2, {r1, r2}
 800285c:	480a      	ldr	r0, [pc, #40]	; (8002888 <_Z20displayCalibrationOKv+0x9c>)
 800285e:	f003 f8cf 	bl	8005a00 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <_Z20displayCalibrationOKv+0xa0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f002 ffb8 	bl	80057dc <ssd1306_UpdateScreen>

}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000000 	.word	0x20000000
 8002874:	0800ad5c 	.word	0x0800ad5c
 8002878:	0800ad80 	.word	0x0800ad80
 800287c:	0800ad38 	.word	0x0800ad38
 8002880:	200000ee 	.word	0x200000ee
 8002884:	0800acd0 	.word	0x0800acd0
 8002888:	0800accc 	.word	0x0800accc
 800288c:	2000004c 	.word	0x2000004c

08002890 <_Z22displayCalibrationFailv>:
void displayCalibrationFail(){
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8002894:	2000      	movs	r0, #0
 8002896:	f002 ff7d 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(24, 0);
 800289a:	2100      	movs	r1, #0
 800289c:	2018      	movs	r0, #24
 800289e:	f003 f8d5 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Calibration", Font_7x10, White);
 80028a2:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <_Z22displayCalibrationFailv+0x84>)
 80028a4:	2301      	movs	r3, #1
 80028a6:	ca06      	ldmia	r2, {r1, r2}
 80028a8:	481b      	ldr	r0, [pc, #108]	; (8002918 <_Z22displayCalibrationFailv+0x88>)
 80028aa:	f003 f8a9 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(50,12);
 80028ae:	210c      	movs	r1, #12
 80028b0:	2032      	movs	r0, #50	; 0x32
 80028b2:	f003 f8cb 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Fail", Font_7x10, White);
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <_Z22displayCalibrationFailv+0x84>)
 80028b8:	2301      	movs	r3, #1
 80028ba:	ca06      	ldmia	r2, {r1, r2}
 80028bc:	4817      	ldr	r0, [pc, #92]	; (800291c <_Z22displayCalibrationFailv+0x8c>)
 80028be:	f003 f89f 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(58,50);
 80028c2:	2132      	movs	r1, #50	; 0x32
 80028c4:	203a      	movs	r0, #58	; 0x3a
 80028c6:	f003 f8c1 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <_Z22displayCalibrationFailv+0x84>)
 80028cc:	2301      	movs	r3, #1
 80028ce:	ca06      	ldmia	r2, {r1, r2}
 80028d0:	4813      	ldr	r0, [pc, #76]	; (8002920 <_Z22displayCalibrationFailv+0x90>)
 80028d2:	f003 f895 	bl	8005a00 <ssd1306_WriteString>
	if (menuItemSelect){
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <_Z22displayCalibrationFailv+0x94>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d013      	beq.n	8002906 <_Z22displayCalibrationFailv+0x76>
		ssd1306_SetCursor(50, 50);
 80028de:	2132      	movs	r1, #50	; 0x32
 80028e0:	2032      	movs	r0, #50	; 0x32
 80028e2:	f003 f8b3 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <_Z22displayCalibrationFailv+0x84>)
 80028e8:	2301      	movs	r3, #1
 80028ea:	ca06      	ldmia	r2, {r1, r2}
 80028ec:	480e      	ldr	r0, [pc, #56]	; (8002928 <_Z22displayCalibrationFailv+0x98>)
 80028ee:	f003 f887 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(72, 50);
 80028f2:	2132      	movs	r1, #50	; 0x32
 80028f4:	2048      	movs	r0, #72	; 0x48
 80028f6:	f003 f8a9 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 80028fa:	4a06      	ldr	r2, [pc, #24]	; (8002914 <_Z22displayCalibrationFailv+0x84>)
 80028fc:	2301      	movs	r3, #1
 80028fe:	ca06      	ldmia	r2, {r1, r2}
 8002900:	480a      	ldr	r0, [pc, #40]	; (800292c <_Z22displayCalibrationFailv+0x9c>)
 8002902:	f003 f87d 	bl	8005a00 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <_Z22displayCalibrationFailv+0xa0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f002 ff66 	bl	80057dc <ssd1306_UpdateScreen>


}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000000 	.word	0x20000000
 8002918:	0800ad5c 	.word	0x0800ad5c
 800291c:	0800ad88 	.word	0x0800ad88
 8002920:	0800ad38 	.word	0x0800ad38
 8002924:	200000ee 	.word	0x200000ee
 8002928:	0800acd0 	.word	0x0800acd0
 800292c:	0800accc 	.word	0x0800accc
 8002930:	2000004c 	.word	0x2000004c

08002934 <_Z26displayCalibrationReadFailv>:
void displayCalibrationReadFail(){
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8002938:	2000      	movs	r0, #0
 800293a:	f002 ff2b 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800293e:	2100      	movs	r1, #0
 8002940:	2000      	movs	r0, #0
 8002942:	f003 f883 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Failed to read", Font_7x10, White);
 8002946:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <_Z26displayCalibrationReadFailv+0xac>)
 8002948:	2301      	movs	r3, #1
 800294a:	ca06      	ldmia	r2, {r1, r2}
 800294c:	4825      	ldr	r0, [pc, #148]	; (80029e4 <_Z26displayCalibrationReadFailv+0xb0>)
 800294e:	f003 f857 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(0,12);
 8002952:	210c      	movs	r1, #12
 8002954:	2000      	movs	r0, #0
 8002956:	f003 f879 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("calibration value.", Font_7x10, White);
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <_Z26displayCalibrationReadFailv+0xac>)
 800295c:	2301      	movs	r3, #1
 800295e:	ca06      	ldmia	r2, {r1, r2}
 8002960:	4821      	ldr	r0, [pc, #132]	; (80029e8 <_Z26displayCalibrationReadFailv+0xb4>)
 8002962:	f003 f84d 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(0,24);
 8002966:	2118      	movs	r1, #24
 8002968:	2000      	movs	r0, #0
 800296a:	f003 f86f 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Device will drift", Font_7x10, White);
 800296e:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <_Z26displayCalibrationReadFailv+0xac>)
 8002970:	2301      	movs	r3, #1
 8002972:	ca06      	ldmia	r2, {r1, r2}
 8002974:	481d      	ldr	r0, [pc, #116]	; (80029ec <_Z26displayCalibrationReadFailv+0xb8>)
 8002976:	f003 f843 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(0,36);
 800297a:	2124      	movs	r1, #36	; 0x24
 800297c:	2000      	movs	r0, #0
 800297e:	f003 f865 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("quickly", Font_7x10, White);
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <_Z26displayCalibrationReadFailv+0xac>)
 8002984:	2301      	movs	r3, #1
 8002986:	ca06      	ldmia	r2, {r1, r2}
 8002988:	4819      	ldr	r0, [pc, #100]	; (80029f0 <_Z26displayCalibrationReadFailv+0xbc>)
 800298a:	f003 f839 	bl	8005a00 <ssd1306_WriteString>
	ssd1306_SetCursor(58,50);
 800298e:	2132      	movs	r1, #50	; 0x32
 8002990:	203a      	movs	r0, #58	; 0x3a
 8002992:	f003 f85b 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <_Z26displayCalibrationReadFailv+0xac>)
 8002998:	2301      	movs	r3, #1
 800299a:	ca06      	ldmia	r2, {r1, r2}
 800299c:	4815      	ldr	r0, [pc, #84]	; (80029f4 <_Z26displayCalibrationReadFailv+0xc0>)
 800299e:	f003 f82f 	bl	8005a00 <ssd1306_WriteString>
	if (menuItemSelect){
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <_Z26displayCalibrationReadFailv+0xc4>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d013      	beq.n	80029d2 <_Z26displayCalibrationReadFailv+0x9e>
		ssd1306_SetCursor(50, 50);
 80029aa:	2132      	movs	r1, #50	; 0x32
 80029ac:	2032      	movs	r0, #50	; 0x32
 80029ae:	f003 f84d 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <_Z26displayCalibrationReadFailv+0xac>)
 80029b4:	2301      	movs	r3, #1
 80029b6:	ca06      	ldmia	r2, {r1, r2}
 80029b8:	4810      	ldr	r0, [pc, #64]	; (80029fc <_Z26displayCalibrationReadFailv+0xc8>)
 80029ba:	f003 f821 	bl	8005a00 <ssd1306_WriteString>
		ssd1306_SetCursor(72, 50);
 80029be:	2132      	movs	r1, #50	; 0x32
 80029c0:	2048      	movs	r0, #72	; 0x48
 80029c2:	f003 f843 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 80029c6:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <_Z26displayCalibrationReadFailv+0xac>)
 80029c8:	2301      	movs	r3, #1
 80029ca:	ca06      	ldmia	r2, {r1, r2}
 80029cc:	480c      	ldr	r0, [pc, #48]	; (8002a00 <_Z26displayCalibrationReadFailv+0xcc>)
 80029ce:	f003 f817 	bl	8005a00 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <_Z26displayCalibrationReadFailv+0xd0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 ff00 	bl	80057dc <ssd1306_UpdateScreen>
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000000 	.word	0x20000000
 80029e4:	0800ad90 	.word	0x0800ad90
 80029e8:	0800ada0 	.word	0x0800ada0
 80029ec:	0800adb4 	.word	0x0800adb4
 80029f0:	0800adc8 	.word	0x0800adc8
 80029f4:	0800ad38 	.word	0x0800ad38
 80029f8:	200000ee 	.word	0x200000ee
 80029fc:	0800acd0 	.word	0x0800acd0
 8002a00:	0800accc 	.word	0x0800accc
 8002a04:	2000004c 	.word	0x2000004c

08002a08 <_Z19displayUserBitsMenuv>:

void displayUserBitsMenu(){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0

	ssd1306_Fill(Black);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f002 fec0 	bl	8005794 <ssd1306_Fill>
	ssd1306_SetCursor(32, 0);
 8002a14:	2100      	movs	r1, #0
 8002a16:	2020      	movs	r0, #32
 8002a18:	f003 f818 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("User Bits", Font_7x10, White);
 8002a1c:	4aba      	ldr	r2, [pc, #744]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002a1e:	2301      	movs	r3, #1
 8002a20:	ca06      	ldmia	r2, {r1, r2}
 8002a22:	48ba      	ldr	r0, [pc, #744]	; (8002d0c <_Z19displayUserBitsMenuv+0x304>)
 8002a24:	f002 ffec 	bl	8005a00 <ssd1306_WriteString>
	
	uint8_t startX = 20;
 8002a28:	2314      	movs	r3, #20
 8002a2a:	71fb      	strb	r3, [r7, #7]
	ssd1306_SetCursor((16+(8*0)),28);
 8002a2c:	211c      	movs	r1, #28
 8002a2e:	2010      	movs	r0, #16
 8002a30:	f003 f80c 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(foo[displayUserBits[0]], Font_7x10, White);
 8002a34:	4bb6      	ldr	r3, [pc, #728]	; (8002d10 <_Z19displayUserBitsMenuv+0x308>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4ab6      	ldr	r2, [pc, #728]	; (8002d14 <_Z19displayUserBitsMenuv+0x30c>)
 8002a3a:	7812      	ldrb	r2, [r2, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	7818      	ldrb	r0, [r3, #0]
 8002a40:	4ab1      	ldr	r2, [pc, #708]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002a42:	2301      	movs	r3, #1
 8002a44:	ca06      	ldmia	r2, {r1, r2}
 8002a46:	f002 ff5b 	bl	8005900 <ssd1306_WriteChar>
	ssd1306_SetCursor((16+(8*1)),28);
 8002a4a:	211c      	movs	r1, #28
 8002a4c:	2018      	movs	r0, #24
 8002a4e:	f002 fffd 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(foo[displayUserBits[1]], Font_7x10, White);
 8002a52:	4baf      	ldr	r3, [pc, #700]	; (8002d10 <_Z19displayUserBitsMenuv+0x308>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4aaf      	ldr	r2, [pc, #700]	; (8002d14 <_Z19displayUserBitsMenuv+0x30c>)
 8002a58:	7852      	ldrb	r2, [r2, #1]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	7818      	ldrb	r0, [r3, #0]
 8002a5e:	4aaa      	ldr	r2, [pc, #680]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002a60:	2301      	movs	r3, #1
 8002a62:	ca06      	ldmia	r2, {r1, r2}
 8002a64:	f002 ff4c 	bl	8005900 <ssd1306_WriteChar>
	ssd1306_SetCursor((16+(8*2)),28);
 8002a68:	211c      	movs	r1, #28
 8002a6a:	2020      	movs	r0, #32
 8002a6c:	f002 ffee 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(':', Font_7x10, White);
 8002a70:	4aa5      	ldr	r2, [pc, #660]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002a72:	2301      	movs	r3, #1
 8002a74:	ca06      	ldmia	r2, {r1, r2}
 8002a76:	203a      	movs	r0, #58	; 0x3a
 8002a78:	f002 ff42 	bl	8005900 <ssd1306_WriteChar>

	ssd1306_SetCursor((16+(8*3)),28);
 8002a7c:	211c      	movs	r1, #28
 8002a7e:	2028      	movs	r0, #40	; 0x28
 8002a80:	f002 ffe4 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(foo[displayUserBits[2]], Font_7x10, White);
 8002a84:	4ba2      	ldr	r3, [pc, #648]	; (8002d10 <_Z19displayUserBitsMenuv+0x308>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4aa2      	ldr	r2, [pc, #648]	; (8002d14 <_Z19displayUserBitsMenuv+0x30c>)
 8002a8a:	7892      	ldrb	r2, [r2, #2]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	7818      	ldrb	r0, [r3, #0]
 8002a90:	4a9d      	ldr	r2, [pc, #628]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002a92:	2301      	movs	r3, #1
 8002a94:	ca06      	ldmia	r2, {r1, r2}
 8002a96:	f002 ff33 	bl	8005900 <ssd1306_WriteChar>
	ssd1306_SetCursor((16+(8*4)),28);
 8002a9a:	211c      	movs	r1, #28
 8002a9c:	2030      	movs	r0, #48	; 0x30
 8002a9e:	f002 ffd5 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(foo[displayUserBits[3]], Font_7x10, White);
 8002aa2:	4b9b      	ldr	r3, [pc, #620]	; (8002d10 <_Z19displayUserBitsMenuv+0x308>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a9b      	ldr	r2, [pc, #620]	; (8002d14 <_Z19displayUserBitsMenuv+0x30c>)
 8002aa8:	78d2      	ldrb	r2, [r2, #3]
 8002aaa:	4413      	add	r3, r2
 8002aac:	7818      	ldrb	r0, [r3, #0]
 8002aae:	4a96      	ldr	r2, [pc, #600]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	ca06      	ldmia	r2, {r1, r2}
 8002ab4:	f002 ff24 	bl	8005900 <ssd1306_WriteChar>
	ssd1306_SetCursor((16+(8*5)),28);
 8002ab8:	211c      	movs	r1, #28
 8002aba:	2038      	movs	r0, #56	; 0x38
 8002abc:	f002 ffc6 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(':', Font_7x10, White);
 8002ac0:	4a91      	ldr	r2, [pc, #580]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	ca06      	ldmia	r2, {r1, r2}
 8002ac6:	203a      	movs	r0, #58	; 0x3a
 8002ac8:	f002 ff1a 	bl	8005900 <ssd1306_WriteChar>


	ssd1306_SetCursor((16+(8*6)),28);
 8002acc:	211c      	movs	r1, #28
 8002ace:	2040      	movs	r0, #64	; 0x40
 8002ad0:	f002 ffbc 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(foo[displayUserBits[4]], Font_7x10, White);
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <_Z19displayUserBitsMenuv+0x308>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a8e      	ldr	r2, [pc, #568]	; (8002d14 <_Z19displayUserBitsMenuv+0x30c>)
 8002ada:	7912      	ldrb	r2, [r2, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	7818      	ldrb	r0, [r3, #0]
 8002ae0:	4a89      	ldr	r2, [pc, #548]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	ca06      	ldmia	r2, {r1, r2}
 8002ae6:	f002 ff0b 	bl	8005900 <ssd1306_WriteChar>
	ssd1306_SetCursor((16+(8*7)),28);
 8002aea:	211c      	movs	r1, #28
 8002aec:	2048      	movs	r0, #72	; 0x48
 8002aee:	f002 ffad 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(foo[displayUserBits[5]], Font_7x10, White);
 8002af2:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <_Z19displayUserBitsMenuv+0x308>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a87      	ldr	r2, [pc, #540]	; (8002d14 <_Z19displayUserBitsMenuv+0x30c>)
 8002af8:	7952      	ldrb	r2, [r2, #5]
 8002afa:	4413      	add	r3, r2
 8002afc:	7818      	ldrb	r0, [r3, #0]
 8002afe:	4a82      	ldr	r2, [pc, #520]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002b00:	2301      	movs	r3, #1
 8002b02:	ca06      	ldmia	r2, {r1, r2}
 8002b04:	f002 fefc 	bl	8005900 <ssd1306_WriteChar>
	ssd1306_SetCursor((16+(8*8)),28);
 8002b08:	211c      	movs	r1, #28
 8002b0a:	2050      	movs	r0, #80	; 0x50
 8002b0c:	f002 ff9e 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(':', Font_7x10, White);
 8002b10:	4a7d      	ldr	r2, [pc, #500]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002b12:	2301      	movs	r3, #1
 8002b14:	ca06      	ldmia	r2, {r1, r2}
 8002b16:	203a      	movs	r0, #58	; 0x3a
 8002b18:	f002 fef2 	bl	8005900 <ssd1306_WriteChar>


	ssd1306_SetCursor((16+(8*9)),28);
 8002b1c:	211c      	movs	r1, #28
 8002b1e:	2058      	movs	r0, #88	; 0x58
 8002b20:	f002 ff94 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(foo[displayUserBits[6]], Font_7x10, White);
 8002b24:	4b7a      	ldr	r3, [pc, #488]	; (8002d10 <_Z19displayUserBitsMenuv+0x308>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a7a      	ldr	r2, [pc, #488]	; (8002d14 <_Z19displayUserBitsMenuv+0x30c>)
 8002b2a:	7992      	ldrb	r2, [r2, #6]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	7818      	ldrb	r0, [r3, #0]
 8002b30:	4a75      	ldr	r2, [pc, #468]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002b32:	2301      	movs	r3, #1
 8002b34:	ca06      	ldmia	r2, {r1, r2}
 8002b36:	f002 fee3 	bl	8005900 <ssd1306_WriteChar>
	ssd1306_SetCursor((16+(8*10)),28);
 8002b3a:	211c      	movs	r1, #28
 8002b3c:	2060      	movs	r0, #96	; 0x60
 8002b3e:	f002 ff85 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteChar(foo[displayUserBits[7]], Font_7x10, White);
 8002b42:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <_Z19displayUserBitsMenuv+0x308>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a73      	ldr	r2, [pc, #460]	; (8002d14 <_Z19displayUserBitsMenuv+0x30c>)
 8002b48:	79d2      	ldrb	r2, [r2, #7]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	7818      	ldrb	r0, [r3, #0]
 8002b4e:	4a6e      	ldr	r2, [pc, #440]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002b50:	2301      	movs	r3, #1
 8002b52:	ca06      	ldmia	r2, {r1, r2}
 8002b54:	f002 fed4 	bl	8005900 <ssd1306_WriteChar>

	ssd1306_SetCursor(20,50);
 8002b58:	2132      	movs	r1, #50	; 0x32
 8002b5a:	2014      	movs	r0, #20
 8002b5c:	f002 ff76 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Set", Font_7x10, White);
 8002b60:	4a69      	ldr	r2, [pc, #420]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002b62:	2301      	movs	r3, #1
 8002b64:	ca06      	ldmia	r2, {r1, r2}
 8002b66:	486c      	ldr	r0, [pc, #432]	; (8002d18 <_Z19displayUserBitsMenuv+0x310>)
 8002b68:	f002 ff4a 	bl	8005a00 <ssd1306_WriteString>

	ssd1306_SetCursor(64, 50);
 8002b6c:	2132      	movs	r1, #50	; 0x32
 8002b6e:	2040      	movs	r0, #64	; 0x40
 8002b70:	f002 ff6c 	bl	8005a4c <ssd1306_SetCursor>
	ssd1306_WriteString("Cancel", Font_7x10, White);
 8002b74:	4a64      	ldr	r2, [pc, #400]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002b76:	2301      	movs	r3, #1
 8002b78:	ca06      	ldmia	r2, {r1, r2}
 8002b7a:	4868      	ldr	r0, [pc, #416]	; (8002d1c <_Z19displayUserBitsMenuv+0x314>)
 8002b7c:	f002 ff40 	bl	8005a00 <ssd1306_WriteString>

	if (!menuItemSelect){
 8002b80:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <_Z19displayUserBitsMenuv+0x318>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f083 0301 	eor.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d049      	beq.n	8002c22 <_Z19displayUserBitsMenuv+0x21a>
	
	if (menuItem == 0){
 8002b8e:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <_Z19displayUserBitsMenuv+0x31c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <_Z19displayUserBitsMenuv+0x1b6>
		ssd1306_SetCursor(8,28);
 8002b96:	211c      	movs	r1, #28
 8002b98:	2008      	movs	r0, #8
 8002b9a:	f002 ff57 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteChar('>', Font_7x10, White);
 8002b9e:	4a5a      	ldr	r2, [pc, #360]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	ca06      	ldmia	r2, {r1, r2}
 8002ba4:	203e      	movs	r0, #62	; 0x3e
 8002ba6:	f002 feab 	bl	8005900 <ssd1306_WriteChar>
		ssd1306_SetCursor(106, 28);
 8002baa:	211c      	movs	r1, #28
 8002bac:	206a      	movs	r0, #106	; 0x6a
 8002bae:	f002 ff4d 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteChar('<', Font_7x10, White);
 8002bb2:	4a55      	ldr	r2, [pc, #340]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	ca06      	ldmia	r2, {r1, r2}
 8002bb8:	203c      	movs	r0, #60	; 0x3c
 8002bba:	f002 fea1 	bl	8005900 <ssd1306_WriteChar>
	}
	if (menuItem == 1){
 8002bbe:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <_Z19displayUserBitsMenuv+0x31c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d113      	bne.n	8002bee <_Z19displayUserBitsMenuv+0x1e6>
		ssd1306_SetCursor(12, 50);
 8002bc6:	2132      	movs	r1, #50	; 0x32
 8002bc8:	200c      	movs	r0, #12
 8002bca:	f002 ff3f 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteChar('>', Font_7x10, White);
 8002bce:	4a4e      	ldr	r2, [pc, #312]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	ca06      	ldmia	r2, {r1, r2}
 8002bd4:	203e      	movs	r0, #62	; 0x3e
 8002bd6:	f002 fe93 	bl	8005900 <ssd1306_WriteChar>
		ssd1306_SetCursor(40, 50);
 8002bda:	2132      	movs	r1, #50	; 0x32
 8002bdc:	2028      	movs	r0, #40	; 0x28
 8002bde:	f002 ff35 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteChar('<', Font_7x10, White);
 8002be2:	4a49      	ldr	r2, [pc, #292]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002be4:	2301      	movs	r3, #1
 8002be6:	ca06      	ldmia	r2, {r1, r2}
 8002be8:	203c      	movs	r0, #60	; 0x3c
 8002bea:	f002 fe89 	bl	8005900 <ssd1306_WriteChar>
	}
	if (menuItem == 2){
 8002bee:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <_Z19displayUserBitsMenuv+0x31c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	f040 8116 	bne.w	8002e24 <_Z19displayUserBitsMenuv+0x41c>
		ssd1306_SetCursor(56, 50);
 8002bf8:	2132      	movs	r1, #50	; 0x32
 8002bfa:	2038      	movs	r0, #56	; 0x38
 8002bfc:	f002 ff26 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteChar('>', Font_7x10, White);
 8002c00:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002c02:	2301      	movs	r3, #1
 8002c04:	ca06      	ldmia	r2, {r1, r2}
 8002c06:	203e      	movs	r0, #62	; 0x3e
 8002c08:	f002 fe7a 	bl	8005900 <ssd1306_WriteChar>
		ssd1306_SetCursor(106, 50);
 8002c0c:	2132      	movs	r1, #50	; 0x32
 8002c0e:	206a      	movs	r0, #106	; 0x6a
 8002c10:	f002 ff1c 	bl	8005a4c <ssd1306_SetCursor>
		ssd1306_WriteChar('<', Font_7x10, White);
 8002c14:	4a3c      	ldr	r2, [pc, #240]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002c16:	2301      	movs	r3, #1
 8002c18:	ca06      	ldmia	r2, {r1, r2}
 8002c1a:	203c      	movs	r0, #60	; 0x3c
 8002c1c:	f002 fe70 	bl	8005900 <ssd1306_WriteChar>
 8002c20:	e100      	b.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
	}
	} else {
		switch (menuItem){
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <_Z19displayUserBitsMenuv+0x31c>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	f200 8089 	bhi.w	8002d3e <_Z19displayUserBitsMenuv+0x336>
 8002c2c:	a201      	add	r2, pc, #4	; (adr r2, 8002c34 <_Z19displayUserBitsMenuv+0x22c>)
 8002c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c32:	bf00      	nop
 8002c34:	08002c59 	.word	0x08002c59
 8002c38:	08002c6f 	.word	0x08002c6f
 8002c3c:	08002c85 	.word	0x08002c85
 8002c40:	08002c9b 	.word	0x08002c9b
 8002c44:	08002cb1 	.word	0x08002cb1
 8002c48:	08002cc7 	.word	0x08002cc7
 8002c4c:	08002cdd 	.word	0x08002cdd
 8002c50:	08002cf3 	.word	0x08002cf3
 8002c54:	08002d29 	.word	0x08002d29
			case 0:
				ssd1306_SetCursor((16+(8*0)),40);
 8002c58:	2128      	movs	r1, #40	; 0x28
 8002c5a:	2010      	movs	r0, #16
 8002c5c:	f002 fef6 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('^', Font_7x10, White);
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002c62:	2301      	movs	r3, #1
 8002c64:	ca06      	ldmia	r2, {r1, r2}
 8002c66:	205e      	movs	r0, #94	; 0x5e
 8002c68:	f002 fe4a 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002c6c:	e067      	b.n	8002d3e <_Z19displayUserBitsMenuv+0x336>
			case 1:
				ssd1306_SetCursor((16+(8*1)),40);
 8002c6e:	2128      	movs	r1, #40	; 0x28
 8002c70:	2018      	movs	r0, #24
 8002c72:	f002 feeb 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('^', Font_7x10, White);
 8002c76:	4a24      	ldr	r2, [pc, #144]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002c78:	2301      	movs	r3, #1
 8002c7a:	ca06      	ldmia	r2, {r1, r2}
 8002c7c:	205e      	movs	r0, #94	; 0x5e
 8002c7e:	f002 fe3f 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002c82:	e05c      	b.n	8002d3e <_Z19displayUserBitsMenuv+0x336>
			case 2:
				ssd1306_SetCursor((16+(8*3)),40);
 8002c84:	2128      	movs	r1, #40	; 0x28
 8002c86:	2028      	movs	r0, #40	; 0x28
 8002c88:	f002 fee0 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('^', Font_7x10, White);
 8002c8c:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002c8e:	2301      	movs	r3, #1
 8002c90:	ca06      	ldmia	r2, {r1, r2}
 8002c92:	205e      	movs	r0, #94	; 0x5e
 8002c94:	f002 fe34 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002c98:	e051      	b.n	8002d3e <_Z19displayUserBitsMenuv+0x336>
			case 3:
				ssd1306_SetCursor((16+(8*4)),40);
 8002c9a:	2128      	movs	r1, #40	; 0x28
 8002c9c:	2030      	movs	r0, #48	; 0x30
 8002c9e:	f002 fed5 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('^', Font_7x10, White);
 8002ca2:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	ca06      	ldmia	r2, {r1, r2}
 8002ca8:	205e      	movs	r0, #94	; 0x5e
 8002caa:	f002 fe29 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002cae:	e046      	b.n	8002d3e <_Z19displayUserBitsMenuv+0x336>
			case 4:
				ssd1306_SetCursor((16+(8*6)),40);
 8002cb0:	2128      	movs	r1, #40	; 0x28
 8002cb2:	2040      	movs	r0, #64	; 0x40
 8002cb4:	f002 feca 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('^', Font_7x10, White);
 8002cb8:	4a13      	ldr	r2, [pc, #76]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002cba:	2301      	movs	r3, #1
 8002cbc:	ca06      	ldmia	r2, {r1, r2}
 8002cbe:	205e      	movs	r0, #94	; 0x5e
 8002cc0:	f002 fe1e 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002cc4:	e03b      	b.n	8002d3e <_Z19displayUserBitsMenuv+0x336>
			case 5:
				ssd1306_SetCursor((16+(8*7)),40);
 8002cc6:	2128      	movs	r1, #40	; 0x28
 8002cc8:	2048      	movs	r0, #72	; 0x48
 8002cca:	f002 febf 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('^', Font_7x10, White);
 8002cce:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	ca06      	ldmia	r2, {r1, r2}
 8002cd4:	205e      	movs	r0, #94	; 0x5e
 8002cd6:	f002 fe13 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002cda:	e030      	b.n	8002d3e <_Z19displayUserBitsMenuv+0x336>
			case 6:
				ssd1306_SetCursor((16+(8*9)),40);
 8002cdc:	2128      	movs	r1, #40	; 0x28
 8002cde:	2058      	movs	r0, #88	; 0x58
 8002ce0:	f002 feb4 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('^', Font_7x10, White);
 8002ce4:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	ca06      	ldmia	r2, {r1, r2}
 8002cea:	205e      	movs	r0, #94	; 0x5e
 8002cec:	f002 fe08 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002cf0:	e025      	b.n	8002d3e <_Z19displayUserBitsMenuv+0x336>
			case 7:
				ssd1306_SetCursor((16+(8*10)),40);
 8002cf2:	2128      	movs	r1, #40	; 0x28
 8002cf4:	2060      	movs	r0, #96	; 0x60
 8002cf6:	f002 fea9 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('^', Font_7x10, White);
 8002cfa:	4a03      	ldr	r2, [pc, #12]	; (8002d08 <_Z19displayUserBitsMenuv+0x300>)
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	ca06      	ldmia	r2, {r1, r2}
 8002d00:	205e      	movs	r0, #94	; 0x5e
 8002d02:	f002 fdfd 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002d06:	e01a      	b.n	8002d3e <_Z19displayUserBitsMenuv+0x336>
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	0800add0 	.word	0x0800add0
 8002d10:	20000010 	.word	0x20000010
 8002d14:	200000f4 	.word	0x200000f4
 8002d18:	0800addc 	.word	0x0800addc
 8002d1c:	0800ad78 	.word	0x0800ad78
 8002d20:	200000ee 	.word	0x200000ee
 8002d24:	200000ef 	.word	0x200000ef
			case 8:
				ssd1306_SetCursor(8,28);
 8002d28:	211c      	movs	r1, #28
 8002d2a:	2008      	movs	r0, #8
 8002d2c:	f002 fe8e 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('>', Font_7x10, White);
 8002d30:	4a41      	ldr	r2, [pc, #260]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002d32:	2301      	movs	r3, #1
 8002d34:	ca06      	ldmia	r2, {r1, r2}
 8002d36:	203e      	movs	r0, #62	; 0x3e
 8002d38:	f002 fde2 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002d3c:	bf00      	nop
		}
		if (highlightYes){
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <_Z19displayUserBitsMenuv+0x434>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d06e      	beq.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
			switch (menuItem){
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <_Z19displayUserBitsMenuv+0x438>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b07      	cmp	r3, #7
 8002d4c:	d86a      	bhi.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
 8002d4e:	a201      	add	r2, pc, #4	; (adr r2, 8002d54 <_Z19displayUserBitsMenuv+0x34c>)
 8002d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d54:	08002d75 	.word	0x08002d75
 8002d58:	08002d8b 	.word	0x08002d8b
 8002d5c:	08002da1 	.word	0x08002da1
 8002d60:	08002db7 	.word	0x08002db7
 8002d64:	08002dcd 	.word	0x08002dcd
 8002d68:	08002de3 	.word	0x08002de3
 8002d6c:	08002df9 	.word	0x08002df9
 8002d70:	08002e0f 	.word	0x08002e0f
			case 0:
				ssd1306_SetCursor((16+(8*0)),12);
 8002d74:	210c      	movs	r1, #12
 8002d76:	2010      	movs	r0, #16
 8002d78:	f002 fe68 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('v', Font_7x10, White);
 8002d7c:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002d7e:	2301      	movs	r3, #1
 8002d80:	ca06      	ldmia	r2, {r1, r2}
 8002d82:	2076      	movs	r0, #118	; 0x76
 8002d84:	f002 fdbc 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002d88:	e04c      	b.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
			case 1:
				ssd1306_SetCursor((16+(8*1)),12);
 8002d8a:	210c      	movs	r1, #12
 8002d8c:	2018      	movs	r0, #24
 8002d8e:	f002 fe5d 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('v', Font_7x10, White);
 8002d92:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002d94:	2301      	movs	r3, #1
 8002d96:	ca06      	ldmia	r2, {r1, r2}
 8002d98:	2076      	movs	r0, #118	; 0x76
 8002d9a:	f002 fdb1 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002d9e:	e041      	b.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
			case 2:
				ssd1306_SetCursor((16+(8*3)),12);
 8002da0:	210c      	movs	r1, #12
 8002da2:	2028      	movs	r0, #40	; 0x28
 8002da4:	f002 fe52 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('v', Font_7x10, White);
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002daa:	2301      	movs	r3, #1
 8002dac:	ca06      	ldmia	r2, {r1, r2}
 8002dae:	2076      	movs	r0, #118	; 0x76
 8002db0:	f002 fda6 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002db4:	e036      	b.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
			case 3:
				ssd1306_SetCursor((16+(8*4)),12);
 8002db6:	210c      	movs	r1, #12
 8002db8:	2030      	movs	r0, #48	; 0x30
 8002dba:	f002 fe47 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('v', Font_7x10, White);
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	ca06      	ldmia	r2, {r1, r2}
 8002dc4:	2076      	movs	r0, #118	; 0x76
 8002dc6:	f002 fd9b 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002dca:	e02b      	b.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
			case 4:
				ssd1306_SetCursor((16+(8*6)),12);
 8002dcc:	210c      	movs	r1, #12
 8002dce:	2040      	movs	r0, #64	; 0x40
 8002dd0:	f002 fe3c 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('v', Font_7x10, White);
 8002dd4:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	ca06      	ldmia	r2, {r1, r2}
 8002dda:	2076      	movs	r0, #118	; 0x76
 8002ddc:	f002 fd90 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002de0:	e020      	b.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
			case 5:
				ssd1306_SetCursor((16+(8*7)),12);
 8002de2:	210c      	movs	r1, #12
 8002de4:	2048      	movs	r0, #72	; 0x48
 8002de6:	f002 fe31 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('v', Font_7x10, White);
 8002dea:	4a13      	ldr	r2, [pc, #76]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002dec:	2301      	movs	r3, #1
 8002dee:	ca06      	ldmia	r2, {r1, r2}
 8002df0:	2076      	movs	r0, #118	; 0x76
 8002df2:	f002 fd85 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002df6:	e015      	b.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
			case 6:
				ssd1306_SetCursor((16+(8*9)),12);
 8002df8:	210c      	movs	r1, #12
 8002dfa:	2058      	movs	r0, #88	; 0x58
 8002dfc:	f002 fe26 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('v', Font_7x10, White);
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002e02:	2301      	movs	r3, #1
 8002e04:	ca06      	ldmia	r2, {r1, r2}
 8002e06:	2076      	movs	r0, #118	; 0x76
 8002e08:	f002 fd7a 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002e0c:	e00a      	b.n	8002e24 <_Z19displayUserBitsMenuv+0x41c>
			case 7:
				ssd1306_SetCursor((16+(8*10)),12);
 8002e0e:	210c      	movs	r1, #12
 8002e10:	2060      	movs	r0, #96	; 0x60
 8002e12:	f002 fe1b 	bl	8005a4c <ssd1306_SetCursor>
				ssd1306_WriteChar('v', Font_7x10, White);
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <_Z19displayUserBitsMenuv+0x430>)
 8002e18:	2301      	movs	r3, #1
 8002e1a:	ca06      	ldmia	r2, {r1, r2}
 8002e1c:	2076      	movs	r0, #118	; 0x76
 8002e1e:	f002 fd6f 	bl	8005900 <ssd1306_WriteChar>
				break;
 8002e22:	bf00      	nop
		}
		}
	}


	ssd1306_UpdateScreen(dispI2C);
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <_Z19displayUserBitsMenuv+0x43c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 fcd7 	bl	80057dc <ssd1306_UpdateScreen>

}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	200000f0 	.word	0x200000f0
 8002e40:	200000ef 	.word	0x200000ef
 8002e44:	2000004c 	.word	0x2000004c

08002e48 <_Z8menuLoopv>:
bool menuItemSelect = false;
uint8_t menuItem = 0;
bool highlightYes = false;
uint8_t displayUserBits[8] = {0};
void menuLoop()
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
    bool inMenu = true;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	71fb      	strb	r3, [r7, #7]
    rateAdjust = frameRate;
 8002e52:	4b88      	ldr	r3, [pc, #544]	; (8003074 <_Z8menuLoopv+0x22c>)
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <_Z8menuLoopv+0x230>)
 8002e58:	701a      	strb	r2, [r3, #0]
    offsetAdjust = intOffset;
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <_Z8menuLoopv+0x234>)
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <_Z8menuLoopv+0x238>)
 8002e60:	701a      	strb	r2, [r3, #0]
	 * check if item is exit
	 * timeout for menu inactivity 10 seconds?
	 */
    

    displayTimeout = HAL_GetTick();
 8002e62:	f003 fa53 	bl	800630c <HAL_GetTick>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4a86      	ldr	r2, [pc, #536]	; (8003084 <_Z8menuLoopv+0x23c>)
 8002e6a:	6013      	str	r3, [r2, #0]
    while (GPIOC->IDR & GPIO_PIN_13)
 8002e6c:	4b86      	ldr	r3, [pc, #536]	; (8003088 <_Z8menuLoopv+0x240>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d000      	beq.n	8002e84 <_Z8menuLoopv+0x3c>
 8002e82:	e7f3      	b.n	8002e6c <_Z8menuLoopv+0x24>
    {
        //While still holding down the menu button
    }
    while (inMenu)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 81d7 	beq.w	800323a <_Z8menuLoopv+0x3f2>
    {
        updateDisplay(2);
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	f7fe fc79 	bl	8001784 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 10000)
 8002e92:	f003 fa3b 	bl	800630c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <_Z8menuLoopv+0x23c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	bf8c      	ite	hi
 8002ea6:	2301      	movhi	r3, #1
 8002ea8:	2300      	movls	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <_Z8menuLoopv+0x6c>
        {
            inMenu = false;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	71fb      	strb	r3, [r7, #7]
        }
        if (GPIOB->IDR & GPIO_PIN_9)
 8002eb4:	4b75      	ldr	r3, [pc, #468]	; (800308c <_Z8menuLoopv+0x244>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf14      	ite	ne
 8002ec0:	2301      	movne	r3, #1
 8002ec2:	2300      	moveq	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d065      	beq.n	8002f96 <_Z8menuLoopv+0x14e>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8002eca:	f003 fa1f 	bl	800630c <HAL_GetTick>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4a6c      	ldr	r2, [pc, #432]	; (8003084 <_Z8menuLoopv+0x23c>)
 8002ed2:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002ed4:	f003 fa1a 	bl	800630c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <_Z8menuLoopv+0x248>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002ee4:	bf8c      	ite	hi
 8002ee6:	2301      	movhi	r3, #1
 8002ee8:	2300      	movls	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d052      	beq.n	8002f96 <_Z8menuLoopv+0x14e>
            {
                if (menuItemSelect)
 8002ef0:	4b68      	ldr	r3, [pc, #416]	; (8003094 <_Z8menuLoopv+0x24c>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d03c      	beq.n	8002f72 <_Z8menuLoopv+0x12a>
                { //Menu item selected, scrolling through values
                    switch (menuItem)
 8002ef8:	4b67      	ldr	r3, [pc, #412]	; (8003098 <_Z8menuLoopv+0x250>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d845      	bhi.n	8002f8c <_Z8menuLoopv+0x144>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <_Z8menuLoopv+0xc0>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f37 	.word	0x08002f37
 8002f10:	08002f8d 	.word	0x08002f8d
 8002f14:	08002f55 	.word	0x08002f55
                    {
                    case 0: //Rate
                        if (rateAdjust == 0)
 8002f18:	4b57      	ldr	r3, [pc, #348]	; (8003078 <_Z8menuLoopv+0x230>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <_Z8menuLoopv+0xe0>
                            rateAdjust = 5;
 8002f20:	4b55      	ldr	r3, [pc, #340]	; (8003078 <_Z8menuLoopv+0x230>)
 8002f22:	2205      	movs	r2, #5
 8002f24:	701a      	strb	r2, [r3, #0]
                        else
                            rateAdjust--;
                        break;
 8002f26:	e031      	b.n	8002f8c <_Z8menuLoopv+0x144>
                            rateAdjust--;
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <_Z8menuLoopv+0x230>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	4b51      	ldr	r3, [pc, #324]	; (8003078 <_Z8menuLoopv+0x230>)
 8002f32:	701a      	strb	r2, [r3, #0]
                        break;
 8002f34:	e02a      	b.n	8002f8c <_Z8menuLoopv+0x144>
                    case 1: //Offset
                        if (offsetAdjust == 0)
 8002f36:	4b52      	ldr	r3, [pc, #328]	; (8003080 <_Z8menuLoopv+0x238>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <_Z8menuLoopv+0xfe>
                            offsetAdjust = 0;
 8002f3e:	4b50      	ldr	r3, [pc, #320]	; (8003080 <_Z8menuLoopv+0x238>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
                        else
                            offsetAdjust--;
                        break;
 8002f44:	e022      	b.n	8002f8c <_Z8menuLoopv+0x144>
                            offsetAdjust--;
 8002f46:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <_Z8menuLoopv+0x238>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <_Z8menuLoopv+0x238>)
 8002f50:	701a      	strb	r2, [r3, #0]
                        break;
 8002f52:	e01b      	b.n	8002f8c <_Z8menuLoopv+0x144>
                    case 2:
                        break;
                    case 3:
                        if (autoOff == 0)
 8002f54:	4b51      	ldr	r3, [pc, #324]	; (800309c <_Z8menuLoopv+0x254>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d103      	bne.n	8002f64 <_Z8menuLoopv+0x11c>
                            autoOff = 4;
 8002f5c:	4b4f      	ldr	r3, [pc, #316]	; (800309c <_Z8menuLoopv+0x254>)
 8002f5e:	2204      	movs	r2, #4
 8002f60:	701a      	strb	r2, [r3, #0]
                        else
                            autoOff--;
                        break;
 8002f62:	e013      	b.n	8002f8c <_Z8menuLoopv+0x144>
                            autoOff--;
 8002f64:	4b4d      	ldr	r3, [pc, #308]	; (800309c <_Z8menuLoopv+0x254>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	; (800309c <_Z8menuLoopv+0x254>)
 8002f6e:	701a      	strb	r2, [r3, #0]
                        break;
 8002f70:	e00c      	b.n	8002f8c <_Z8menuLoopv+0x144>
                        
                    }
                }
                else
                { //Scrolling through menu
                    menuItem++;
 8002f72:	4b49      	ldr	r3, [pc, #292]	; (8003098 <_Z8menuLoopv+0x250>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	3301      	adds	r3, #1
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <_Z8menuLoopv+0x250>)
 8002f7c:	701a      	strb	r2, [r3, #0]
                    if (menuItem > 4)
 8002f7e:	4b46      	ldr	r3, [pc, #280]	; (8003098 <_Z8menuLoopv+0x250>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d902      	bls.n	8002f8c <_Z8menuLoopv+0x144>
                        menuItem = 0;
 8002f86:	4b44      	ldr	r3, [pc, #272]	; (8003098 <_Z8menuLoopv+0x250>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8002f8c:	f003 f9be 	bl	800630c <HAL_GetTick>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4a3f      	ldr	r2, [pc, #252]	; (8003090 <_Z8menuLoopv+0x248>)
 8002f94:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <_Z8menuLoopv+0x244>)
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d07f      	beq.n	80030ac <_Z8menuLoopv+0x264>
        { //Minus button

            displayTimeout = HAL_GetTick();
 8002fac:	f003 f9ae 	bl	800630c <HAL_GetTick>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4a34      	ldr	r2, [pc, #208]	; (8003084 <_Z8menuLoopv+0x23c>)
 8002fb4:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002fb6:	f003 f9a9 	bl	800630c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b34      	ldr	r3, [pc, #208]	; (8003090 <_Z8menuLoopv+0x248>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002fc6:	bf8c      	ite	hi
 8002fc8:	2301      	movhi	r3, #1
 8002fca:	2300      	movls	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d06c      	beq.n	80030ac <_Z8menuLoopv+0x264>
            {
                if (menuItemSelect)
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <_Z8menuLoopv+0x24c>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d038      	beq.n	800304c <_Z8menuLoopv+0x204>
                { //Scrolling through option
                    switch (menuItem)
 8002fda:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <_Z8menuLoopv+0x250>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d85f      	bhi.n	80030a2 <_Z8menuLoopv+0x25a>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <_Z8menuLoopv+0x1a0>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003015 	.word	0x08003015
 8002ff0:	080030a3 	.word	0x080030a3
 8002ff4:	08003031 	.word	0x08003031
                    {
                    case 0:
                        rateAdjust++;
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <_Z8menuLoopv+0x230>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <_Z8menuLoopv+0x230>)
 8003002:	701a      	strb	r2, [r3, #0]
                        if (rateAdjust > 5)
 8003004:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <_Z8menuLoopv+0x230>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d92e      	bls.n	800306a <_Z8menuLoopv+0x222>
                            rateAdjust = 0;
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <_Z8menuLoopv+0x230>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
                        break;
 8003012:	e02a      	b.n	800306a <_Z8menuLoopv+0x222>
                        
                    case 1:
                        offsetAdjust++;
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <_Z8menuLoopv+0x238>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	3301      	adds	r3, #1
 800301a:	b2da      	uxtb	r2, r3
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <_Z8menuLoopv+0x238>)
 800301e:	701a      	strb	r2, [r3, #0]
                        if (offsetAdjust > 60)
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <_Z8menuLoopv+0x238>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b3c      	cmp	r3, #60	; 0x3c
 8003026:	d922      	bls.n	800306e <_Z8menuLoopv+0x226>
                            offsetAdjust = 60;
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_Z8menuLoopv+0x238>)
 800302a:	223c      	movs	r2, #60	; 0x3c
 800302c:	701a      	strb	r2, [r3, #0]
                        break;
 800302e:	e01e      	b.n	800306e <_Z8menuLoopv+0x226>
                    case 2:
                        break;
                    case 3:
                        autoOff++;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <_Z8menuLoopv+0x254>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <_Z8menuLoopv+0x254>)
 800303a:	701a      	strb	r2, [r3, #0]
                        if (autoOff > 4)
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <_Z8menuLoopv+0x254>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d92d      	bls.n	80030a0 <_Z8menuLoopv+0x258>
                            autoOff = 0;
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <_Z8menuLoopv+0x254>)
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
                        break;
 800304a:	e029      	b.n	80030a0 <_Z8menuLoopv+0x258>
                    }
                }
                else
                { //Scrolling through menu
                    if (menuItem == 0)
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <_Z8menuLoopv+0x250>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <_Z8menuLoopv+0x214>
                        menuItem = 4;
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <_Z8menuLoopv+0x250>)
 8003056:	2204      	movs	r2, #4
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e022      	b.n	80030a2 <_Z8menuLoopv+0x25a>
                    else
                        menuItem--;
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <_Z8menuLoopv+0x250>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	b2da      	uxtb	r2, r3
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <_Z8menuLoopv+0x250>)
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e01b      	b.n	80030a2 <_Z8menuLoopv+0x25a>
                        break;
 800306a:	bf00      	nop
 800306c:	e019      	b.n	80030a2 <_Z8menuLoopv+0x25a>
                        break;
 800306e:	bf00      	nop
 8003070:	e017      	b.n	80030a2 <_Z8menuLoopv+0x25a>
 8003072:	bf00      	nop
 8003074:	200000a9 	.word	0x200000a9
 8003078:	200000ec 	.word	0x200000ec
 800307c:	20000018 	.word	0x20000018
 8003080:	200000ed 	.word	0x200000ed
 8003084:	200000e4 	.word	0x200000e4
 8003088:	48000800 	.word	0x48000800
 800308c:	48000400 	.word	0x48000400
 8003090:	200000e8 	.word	0x200000e8
 8003094:	200000ee 	.word	0x200000ee
 8003098:	200000ef 	.word	0x200000ef
 800309c:	200000b8 	.word	0x200000b8
                        break;
 80030a0:	bf00      	nop
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 80030a2:	f003 f933 	bl	800630c <HAL_GetTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4a67      	ldr	r2, [pc, #412]	; (8003248 <_Z8menuLoopv+0x400>)
 80030aa:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 80030ac:	4b67      	ldr	r3, [pc, #412]	; (800324c <_Z8menuLoopv+0x404>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f43f aee0 	beq.w	8002e84 <_Z8menuLoopv+0x3c>
        { //Menu button
            displayTimeout = HAL_GetTick();
 80030c4:	f003 f922 	bl	800630c <HAL_GetTick>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4a61      	ldr	r2, [pc, #388]	; (8003250 <_Z8menuLoopv+0x408>)
 80030cc:	6013      	str	r3, [r2, #0]
            if (!(GPIOB->IDR & GPIO_PIN_8))
 80030ce:	4b61      	ldr	r3, [pc, #388]	; (8003254 <_Z8menuLoopv+0x40c>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f43f aecf 	beq.w	8002e84 <_Z8menuLoopv+0x3c>
            {

                displayTimeout = HAL_GetTick();
 80030e6:	f003 f911 	bl	800630c <HAL_GetTick>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <_Z8menuLoopv+0x408>)
 80030ee:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - buttonTime > 350) //Debounce
 80030f0:	f003 f90c 	bl	800630c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b54      	ldr	r3, [pc, #336]	; (8003248 <_Z8menuLoopv+0x400>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003100:	bf8c      	ite	hi
 8003102:	2301      	movhi	r3, #1
 8003104:	2300      	movls	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	f43f aebb 	beq.w	8002e84 <_Z8menuLoopv+0x3c>
                {
                    if (!menuItemSelect)
 800310e:	4b52      	ldr	r3, [pc, #328]	; (8003258 <_Z8menuLoopv+0x410>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	f083 0301 	eor.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d03b      	beq.n	8003194 <_Z8menuLoopv+0x34c>
                    { //if scrolling through menu items
                        switch (menuItem)
 800311c:	4b4f      	ldr	r3, [pc, #316]	; (800325c <_Z8menuLoopv+0x414>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b04      	cmp	r3, #4
 8003122:	f200 8084 	bhi.w	800322e <_Z8menuLoopv+0x3e6>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <_Z8menuLoopv+0x2e4>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	08003141 	.word	0x08003141
 8003130:	08003149 	.word	0x08003149
 8003134:	08003151 	.word	0x08003151
 8003138:	08003177 	.word	0x08003177
 800313c:	0800317f 	.word	0x0800317f
                        {
                        case 0: //Rate
                            menuItemSelect = true;
 8003140:	4b45      	ldr	r3, [pc, #276]	; (8003258 <_Z8menuLoopv+0x410>)
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
                            break;
 8003146:	e072      	b.n	800322e <_Z8menuLoopv+0x3e6>
                        case 1: //Offset
                            menuItemSelect = true;
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <_Z8menuLoopv+0x410>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
                            //offsetAlert();
                            ///while (GPIOC->IDR & GPIO_PIN_13)
                            //{displayTimeout = HAL_GetTick();}
                            break;
 800314e:	e06e      	b.n	800322e <_Z8menuLoopv+0x3e6>
                        case 2: //Re-jam
                            reJamAlert();
 8003150:	f000 f9c4 	bl	80034dc <_Z10reJamAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <_Z8menuLoopv+0x404>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d060      	beq.n	800322c <_Z8menuLoopv+0x3e4>
                            {displayTimeout = HAL_GetTick();}
 800316a:	f003 f8cf 	bl	800630c <HAL_GetTick>
 800316e:	4603      	mov	r3, r0
 8003170:	4a37      	ldr	r2, [pc, #220]	; (8003250 <_Z8menuLoopv+0x408>)
 8003172:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8003174:	e7ee      	b.n	8003154 <_Z8menuLoopv+0x30c>
                            break;
                        case 3: //Auto-Off
                            menuItemSelect = true;
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <_Z8menuLoopv+0x410>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
                            break;
 800317c:	e057      	b.n	800322e <_Z8menuLoopv+0x3e6>
                        case 4: //Exit menu
                            buttonTime = HAL_GetTick();
 800317e:	f003 f8c5 	bl	800630c <HAL_GetTick>
 8003182:	4603      	mov	r3, r0
 8003184:	4a30      	ldr	r2, [pc, #192]	; (8003248 <_Z8menuLoopv+0x400>)
 8003186:	6013      	str	r3, [r2, #0]
                            //menuCount = HAL_GetTick();
                            //GPIOH->ODR |= GPIO_PIN_3; //Not sure what this does
                            //Write to EEPROM
                            inMenu = false;
 8003188:	2300      	movs	r3, #0
 800318a:	71fb      	strb	r3, [r7, #7]
                            uptimeMinutes = 0;
 800318c:	4b34      	ldr	r3, [pc, #208]	; (8003260 <_Z8menuLoopv+0x418>)
 800318e:	2200      	movs	r2, #0
 8003190:	801a      	strh	r2, [r3, #0]
                            break;
 8003192:	e04c      	b.n	800322e <_Z8menuLoopv+0x3e6>
                        }
                    }
                    else //Exit menu option
                    {
                        switch (menuItem)
 8003194:	4b31      	ldr	r3, [pc, #196]	; (800325c <_Z8menuLoopv+0x414>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d848      	bhi.n	800322e <_Z8menuLoopv+0x3e6>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <_Z8menuLoopv+0x35c>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031eb 	.word	0x080031eb
 80031ac:	08003219 	.word	0x08003219
 80031b0:	08003225 	.word	0x08003225
                        {
                        case 0: //Rate
                            menuItemSelect = false;
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <_Z8menuLoopv+0x410>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
                            rateAlert();
 80031ba:	f000 f857 	bl	800326c <_Z9rateAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <_Z8menuLoopv+0x404>)
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <_Z8menuLoopv+0x398>
                            {displayTimeout = HAL_GetTick();}
 80031d4:	f003 f89a 	bl	800630c <HAL_GetTick>
 80031d8:	4603      	mov	r3, r0
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <_Z8menuLoopv+0x408>)
 80031dc:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 80031de:	e7ee      	b.n	80031be <_Z8menuLoopv+0x376>
                            rateAdjust = frameRate;
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <_Z8menuLoopv+0x41c>)
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <_Z8menuLoopv+0x420>)
 80031e6:	701a      	strb	r2, [r3, #0]
                            break;
 80031e8:	e021      	b.n	800322e <_Z8menuLoopv+0x3e6>
                        case 1: //Offset
                            offsetAlert();
 80031ea:	f000 f909 	bl	8003400 <_Z11offsetAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <_Z8menuLoopv+0x404>)
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <_Z8menuLoopv+0x3c8>
                            {displayTimeout = HAL_GetTick();}
 8003204:	f003 f882 	bl	800630c <HAL_GetTick>
 8003208:	4603      	mov	r3, r0
 800320a:	4a11      	ldr	r2, [pc, #68]	; (8003250 <_Z8menuLoopv+0x408>)
 800320c:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 800320e:	e7ee      	b.n	80031ee <_Z8menuLoopv+0x3a6>
                            menuItemSelect = false;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <_Z8menuLoopv+0x410>)
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
                            break;
 8003216:	e00a      	b.n	800322e <_Z8menuLoopv+0x3e6>
                        case 2: //Re-Jam
                            reJamAlert();
 8003218:	f000 f960 	bl	80034dc <_Z10reJamAlertv>
                            menuItemSelect = false;
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <_Z8menuLoopv+0x410>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
                            break;
 8003222:	e004      	b.n	800322e <_Z8menuLoopv+0x3e6>
                        case 3: //Auto-Off
                            menuItemSelect = false;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <_Z8menuLoopv+0x410>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
                            break;
 800322a:	e000      	b.n	800322e <_Z8menuLoopv+0x3e6>
                            break;
 800322c:	bf00      	nop
                        }
                    }
                    buttonTime = HAL_GetTick(); //Debounce timer
 800322e:	f003 f86d 	bl	800630c <HAL_GetTick>
 8003232:	4603      	mov	r3, r0
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <_Z8menuLoopv+0x400>)
 8003236:	6013      	str	r3, [r2, #0]
    while (inMenu)
 8003238:	e624      	b.n	8002e84 <_Z8menuLoopv+0x3c>
                }
            }
        }
    }
    updateDisplay(0x0);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fe faa2 	bl	8001784 <_Z13updateDisplayh>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200000e8 	.word	0x200000e8
 800324c:	48000800 	.word	0x48000800
 8003250:	200000e4 	.word	0x200000e4
 8003254:	48000400 	.word	0x48000400
 8003258:	200000ee 	.word	0x200000ee
 800325c:	200000ef 	.word	0x200000ef
 8003260:	200000ba 	.word	0x200000ba
 8003264:	200000a9 	.word	0x200000a9
 8003268:	200000ec 	.word	0x200000ec

0800326c <_Z9rateAlertv>:
        break;
    }
}

void rateAlert()
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8003272:	2301      	movs	r3, #1
 8003274:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 8003276:	4b5b      	ldr	r3, [pc, #364]	; (80033e4 <_Z9rateAlertv+0x178>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x5);
 800327c:	2005      	movs	r0, #5
 800327e:	f7fe fa81 	bl	8001784 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8003282:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <_Z9rateAlertv+0x17c>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf14      	ite	ne
 800328e:	2301      	movne	r3, #1
 8003290:	2300      	moveq	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d000      	beq.n	800329a <_Z9rateAlertv+0x2e>
 8003298:	e7f3      	b.n	8003282 <_Z9rateAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 809c 	beq.w	80033da <_Z9rateAlertv+0x16e>
    {
        updateDisplay(0x5);
 80032a2:	2005      	movs	r0, #5
 80032a4:	f7fe fa6e 	bl	8001784 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 80032a8:	f003 f830 	bl	800630c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <_Z9rateAlertv+0x180>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf8c      	ite	hi
 80032bc:	2301      	movhi	r3, #1
 80032be:	2300      	movls	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d004      	beq.n	80032d0 <_Z9rateAlertv+0x64>
        {
            highlightYes = false;
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <_Z9rateAlertv+0x178>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 80032cc:	2300      	movs	r3, #0
 80032ce:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 80032d0:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <_Z9rateAlertv+0x184>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01e      	beq.n	8003324 <_Z9rateAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 80032e6:	f003 f811 	bl	800630c <HAL_GetTick>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <_Z9rateAlertv+0x180>)
 80032ee:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 80032f0:	f003 f80c 	bl	800630c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <_Z9rateAlertv+0x188>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003300:	bf8c      	ite	hi
 8003302:	2301      	movhi	r3, #1
 8003304:	2300      	movls	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <_Z9rateAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <_Z9rateAlertv+0x178>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b33      	ldr	r3, [pc, #204]	; (80033e4 <_Z9rateAlertv+0x178>)
 8003318:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 800331a:	f002 fff7 	bl	800630c <HAL_GetTick>
 800331e:	4603      	mov	r3, r0
 8003320:	4a34      	ldr	r2, [pc, #208]	; (80033f4 <_Z9rateAlertv+0x188>)
 8003322:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <_Z9rateAlertv+0x184>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01e      	beq.n	8003378 <_Z9rateAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 800333a:	f002 ffe7 	bl	800630c <HAL_GetTick>
 800333e:	4603      	mov	r3, r0
 8003340:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <_Z9rateAlertv+0x180>)
 8003342:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8003344:	f002 ffe2 	bl	800630c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <_Z9rateAlertv+0x188>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003354:	bf8c      	ite	hi
 8003356:	2301      	movhi	r3, #1
 8003358:	2300      	movls	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00b      	beq.n	8003378 <_Z9rateAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 8003360:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <_Z9rateAlertv+0x178>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f083 0301 	eor.w	r3, r3, #1
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <_Z9rateAlertv+0x178>)
 800336c:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 800336e:	f002 ffcd 	bl	800630c <HAL_GetTick>
 8003372:	4603      	mov	r3, r0
 8003374:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <_Z9rateAlertv+0x188>)
 8003376:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <_Z9rateAlertv+0x17c>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d085      	beq.n	800329a <_Z9rateAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 800338e:	f002 ffbd 	bl	800630c <HAL_GetTick>
 8003392:	4603      	mov	r3, r0
 8003394:	4a15      	ldr	r2, [pc, #84]	; (80033ec <_Z9rateAlertv+0x180>)
 8003396:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8003398:	f002 ffb8 	bl	800630c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <_Z9rateAlertv+0x188>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80033a8:	bf8c      	ite	hi
 80033aa:	2301      	movhi	r3, #1
 80033ac:	2300      	movls	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f43f af72 	beq.w	800329a <_Z9rateAlertv+0x2e>
            {
                if (highlightYes)
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <_Z9rateAlertv+0x178>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <_Z9rateAlertv+0x16a>
                {
                    frameRate = rateAdjust;
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <_Z9rateAlertv+0x18c>)
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <_Z9rateAlertv+0x190>)
 80033c4:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 80033c6:	f000 fa33 	bl	8003830 <_Z13resetTimecodev>
                    highlightYes = false;
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <_Z9rateAlertv+0x178>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
                    inLoop = false;
 80033d0:	2300      	movs	r3, #0
 80033d2:	71fb      	strb	r3, [r7, #7]
                    break;
 80033d4:	e001      	b.n	80033da <_Z9rateAlertv+0x16e>
                }
                inLoop = false;
 80033d6:	2300      	movs	r3, #0
 80033d8:	71fb      	strb	r3, [r7, #7]
                break;
                buttonTime = HAL_GetTick(); //Debounce timer
            }
        }
    }
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200000f0 	.word	0x200000f0
 80033e8:	48000800 	.word	0x48000800
 80033ec:	200000e4 	.word	0x200000e4
 80033f0:	48000400 	.word	0x48000400
 80033f4:	200000e8 	.word	0x200000e8
 80033f8:	200000ec 	.word	0x200000ec
 80033fc:	200000a9 	.word	0x200000a9

08003400 <_Z11offsetAlertv>:

void offsetAlert()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8003406:	2301      	movs	r3, #1
 8003408:	71fb      	strb	r3, [r7, #7]
    updateDisplay(0x6);
 800340a:	2006      	movs	r0, #6
 800340c:	f7fe f9ba 	bl	8001784 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <_Z11offsetAlertv+0xc4>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d000      	beq.n	8003428 <_Z11offsetAlertv+0x28>
 8003426:	e7f3      	b.n	8003410 <_Z11offsetAlertv+0x10>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d046      	beq.n	80034bc <_Z11offsetAlertv+0xbc>
    {
        updateDisplay(0x6);
 800342e:	2006      	movs	r0, #6
 8003430:	f7fe f9a8 	bl	8001784 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 8000)
 8003434:	f002 ff6a 	bl	800630c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	4b23      	ldr	r3, [pc, #140]	; (80034c8 <_Z11offsetAlertv+0xc8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003444:	bf8c      	ite	hi
 8003446:	2301      	movhi	r3, #1
 8003448:	2300      	movls	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <_Z11offsetAlertv+0x5a>
        {
            highlightYes = false;
 8003450:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <_Z11offsetAlertv+0xcc>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8003456:	2300      	movs	r3, #0
 8003458:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <_Z11offsetAlertv+0xc4>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0db      	beq.n	8003428 <_Z11offsetAlertv+0x28>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8003470:	f002 ff4c 	bl	800630c <HAL_GetTick>
 8003474:	4603      	mov	r3, r0
 8003476:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <_Z11offsetAlertv+0xc8>)
 8003478:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 800347a:	f002 ff47 	bl	800630c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <_Z11offsetAlertv+0xd0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800348a:	bf8c      	ite	hi
 800348c:	2301      	movhi	r3, #1
 800348e:	2300      	movls	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0c8      	beq.n	8003428 <_Z11offsetAlertv+0x28>
            {
                //Add/subtract offset to current frame?
                //Set offset for future jams?
                intOffset = offsetAdjust;
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <_Z11offsetAlertv+0xd4>)
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <_Z11offsetAlertv+0xd8>)
 800349c:	701a      	strb	r2, [r3, #0]
                highlightYes = !highlightYes;
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <_Z11offsetAlertv+0xcc>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	f083 0301 	eor.w	r3, r3, #1
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <_Z11offsetAlertv+0xcc>)
 80034aa:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 80034ac:	f002 ff2e 	bl	800630c <HAL_GetTick>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <_Z11offsetAlertv+0xd0>)
 80034b4:	6013      	str	r3, [r2, #0]
                inLoop = false;
 80034b6:	2300      	movs	r3, #0
 80034b8:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 80034ba:	e7b5      	b.n	8003428 <_Z11offsetAlertv+0x28>
            }
        }
    }
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	48000800 	.word	0x48000800
 80034c8:	200000e4 	.word	0x200000e4
 80034cc:	200000f0 	.word	0x200000f0
 80034d0:	200000e8 	.word	0x200000e8
 80034d4:	200000ed 	.word	0x200000ed
 80034d8:	20000018 	.word	0x20000018

080034dc <_Z10reJamAlertv>:

void reJamAlert()
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
    bool inLoop = true;
 80034e2:	2301      	movs	r3, #1
 80034e4:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 80034e6:	4b5e      	ldr	r3, [pc, #376]	; (8003660 <_Z10reJamAlertv+0x184>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x7);
 80034ec:	2007      	movs	r0, #7
 80034ee:	f7fe f949 	bl	8001784 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 80034f2:	4b5c      	ldr	r3, [pc, #368]	; (8003664 <_Z10reJamAlertv+0x188>)
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d000      	beq.n	800350a <_Z10reJamAlertv+0x2e>
 8003508:	e7f3      	b.n	80034f2 <_Z10reJamAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a3 	beq.w	8003658 <_Z10reJamAlertv+0x17c>
    {
        updateDisplay(0x7);
 8003512:	2007      	movs	r0, #7
 8003514:	f7fe f936 	bl	8001784 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8003518:	f002 fef8 	bl	800630c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	4b52      	ldr	r3, [pc, #328]	; (8003668 <_Z10reJamAlertv+0x18c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	bf8c      	ite	hi
 800352c:	2301      	movhi	r3, #1
 800352e:	2300      	movls	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d004      	beq.n	8003540 <_Z10reJamAlertv+0x64>
        {
            highlightYes = false;
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <_Z10reJamAlertv+0x184>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 800353c:	2300      	movs	r3, #0
 800353e:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 8003540:	4b4a      	ldr	r3, [pc, #296]	; (800366c <_Z10reJamAlertv+0x190>)
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01e      	beq.n	8003594 <_Z10reJamAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8003556:	f002 fed9 	bl	800630c <HAL_GetTick>
 800355a:	4603      	mov	r3, r0
 800355c:	4a42      	ldr	r2, [pc, #264]	; (8003668 <_Z10reJamAlertv+0x18c>)
 800355e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8003560:	f002 fed4 	bl	800630c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	4b42      	ldr	r3, [pc, #264]	; (8003670 <_Z10reJamAlertv+0x194>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003570:	bf8c      	ite	hi
 8003572:	2301      	movhi	r3, #1
 8003574:	2300      	movls	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <_Z10reJamAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 800357c:	4b38      	ldr	r3, [pc, #224]	; (8003660 <_Z10reJamAlertv+0x184>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f083 0301 	eor.w	r3, r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <_Z10reJamAlertv+0x184>)
 8003588:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 800358a:	f002 febf 	bl	800630c <HAL_GetTick>
 800358e:	4603      	mov	r3, r0
 8003590:	4a37      	ldr	r2, [pc, #220]	; (8003670 <_Z10reJamAlertv+0x194>)
 8003592:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <_Z10reJamAlertv+0x190>)
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01e      	beq.n	80035e8 <_Z10reJamAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 80035aa:	f002 feaf 	bl	800630c <HAL_GetTick>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <_Z10reJamAlertv+0x18c>)
 80035b2:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 80035b4:	f002 feaa 	bl	800630c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <_Z10reJamAlertv+0x194>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80035c4:	bf8c      	ite	hi
 80035c6:	2301      	movhi	r3, #1
 80035c8:	2300      	movls	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <_Z10reJamAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 80035d0:	4b23      	ldr	r3, [pc, #140]	; (8003660 <_Z10reJamAlertv+0x184>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <_Z10reJamAlertv+0x184>)
 80035dc:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 80035de:	f002 fe95 	bl	800630c <HAL_GetTick>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <_Z10reJamAlertv+0x194>)
 80035e6:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 80035e8:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <_Z10reJamAlertv+0x188>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d085      	beq.n	800350a <_Z10reJamAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 80035fe:	f002 fe85 	bl	800630c <HAL_GetTick>
 8003602:	4603      	mov	r3, r0
 8003604:	4a18      	ldr	r2, [pc, #96]	; (8003668 <_Z10reJamAlertv+0x18c>)
 8003606:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8003608:	f002 fe80 	bl	800630c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <_Z10reJamAlertv+0x194>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003618:	bf8c      	ite	hi
 800361a:	2301      	movhi	r3, #1
 800361c:	2300      	movls	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f43f af72 	beq.w	800350a <_Z10reJamAlertv+0x2e>
            {
                if (highlightYes)
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <_Z10reJamAlertv+0x184>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00c      	beq.n	8003648 <_Z10reJamAlertv+0x16c>
                {
                    frameRate = rateAdjust;
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <_Z10reJamAlertv+0x198>)
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <_Z10reJamAlertv+0x19c>)
 8003634:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 8003636:	f000 f8fb 	bl	8003830 <_Z13resetTimecodev>
                    highlightYes = !highlightYes;
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <_Z10reJamAlertv+0x184>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	f083 0301 	eor.w	r3, r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <_Z10reJamAlertv+0x184>)
 8003646:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8003648:	f002 fe60 	bl	800630c <HAL_GetTick>
 800364c:	4603      	mov	r3, r0
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <_Z10reJamAlertv+0x194>)
 8003650:	6013      	str	r3, [r2, #0]
                inLoop = false;
 8003652:	2300      	movs	r3, #0
 8003654:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 8003656:	e758      	b.n	800350a <_Z10reJamAlertv+0x2e>
            }
        }
    }
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200000f0 	.word	0x200000f0
 8003664:	48000800 	.word	0x48000800
 8003668:	200000e4 	.word	0x200000e4
 800366c:	48000400 	.word	0x48000400
 8003670:	200000e8 	.word	0x200000e8
 8003674:	200000ec 	.word	0x200000ec
 8003678:	200000a9 	.word	0x200000a9

0800367c <_Z12initTimecodev>:

/* Init Timecode
* Get the current frame count based on the data read in from the timer
*TODO: Add in the user variables
*/
bool initTimecode(){
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
  int hr = int(tcIN[1] & 0x0F) + (int(tcIN[0] & 0x03)*10);
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <_Z12initTimecodev+0x18c>)
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f003 010f 	and.w	r1, r3, #15
 800368c:	4b5e      	ldr	r3, [pc, #376]	; (8003808 <_Z12initTimecodev+0x18c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0203 	and.w	r2, r3, #3
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	440b      	add	r3, r1
 80036a0:	613b      	str	r3, [r7, #16]
  int mn = int(tcIN[3] & 0x0F) + (int(tcIN[2] & 0x07)*10);
 80036a2:	4b59      	ldr	r3, [pc, #356]	; (8003808 <_Z12initTimecodev+0x18c>)
 80036a4:	78db      	ldrb	r3, [r3, #3]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 010f 	and.w	r1, r3, #15
 80036ac:	4b56      	ldr	r3, [pc, #344]	; (8003808 <_Z12initTimecodev+0x18c>)
 80036ae:	789b      	ldrb	r3, [r3, #2]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 0207 	and.w	r2, r3, #7
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	440b      	add	r3, r1
 80036c0:	60fb      	str	r3, [r7, #12]
  int sc = int(tcIN[5] & 0x0F) + (int(tcIN[4] & 0x07)*10);
 80036c2:	4b51      	ldr	r3, [pc, #324]	; (8003808 <_Z12initTimecodev+0x18c>)
 80036c4:	795b      	ldrb	r3, [r3, #5]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f003 010f 	and.w	r1, r3, #15
 80036cc:	4b4e      	ldr	r3, [pc, #312]	; (8003808 <_Z12initTimecodev+0x18c>)
 80036ce:	791b      	ldrb	r3, [r3, #4]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0207 	and.w	r2, r3, #7
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	440b      	add	r3, r1
 80036e0:	60bb      	str	r3, [r7, #8]
  int fr = int(tcIN[7] & 0x0F) + (int(tcIN[6] & 0x03)*10);
 80036e2:	4b49      	ldr	r3, [pc, #292]	; (8003808 <_Z12initTimecodev+0x18c>)
 80036e4:	79db      	ldrb	r3, [r3, #7]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f003 010f 	and.w	r1, r3, #15
 80036ec:	4b46      	ldr	r3, [pc, #280]	; (8003808 <_Z12initTimecodev+0x18c>)
 80036ee:	799b      	ldrb	r3, [r3, #6]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0203 	and.w	r2, r3, #3
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	440b      	add	r3, r1
 8003700:	607b      	str	r3, [r7, #4]
  clockFrame = (hr * 60 * 60 * frameRateDivisor[frameRate]) + (mn * 60 * frameRateDivisor[frameRate]) + (sc * frameRateDivisor[frameRate]) + fr;
 8003702:	4b42      	ldr	r3, [pc, #264]	; (800380c <_Z12initTimecodev+0x190>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	4b41      	ldr	r3, [pc, #260]	; (8003810 <_Z12initTimecodev+0x194>)
 800370a:	5c9b      	ldrb	r3, [r3, r2]
 800370c:	461a      	mov	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	fb03 f302 	mul.w	r3, r3, r2
 8003714:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003718:	fb02 f103 	mul.w	r1, r2, r3
 800371c:	4b3b      	ldr	r3, [pc, #236]	; (800380c <_Z12initTimecodev+0x190>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <_Z12initTimecodev+0x194>)
 8003724:	5c9b      	ldrb	r3, [r3, r2]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	fb03 f202 	mul.w	r2, r3, r2
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	18ca      	adds	r2, r1, r3
 8003738:	4b34      	ldr	r3, [pc, #208]	; (800380c <_Z12initTimecodev+0x190>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	4b34      	ldr	r3, [pc, #208]	; (8003810 <_Z12initTimecodev+0x194>)
 8003740:	5c5b      	ldrb	r3, [r3, r1]
 8003742:	4619      	mov	r1, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	fb03 f301 	mul.w	r3, r3, r1
 800374a:	441a      	add	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	461a      	mov	r2, r3
 8003752:	4b30      	ldr	r3, [pc, #192]	; (8003814 <_Z12initTimecodev+0x198>)
 8003754:	601a      	str	r2, [r3, #0]
  //__HAL_TIM_SET_AUTORELOAD(outTIM,frameRateARR[frameRate]);
  for (int i=0; i<8; i++){
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b07      	cmp	r3, #7
 800375e:	dc12      	bgt.n	8003786 <_Z12initTimecodev+0x10a>
    userBits[i] = int((tcIN[i] & 0b11110000)>>4);
 8003760:	4a29      	ldr	r2, [pc, #164]	; (8003808 <_Z12initTimecodev+0x18c>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	4413      	add	r3, r2
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	111b      	asrs	r3, r3, #4
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	b2d9      	uxtb	r1, r3
 8003774:	4a28      	ldr	r2, [pc, #160]	; (8003818 <_Z12initTimecodev+0x19c>)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	4413      	add	r3, r2
 800377a:	460a      	mov	r2, r1
 800377c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<8; i++){
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3301      	adds	r3, #1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e7e9      	b.n	800375a <_Z12initTimecodev+0xde>
  }
  if (intOffset > 30)
 8003786:	4b25      	ldr	r3, [pc, #148]	; (800381c <_Z12initTimecodev+0x1a0>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b1e      	cmp	r3, #30
 800378c:	d909      	bls.n	80037a2 <_Z12initTimecodev+0x126>
  {
    clockFrame += (intOffset - 30);
 800378e:	4b23      	ldr	r3, [pc, #140]	; (800381c <_Z12initTimecodev+0x1a0>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <_Z12initTimecodev+0x198>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4413      	add	r3, r2
 800379a:	3b1e      	subs	r3, #30
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <_Z12initTimecodev+0x198>)
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	e00c      	b.n	80037bc <_Z12initTimecodev+0x140>
  }
  else if (intOffset < 30)
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <_Z12initTimecodev+0x1a0>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b1d      	cmp	r3, #29
 80037a8:	d808      	bhi.n	80037bc <_Z12initTimecodev+0x140>
  {
    clockFrame -= (30-intOffset);
 80037aa:	4b1c      	ldr	r3, [pc, #112]	; (800381c <_Z12initTimecodev+0x1a0>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <_Z12initTimecodev+0x198>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	3b1e      	subs	r3, #30
 80037b8:	4a16      	ldr	r2, [pc, #88]	; (8003814 <_Z12initTimecodev+0x198>)
 80037ba:	6013      	str	r3, [r2, #0]
  }
  countTIM->Instance->ARR = frameRateARR[frameRate];
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <_Z12initTimecodev+0x190>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <_Z12initTimecodev+0x1a4>)
 80037c4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <_Z12initTimecodev+0x1a8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c
  countTIM->Init.Period = frameRateARR[frameRate];
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <_Z12initTimecodev+0x190>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b12      	ldr	r3, [pc, #72]	; (8003820 <_Z12initTimecodev+0x1a4>)
 80037d8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <_Z12initTimecodev+0x1a8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(countTIM);
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <_Z12initTimecodev+0x1a8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f006 fb6a 	bl	8009ec0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(outTIM);
 80037ec:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <_Z12initTimecodev+0x1ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f006 fb65 	bl	8009ec0 <HAL_TIM_Base_Start_IT>
  tcJammed = true;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <_Z12initTimecodev+0x1b0>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
}
 80037fc:	bf00      	nop
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200000a0 	.word	0x200000a0
 800380c:	200000a9 	.word	0x200000a9
 8003810:	20000034 	.word	0x20000034
 8003814:	200000ac 	.word	0x200000ac
 8003818:	200000b0 	.word	0x200000b0
 800381c:	20000018 	.word	0x20000018
 8003820:	2000003c 	.word	0x2000003c
 8003824:	2000005c 	.word	0x2000005c
 8003828:	20000058 	.word	0x20000058
 800382c:	200000a8 	.word	0x200000a8

08003830 <_Z13resetTimecodev>:

/* Reset Timecode
* Simple function to reset all timers and variables back to
* pre-jam state
*/
bool resetTimecode(){
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
    clockFrame = 0;
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <_Z13resetTimecodev+0x38>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(countTIM);
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <_Z13resetTimecodev+0x3c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f006 fb92 	bl	8009f68 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(outTIM);
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <_Z13resetTimecodev+0x40>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f006 fb8d 	bl	8009f68 <HAL_TIM_Base_Stop_IT>
    //countTIM->Instance->ARR = frameRateARR[frameRate];
    //countTIM->Init.Period = frameRateARR[frameRate];
    //__HAL_TIM_SET_AUTORELOAD(&outTIM,frameRateARR[frameRate]);
    HAL_TIM_IC_Start_IT(inTIM, TIM_CHANNEL_3);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <_Z13resetTimecodev+0x44>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2108      	movs	r1, #8
 8003854:	4618      	mov	r0, r3
 8003856:	f006 fc0d 	bl	800a074 <HAL_TIM_IC_Start_IT>
    tcJammed = false;
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <_Z13resetTimecodev+0x48>)
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
    //timer2 input yes
    //timer6 output no
}
 8003860:	bf00      	nop
 8003862:	4618      	mov	r0, r3
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200000ac 	.word	0x200000ac
 800386c:	2000005c 	.word	0x2000005c
 8003870:	20000058 	.word	0x20000058
 8003874:	20000054 	.word	0x20000054
 8003878:	200000a8 	.word	0x200000a8
 800387c:	00000000 	.word	0x00000000

08003880 <_Z9calibratev>:
* 
* For higher accuracy, the compensation runs at a factor of 10 times
* the frame rate divisor.
* IE 23.98 is 1001/24000, so it runs every 240,000 frames.
*/
void calibrate(){
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
  int32_t calibrationArray[6];
	calibrationArray[0] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <_Z9calibratev+0x178>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fc fde2 	bl	8000454 <__aeabi_ui2d>
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	4b59      	ldr	r3, [pc, #356]	; (80039fc <_Z9calibratev+0x17c>)
 8003896:	f7fc ff81 	bl	800079c <__aeabi_ddiv>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	a353      	add	r3, pc, #332	; (adr r3, 80039f0 <_Z9calibratev+0x170>)
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f7fc fe4e 	bl	8000548 <__aeabi_dmul>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	f7fd f85a 	bl	800096c <__aeabi_d2iz>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <_Z9calibratev+0x180>)
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	603b      	str	r3, [r7, #0]
	calibrationArray[1] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <_Z9calibratev+0x178>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fdc5 	bl	8000454 <__aeabi_ui2d>
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	4b4b      	ldr	r3, [pc, #300]	; (80039fc <_Z9calibratev+0x17c>)
 80038d0:	f7fc ff64 	bl	800079c <__aeabi_ddiv>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <_Z9calibratev+0x184>)
 80038e2:	f7fc fe31 	bl	8000548 <__aeabi_dmul>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	f7fd f83d 	bl	800096c <__aeabi_d2iz>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b44      	ldr	r3, [pc, #272]	; (8003a08 <_Z9calibratev+0x188>)
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	607b      	str	r3, [r7, #4]
	calibrationArray[2] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 80038fa:	4b3f      	ldr	r3, [pc, #252]	; (80039f8 <_Z9calibratev+0x178>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fda8 	bl	8000454 <__aeabi_ui2d>
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	4b3c      	ldr	r3, [pc, #240]	; (80039fc <_Z9calibratev+0x17c>)
 800390a:	f7fc ff47 	bl	800079c <__aeabi_ddiv>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <_Z9calibratev+0x184>)
 800391c:	f7fc fe14 	bl	8000548 <__aeabi_dmul>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f7fd f820 	bl	800096c <__aeabi_d2iz>
 800392c:	4602      	mov	r2, r0
 800392e:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <_Z9calibratev+0x188>)
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
	calibrationArray[3] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <_Z9calibratev+0x178>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fd8b 	bl	8000454 <__aeabi_ui2d>
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <_Z9calibratev+0x17c>)
 8003944:	f7fc ff2a 	bl	800079c <__aeabi_ddiv>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	a327      	add	r3, pc, #156	; (adr r3, 80039f0 <_Z9calibratev+0x170>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc fdf7 	bl	8000548 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f7fd f803 	bl	800096c <__aeabi_d2iz>
 8003966:	4602      	mov	r2, r0
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <_Z9calibratev+0x180>)
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  calibrationArray[4] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <_Z9calibratev+0x178>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fc fd6e 	bl	8000454 <__aeabi_ui2d>
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	4b1f      	ldr	r3, [pc, #124]	; (80039fc <_Z9calibratev+0x17c>)
 800397e:	f7fc ff0d 	bl	800079c <__aeabi_ddiv>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4610      	mov	r0, r2
 8003988:	4619      	mov	r1, r3
 800398a:	a319      	add	r3, pc, #100	; (adr r3, 80039f0 <_Z9calibratev+0x170>)
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f7fc fdda 	bl	8000548 <__aeabi_dmul>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
 800399c:	f7fc ffe6 	bl	800096c <__aeabi_d2iz>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <_Z9calibratev+0x180>)
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
	calibrationArray[5] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <_Z9calibratev+0x178>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fc fd51 	bl	8000454 <__aeabi_ui2d>
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <_Z9calibratev+0x17c>)
 80039b8:	f7fc fef0 	bl	800079c <__aeabi_ddiv>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <_Z9calibratev+0x184>)
 80039ca:	f7fc fdbd 	bl	8000548 <__aeabi_dmul>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	f7fc ffc9 	bl	800096c <__aeabi_d2iz>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <_Z9calibratev+0x188>)
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
}
 80039e2:	bf00      	nop
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	f3af 8000 	nop.w
 80039f0:	00000000 	.word	0x00000000
 80039f4:	408f4800 	.word	0x408f4800
 80039f8:	20000014 	.word	0x20000014
 80039fc:	40340000 	.word	0x40340000
 8003a00:	4798db80 	.word	0x4798db80
 8003a04:	408f4000 	.word	0x408f4000
 8003a08:	47868c00 	.word	0x47868c00

08003a0c <_Z10frameCheckv>:
*
*
*/

void frameCheck()
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  switch(frameRate)
 8003a10:	4b60      	ldr	r3, [pc, #384]	; (8003b94 <_Z10frameCheckv+0x188>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	f200 80b8 	bhi.w	8003b8a <_Z10frameCheckv+0x17e>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <_Z10frameCheckv+0x14>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a39 	.word	0x08003a39
 8003a24:	08003a57 	.word	0x08003a57
 8003a28:	08003a75 	.word	0x08003a75
 8003a2c:	08003a91 	.word	0x08003a91
 8003a30:	08003aad 	.word	0x08003aad
 8003a34:	08003b59 	.word	0x08003b59
  {
    case 0: //23.98
      if (clockFrame == 2073600)
 8003a38:	4b57      	ldr	r3, [pc, #348]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a57      	ldr	r2, [pc, #348]	; (8003b9c <_Z10frameCheckv+0x190>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8093 	beq.w	8003b74 <_Z10frameCheckv+0x168>
        clockFrame = 0;
 8003a4e:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
      break;
 8003a54:	e08e      	b.n	8003b74 <_Z10frameCheckv+0x168>
    case 1: //24
      if (clockFrame == 2073600)
 8003a56:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a50      	ldr	r2, [pc, #320]	; (8003b9c <_Z10frameCheckv+0x190>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8086 	beq.w	8003b78 <_Z10frameCheckv+0x16c>
        clockFrame = 0;
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
      break;
 8003a72:	e081      	b.n	8003b78 <_Z10frameCheckv+0x16c>
    case 2: //25
      if (clockFrame == 2160000)
 8003a74:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a49      	ldr	r2, [pc, #292]	; (8003ba0 <_Z10frameCheckv+0x194>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d079      	beq.n	8003b7c <_Z10frameCheckv+0x170>
        clockFrame = 0;
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
      break;
 8003a8e:	e075      	b.n	8003b7c <_Z10frameCheckv+0x170>
    case 3: //29.97
      if (clockFrame == 2592000)
 8003a90:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a43      	ldr	r2, [pc, #268]	; (8003ba4 <_Z10frameCheckv+0x198>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d06d      	beq.n	8003b80 <_Z10frameCheckv+0x174>
        clockFrame = 0;
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
      break;
 8003aaa:	e069      	b.n	8003b80 <_Z10frameCheckv+0x174>
    case 4: //29.97 DF
      if (clockFrame == 2592000)
 8003aac:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a3c      	ldr	r2, [pc, #240]	; (8003ba4 <_Z10frameCheckv+0x198>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <_Z10frameCheckv+0xba>
        clockFrame = 0;
 8003ac0:	4b35      	ldr	r3, [pc, #212]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
      if (clockFrame % 30 == 29 && (clockFrame / 30) % 60 == 59 && ((((clockFrame / 30) / 60) % 60)+1) % 10 != 0 )
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <_Z10frameCheckv+0x19c>)
 8003acc:	fba3 2301 	umull	r2, r3, r3, r1
 8003ad0:	091a      	lsrs	r2, r3, #4
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	1aca      	subs	r2, r1, r3
 8003adc:	2a1d      	cmp	r2, #29
 8003ade:	d12d      	bne.n	8003b3c <_Z10frameCheckv+0x130>
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a30      	ldr	r2, [pc, #192]	; (8003ba8 <_Z10frameCheckv+0x19c>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0919      	lsrs	r1, r3, #4
 8003aec:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <_Z10frameCheckv+0x19c>)
 8003aee:	fba3 2301 	umull	r2, r3, r3, r1
 8003af2:	095a      	lsrs	r2, r3, #5
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	1aca      	subs	r2, r1, r3
 8003afe:	2a3b      	cmp	r2, #59	; 0x3b
 8003b00:	d11c      	bne.n	8003b3c <_Z10frameCheckv+0x130>
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a29      	ldr	r2, [pc, #164]	; (8003bac <_Z10frameCheckv+0x1a0>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	0a99      	lsrs	r1, r3, #10
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <_Z10frameCheckv+0x19c>)
 8003b10:	fba3 2301 	umull	r2, r3, r3, r1
 8003b14:	095a      	lsrs	r2, r3, #5
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	1aca      	subs	r2, r1, r3
 8003b20:	1c51      	adds	r1, r2, #1
 8003b22:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <_Z10frameCheckv+0x1a4>)
 8003b24:	fba3 2301 	umull	r2, r3, r3, r1
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	1aca      	subs	r2, r1, r3
 8003b34:	2a00      	cmp	r2, #0
 8003b36:	d001      	beq.n	8003b3c <_Z10frameCheckv+0x130>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <_Z10frameCheckv+0x132>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d020      	beq.n	8003b84 <_Z10frameCheckv+0x178>
        {
          clockFrame++; 
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003b4a:	6013      	str	r3, [r2, #0]
          clockFrame++;
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3301      	adds	r3, #1
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003b54:	6013      	str	r3, [r2, #0]
        }
      break;
 8003b56:	e015      	b.n	8003b84 <_Z10frameCheckv+0x178>
    case 5: //30
      if (clockFrame == 2592000)
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <_Z10frameCheckv+0x198>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	bf0c      	ite	eq
 8003b62:	2301      	moveq	r3, #1
 8003b64:	2300      	movne	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <_Z10frameCheckv+0x17c>
        clockFrame = 0;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <_Z10frameCheckv+0x18c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
      break;
 8003b72:	e009      	b.n	8003b88 <_Z10frameCheckv+0x17c>
      break;
 8003b74:	bf00      	nop
 8003b76:	e008      	b.n	8003b8a <_Z10frameCheckv+0x17e>
      break;
 8003b78:	bf00      	nop
 8003b7a:	e006      	b.n	8003b8a <_Z10frameCheckv+0x17e>
      break;
 8003b7c:	bf00      	nop
 8003b7e:	e004      	b.n	8003b8a <_Z10frameCheckv+0x17e>
      break;
 8003b80:	bf00      	nop
 8003b82:	e002      	b.n	8003b8a <_Z10frameCheckv+0x17e>
      break;
 8003b84:	bf00      	nop
 8003b86:	e000      	b.n	8003b8a <_Z10frameCheckv+0x17e>
      break;
 8003b88:	bf00      	nop
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	200000a9 	.word	0x200000a9
 8003b98:	200000ac 	.word	0x200000ac
 8003b9c:	001fa400 	.word	0x001fa400
 8003ba0:	0020f580 	.word	0x0020f580
 8003ba4:	00278d00 	.word	0x00278d00
 8003ba8:	88888889 	.word	0x88888889
 8003bac:	91a2b3c5 	.word	0x91a2b3c5
 8003bb0:	cccccccd 	.word	0xcccccccd

08003bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bba:	f002 fb3e 	bl	800623a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bbe:	f000 fd0d 	bl	80045dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bc2:	f001 f82f 	bl	8004c24 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8003bc6:	f000 fda7 	bl	8004718 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 8003bca:	f000 fe13 	bl	80047f4 <_ZL12MX_DAC1_Initv>
  MX_I2C1_Init();
 8003bce:	f000 fe4d 	bl	800486c <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 8003bd2:	f000 fe99 	bl	8004908 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 8003bd6:	f000 fee9 	bl	80049ac <_ZL12MX_TIM2_Initv>
  MX_TIM6_Init();
 8003bda:	f000 ff49 	bl	8004a70 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8003bde:	f000 ff87 	bl	8004af0 <_ZL12MX_TIM7_Initv>
  MX_TIM16_Init();
 8003be2:	f000 ffc5 	bl	8004b70 <_ZL13MX_TIM16_Initv>
  MX_USB_PCD_Init();
 8003be6:	f000 ffef 	bl	8004bc8 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */
  DAC1->DHR12R2 = 2048; //Set analog out for TXCO VCO
 8003bea:	4b3f      	ldr	r3, [pc, #252]	; (8003ce8 <main+0x134>)
 8003bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bf0:	615a      	str	r2, [r3, #20]

  /*Configure GPIO pin : PC13 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c00:	2301      	movs	r3, #1
 8003c02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c04:	2300      	movs	r3, #0
 8003c06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c14:	f003 fea4 	bl	8007960 <HAL_GPIO_Init>

/*if(GPIOA -> IDR & GPIO_PIN_9 || GPIOA -> IDR & GPIO_PIN_10){  //Stat 1 & 2
  powerUpMode = 2;
}*/

if(GPIOA -> IDR & GPIO_PIN_0){  //Power button
 8003c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d025      	beq.n	8003c7c <main+0xc8>
  uint32_t powerupTime = HAL_GetTick();
 8003c30:	f002 fb6c 	bl	800630c <HAL_GetTick>
 8003c34:	61b8      	str	r0, [r7, #24]
  while (GPIOA -> IDR & GPIO_PIN_0){
 8003c36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d016      	beq.n	8003c7c <main+0xc8>
    if (HAL_GetTick() - powerupTime > 2000){
 8003c4e:	f002 fb5d 	bl	800630c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c5c:	bf8c      	ite	hi
 8003c5e:	2301      	movhi	r3, #1
 8003c60:	2300      	movls	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0e6      	beq.n	8003c36 <main+0x82>
      powerUpMode = 1;
 8003c68:	4b20      	ldr	r3, [pc, #128]	; (8003cec <main+0x138>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
      GPIOB -> ODR |= GPIO_PIN_12;    //LED
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <main+0x13c>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <main+0x13c>)
 8003c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c78:	6153      	str	r3, [r2, #20]
  while (GPIOA -> IDR & GPIO_PIN_0){
 8003c7a:	e7dc      	b.n	8003c36 <main+0x82>
  }
}



if (powerUpMode == 0){    //Power button not held long enough
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <main+0x138>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <main+0xdc>
HAL_Delay(500);
 8003c84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c88:	f002 fb4c 	bl	8006324 <HAL_Delay>

    HAL_PWR_EnterSTANDBYMode();
 8003c8c:	f004 fee8 	bl	8008a60 <HAL_PWR_EnterSTANDBYMode>

}



HAL_Delay(20);
 8003c90:	2014      	movs	r0, #20
 8003c92:	f002 fb47 	bl	8006324 <HAL_Delay>
calRead = readEEPROM();
 8003c96:	f001 fb3f 	bl	8005318 <_Z10readEEPROMv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <main+0x140>)
 8003ca0:	701a      	strb	r2, [r3, #0]
HAL_Delay(10);
 8003ca2:	200a      	movs	r0, #10
 8003ca4:	f002 fb3e 	bl	8006324 <HAL_Delay>
  //GPIOA -> ODR |= GPIO_PIN_8; //Power enable
     //Input timer
  //HAL_TIM_Base_Start(&htim7);
  //HAL_TIM_Base_Start_IT(&htim16);
  //HAL_TIM_Base_Start_IT(&htim6);
  tcWrite[8] = 0b11111100;  //Sync pattern
 8003ca8:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <main+0x144>)
 8003caa:	22fc      	movs	r2, #252	; 0xfc
 8003cac:	721a      	strb	r2, [r3, #8]
  tcWrite[9] = 0b10111111;  //Sync pattern
 8003cae:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <main+0x144>)
 8003cb0:	22bf      	movs	r2, #191	; 0xbf
 8003cb2:	725a      	strb	r2, [r3, #9]




initDisplay();
 8003cb4:	f7fe fc20 	bl	80024f8 <_Z11initDisplayv>
if (!calRead){
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <main+0x140>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	f083 0301 	eor.w	r3, r3, #1
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <main+0x116>
  calReadFail();
 8003cc6:	f7fd fcf1 	bl	80016ac <_Z11calReadFailv>
}

if (GPIOB -> IDR & GPIO_PIN_8 && GPIOB -> IDR & GPIO_PIN_9){
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <main+0x13c>)
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d012      	beq.n	8003cfc <main+0x148>
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <main+0x13c>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00c      	beq.n	8003cfc <main+0x148>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00b      	b.n	8003cfe <main+0x14a>
 8003ce6:	bf00      	nop
 8003ce8:	40007400 	.word	0x40007400
 8003cec:	20000672 	.word	0x20000672
 8003cf0:	48000400 	.word	0x48000400
 8003cf4:	20000061 	.word	0x20000061
 8003cf8:	20000644 	.word	0x20000644
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <main+0x158>
  //Run Calibration menu
  calibrationMenu();
 8003d02:	f7fd fa6b 	bl	80011dc <_Z15calibrationMenuv>
  calMenu = true;
 8003d06:	4bae      	ldr	r3, [pc, #696]	; (8003fc0 <main+0x40c>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
}
if (!calRead && !calMenu){
 8003d0c:	4bad      	ldr	r3, [pc, #692]	; (8003fc4 <main+0x410>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	f083 0301 	eor.w	r3, r3, #1
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <main+0x178>
 8003d1a:	4ba9      	ldr	r3, [pc, #676]	; (8003fc0 <main+0x40c>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	f083 0301 	eor.w	r3, r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <main+0x178>
  calReadFail();
 8003d28:	f7fd fcc0 	bl	80016ac <_Z11calReadFailv>
}
calibrate();
 8003d2c:	f7ff fda8 	bl	8003880 <_Z9calibratev>
HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3); //Input timer
 8003d30:	2108      	movs	r1, #8
 8003d32:	48a5      	ldr	r0, [pc, #660]	; (8003fc8 <main+0x414>)
 8003d34:	f006 f99e 	bl	800a074 <HAL_TIM_IC_Start_IT>
updateDisplay(0x0);
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7fd fd23 	bl	8001784 <_Z13updateDisplayh>
updateDisplay(0x1);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f7fd fd20 	bl	8001784 <_Z13updateDisplayh>
 displayTimer = HAL_GetTick();
 8003d44:	f002 fae2 	bl	800630c <HAL_GetTick>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4aa0      	ldr	r2, [pc, #640]	; (8003fcc <main+0x418>)
 8003d4c:	6013      	str	r3, [r2, #0]
 batteryCheck = HAL_GetTick();
 8003d4e:	f002 fadd 	bl	800630c <HAL_GetTick>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4a9e      	ldr	r2, [pc, #632]	; (8003fd0 <main+0x41c>)
 8003d56:	6013      	str	r3, [r2, #0]
 batteryRead();
 8003d58:	f7fc fe80 	bl	8000a5c <_Z11batteryReadv>
 batteryCheck = batteryCheck - 29900;
 8003d5c:	4b9c      	ldr	r3, [pc, #624]	; (8003fd0 <main+0x41c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f5a3 43e9 	sub.w	r3, r3, #29824	; 0x7480
 8003d64:	3b4c      	subs	r3, #76	; 0x4c
 8003d66:	4a9a      	ldr	r2, [pc, #616]	; (8003fd0 <main+0x41c>)
 8003d68:	6013      	str	r3, [r2, #0]
batteryRead();
 8003d6a:	f7fc fe77 	bl	8000a5c <_Z11batteryReadv>
    * Only update display every 4th cycle?
    * Run tests on optimal update range
    * Timecode output is top priority
    *
    */
if (HAL_GetTick() - batteryCheck > 30000){
 8003d6e:	f002 facd 	bl	800630c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	4b96      	ldr	r3, [pc, #600]	; (8003fd0 <main+0x41c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f247 5230 	movw	r2, #30000	; 0x7530
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	bf8c      	ite	hi
 8003d82:	2301      	movhi	r3, #1
 8003d84:	2300      	movls	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <main+0x1e6>
  batteryCheck = HAL_GetTick();
 8003d8c:	f002 fabe 	bl	800630c <HAL_GetTick>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4a8f      	ldr	r2, [pc, #572]	; (8003fd0 <main+0x41c>)
 8003d94:	6013      	str	r3, [r2, #0]
  batteryRead();
 8003d96:	f7fc fe61 	bl	8000a5c <_Z11batteryReadv>
}
   if (!isLocked && displayOn){
 8003d9a:	4b8e      	ldr	r3, [pc, #568]	; (8003fd4 <main+0x420>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	f083 0301 	eor.w	r3, r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d025      	beq.n	8003df4 <main+0x240>
 8003da8:	4b8b      	ldr	r3, [pc, #556]	; (8003fd8 <main+0x424>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d021      	beq.n	8003df4 <main+0x240>
     if (HAL_GetTick() - displayTimer > 10000){
 8003db0:	f002 faac 	bl	800630c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <main+0x418>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf8c      	ite	hi
 8003dc4:	2301      	movhi	r3, #1
 8003dc6:	2300      	movls	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <main+0x22c>
       isLocked = true;
 8003dce:	4b81      	ldr	r3, [pc, #516]	; (8003fd4 <main+0x420>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
       displayOn = false;
 8003dd4:	4b80      	ldr	r3, [pc, #512]	; (8003fd8 <main+0x424>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
       updateDisplay(0x0);
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fd fcd2 	bl	8001784 <_Z13updateDisplayh>
     }
     if (displayLoopCounter == 120){
 8003de0:	4b7e      	ldr	r3, [pc, #504]	; (8003fdc <main+0x428>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b78      	cmp	r3, #120	; 0x78
 8003de6:	d105      	bne.n	8003df4 <main+0x240>
      updateDisplay(0x1);
 8003de8:	2001      	movs	r0, #1
 8003dea:	f7fd fccb 	bl	8001784 <_Z13updateDisplayh>
      displayLoopCounter = 0;
 8003dee:	4b7b      	ldr	r3, [pc, #492]	; (8003fdc <main+0x428>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
    }
   }

   if (isLocked && displayOn){
 8003df4:	4b77      	ldr	r3, [pc, #476]	; (8003fd4 <main+0x420>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d022      	beq.n	8003e42 <main+0x28e>
 8003dfc:	4b76      	ldr	r3, [pc, #472]	; (8003fd8 <main+0x424>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01e      	beq.n	8003e42 <main+0x28e>
     if (HAL_GetTick() - displayTimer > 5000){
 8003e04:	f002 fa82 	bl	800630c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b70      	ldr	r3, [pc, #448]	; (8003fcc <main+0x418>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e14:	4293      	cmp	r3, r2
 8003e16:	bf8c      	ite	hi
 8003e18:	2301      	movhi	r3, #1
 8003e1a:	2300      	movls	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <main+0x27a>
       displayOn = false;
 8003e22:	4b6d      	ldr	r3, [pc, #436]	; (8003fd8 <main+0x424>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
       updateDisplay(0x0);
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f7fd fcab 	bl	8001784 <_Z13updateDisplayh>
     }
     if (displayLoopCounter == 120){
 8003e2e:	4b6b      	ldr	r3, [pc, #428]	; (8003fdc <main+0x428>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b78      	cmp	r3, #120	; 0x78
 8003e34:	d105      	bne.n	8003e42 <main+0x28e>
      //updateDisplay(0x3);
      updateDisplay(d_lock);
 8003e36:	2003      	movs	r0, #3
 8003e38:	f7fd fca4 	bl	8001784 <_Z13updateDisplayh>
      displayLoopCounter = 0;
 8003e3c:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <main+0x428>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
    }
   }
   //Add in code to turn on display with button press?

   
  displayLoopCounter++;
 8003e42:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <main+0x428>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <main+0x428>)
 8003e4c:	701a      	strb	r2, [r3, #0]
frameCheck();
 8003e4e:	f7ff fddd 	bl	8003a0c <_Z10frameCheckv>
	  stat1 = GPIOA -> IDR & GPIO_PIN_9;
 8003e52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4b5e      	ldr	r3, [pc, #376]	; (8003fe0 <main+0x42c>)
 8003e68:	701a      	strb	r2, [r3, #0]
    stat2 = GPIOA -> IDR & GPIO_PIN_10;
 8003e6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <main+0x430>)
 8003e80:	701a      	strb	r2, [r3, #0]
	    //PA4 STat2
	    //PA5 Stat1
    //if (clockFrame == 2073600) clockFrame = 0;
    clockFrameOutput = clockFrame + 1;
 8003e82:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <main+0x434>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3301      	adds	r3, #1
 8003e88:	4a58      	ldr	r2, [pc, #352]	; (8003fec <main+0x438>)
 8003e8a:	6013      	str	r3, [r2, #0]
	    tcWrite[0] = ((clockFrameOutput % frameRateDivisor[frameRate]) % 10);
 8003e8c:	4b57      	ldr	r3, [pc, #348]	; (8003fec <main+0x438>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a57      	ldr	r2, [pc, #348]	; (8003ff0 <main+0x43c>)
 8003e92:	7812      	ldrb	r2, [r2, #0]
 8003e94:	4611      	mov	r1, r2
 8003e96:	4a57      	ldr	r2, [pc, #348]	; (8003ff4 <main+0x440>)
 8003e98:	5c52      	ldrb	r2, [r2, r1]
 8003e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e9e:	fb02 f201 	mul.w	r2, r2, r1
 8003ea2:	1a99      	subs	r1, r3, r2
 8003ea4:	4b54      	ldr	r3, [pc, #336]	; (8003ff8 <main+0x444>)
 8003ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	1aca      	subs	r2, r1, r3
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <main+0x448>)
 8003eba:	701a      	strb	r2, [r3, #0]
	    tcWrite[0] |= (tcIN[7] & 0xF0);
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <main+0x44c>)
 8003ebe:	79db      	ldrb	r3, [r3, #7]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003ec6:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <main+0x448>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b25a      	sxtb	r2, r3
 8003ecc:	b24b      	sxtb	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <main+0x448>)
 8003ed6:	701a      	strb	r2, [r3, #0]

	    tcWrite[1] = (clockFrameOutput % frameRateDivisor[frameRate]) / 10;
 8003ed8:	4b44      	ldr	r3, [pc, #272]	; (8003fec <main+0x438>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a44      	ldr	r2, [pc, #272]	; (8003ff0 <main+0x43c>)
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	4a44      	ldr	r2, [pc, #272]	; (8003ff4 <main+0x440>)
 8003ee4:	5c52      	ldrb	r2, [r2, r1]
 8003ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003eea:	fb02 f201 	mul.w	r2, r2, r1
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	4a41      	ldr	r2, [pc, #260]	; (8003ff8 <main+0x444>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	08db      	lsrs	r3, r3, #3
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4b40      	ldr	r3, [pc, #256]	; (8003ffc <main+0x448>)
 8003efc:	705a      	strb	r2, [r3, #1]
	    tcWrite[1] |= (tcIN[6] & 0xF0);
 8003efe:	4b40      	ldr	r3, [pc, #256]	; (8004000 <main+0x44c>)
 8003f00:	799b      	ldrb	r3, [r3, #6]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003f08:	4b3c      	ldr	r3, [pc, #240]	; (8003ffc <main+0x448>)
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	b25a      	sxtb	r2, r3
 8003f0e:	b24b      	sxtb	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <main+0x448>)
 8003f18:	705a      	strb	r2, [r3, #1]

	    tcWrite[2] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) % 10;
 8003f1a:	4b34      	ldr	r3, [pc, #208]	; (8003fec <main+0x438>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a34      	ldr	r2, [pc, #208]	; (8003ff0 <main+0x43c>)
 8003f20:	7812      	ldrb	r2, [r2, #0]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4a33      	ldr	r2, [pc, #204]	; (8003ff4 <main+0x440>)
 8003f26:	5c52      	ldrb	r2, [r2, r1]
 8003f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f2c:	4b35      	ldr	r3, [pc, #212]	; (8004004 <main+0x450>)
 8003f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f32:	095a      	lsrs	r2, r3, #5
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	1aca      	subs	r2, r1, r3
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <main+0x444>)
 8003f40:	fba3 1302 	umull	r1, r3, r3, r2
 8003f44:	08d9      	lsrs	r1, r3, #3
 8003f46:	460b      	mov	r3, r1
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	1ad1      	subs	r1, r2, r3
 8003f50:	b2ca      	uxtb	r2, r1
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <main+0x448>)
 8003f54:	709a      	strb	r2, [r3, #2]
	    tcWrite[2] |= (tcIN[5] & 0xF0);
 8003f56:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <main+0x44c>)
 8003f58:	795b      	ldrb	r3, [r3, #5]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003f60:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <main+0x448>)
 8003f62:	789b      	ldrb	r3, [r3, #2]
 8003f64:	b25a      	sxtb	r2, r3
 8003f66:	b24b      	sxtb	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	b25b      	sxtb	r3, r3
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <main+0x448>)
 8003f70:	709a      	strb	r2, [r3, #2]

	    tcWrite[3] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) / 10;
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <main+0x438>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <main+0x43c>)
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <main+0x440>)
 8003f7e:	5c52      	ldrb	r2, [r2, r1]
 8003f80:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f84:	4b1f      	ldr	r3, [pc, #124]	; (8004004 <main+0x450>)
 8003f86:	fba3 2301 	umull	r2, r3, r3, r1
 8003f8a:	095a      	lsrs	r2, r3, #5
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	1aca      	subs	r2, r1, r3
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <main+0x444>)
 8003f98:	fba3 2302 	umull	r2, r3, r3, r2
 8003f9c:	08db      	lsrs	r3, r3, #3
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <main+0x448>)
 8003fa2:	70da      	strb	r2, [r3, #3]
	    tcWrite[3] |= (tcIN[4] & 0xF0);
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <main+0x44c>)
 8003fa6:	791b      	ldrb	r3, [r3, #4]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <main+0x448>)
 8003fb0:	78db      	ldrb	r3, [r3, #3]
 8003fb2:	b25a      	sxtb	r2, r3
 8003fb4:	b24b      	sxtb	r3, r1
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b25b      	sxtb	r3, r3
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	e024      	b.n	8004008 <main+0x454>
 8003fbe:	bf00      	nop
 8003fc0:	2000009f 	.word	0x2000009f
 8003fc4:	20000061 	.word	0x20000061
 8003fc8:	2000020c 	.word	0x2000020c
 8003fcc:	20000668 	.word	0x20000668
 8003fd0:	20000688 	.word	0x20000688
 8003fd4:	20000670 	.word	0x20000670
 8003fd8:	20000060 	.word	0x20000060
 8003fdc:	20000667 	.word	0x20000667
 8003fe0:	200000c4 	.word	0x200000c4
 8003fe4:	200000c5 	.word	0x200000c5
 8003fe8:	200000ac 	.word	0x200000ac
 8003fec:	20000630 	.word	0x20000630
 8003ff0:	200000a9 	.word	0x200000a9
 8003ff4:	20000034 	.word	0x20000034
 8003ff8:	cccccccd 	.word	0xcccccccd
 8003ffc:	20000644 	.word	0x20000644
 8004000:	200000a0 	.word	0x200000a0
 8004004:	88888889 	.word	0x88888889
 8004008:	4bac      	ldr	r3, [pc, #688]	; (80042bc <main+0x708>)
 800400a:	70da      	strb	r2, [r3, #3]

	    tcWrite[4] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) % 10;
 800400c:	4bac      	ldr	r3, [pc, #688]	; (80042c0 <main+0x70c>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4bac      	ldr	r3, [pc, #688]	; (80042c4 <main+0x710>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	4bac      	ldr	r3, [pc, #688]	; (80042c8 <main+0x714>)
 8004018:	5c5b      	ldrb	r3, [r3, r1]
 800401a:	4619      	mov	r1, r3
 800401c:	460b      	mov	r3, r1
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a5b      	subs	r3, r3, r1
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	fbb2 f1f3 	udiv	r1, r2, r3
 8004028:	4ba8      	ldr	r3, [pc, #672]	; (80042cc <main+0x718>)
 800402a:	fba3 2301 	umull	r2, r3, r3, r1
 800402e:	095a      	lsrs	r2, r3, #5
 8004030:	4613      	mov	r3, r2
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	1aca      	subs	r2, r1, r3
 800403a:	4ba5      	ldr	r3, [pc, #660]	; (80042d0 <main+0x71c>)
 800403c:	fba3 1302 	umull	r1, r3, r3, r2
 8004040:	08d9      	lsrs	r1, r3, #3
 8004042:	460b      	mov	r3, r1
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	1ad1      	subs	r1, r2, r3
 800404c:	b2ca      	uxtb	r2, r1
 800404e:	4b9b      	ldr	r3, [pc, #620]	; (80042bc <main+0x708>)
 8004050:	711a      	strb	r2, [r3, #4]
	    tcWrite[4] |= (tcIN[3] & 0xF0);
 8004052:	4ba0      	ldr	r3, [pc, #640]	; (80042d4 <main+0x720>)
 8004054:	78db      	ldrb	r3, [r3, #3]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800405c:	4b97      	ldr	r3, [pc, #604]	; (80042bc <main+0x708>)
 800405e:	791b      	ldrb	r3, [r3, #4]
 8004060:	b25a      	sxtb	r2, r3
 8004062:	b24b      	sxtb	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	b25b      	sxtb	r3, r3
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4b94      	ldr	r3, [pc, #592]	; (80042bc <main+0x708>)
 800406c:	711a      	strb	r2, [r3, #4]

	    tcWrite[5] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) / 10;
 800406e:	4b94      	ldr	r3, [pc, #592]	; (80042c0 <main+0x70c>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b94      	ldr	r3, [pc, #592]	; (80042c4 <main+0x710>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	4b93      	ldr	r3, [pc, #588]	; (80042c8 <main+0x714>)
 800407a:	5c5b      	ldrb	r3, [r3, r1]
 800407c:	4619      	mov	r1, r3
 800407e:	460b      	mov	r3, r1
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a5b      	subs	r3, r3, r1
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	fbb2 f1f3 	udiv	r1, r2, r3
 800408a:	4b90      	ldr	r3, [pc, #576]	; (80042cc <main+0x718>)
 800408c:	fba3 2301 	umull	r2, r3, r3, r1
 8004090:	095a      	lsrs	r2, r3, #5
 8004092:	4613      	mov	r3, r2
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	1aca      	subs	r2, r1, r3
 800409c:	4b8c      	ldr	r3, [pc, #560]	; (80042d0 <main+0x71c>)
 800409e:	fba3 2302 	umull	r2, r3, r3, r2
 80040a2:	08db      	lsrs	r3, r3, #3
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	4b85      	ldr	r3, [pc, #532]	; (80042bc <main+0x708>)
 80040a8:	715a      	strb	r2, [r3, #5]
	    tcWrite[5] |= (tcIN[2] & 0xF0);
 80040aa:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <main+0x720>)
 80040ac:	789b      	ldrb	r3, [r3, #2]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80040b4:	4b81      	ldr	r3, [pc, #516]	; (80042bc <main+0x708>)
 80040b6:	795b      	ldrb	r3, [r3, #5]
 80040b8:	b25a      	sxtb	r2, r3
 80040ba:	b24b      	sxtb	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	4b7e      	ldr	r3, [pc, #504]	; (80042bc <main+0x708>)
 80040c4:	715a      	strb	r2, [r3, #5]

	    tcWrite[6] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) % 10;
 80040c6:	4b7e      	ldr	r3, [pc, #504]	; (80042c0 <main+0x70c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a7e      	ldr	r2, [pc, #504]	; (80042c4 <main+0x710>)
 80040cc:	7812      	ldrb	r2, [r2, #0]
 80040ce:	4611      	mov	r1, r2
 80040d0:	4a7d      	ldr	r2, [pc, #500]	; (80042c8 <main+0x714>)
 80040d2:	5c52      	ldrb	r2, [r2, r1]
 80040d4:	4611      	mov	r1, r2
 80040d6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80040da:	fb02 f201 	mul.w	r2, r2, r1
 80040de:	fbb3 f1f2 	udiv	r1, r3, r2
 80040e2:	4b7b      	ldr	r3, [pc, #492]	; (80042d0 <main+0x71c>)
 80040e4:	fba3 2301 	umull	r2, r3, r3, r1
 80040e8:	08da      	lsrs	r2, r3, #3
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	1aca      	subs	r2, r1, r3
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	4b71      	ldr	r3, [pc, #452]	; (80042bc <main+0x708>)
 80040f8:	719a      	strb	r2, [r3, #6]
	    tcWrite[6] |= (tcIN[1] & 0xF0);
 80040fa:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <main+0x720>)
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8004104:	4b6d      	ldr	r3, [pc, #436]	; (80042bc <main+0x708>)
 8004106:	799b      	ldrb	r3, [r3, #6]
 8004108:	b25a      	sxtb	r2, r3
 800410a:	b24b      	sxtb	r3, r1
 800410c:	4313      	orrs	r3, r2
 800410e:	b25b      	sxtb	r3, r3
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4b6a      	ldr	r3, [pc, #424]	; (80042bc <main+0x708>)
 8004114:	719a      	strb	r2, [r3, #6]

	    tcWrite[7] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) / 10;
 8004116:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <main+0x70c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6a      	ldr	r2, [pc, #424]	; (80042c4 <main+0x710>)
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	4611      	mov	r1, r2
 8004120:	4a69      	ldr	r2, [pc, #420]	; (80042c8 <main+0x714>)
 8004122:	5c52      	ldrb	r2, [r2, r1]
 8004124:	4611      	mov	r1, r2
 8004126:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800412a:	fb02 f201 	mul.w	r2, r2, r1
 800412e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004132:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <main+0x71c>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	b2da      	uxtb	r2, r3
 800413c:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <main+0x708>)
 800413e:	71da      	strb	r2, [r3, #7]
	    tcWrite[7] |= (tcIN[0] & 0xF0);
 8004140:	4b64      	ldr	r3, [pc, #400]	; (80042d4 <main+0x720>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <main+0x708>)
 800414c:	79db      	ldrb	r3, [r3, #7]
 800414e:	b25a      	sxtb	r2, r3
 8004150:	b24b      	sxtb	r3, r1
 8004152:	4313      	orrs	r3, r2
 8004154:	b25b      	sxtb	r3, r3
 8004156:	b2da      	uxtb	r2, r3
 8004158:	4b58      	ldr	r3, [pc, #352]	; (80042bc <main+0x708>)
 800415a:	71da      	strb	r2, [r3, #7]

	    hr = (clockFrameOutput / frameRateDivisor[frameRate]) / 3600;
 800415c:	4b58      	ldr	r3, [pc, #352]	; (80042c0 <main+0x70c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a58      	ldr	r2, [pc, #352]	; (80042c4 <main+0x710>)
 8004162:	7812      	ldrb	r2, [r2, #0]
 8004164:	4611      	mov	r1, r2
 8004166:	4a58      	ldr	r2, [pc, #352]	; (80042c8 <main+0x714>)
 8004168:	5c52      	ldrb	r2, [r2, r1]
 800416a:	fbb3 f3f2 	udiv	r3, r3, r2
 800416e:	4a5a      	ldr	r2, [pc, #360]	; (80042d8 <main+0x724>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	0adb      	lsrs	r3, r3, #11
 8004176:	b2da      	uxtb	r2, r3
 8004178:	4b58      	ldr	r3, [pc, #352]	; (80042dc <main+0x728>)
 800417a:	701a      	strb	r2, [r3, #0]
		mn = ((clockFrameOutput / frameRateDivisor[frameRate]) / 60 ) % 60;
 800417c:	4b50      	ldr	r3, [pc, #320]	; (80042c0 <main+0x70c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <main+0x710>)
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	4611      	mov	r1, r2
 8004186:	4a50      	ldr	r2, [pc, #320]	; (80042c8 <main+0x714>)
 8004188:	5c52      	ldrb	r2, [r2, r1]
 800418a:	fbb3 f3f2 	udiv	r3, r3, r2
 800418e:	4a4f      	ldr	r2, [pc, #316]	; (80042cc <main+0x718>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	0959      	lsrs	r1, r3, #5
 8004196:	4b4d      	ldr	r3, [pc, #308]	; (80042cc <main+0x718>)
 8004198:	fba3 2301 	umull	r2, r3, r3, r1
 800419c:	095a      	lsrs	r2, r3, #5
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	1aca      	subs	r2, r1, r3
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	4b4d      	ldr	r3, [pc, #308]	; (80042e0 <main+0x72c>)
 80041ac:	701a      	strb	r2, [r3, #0]
		sc = (clockFrameOutput / frameRateDivisor[frameRate]) % 60;
 80041ae:	4b44      	ldr	r3, [pc, #272]	; (80042c0 <main+0x70c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a44      	ldr	r2, [pc, #272]	; (80042c4 <main+0x710>)
 80041b4:	7812      	ldrb	r2, [r2, #0]
 80041b6:	4611      	mov	r1, r2
 80041b8:	4a43      	ldr	r2, [pc, #268]	; (80042c8 <main+0x714>)
 80041ba:	5c52      	ldrb	r2, [r2, r1]
 80041bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80041c0:	4b42      	ldr	r3, [pc, #264]	; (80042cc <main+0x718>)
 80041c2:	fba3 2301 	umull	r2, r3, r3, r1
 80041c6:	095a      	lsrs	r2, r3, #5
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	1aca      	subs	r2, r1, r3
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	4b43      	ldr	r3, [pc, #268]	; (80042e4 <main+0x730>)
 80041d6:	701a      	strb	r2, [r3, #0]
		fr = clockFrameOutput % frameRateDivisor[frameRate];
 80041d8:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <main+0x70c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a39      	ldr	r2, [pc, #228]	; (80042c4 <main+0x710>)
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4a39      	ldr	r2, [pc, #228]	; (80042c8 <main+0x714>)
 80041e4:	5c52      	ldrb	r2, [r2, r1]
 80041e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80041ea:	fb02 f201 	mul.w	r2, r2, r1
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4b3d      	ldr	r3, [pc, #244]	; (80042e8 <main+0x734>)
 80041f4:	701a      	strb	r2, [r3, #0]


	    	    int oneBits = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
	    for (int i=0; i<10; i++){
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	2b09      	cmp	r3, #9
 8004202:	dc1b      	bgt.n	800423c <main+0x688>
	    	for (int b=0; b<8; b++){
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b07      	cmp	r3, #7
 800420c:	dc12      	bgt.n	8004234 <main+0x680>
	    		if (bitRead(tcWrite[i],b) == 1){
 800420e:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <main+0x708>)
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	4413      	add	r3, r2
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	fa42 f303 	asr.w	r3, r2, r3
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <main+0x678>
	    			oneBits++;
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	3301      	adds	r3, #1
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
	    	for (int b=0; b<8; b++){
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	3301      	adds	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	e7e9      	b.n	8004208 <main+0x654>
	    for (int i=0; i<10; i++){
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	3301      	adds	r3, #1
 8004238:	623b      	str	r3, [r7, #32]
 800423a:	e7e0      	b.n	80041fe <main+0x64a>
	    		}
	    	}
	    }
	    if (oneBits % 2 > 0){
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	2b00      	cmp	r3, #0
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	bfb8      	it	lt
 8004246:	425b      	neglt	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	dd07      	ble.n	800425c <main+0x6a8>
	    	((tcWrite[7]) |= (1UL << (3)));
 800424c:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <main+0x708>)
 800424e:	79db      	ldrb	r3, [r3, #7]
 8004250:	f043 0308 	orr.w	r3, r3, #8
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4b19      	ldr	r3, [pc, #100]	; (80042bc <main+0x708>)
 8004258:	71da      	strb	r2, [r3, #7]
 800425a:	e006      	b.n	800426a <main+0x6b6>
	    } else {
	    	((tcWrite[7]) &= ~(1UL << (3)));
 800425c:	4b17      	ldr	r3, [pc, #92]	; (80042bc <main+0x708>)
 800425e:	79db      	ldrb	r3, [r3, #7]
 8004260:	f023 0308 	bic.w	r3, r3, #8
 8004264:	b2da      	uxtb	r2, r3
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <main+0x708>)
 8004268:	71da      	strb	r2, [r3, #7]


	  

//button handlers
if(GPIOC -> IDR & GPIO_PIN_13){	//Menu button
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <main+0x738>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d063      	beq.n	8004348 <main+0x794>
    }
    else {
      displayTimer = HAL_GetTick();
displayOn = true;
    }*/
    displayTimer = HAL_GetTick();
 8004280:	f002 f844 	bl	800630c <HAL_GetTick>
 8004284:	4603      	mov	r3, r0
 8004286:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <main+0x73c>)
 8004288:	6013      	str	r3, [r2, #0]
displayOn = true;
 800428a:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <main+0x740>)
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
menuButton = true;
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <main+0x744>)
 8004292:	2201      	movs	r2, #1
 8004294:	701a      	strb	r2, [r3, #0]
if(HAL_GetTick() - menuButtonTime > 1000 && !isLocked){
 8004296:	f002 f839 	bl	800630c <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	4b17      	ldr	r3, [pc, #92]	; (80042fc <main+0x748>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a6:	d92d      	bls.n	8004304 <main+0x750>
 80042a8:	4b15      	ldr	r3, [pc, #84]	; (8004300 <main+0x74c>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f083 0301 	eor.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d026      	beq.n	8004304 <main+0x750>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e025      	b.n	8004306 <main+0x752>
 80042ba:	bf00      	nop
 80042bc:	20000644 	.word	0x20000644
 80042c0:	20000630 	.word	0x20000630
 80042c4:	200000a9 	.word	0x200000a9
 80042c8:	20000034 	.word	0x20000034
 80042cc:	88888889 	.word	0x88888889
 80042d0:	cccccccd 	.word	0xcccccccd
 80042d4:	200000a0 	.word	0x200000a0
 80042d8:	91a2b3c5 	.word	0x91a2b3c5
 80042dc:	200000c0 	.word	0x200000c0
 80042e0:	200000c1 	.word	0x200000c1
 80042e4:	200000c2 	.word	0x200000c2
 80042e8:	200000c3 	.word	0x200000c3
 80042ec:	48000800 	.word	0x48000800
 80042f0:	20000668 	.word	0x20000668
 80042f4:	20000060 	.word	0x20000060
 80042f8:	20000680 	.word	0x20000680
 80042fc:	20000684 	.word	0x20000684
 8004300:	20000670 	.word	0x20000670
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d026      	beq.n	8004358 <main+0x7a4>
  menuItem = 0;
 800430a:	4b9e      	ldr	r3, [pc, #632]	; (8004584 <main+0x9d0>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
  menuItemSelect = false;
 8004310:	4b9d      	ldr	r3, [pc, #628]	; (8004588 <main+0x9d4>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
  updateDisplay(d_menu);
 8004316:	2002      	movs	r0, #2
 8004318:	f7fd fa34 	bl	8001784 <_Z13updateDisplayh>
  menuLoop();
 800431c:	f7fe fd94 	bl	8002e48 <_Z8menuLoopv>
  //updateDisplay(d_userBits);
  //userBitMenu();
  updateWrite = updateEEPROM();
 8004320:	f001 f898 	bl	8005454 <_Z12updateEEPROMv>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	4b98      	ldr	r3, [pc, #608]	; (800458c <main+0x9d8>)
 800432a:	701a      	strb	r2, [r3, #0]
  displayTimer = HAL_GetTick();
 800432c:	f001 ffee 	bl	800630c <HAL_GetTick>
 8004330:	4603      	mov	r3, r0
 8004332:	4a97      	ldr	r2, [pc, #604]	; (8004590 <main+0x9dc>)
 8004334:	6013      	str	r3, [r2, #0]
  updateDisplay(0x1);
 8004336:	2001      	movs	r0, #1
 8004338:	f7fd fa24 	bl	8001784 <_Z13updateDisplayh>
  menuButtonTime = HAL_GetTick();
 800433c:	f001 ffe6 	bl	800630c <HAL_GetTick>
 8004340:	4603      	mov	r3, r0
 8004342:	4a94      	ldr	r2, [pc, #592]	; (8004594 <main+0x9e0>)
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e007      	b.n	8004358 <main+0x7a4>

}
	    }
      else {
        menuButton = false;
 8004348:	4b93      	ldr	r3, [pc, #588]	; (8004598 <main+0x9e4>)
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
        menuButtonTime = HAL_GetTick();
 800434e:	f001 ffdd 	bl	800630c <HAL_GetTick>
 8004352:	4603      	mov	r3, r0
 8004354:	4a8f      	ldr	r2, [pc, #572]	; (8004594 <main+0x9e0>)
 8004356:	6013      	str	r3, [r2, #0]
      }

if(GPIOB -> IDR & GPIO_PIN_8){	//Up button
 8004358:	4b90      	ldr	r3, [pc, #576]	; (800459c <main+0x9e8>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d013      	beq.n	8004396 <main+0x7e2>
displayTimer = HAL_GetTick();
 800436e:	f001 ffcd 	bl	800630c <HAL_GetTick>
 8004372:	4603      	mov	r3, r0
 8004374:	4a86      	ldr	r2, [pc, #536]	; (8004590 <main+0x9dc>)
 8004376:	6013      	str	r3, [r2, #0]
displayOn = true;
 8004378:	4b89      	ldr	r3, [pc, #548]	; (80045a0 <main+0x9ec>)
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
upButton = true;
 800437e:	4b89      	ldr	r3, [pc, #548]	; (80045a4 <main+0x9f0>)
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
if (HAL_GetTick() - upButtonTime > 2000){
 8004384:	f001 ffc2 	bl	800630c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	4b87      	ldr	r3, [pc, #540]	; (80045a8 <main+0x9f4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004394:	e007      	b.n	80043a6 <main+0x7f2>
  //User Bits
}

	    }
      else {
        upButton = false;
 8004396:	4b83      	ldr	r3, [pc, #524]	; (80045a4 <main+0x9f0>)
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
        upButtonTime = HAL_GetTick();
 800439c:	f001 ffb6 	bl	800630c <HAL_GetTick>
 80043a0:	4603      	mov	r3, r0
 80043a2:	4a81      	ldr	r2, [pc, #516]	; (80045a8 <main+0x9f4>)
 80043a4:	6013      	str	r3, [r2, #0]
      }
if(GPIOB -> IDR & GPIO_PIN_9){	//Down button
 80043a6:	4b7d      	ldr	r3, [pc, #500]	; (800459c <main+0x9e8>)
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <main+0x81a>
displayTimer = HAL_GetTick();
 80043bc:	f001 ffa6 	bl	800630c <HAL_GetTick>
 80043c0:	4603      	mov	r3, r0
 80043c2:	4a73      	ldr	r2, [pc, #460]	; (8004590 <main+0x9dc>)
 80043c4:	6013      	str	r3, [r2, #0]
displayOn = true;
 80043c6:	4b76      	ldr	r3, [pc, #472]	; (80045a0 <main+0x9ec>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e007      	b.n	80043de <main+0x82a>

	    }
      else{
        downButton = false;
 80043ce:	4b77      	ldr	r3, [pc, #476]	; (80045ac <main+0x9f8>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
        downButtonTime = HAL_GetTick();
 80043d4:	f001 ff9a 	bl	800630c <HAL_GetTick>
 80043d8:	4603      	mov	r3, r0
 80043da:	4a75      	ldr	r2, [pc, #468]	; (80045b0 <main+0x9fc>)
 80043dc:	6013      	str	r3, [r2, #0]
      }

if(GPIOA -> IDR & GPIO_PIN_0){  //Power button
 80043de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d048      	beq.n	8004488 <main+0x8d4>
  if (!isLocked){
 80043f6:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <main+0xa00>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	f083 0301 	eor.w	r3, r3, #1
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d041      	beq.n	8004488 <main+0x8d4>
  updateDisplay(0x4);
 8004404:	2004      	movs	r0, #4
 8004406:	f7fd f9bd 	bl	8001784 <_Z13updateDisplayh>
  uint32_t currentTime = HAL_GetTick();
 800440a:	f001 ff7f 	bl	800630c <HAL_GetTick>
 800440e:	6178      	str	r0, [r7, #20]
  while (GPIOA -> IDR & GPIO_PIN_0){
 8004410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02f      	beq.n	8004488 <main+0x8d4>
    powerCountdown =3 - ((HAL_GetTick() - currentTime)/1000);
 8004428:	f001 ff70 	bl	800630c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	4a61      	ldr	r2, [pc, #388]	; (80045b8 <main+0xa04>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	099b      	lsrs	r3, r3, #6
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f1c3 0303 	rsb	r3, r3, #3
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4b5e      	ldr	r3, [pc, #376]	; (80045bc <main+0xa08>)
 8004444:	701a      	strb	r2, [r3, #0]
    if (!powerOff){updateDisplay(0x4);}
 8004446:	4b5e      	ldr	r3, [pc, #376]	; (80045c0 <main+0xa0c>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	f083 0301 	eor.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <main+0x8a6>
 8004454:	2004      	movs	r0, #4
 8004456:	f7fd f995 	bl	8001784 <_Z13updateDisplayh>
    if (HAL_GetTick() - currentTime > 4000){
 800445a:	f001 ff57 	bl	800630c <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004468:	bf8c      	ite	hi
 800446a:	2301      	movhi	r3, #1
 800446c:	2300      	movls	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0cd      	beq.n	8004410 <main+0x85c>
      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8004474:	2001      	movs	r0, #1
 8004476:	f004 fad3 	bl	8008a20 <HAL_PWR_EnableWakeUpPin>
      powerOff = true;
 800447a:	4b51      	ldr	r3, [pc, #324]	; (80045c0 <main+0xa0c>)
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
      updateDisplay(0x0);
 8004480:	2000      	movs	r0, #0
 8004482:	f7fd f97f 	bl	8001784 <_Z13updateDisplayh>
  while (GPIOA -> IDR & GPIO_PIN_0){
 8004486:	e7c3      	b.n	8004410 <main+0x85c>
    }
  }
}
  
}
if(powerOff){
 8004488:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <main+0xa0c>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <main+0x8f4>
    //updateDisplay(0x0);
    HAL_Delay(2000);
 8004490:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004494:	f001 ff46 	bl	8006324 <HAL_Delay>
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004498:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <main+0xa10>)
 800449a:	221f      	movs	r2, #31
 800449c:	619a      	str	r2, [r3, #24]
    HAL_PWR_EnterSTANDBYMode();
 800449e:	f004 fadf 	bl	8008a60 <HAL_PWR_EnterSTANDBYMode>
    powerUpMode = 0;
 80044a2:	4b49      	ldr	r3, [pc, #292]	; (80045c8 <main+0xa14>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
    
}

if(isLocked && GPIOB -> IDR & GPIO_PIN_9 && GPIOB -> IDR & GPIO_PIN_8){//Both
 80044a8:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <main+0xa00>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00d      	beq.n	80044cc <main+0x918>
 80044b0:	4b3a      	ldr	r3, [pc, #232]	; (800459c <main+0x9e8>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <main+0x918>
 80044bc:	4b37      	ldr	r3, [pc, #220]	; (800459c <main+0x9e8>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <main+0x918>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <main+0x91a>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04e      	beq.n	8004570 <main+0x9bc>
  if (!upButton && !downButton){
 80044d2:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <main+0x9f0>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
  
  }
  upButton = true;
 80044de:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <main+0x9f0>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
  downButton = true;
 80044e4:	4b31      	ldr	r3, [pc, #196]	; (80045ac <main+0x9f8>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
  buttonsHeld = true;
 80044ea:	4b38      	ldr	r3, [pc, #224]	; (80045cc <main+0xa18>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
         buttonsHeld = false;
	    	while (!isLocked && (GPIOB -> IDR & GPIO_PIN_9 || GPIOB -> IDR & GPIO_PIN_8)){
	    		updateDisplay(0x01);
	    		displayTimer = HAL_GetTick();
	    	}*/
        lockCountdown = 3 - ((HAL_GetTick() - lockTimer)/1000);
 80044f0:	f001 ff0c 	bl	800630c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <main+0xa1c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	4a2e      	ldr	r2, [pc, #184]	; (80045b8 <main+0xa04>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	099b      	lsrs	r3, r3, #6
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f1c3 0303 	rsb	r3, r3, #3
 800450a:	b2da      	uxtb	r2, r3
 800450c:	4b31      	ldr	r3, [pc, #196]	; (80045d4 <main+0xa20>)
 800450e:	701a      	strb	r2, [r3, #0]
        updateDisplay(0x03);
 8004510:	2003      	movs	r0, #3
 8004512:	f7fd f937 	bl	8001784 <_Z13updateDisplayh>
        if(HAL_GetTick() - upButtonTime > 3000 && HAL_GetTick() - downButtonTime > 3000){
 8004516:	f001 fef9 	bl	800630c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <main+0x9f4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004526:	4293      	cmp	r3, r2
 8004528:	d90b      	bls.n	8004542 <main+0x98e>
 800452a:	f001 feef 	bl	800630c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <main+0x9fc>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <main+0x98e>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <main+0x990>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	f43f ac12 	beq.w	8003d6e <main+0x1ba>
          isLocked = false;
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <main+0xa00>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
	    			displayTimer = HAL_GetTick();
 8004550:	f001 fedc 	bl	800630c <HAL_GetTick>
 8004554:	4603      	mov	r3, r0
 8004556:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <main+0x9dc>)
 8004558:	6013      	str	r3, [r2, #0]
            buttonsHeld = false;
 800455a:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <main+0xa18>)
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
            uptimeMinutes = 0;
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <main+0xa24>)
 8004562:	2200      	movs	r2, #0
 8004564:	801a      	strh	r2, [r3, #0]
          updateDisplay(0x0);
 8004566:	2000      	movs	r0, #0
 8004568:	f7fd f90c 	bl	8001784 <_Z13updateDisplayh>
 800456c:	f7ff bbff 	b.w	8003d6e <main+0x1ba>

        

}
else {
  buttonsHeld = false;
 8004570:	4b16      	ldr	r3, [pc, #88]	; (80045cc <main+0xa18>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
  lockTimer = HAL_GetTick();
 8004576:	f001 fec9 	bl	800630c <HAL_GetTick>
 800457a:	4603      	mov	r3, r0
 800457c:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <main+0xa1c>)
 800457e:	6013      	str	r3, [r2, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8004580:	f7ff bbf5 	b.w	8003d6e <main+0x1ba>
 8004584:	200000ef 	.word	0x200000ef
 8004588:	200000ee 	.word	0x200000ee
 800458c:	20000062 	.word	0x20000062
 8004590:	20000668 	.word	0x20000668
 8004594:	20000684 	.word	0x20000684
 8004598:	20000680 	.word	0x20000680
 800459c:	48000400 	.word	0x48000400
 80045a0:	20000060 	.word	0x20000060
 80045a4:	20000673 	.word	0x20000673
 80045a8:	20000674 	.word	0x20000674
 80045ac:	20000678 	.word	0x20000678
 80045b0:	2000067c 	.word	0x2000067c
 80045b4:	20000670 	.word	0x20000670
 80045b8:	10624dd3 	.word	0x10624dd3
 80045bc:	200000e0 	.word	0x200000e0
 80045c0:	20000671 	.word	0x20000671
 80045c4:	40007000 	.word	0x40007000
 80045c8:	20000672 	.word	0x20000672
 80045cc:	200000c6 	.word	0x200000c6
 80045d0:	2000066c 	.word	0x2000066c
 80045d4:	200000c7 	.word	0x200000c7
 80045d8:	200000ba 	.word	0x200000ba

080045dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b0ae      	sub	sp, #184	; 0xb8
 80045e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045e6:	2244      	movs	r2, #68	; 0x44
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f006 fae8 	bl	800abc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004600:	463b      	mov	r3, r7
 8004602:	2260      	movs	r2, #96	; 0x60
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f006 fada 	bl	800abc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800460c:	2301      	movs	r3, #1
 800460e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004610:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004614:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004616:	2302      	movs	r3, #2
 8004618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800461c:	2303      	movs	r3, #3
 800461e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8004622:	2302      	movs	r3, #2
 8004624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004628:	230a      	movs	r3, #10
 800462a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800462e:	2307      	movs	r3, #7
 8004630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004634:	2302      	movs	r3, #2
 8004636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800463a:	2304      	movs	r3, #4
 800463c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004640:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004644:	4618      	mov	r0, r3
 8004646:	f004 fa89 	bl	8008b5c <HAL_RCC_OscConfig>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800465a:	f000 ff5f 	bl	800551c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800465e:	230f      	movs	r3, #15
 8004660:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004662:	2303      	movs	r3, #3
 8004664:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004666:	2300      	movs	r3, #0
 8004668:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800466a:	2300      	movs	r3, #0
 800466c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800466e:	2300      	movs	r3, #0
 8004670:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004672:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004676:	2101      	movs	r1, #1
 8004678:	4618      	mov	r0, r3
 800467a:	f004 fe8f 	bl	800939c <HAL_RCC_ClockConfig>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800468e:	f000 ff45 	bl	800551c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8004692:	f246 03c0 	movw	r3, #24768	; 0x60c0
 8004696:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004698:	2300      	movs	r3, #0
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800469c:	2300      	movs	r3, #0
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80046a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046a4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80046a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80046ac:	2303      	movs	r3, #3
 80046ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80046b0:	2302      	movs	r3, #2
 80046b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 80046b4:	230a      	movs	r3, #10
 80046b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80046b8:	2307      	movs	r3, #7
 80046ba:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80046bc:	2302      	movs	r3, #2
 80046be:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80046c4:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80046c8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046ca:	463b      	mov	r3, r7
 80046cc:	4618      	mov	r0, r3
 80046ce:	f005 f867 	bl	80097a0 <HAL_RCCEx_PeriphCLKConfig>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80046e2:	f000 ff1b 	bl	800551c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80046e6:	2200      	movs	r2, #0
 80046e8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80046ec:	2000      	movs	r0, #0
 80046ee:	f004 ff37 	bl	8009560 <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80046f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80046f6:	f004 f9db 	bl	8008ab0 <HAL_PWREx_ControlVoltageScaling>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <SystemClock_Config+0x132>
  {
    Error_Handler();
 800470a:	f000 ff07 	bl	800551c <Error_Handler>
  }
}
 800470e:	bf00      	nop
 8004710:	37b8      	adds	r7, #184	; 0xb8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800471e:	463b      	mov	r3, r7
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	611a      	str	r2, [r3, #16]
 800472c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800472e:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004730:	4a2e      	ldr	r2, [pc, #184]	; (80047ec <_ZL12MX_ADC1_Initv+0xd4>)
 8004732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004734:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004736:	2200      	movs	r2, #0
 8004738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800473a:	4b2b      	ldr	r3, [pc, #172]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 800473c:	2200      	movs	r2, #0
 800473e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004740:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004742:	2200      	movs	r2, #0
 8004744:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004746:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004748:	2200      	movs	r2, #0
 800474a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800474c:	4b26      	ldr	r3, [pc, #152]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 800474e:	2204      	movs	r2, #4
 8004750:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004752:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004754:	2200      	movs	r2, #0
 8004756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004758:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 800475a:	2200      	movs	r2, #0
 800475c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004760:	2201      	movs	r2, #1
 8004762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800476c:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 800476e:	2200      	movs	r2, #0
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004772:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004774:	2200      	movs	r2, #0
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004778:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004780:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004782:	2200      	movs	r2, #0
 8004784:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800478e:	4816      	ldr	r0, [pc, #88]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 8004790:	f001 ffb4 	bl	80066fc <HAL_ADC_Init>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	bf14      	ite	ne
 800479a:	2301      	movne	r3, #1
 800479c:	2300      	moveq	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 80047a4:	f000 feba 	bl	800551c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <_ZL12MX_ADC1_Initv+0xd8>)
 80047aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047ac:	2306      	movs	r3, #6
 80047ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047b4:	237f      	movs	r3, #127	; 0x7f
 80047b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047b8:	2304      	movs	r3, #4
 80047ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047c0:	463b      	mov	r3, r7
 80047c2:	4619      	mov	r1, r3
 80047c4:	4808      	ldr	r0, [pc, #32]	; (80047e8 <_ZL12MX_ADC1_Initv+0xd0>)
 80047c6:	f002 f9d7 	bl	8006b78 <HAL_ADC_ConfigChannel>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 80047da:	f000 fe9f 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047de:	bf00      	nop
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	200000fc 	.word	0x200000fc
 80047ec:	50040000 	.word	0x50040000
 80047f0:	21800100 	.word	0x21800100

080047f4 <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	2224      	movs	r2, #36	; 0x24
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f006 f9dd 	bl	800abc0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004806:	4b17      	ldr	r3, [pc, #92]	; (8004864 <_ZL12MX_DAC1_Initv+0x70>)
 8004808:	4a17      	ldr	r2, [pc, #92]	; (8004868 <_ZL12MX_DAC1_Initv+0x74>)
 800480a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800480c:	4815      	ldr	r0, [pc, #84]	; (8004864 <_ZL12MX_DAC1_Initv+0x70>)
 800480e:	f002 fefc 	bl	800760a <HAL_DAC_Init>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 8004822:	f000 fe7b 	bl	800551c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004832:	2300      	movs	r3, #0
 8004834:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	2210      	movs	r2, #16
 800483e:	4619      	mov	r1, r3
 8004840:	4808      	ldr	r0, [pc, #32]	; (8004864 <_ZL12MX_DAC1_Initv+0x70>)
 8004842:	f002 ff68 	bl	8007716 <HAL_DAC_ConfigChannel>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 8004856:	f000 fe61 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800485a:	bf00      	nop
 800485c:	3728      	adds	r7, #40	; 0x28
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000160 	.word	0x20000160
 8004868:	40007400 	.word	0x40007400

0800486c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004870:	4b22      	ldr	r3, [pc, #136]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <_ZL12MX_I2C1_Initv+0x94>)
 8004874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8004876:	4b21      	ldr	r3, [pc, #132]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 8004878:	4a22      	ldr	r2, [pc, #136]	; (8004904 <_ZL12MX_I2C1_Initv+0x98>)
 800487a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800487c:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 800487e:	2200      	movs	r2, #0
 8004880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 8004884:	2201      	movs	r2, #1
 8004886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004888:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 800488a:	2200      	movs	r2, #0
 800488c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 8004890:	2200      	movs	r2, #0
 8004892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 8004896:	2200      	movs	r2, #0
 8004898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800489a:	4b18      	ldr	r3, [pc, #96]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 800489c:	2200      	movs	r2, #0
 800489e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048a6:	4815      	ldr	r0, [pc, #84]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 80048a8:	f003 f9ec 	bl	8007c84 <HAL_I2C_Init>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80048bc:	f000 fe2e 	bl	800551c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80048c0:	2100      	movs	r1, #0
 80048c2:	480e      	ldr	r0, [pc, #56]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 80048c4:	f003 feb8 	bl	8008638 <HAL_I2CEx_ConfigAnalogFilter>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80048d8:	f000 fe20 	bl	800551c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80048dc:	2100      	movs	r1, #0
 80048de:	4807      	ldr	r0, [pc, #28]	; (80048fc <_ZL12MX_I2C1_Initv+0x90>)
 80048e0:	f003 fef5 	bl	80086ce <HAL_I2CEx_ConfigDigitalFilter>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80048f4:	f000 fe12 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000174 	.word	0x20000174
 8004900:	40005400 	.word	0x40005400
 8004904:	00506682 	.word	0x00506682

08004908 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800490c:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 800490e:	4a25      	ldr	r2, [pc, #148]	; (80049a4 <_ZL12MX_I2C2_Initv+0x9c>)
 8004910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010030D;
 8004912:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 8004914:	4a24      	ldr	r2, [pc, #144]	; (80049a8 <_ZL12MX_I2C2_Initv+0xa0>)
 8004916:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004918:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800491e:	4b20      	ldr	r3, [pc, #128]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 8004920:	2201      	movs	r2, #1
 8004922:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004924:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800492a:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 800492c:	2200      	movs	r2, #0
 800492e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 8004932:	2200      	movs	r2, #0
 8004934:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 8004938:	2200      	movs	r2, #0
 800493a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800493c:	4b18      	ldr	r3, [pc, #96]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 800493e:	2200      	movs	r2, #0
 8004940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004942:	4817      	ldr	r0, [pc, #92]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 8004944:	f003 f99e 	bl	8007c84 <HAL_I2C_Init>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8004958:	f000 fde0 	bl	800551c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800495c:	2100      	movs	r1, #0
 800495e:	4810      	ldr	r0, [pc, #64]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 8004960:	f003 fe6a 	bl	8008638 <HAL_I2CEx_ConfigAnalogFilter>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8004974:	f000 fdd2 	bl	800551c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004978:	2100      	movs	r1, #0
 800497a:	4809      	ldr	r0, [pc, #36]	; (80049a0 <_ZL12MX_I2C2_Initv+0x98>)
 800497c:	f003 fea7 	bl	80086ce <HAL_I2CEx_ConfigDigitalFilter>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8004990:	f000 fdc4 	bl	800551c <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8004994:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004998:	f003 fee6 	bl	8008768 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800499c:	bf00      	nop
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	200001c0 	.word	0x200001c0
 80049a4:	40005800 	.word	0x40005800
 80049a8:	0010030d 	.word	0x0010030d

080049ac <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b2:	f107 0314 	add.w	r3, r7, #20
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
 80049bc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80049ca:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 80049cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80049d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24-1;
 80049d2:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 80049d4:	2217      	movs	r2, #23
 80049d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 80049da:	2200      	movs	r2, #0
 80049dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80049de:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 80049e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049e6:	4b21      	ldr	r3, [pc, #132]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ec:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80049f2:	481e      	ldr	r0, [pc, #120]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 80049f4:	f005 fae7 	bl	8009fc6 <HAL_TIM_IC_Init>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf14      	ite	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	2300      	moveq	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8004a08:	f000 fd88 	bl	800551c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4814      	ldr	r0, [pc, #80]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 8004a1c:	f005 ffb8 	bl	800a990 <HAL_TIMEx_MasterConfigSynchronization>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bf14      	ite	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	2300      	moveq	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8004a30:	f000 fd74 	bl	800551c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004a34:	230a      	movs	r3, #10
 8004a36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004a44:	1d3b      	adds	r3, r7, #4
 8004a46:	2208      	movs	r2, #8
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4808      	ldr	r0, [pc, #32]	; (8004a6c <_ZL12MX_TIM2_Initv+0xc0>)
 8004a4c:	f005 fd57 	bl	800a4fe <HAL_TIM_IC_ConfigChannel>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 8004a60:	f000 fd5c 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004a64:	bf00      	nop
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	2000020c 	.word	0x2000020c

08004a70 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004a80:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8004a82:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <_ZL12MX_TIM6_Initv+0x7c>)
 8004a84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8004a88:	2217      	movs	r2, #23
 8004a8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a8c:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8004a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a98:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a9a:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004aa0:	4811      	ldr	r0, [pc, #68]	; (8004ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8004aa2:	f005 f9b5 	bl	8009e10 <HAL_TIM_Base_Init>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8004ab6:	f000 fd31 	bl	800551c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4808      	ldr	r0, [pc, #32]	; (8004ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8004ac8:	f005 ff62 	bl	800a990 <HAL_TIMEx_MasterConfigSynchronization>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf14      	ite	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	2300      	moveq	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8004adc:	f000 fd1e 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000258 	.word	0x20000258
 8004aec:	40001000 	.word	0x40001000

08004af0 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af6:	1d3b      	adds	r3, r7, #4
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004b00:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <_ZL12MX_TIM7_Initv+0x78>)
 8004b02:	4a1a      	ldr	r2, [pc, #104]	; (8004b6c <_ZL12MX_TIM7_Initv+0x7c>)
 8004b04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8004b06:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <_ZL12MX_TIM7_Initv+0x78>)
 8004b08:	2213      	movs	r2, #19
 8004b0a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b0c:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <_ZL12MX_TIM7_Initv+0x78>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50049;
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <_ZL12MX_TIM7_Initv+0x78>)
 8004b14:	f24c 3281 	movw	r2, #50049	; 0xc381
 8004b18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b1a:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <_ZL12MX_TIM7_Initv+0x78>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004b20:	4811      	ldr	r0, [pc, #68]	; (8004b68 <_ZL12MX_TIM7_Initv+0x78>)
 8004b22:	f005 f975 	bl	8009e10 <HAL_TIM_Base_Init>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 8004b36:	f000 fcf1 	bl	800551c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004b42:	1d3b      	adds	r3, r7, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4808      	ldr	r0, [pc, #32]	; (8004b68 <_ZL12MX_TIM7_Initv+0x78>)
 8004b48:	f005 ff22 	bl	800a990 <HAL_TIMEx_MasterConfigSynchronization>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8004b5c:	f000 fcde 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004b60:	bf00      	nop
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	200002a4 	.word	0x200002a4
 8004b6c:	40001400 	.word	0x40001400

08004b70 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <_ZL13MX_TIM16_Initv+0x50>)
 8004b76:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <_ZL13MX_TIM16_Initv+0x54>)
 8004b78:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <_ZL13MX_TIM16_Initv+0x50>)
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <_ZL13MX_TIM16_Initv+0x50>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3128-1;
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <_ZL13MX_TIM16_Initv+0x50>)
 8004b88:	f640 4237 	movw	r2, #3127	; 0xc37
 8004b8c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <_ZL13MX_TIM16_Initv+0x50>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <_ZL13MX_TIM16_Initv+0x50>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <_ZL13MX_TIM16_Initv+0x50>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004ba0:	4807      	ldr	r0, [pc, #28]	; (8004bc0 <_ZL13MX_TIM16_Initv+0x50>)
 8004ba2:	f005 f935 	bl	8009e10 <HAL_TIM_Base_Init>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8004bb6:	f000 fcb1 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200002f0 	.word	0x200002f0
 8004bc4:	40014400 	.word	0x40014400

08004bc8 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004bce:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <_ZL15MX_USB_PCD_Initv+0x58>)
 8004bd0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004bd8:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004bda:	2202      	movs	r2, #2
 8004bdc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004bde:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004be0:	2202      	movs	r2, #2
 8004be2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004bfc:	4807      	ldr	r0, [pc, #28]	; (8004c1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8004bfe:	f003 fdd3 	bl	80087a8 <HAL_PCD_Init>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8004c12:	f000 fc83 	bl	800551c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	2000033c 	.word	0x2000033c
 8004c20:	40006800 	.word	0x40006800

08004c24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c2a:	f107 0314 	add.w	r3, r7, #20
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	60da      	str	r2, [r3, #12]
 8004c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c3a:	4b41      	ldr	r3, [pc, #260]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	4a40      	ldr	r2, [pc, #256]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	4a3a      	ldr	r2, [pc, #232]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c5e:	4b38      	ldr	r3, [pc, #224]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6a:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	4a34      	ldr	r2, [pc, #208]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c76:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c82:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	4a2e      	ldr	r2, [pc, #184]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c88:	f043 0302 	orr.w	r3, r3, #2
 8004c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c8e:	4b2c      	ldr	r3, [pc, #176]	; (8004d40 <_ZL12MX_GPIO_Initv+0x11c>)
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f241 0102 	movw	r1, #4098	; 0x1002
 8004ca0:	4828      	ldr	r0, [pc, #160]	; (8004d44 <_ZL12MX_GPIO_Initv+0x120>)
 8004ca2:	f002 ffd7 	bl	8007c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb4:	f107 0314 	add.w	r3, r7, #20
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4823      	ldr	r0, [pc, #140]	; (8004d48 <_ZL12MX_GPIO_Initv+0x124>)
 8004cbc:	f002 fe50 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = TC_OUT_Pin|LED_STATUS_Pin;
 8004cc0:	f241 0302 	movw	r3, #4098	; 0x1002
 8004cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cd2:	f107 0314 	add.w	r3, r7, #20
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	481a      	ldr	r0, [pc, #104]	; (8004d44 <_ZL12MX_GPIO_Initv+0x120>)
 8004cda:	f002 fe41 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC_Pin */
  GPIO_InitStruct.Pin = OSC_Pin;
 8004cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cec:	2300      	movs	r3, #0
 8004cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OSC_GPIO_Port, &GPIO_InitStruct);
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cfe:	f002 fe2f 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin;
 8004d02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d10:	f107 0314 	add.w	r3, r7, #20
 8004d14:	4619      	mov	r1, r3
 8004d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d1a:	f002 fe21 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_B_Pin;
 8004d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2c:	f107 0314 	add.w	r3, r7, #20
 8004d30:	4619      	mov	r1, r3
 8004d32:	4804      	ldr	r0, [pc, #16]	; (8004d44 <_ZL12MX_GPIO_Initv+0x120>)
 8004d34:	f002 fe14 	bl	8007960 <HAL_GPIO_Init>

}
 8004d38:	bf00      	nop
 8004d3a:	3728      	adds	r7, #40	; 0x28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	48000400 	.word	0x48000400
 8004d48:	48000800 	.word	0x48000800

08004d4c <HAL_TIM_IC_CaptureCallback>:
    HAL_NVIC_SystemReset();
  
}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
    //if ( GPIO_Pin == GPIO_PIN_8)
	if (htim->Instance == TIM2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5c:	f040 80f4 	bne.w	8004f48 <HAL_TIM_IC_CaptureCallback+0x1fc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d60:	b672      	cpsid	i
}
 8004d62:	bf00      	nop
		__disable_irq();
/* 
    Credit for this loop to read out the timecode:
    https://forum.arduino.cc/t/smpte-jam-sync/529740/4
*/
    	edgeTimeDiff = __HAL_TIM_GetCounter(htim);          // Get time difference between this and last edge
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	4a7a      	ldr	r2, [pc, #488]	; (8004f54 <HAL_TIM_IC_CaptureCallback+0x208>)
 8004d6c:	6013      	str	r3, [r2, #0]

    	__HAL_TIM_SetCounter(htim,0);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24
    	                                    // Store time of this edge



    	  if ((edgeTimeDiff < uMin1) or (edgeTimeDiff > uMax0)) { // Drop out now if edge time not withing bounds
 8004d76:	4b77      	ldr	r3, [pc, #476]	; (8004f54 <HAL_TIM_IC_CaptureCallback+0x208>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b81      	cmp	r3, #129	; 0x81
 8004d7c:	d904      	bls.n	8004d88 <HAL_TIM_IC_CaptureCallback+0x3c>
 8004d7e:	4b75      	ldr	r3, [pc, #468]	; (8004f54 <HAL_TIM_IC_CaptureCallback+0x208>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
 8004d86:	d301      	bcc.n	8004d8c <HAL_TIM_IC_CaptureCallback+0x40>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <HAL_TIM_IC_CaptureCallback+0x42>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <HAL_TIM_IC_CaptureCallback+0x62>
    	    bitSet(tcFlags, tcFrameError);
 8004d92:	4b71      	ldr	r3, [pc, #452]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	4b6e      	ldr	r3, [pc, #440]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004da0:	701a      	strb	r2, [r3, #0]
    	    jamCount = 0;
 8004da2:	4b6e      	ldr	r3, [pc, #440]	; (8004f5c <HAL_TIM_IC_CaptureCallback+0x210>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004da8:	b662      	cpsie	i
}
 8004daa:	bf00      	nop
    	    __enable_irq();
    	    //Offset++;
    	    return;
 8004dac:	e0ce      	b.n	8004f4c <HAL_TIM_IC_CaptureCallback+0x200>
    	  }

    	  if (edgeTimeDiff > uMax1)                               // A zero bit arrived
 8004dae:	4b69      	ldr	r3, [pc, #420]	; (8004f54 <HAL_TIM_IC_CaptureCallback+0x208>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8004db6:	bf8c      	ite	hi
 8004db8:	2301      	movhi	r3, #1
 8004dba:	2300      	movls	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d020      	beq.n	8004e04 <HAL_TIM_IC_CaptureCallback+0xb8>
    	  {
    	    if (bitRead(tcFlags, tcHalfOne) == 1){                // But we are expecting a 1 edge
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	111b      	asrs	r3, r3, #4
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00e      	beq.n	8004dfa <HAL_TIM_IC_CaptureCallback+0xae>
    	      bitClear(tcFlags, tcHalfOne);
 8004ddc:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f023 0310 	bic.w	r3, r3, #16
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004dea:	701a      	strb	r2, [r3, #0]
    	      clearBuffer(tc, sizeof(tc)); //TODO WHAT DOES?
 8004dec:	210a      	movs	r1, #10
 8004dee:	485c      	ldr	r0, [pc, #368]	; (8004f60 <HAL_TIM_IC_CaptureCallback+0x214>)
 8004df0:	f000 f8be 	bl	8004f70 <_Z11clearBufferPhh>
  __ASM volatile ("cpsie i" : : : "memory");
 8004df4:	b662      	cpsie	i
}
 8004df6:	bf00      	nop
    	      __enable_irq();
    	      return;
 8004df8:	e0a8      	b.n	8004f4c <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // 0 bit
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 8004dfa:	210a      	movs	r1, #10
 8004dfc:	4858      	ldr	r0, [pc, #352]	; (8004f60 <HAL_TIM_IC_CaptureCallback+0x214>)
 8004dfe:	f000 f8d3 	bl	8004fa8 <_Z10shiftRightPhh>
 8004e02:	e029      	b.n	8004e58 <HAL_TIM_IC_CaptureCallback+0x10c>
    	    // Shift replaces top bit with zero so nothing else to do
    	    //bitClear(tc[0], 7);                                   // Reset the 1 bit in the buffer
    	  }
    	  else                                                    // Not zero so must be a 1 bit
    	  { // 1 bit
    	    if (bitRead(tcFlags, tcHalfOne) == 0){                // First edge of a 1 bit
 8004e04:	4b54      	ldr	r3, [pc, #336]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf0c      	ite	eq
 8004e12:	2301      	moveq	r3, #1
 8004e14:	2300      	movne	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_TIM_IC_CaptureCallback+0xe6>
    	      bitSet(tcFlags, tcHalfOne);                         // Flag we have the first half
 8004e1c:	4b4e      	ldr	r3, [pc, #312]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f043 0310 	orr.w	r3, r3, #16
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e2a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e2c:	b662      	cpsie	i
}
 8004e2e:	bf00      	nop
    	      __enable_irq();
    	      return;
 8004e30:	e08c      	b.n	8004f4c <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // Second edge of a 1 bit
    	    bitClear(tcFlags, tcHalfOne);                         // Clear half 1 flag
 8004e32:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f023 0310 	bic.w	r3, r3, #16
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	4b46      	ldr	r3, [pc, #280]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e40:	701a      	strb	r2, [r3, #0]
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 8004e42:	210a      	movs	r1, #10
 8004e44:	4846      	ldr	r0, [pc, #280]	; (8004f60 <HAL_TIM_IC_CaptureCallback+0x214>)
 8004e46:	f000 f8af 	bl	8004fa8 <_Z10shiftRightPhh>
    	    bitSet(tc[0], 7);                                     // Set the 1 bit in the buffer
 8004e4a:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <HAL_TIM_IC_CaptureCallback+0x214>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <HAL_TIM_IC_CaptureCallback+0x214>)
 8004e56:	701a      	strb	r2, [r3, #0]
    	  }
    	  // Congratulations, we have managed to read a valid 0 or 1 bit into buffer
    	  if (uint16_t( (tc[0] << 8) | (tc[1] & 0xff) ) == sync){                        // Last 2 bytes read = sync?
 8004e58:	4b41      	ldr	r3, [pc, #260]	; (8004f60 <HAL_TIM_IC_CaptureCallback+0x214>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	b21a      	sxth	r2, r3
 8004e60:	4b3f      	ldr	r3, [pc, #252]	; (8004f60 <HAL_TIM_IC_CaptureCallback+0x214>)
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b21b      	sxth	r3, r3
 8004e6a:	4a3e      	ldr	r2, [pc, #248]	; (8004f64 <HAL_TIM_IC_CaptureCallback+0x218>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d16b      	bne.n	8004f48 <HAL_TIM_IC_CaptureCallback+0x1fc>
    	    bitClear(tcFlags, tcFrameError);                      // Clear framing error
 8004e70:	4b39      	ldr	r3, [pc, #228]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f023 0302 	bic.w	r3, r3, #2
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e7e:	701a      	strb	r2, [r3, #0]
    	    bitClear(tcFlags, tcOverrun);                         // Clear overrun error
 8004e80:	4b35      	ldr	r3, [pc, #212]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	f023 0304 	bic.w	r3, r3, #4
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e8e:	701a      	strb	r2, [r3, #0]
    	    if (bitRead(tcFlags, tcForceUpdate) == 1){
 8004e90:	4b31      	ldr	r3, [pc, #196]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	10db      	asrs	r3, r3, #3
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf0c      	ite	eq
 8004ea0:	2301      	moveq	r3, #1
 8004ea2:	2300      	movne	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <HAL_TIM_IC_CaptureCallback+0x16e>
    	      bitClear(tcFlags, tcValid);                         // Signal last TC read
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004eb8:	701a      	strb	r2, [r3, #0]
    	    }
    	    if (bitRead(tcFlags, tcValid) == 1){                  // Last TC not read
 8004eba:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <HAL_TIM_IC_CaptureCallback+0x196>
    	      bitSet(tcFlags, tcOverrun);                         // Flag overrun error
 8004ed2:	4b21      	ldr	r3, [pc, #132]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004ee0:	701a      	strb	r2, [r3, #0]
    	     // __enable_irq();
    	     // return;                                             // Do nothing else
    	    }
    	    //if (jamEnable){
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b07      	cmp	r3, #7
 8004eea:	d80a      	bhi.n	8004f02 <HAL_TIM_IC_CaptureCallback+0x1b6>
    	    		tcIN[x] = tc[x + 2];
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	1c9a      	adds	r2, r3, #2
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	491b      	ldr	r1, [pc, #108]	; (8004f60 <HAL_TIM_IC_CaptureCallback+0x214>)
 8004ef4:	5c89      	ldrb	r1, [r1, r2]
 8004ef6:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8004ef8:	54d1      	strb	r1, [r2, r3]
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	3301      	adds	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
 8004f00:	e7f1      	b.n	8004ee6 <HAL_TIM_IC_CaptureCallback+0x19a>
    	    	}
    	    //}
    	    bitSet(tcFlags, tcValid);                             // Signal valid TC
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004f10:	701a      	strb	r2, [r3, #0]
    	    jamCount++;
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <HAL_TIM_IC_CaptureCallback+0x210>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <HAL_TIM_IC_CaptureCallback+0x210>)
 8004f1e:	701a      	strb	r2, [r3, #0]
    	    if (jamCount > 23){
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_TIM_IC_CaptureCallback+0x210>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b17      	cmp	r3, #23
 8004f28:	bf8c      	ite	hi
 8004f2a:	2301      	movhi	r3, #1
 8004f2c:	2300      	movls	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <HAL_TIM_IC_CaptureCallback+0x1f8>
    	    	//jamEnable = false;
    	    	jamCount = 0;
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_TIM_IC_CaptureCallback+0x210>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	701a      	strb	r2, [r3, #0]
    	    	tcJammed = true;
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_TIM_IC_CaptureCallback+0x220>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
initTimecode();
 8004f40:	f7fe fb9c 	bl	800367c <_Z12initTimecodev>
  __ASM volatile ("cpsie i" : : : "memory");
 8004f44:	b662      	cpsie	i
}
 8004f46:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004f48:	b662      	cpsie	i
}
 8004f4a:	bf00      	nop
    	    //}
    	  }

    }
	__enable_irq();
}
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000640 	.word	0x20000640
 8004f58:	2000063f 	.word	0x2000063f
 8004f5c:	2000063e 	.word	0x2000063e
 8004f60:	20000634 	.word	0x20000634
 8004f64:	ffffbffc 	.word	0xffffbffc
 8004f68:	200000a0 	.word	0x200000a0
 8004f6c:	200000a8 	.word	0x200000a8

08004f70 <_Z11clearBufferPhh>:

void clearBuffer(uint8_t theArray[], uint8_t theArraySize){
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]
 8004f80:	7bfa      	ldrb	r2, [r7, #15]
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	429a      	cmp	r2, r3
 8004f88:	da08      	bge.n	8004f9c <_Z11clearBufferPhh+0x2c>
    theArray[x] = 0;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	4413      	add	r3, r2
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	3301      	adds	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
 8004f9a:	e7f1      	b.n	8004f80 <_Z11clearBufferPhh+0x10>
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <_Z10shiftRightPhh>:

void shiftRight(uint8_t theArray[], uint8_t theArraySize){
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	70fb      	strb	r3, [r7, #3]
  uint8_t x;
  for (x = theArraySize; x > 0; x--){
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	73fb      	strb	r3, [r7, #15]
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d024      	beq.n	8005008 <_Z10shiftRightPhh+0x60>
    uint8_t xBit = bitRead(theArray[x - 1], 0);
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	73bb      	strb	r3, [r7, #14]
    theArray[x] = theArray[x] >> 1;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	1059      	asrs	r1, r3, #1
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	b2ca      	uxtb	r2, r1
 8004fe0:	701a      	strb	r2, [r3, #0]
    theArray[x] = theArray[x] | (xBit << 7);
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	b25a      	sxtb	r2, r3
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	01db      	lsls	r3, r3, #7
 8004ff0:	b25b      	sxtb	r3, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	b259      	sxtb	r1, r3
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	b2ca      	uxtb	r2, r1
 8004ffe:	701a      	strb	r2, [r3, #0]
  for (x = theArraySize; x > 0; x--){
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	3b01      	subs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	e7d7      	b.n	8004fb8 <_Z10shiftRightPhh+0x10>
  }
  theArray[x] = theArray[x] >> 1;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	1059      	asrs	r1, r3, #1
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	b2ca      	uxtb	r2, r1
 800501a:	701a      	strb	r2, [r3, #0]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
			  }
		  }
		ledCount++;
	}*/
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4aa1      	ldr	r2, [pc, #644]	; (80052b8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8005034:	4293      	cmp	r3, r2
 8005036:	f040 80bf 	bne.w	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
  {
	  switch (writeState){
 800503a:	4ba0      	ldr	r3, [pc, #640]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b07      	cmp	r3, #7
 8005040:	f200 80ba 	bhi.w	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
 8005044:	a201      	add	r2, pc, #4	; (adr r2, 800504c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	0800506d 	.word	0x0800506d
 8005050:	0800511b 	.word	0x0800511b
 8005054:	08005155 	.word	0x08005155
 8005058:	0800515d 	.word	0x0800515d
 800505c:	08005165 	.word	0x08005165
 8005060:	0800516d 	.word	0x0800516d
 8005064:	08005175 	.word	0x08005175
 8005068:	080051af 	.word	0x080051af
	  case 0x00:

		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 800506c:	4b94      	ldr	r3, [pc, #592]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	bf0c      	ite	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	2300      	movne	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d006      	beq.n	8005092 <HAL_TIM_PeriodElapsedCallback+0x6a>
			  (GPIOB->ODR) &= ~(1UL << (1));
 8005084:	4b8e      	ldr	r3, [pc, #568]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	4a8d      	ldr	r2, [pc, #564]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800508a:	f023 0302 	bic.w	r3, r3, #2
 800508e:	6153      	str	r3, [r2, #20]
 8005090:	e005      	b.n	800509e <HAL_TIM_PeriodElapsedCallback+0x76>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 8005092:	4b8b      	ldr	r3, [pc, #556]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	4a8a      	ldr	r2, [pc, #552]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005098:	f043 0302 	orr.w	r3, r3, #2
 800509c:	6153      	str	r3, [r2, #20]
		  }

		  if (((tcWriteBuf[byteNumber] >> bitNumber) & 0x01) == 1){
 800509e:	4b89      	ldr	r3, [pc, #548]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a89      	ldr	r2, [pc, #548]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80050a4:	5cd3      	ldrb	r3, [r2, r3]
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b88      	ldr	r3, [pc, #544]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	fa42 f303 	asr.w	r3, r2, r3
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_TIM_PeriodElapsedCallback+0x98>
			  writeState = 0x01;
 80050b8:	4b80      	ldr	r3, [pc, #512]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e002      	b.n	80050c6 <HAL_TIM_PeriodElapsedCallback+0x9e>
		  } else {
			  writeState = 0x02;
 80050c0:	4b7e      	ldr	r3, [pc, #504]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80050c2:	2202      	movs	r2, #2
 80050c4:	701a      	strb	r2, [r3, #0]
		  }
		  bitNumber++;
 80050c6:	4b81      	ldr	r3, [pc, #516]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	4a7f      	ldr	r2, [pc, #508]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80050ce:	6013      	str	r3, [r2, #0]
		  if (bitNumber == 8){
 80050d0:	4b7e      	ldr	r3, [pc, #504]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d16e      	bne.n	80051b6 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  bitNumber = 0;
 80050d8:	4b7c      	ldr	r3, [pc, #496]	; (80052cc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
			  byteNumber++;
 80050de:	4b79      	ldr	r3, [pc, #484]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	4a77      	ldr	r2, [pc, #476]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80050e6:	6013      	str	r3, [r2, #0]
			  if (byteNumber == 10){
 80050e8:	4b76      	ldr	r3, [pc, #472]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b0a      	cmp	r3, #10
 80050ee:	d162      	bne.n	80051b6 <HAL_TIM_PeriodElapsedCallback+0x18e>
				  byteNumber = 0;
 80050f0:	4b74      	ldr	r3, [pc, #464]	; (80052c4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

				  for (int i=0; i<10; i++){
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b09      	cmp	r3, #9
 80050fe:	dc5a      	bgt.n	80051b6 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  tcWriteBuf[i] = tcWrite[i];
 8005100:	4a73      	ldr	r2, [pc, #460]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	7819      	ldrb	r1, [r3, #0]
 8005108:	4a6f      	ldr	r2, [pc, #444]	; (80052c8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	460a      	mov	r2, r1
 8005110:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<10; i++){
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3301      	adds	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	e7ef      	b.n	80050fa <HAL_TIM_PeriodElapsedCallback+0xd2>
			  }
		  }
		  break;

	  case 0x01:
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 800511a:	4b69      	ldr	r3, [pc, #420]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b01      	cmp	r3, #1
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <HAL_TIM_PeriodElapsedCallback+0x118>
			  (GPIOB->ODR) &= ~(1UL << (1));
 8005132:	4b63      	ldr	r3, [pc, #396]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	4a62      	ldr	r2, [pc, #392]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005138:	f023 0302 	bic.w	r3, r3, #2
 800513c:	6153      	str	r3, [r2, #20]
 800513e:	e005      	b.n	800514c <HAL_TIM_PeriodElapsedCallback+0x124>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 8005140:	4b5f      	ldr	r3, [pc, #380]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	4a5e      	ldr	r2, [pc, #376]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005146:	f043 0302 	orr.w	r3, r3, #2
 800514a:	6153      	str	r3, [r2, #20]
		  }
		  writeState = 0x00;
 800514c:	4b5b      	ldr	r3, [pc, #364]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
		  break;
 8005152:	e031      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x02:
		  writeState = 0x00;
 8005154:	4b59      	ldr	r3, [pc, #356]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
		  break;
 800515a:	e02d      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x03:
		  writeState = 0x04;
 800515c:	4b57      	ldr	r3, [pc, #348]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800515e:	2204      	movs	r2, #4
 8005160:	701a      	strb	r2, [r3, #0]
		  break;
 8005162:	e029      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x04:
		  writeState = 0x01;
 8005164:	4b55      	ldr	r3, [pc, #340]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]
		  break;
 800516a:	e025      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x05:
		  writeState = 0x06;
 800516c:	4b53      	ldr	r3, [pc, #332]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 800516e:	2206      	movs	r2, #6
 8005170:	701a      	strb	r2, [r3, #0]

		  break;
 8005172:	e021      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x06:
		  writeState = 0x07;
 8005174:	4b51      	ldr	r3, [pc, #324]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8005176:	2207      	movs	r2, #7
 8005178:	701a      	strb	r2, [r3, #0]
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 800517a:	4b51      	ldr	r3, [pc, #324]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d006      	beq.n	80051a0 <HAL_TIM_PeriodElapsedCallback+0x178>
			  (GPIOB->ODR) &= ~(1UL << (1));
 8005192:	4b4b      	ldr	r3, [pc, #300]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4a4a      	ldr	r2, [pc, #296]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8005198:	f023 0302 	bic.w	r3, r3, #2
 800519c:	6153      	str	r3, [r2, #20]
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
		  }
		  break;
 800519e:	e00b      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
			  (GPIOB->ODR) |= (1UL << (1));
 80051a0:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	4a46      	ldr	r2, [pc, #280]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80051a6:	f043 0302 	orr.w	r3, r3, #2
 80051aa:	6153      	str	r3, [r2, #20]
		  break;
 80051ac:	e004      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x07:
		  writeState = 0x01;
 80051ae:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
		  break;
 80051b4:	e000      	b.n	80051b8 <HAL_TIM_PeriodElapsedCallback+0x190>
		  break;
 80051b6:	bf00      	nop
	  }

  }
  if (htim == &htim7){  //Triggers once per frame
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a46      	ldr	r2, [pc, #280]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	f040 80a3 	bne.w	8005308 <HAL_TIM_PeriodElapsedCallback+0x2e0>
  __ASM volatile ("cpsid i" : : : "memory");
 80051c2:	b672      	cpsid	i
}
 80051c4:	bf00      	nop
	  __disable_irq();
	  clockFrame++;
 80051c6:	4b44      	ldr	r3, [pc, #272]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3301      	adds	r3, #1
 80051cc:	4a42      	ldr	r2, [pc, #264]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80051ce:	6013      	str	r3, [r2, #0]
	  if (compensate){    //If coming back from compensation
 80051d0:	4b42      	ldr	r3, [pc, #264]	; (80052dc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d017      	beq.n	800520a <HAL_TIM_PeriodElapsedCallback+0x1e2>
		  //reset to proper ARR
		  __HAL_TIM_SET_AUTORELOAD(&htim7,frameRateARR[frameRate]);
 80051da:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	4b40      	ldr	r3, [pc, #256]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80051e2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80051e6:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80051ec:	4b3c      	ldr	r3, [pc, #240]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b3c      	ldr	r3, [pc, #240]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80051f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80051f8:	461a      	mov	r2, r3
 80051fa:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80051fc:	60da      	str	r2, [r3, #12]
		  //TIM7->ARR = 50049;
		  compensate = false;
 80051fe:	4b37      	ldr	r3, [pc, #220]	; (80052dc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
		  compensationCounter = 0;
 8005204:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005206:	2200      	movs	r2, #0
 8005208:	801a      	strh	r2, [r3, #0]
	  }
    //If it's time to compensate
	  if (compensationCounter == calibrationInterval[frameRate]){
 800520a:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	4b33      	ldr	r3, [pc, #204]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4619      	mov	r1, r3
 8005218:	4b34      	ldr	r3, [pc, #208]	; (80052ec <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800521a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800521e:	429a      	cmp	r2, r3
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d024      	beq.n	8005276 <HAL_TIM_PeriodElapsedCallback+0x24e>
		  __HAL_TIM_SET_AUTORELOAD(&htim7, (frameRateARR[frameRate] + calibrationArray[frameRate]));
 800522c:	4b2c      	ldr	r3, [pc, #176]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8005234:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005238:	461a      	mov	r2, r3
 800523a:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	4619      	mov	r1, r3
 8005240:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005242:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005246:	441a      	add	r2, r3
 8005248:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
 800524e:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8005256:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800525a:	461a      	mov	r2, r3
 800525c:	4b20      	ldr	r3, [pc, #128]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	4619      	mov	r1, r3
 8005262:	4b23      	ldr	r3, [pc, #140]	; (80052f0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005268:	4413      	add	r3, r2
 800526a:	461a      	mov	r2, r3
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800526e:	60da      	str	r2, [r3, #12]
		  compensate = true;
 8005270:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]

	  }
compensationCounter++;
 8005276:	4b1c      	ldr	r3, [pc, #112]	; (80052e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	3301      	adds	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005282:	801a      	strh	r2, [r3, #0]

    if (clockFrame % frameRateDivisor[frameRate] == 0){
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800528a:	7812      	ldrb	r2, [r2, #0]
 800528c:	4611      	mov	r1, r2
 800528e:	4a19      	ldr	r2, [pc, #100]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005290:	5c52      	ldrb	r2, [r2, r1]
 8005292:	fbb3 f1f2 	udiv	r1, r3, r2
 8005296:	fb02 f201 	mul.w	r2, r2, r1
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d026      	beq.n	80052f8 <HAL_TIM_PeriodElapsedCallback+0x2d0>
		  (GPIOB->ODR) |= (1UL << (12));
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80052b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052b4:	6153      	str	r3, [r2, #20]
 80052b6:	e025      	b.n	8005304 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 80052b8:	200002f0 	.word	0x200002f0
 80052bc:	2000065a 	.word	0x2000065a
 80052c0:	48000400 	.word	0x48000400
 80052c4:	2000065c 	.word	0x2000065c
 80052c8:	20000650 	.word	0x20000650
 80052cc:	20000660 	.word	0x20000660
 80052d0:	20000644 	.word	0x20000644
 80052d4:	200002a4 	.word	0x200002a4
 80052d8:	200000ac 	.word	0x200000ac
 80052dc:	20000666 	.word	0x20000666
 80052e0:	200000a9 	.word	0x200000a9
 80052e4:	2000003c 	.word	0x2000003c
 80052e8:	20000664 	.word	0x20000664
 80052ec:	2000001c 	.word	0x2000001c
 80052f0:	200000c8 	.word	0x200000c8
 80052f4:	20000034 	.word	0x20000034
	  } else {
			  (GPIOB->ODR) &= ~(1UL << (12));
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	4a05      	ldr	r2, [pc, #20]	; (8005314 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80052fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005302:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8005304:	b662      	cpsie	i
}
 8005306:	bf00      	nop
	  }

	  __enable_irq();
  }
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr
 8005314:	48000400 	.word	0x48000400

08005318 <_Z10readEEPROMv>:
    {
        Error_Handler();
    } else {
    }
}
bool readEEPROM(){
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af04      	add	r7, sp, #16
  bool calibrationReadOK = true;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
  uint8_t readCal[4];
  if(HAL_I2C_Mem_Read(memI2C, 0x50<<1, 0x0001, 1, &frameRate, 1, 1000)!= HAL_OK)	//offset
 8005322:	4b44      	ldr	r3, [pc, #272]	; (8005434 <_Z10readEEPROMv+0x11c>)
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800532a:	9302      	str	r3, [sp, #8]
 800532c:	2301      	movs	r3, #1
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	4b41      	ldr	r3, [pc, #260]	; (8005438 <_Z10readEEPROMv+0x120>)
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2301      	movs	r3, #1
 8005336:	2201      	movs	r2, #1
 8005338:	21a0      	movs	r1, #160	; 0xa0
 800533a:	f002 fe47 	bl	8007fcc <HAL_I2C_Mem_Read>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
{
	//memOffset = 24;
	
}
HAL_Delay(20);
 8005342:	2014      	movs	r0, #20
 8005344:	f000 ffee 	bl	8006324 <HAL_Delay>
if(HAL_I2C_Mem_Read(memI2C, 0x50<<1, 0x0002, 1, &intOffset, 1, 1000)!= HAL_OK)	//frame rate
 8005348:	4b3a      	ldr	r3, [pc, #232]	; (8005434 <_Z10readEEPROMv+0x11c>)
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005350:	9302      	str	r3, [sp, #8]
 8005352:	2301      	movs	r3, #1
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	4b39      	ldr	r3, [pc, #228]	; (800543c <_Z10readEEPROMv+0x124>)
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	2301      	movs	r3, #1
 800535c:	2202      	movs	r2, #2
 800535e:	21a0      	movs	r1, #160	; 0xa0
 8005360:	f002 fe34 	bl	8007fcc <HAL_I2C_Mem_Read>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
{
	//frameRate = 0;
	
}
HAL_Delay(20);
 8005368:	2014      	movs	r0, #20
 800536a:	f000 ffdb 	bl	8006324 <HAL_Delay>
if(HAL_I2C_Mem_Read(memI2C, 0x50<<1, 0x0003, 1, &autoOff, 1, 1000)!= HAL_OK)	//auto off
 800536e:	4b31      	ldr	r3, [pc, #196]	; (8005434 <_Z10readEEPROMv+0x11c>)
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005376:	9302      	str	r3, [sp, #8]
 8005378:	2301      	movs	r3, #1
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	4b30      	ldr	r3, [pc, #192]	; (8005440 <_Z10readEEPROMv+0x128>)
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	2301      	movs	r3, #1
 8005382:	2203      	movs	r2, #3
 8005384:	21a0      	movs	r1, #160	; 0xa0
 8005386:	f002 fe21 	bl	8007fcc <HAL_I2C_Mem_Read>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
{
	//autoOff = 0;
	
}
HAL_Delay(20);
 800538e:	2014      	movs	r0, #20
 8005390:	f000 ffc8 	bl	8006324 <HAL_Delay>
for (int i=0; i<4; i++){
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b03      	cmp	r3, #3
 800539c:	dc25      	bgt.n	80053ea <_Z10readEEPROMv+0xd2>
if(HAL_I2C_Mem_Read(memI2C, 0x50<<1, 0x0005+i, 1, &readCal[i], 1, 1000)!= HAL_OK)	//auto off
 800539e:	4b25      	ldr	r3, [pc, #148]	; (8005434 <_Z10readEEPROMv+0x11c>)
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3305      	adds	r3, #5
 80053a8:	b299      	uxth	r1, r3
 80053aa:	1d3a      	adds	r2, r7, #4
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4413      	add	r3, r2
 80053b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053b4:	9202      	str	r2, [sp, #8]
 80053b6:	2201      	movs	r2, #1
 80053b8:	9201      	str	r2, [sp, #4]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	2301      	movs	r3, #1
 80053be:	460a      	mov	r2, r1
 80053c0:	21a0      	movs	r1, #160	; 0xa0
 80053c2:	f002 fe03 	bl	8007fcc <HAL_I2C_Mem_Read>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <_Z10readEEPROMv+0xc4>
{
	calibrationReadOK = false;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
  break;
 80053da:	e006      	b.n	80053ea <_Z10readEEPROMv+0xd2>
}
HAL_Delay(10);
 80053dc:	200a      	movs	r0, #10
 80053de:	f000 ffa1 	bl	8006324 <HAL_Delay>
for (int i=0; i<4; i++){
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	e7d6      	b.n	8005398 <_Z10readEEPROMv+0x80>
}

if (calibrationReadOK){
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01c      	beq.n	800542a <_Z10readEEPROMv+0x112>
calibration = (readCal[0]) | (readCal[1] << 8) | (readCal[2] << 16) | (readCal[3] << 24);
 80053f0:	793b      	ldrb	r3, [r7, #4]
 80053f2:	461a      	mov	r2, r3
 80053f4:	797b      	ldrb	r3, [r7, #5]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	431a      	orrs	r2, r3
 80053fa:	79bb      	ldrb	r3, [r7, #6]
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	431a      	orrs	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	4313      	orrs	r3, r2
 8005406:	461a      	mov	r2, r3
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <_Z10readEEPROMv+0x12c>)
 800540a:	601a      	str	r2, [r3, #0]
if (calibration < 23000000 || calibration > 25000000){
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <_Z10readEEPROMv+0x12c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0d      	ldr	r2, [pc, #52]	; (8005448 <_Z10readEEPROMv+0x130>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d904      	bls.n	8005420 <_Z10readEEPROMv+0x108>
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <_Z10readEEPROMv+0x12c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a0c      	ldr	r2, [pc, #48]	; (800544c <_Z10readEEPROMv+0x134>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d904      	bls.n	800542a <_Z10readEEPROMv+0x112>
  calibrationReadOK = false;
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]
  calibration = 24000000;
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <_Z10readEEPROMv+0x12c>)
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <_Z10readEEPROMv+0x138>)
 8005428:	601a      	str	r2, [r3, #0]
}
}

return calibrationReadOK;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000050 	.word	0x20000050
 8005438:	200000a9 	.word	0x200000a9
 800543c:	20000018 	.word	0x20000018
 8005440:	200000b8 	.word	0x200000b8
 8005444:	20000014 	.word	0x20000014
 8005448:	015ef3bf 	.word	0x015ef3bf
 800544c:	017d7840 	.word	0x017d7840
 8005450:	016e3600 	.word	0x016e3600

08005454 <_Z12updateEEPROMv>:
bool updateEEPROM(){
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af04      	add	r7, sp, #16
bool writeOK = true;
 800545a:	2301      	movs	r3, #1
 800545c:	71fb      	strb	r3, [r7, #7]
  //Offset
  //Timeout
  //User bits

  //Calibration
  HAL_Delay(10);
 800545e:	200a      	movs	r0, #10
 8005460:	f000 ff60 	bl	8006324 <HAL_Delay>
	if(HAL_I2C_Mem_Write(memI2C , 0x50<<1, 0x0001, 1, &frameRate, 1,1000)!= HAL_OK)	//offset
 8005464:	4b29      	ldr	r3, [pc, #164]	; (800550c <_Z12updateEEPROMv+0xb8>)
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800546c:	9302      	str	r3, [sp, #8]
 800546e:	2301      	movs	r3, #1
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	4b27      	ldr	r3, [pc, #156]	; (8005510 <_Z12updateEEPROMv+0xbc>)
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	2301      	movs	r3, #1
 8005478:	2201      	movs	r2, #1
 800547a:	21a0      	movs	r1, #160	; 0xa0
 800547c:	f002 fc92 	bl	8007da4 <HAL_I2C_Mem_Write>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	bf14      	ite	ne
 8005486:	2301      	movne	r3, #1
 8005488:	2300      	moveq	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <_Z12updateEEPROMv+0x40>
				{
						  writeOK = false;
 8005490:	2300      	movs	r3, #0
 8005492:	71fb      	strb	r3, [r7, #7]
				}
				  HAL_Delay(10);
 8005494:	200a      	movs	r0, #10
 8005496:	f000 ff45 	bl	8006324 <HAL_Delay>
			  
			 
				  if(HAL_I2C_Mem_Write(memI2C , 0x50<<1, 0x0002, 1, &intOffset, 1,250)!= HAL_OK)	//framerate
 800549a:	4b1c      	ldr	r3, [pc, #112]	; (800550c <_Z12updateEEPROMv+0xb8>)
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	23fa      	movs	r3, #250	; 0xfa
 80054a0:	9302      	str	r3, [sp, #8]
 80054a2:	2301      	movs	r3, #1
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	4b1b      	ldr	r3, [pc, #108]	; (8005514 <_Z12updateEEPROMv+0xc0>)
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	2301      	movs	r3, #1
 80054ac:	2202      	movs	r2, #2
 80054ae:	21a0      	movs	r1, #160	; 0xa0
 80054b0:	f002 fc78 	bl	8007da4 <HAL_I2C_Mem_Write>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <_Z12updateEEPROMv+0x74>
					  {
						  writeOK = false;
 80054c4:	2300      	movs	r3, #0
 80054c6:	71fb      	strb	r3, [r7, #7]
					  }
				  HAL_Delay(10);
 80054c8:	200a      	movs	r0, #10
 80054ca:	f000 ff2b 	bl	8006324 <HAL_Delay>
			  
			  
				  if(HAL_I2C_Mem_Write(memI2C , 0x50<<1, 0x0003, 1, &autoOff, 1,250)!= HAL_OK)	//autooff
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <_Z12updateEEPROMv+0xb8>)
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	23fa      	movs	r3, #250	; 0xfa
 80054d4:	9302      	str	r3, [sp, #8]
 80054d6:	2301      	movs	r3, #1
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <_Z12updateEEPROMv+0xc4>)
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	2301      	movs	r3, #1
 80054e0:	2203      	movs	r2, #3
 80054e2:	21a0      	movs	r1, #160	; 0xa0
 80054e4:	f002 fc5e 	bl	8007da4 <HAL_I2C_Mem_Write>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <_Z12updateEEPROMv+0xa8>
					  {
						  writeOK = false;
 80054f8:	2300      	movs	r3, #0
 80054fa:	71fb      	strb	r3, [r7, #7]
					  }
				  HAL_Delay(10);
 80054fc:	200a      	movs	r0, #10
 80054fe:	f000 ff11 	bl	8006324 <HAL_Delay>
return writeOK;
 8005502:	79fb      	ldrb	r3, [r7, #7]
			  
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000050 	.word	0x20000050
 8005510:	200000a9 	.word	0x200000a9
 8005514:	20000018 	.word	0x20000018
 8005518:	200000b8 	.word	0x200000b8

0800551c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005520:	b672      	cpsid	i
}
 8005522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005524:	e7fe      	b.n	8005524 <Error_Handler+0x8>

08005526 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af04      	add	r7, sp, #16
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8005532:	230a      	movs	r3, #10
 8005534:	9302      	str	r3, [sp, #8]
 8005536:	2301      	movs	r3, #1
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	1cfb      	adds	r3, r7, #3
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	2301      	movs	r3, #1
 8005540:	2200      	movs	r2, #0
 8005542:	2178      	movs	r1, #120	; 0x78
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f002 fc2d 	bl	8007da4 <HAL_I2C_Mem_Write>
 800554a:	4603      	mov	r3, r0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 800555c:	2064      	movs	r0, #100	; 0x64
 800555e:	f000 fee1 	bl	8006324 <HAL_Delay>
    int status = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8005566:	21ae      	movs	r1, #174	; 0xae
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ffdc 	bl	8005526 <ssd1306_WriteCommand>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8005578:	2120      	movs	r1, #32
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ffd3 	bl	8005526 <ssd1306_WriteCommand>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800558a:	2110      	movs	r1, #16
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ffca 	bl	8005526 <ssd1306_WriteCommand>
 8005592:	4603      	mov	r3, r0
 8005594:	461a      	mov	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800559c:	21b0      	movs	r1, #176	; 0xb0
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffc1 	bl	8005526 <ssd1306_WriteCommand>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80055ae:	21c8      	movs	r1, #200	; 0xc8
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff ffb8 	bl	8005526 <ssd1306_WriteCommand>
 80055b6:	4603      	mov	r3, r0
 80055b8:	461a      	mov	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80055c0:	2100      	movs	r1, #0
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffaf 	bl	8005526 <ssd1306_WriteCommand>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80055d2:	2110      	movs	r1, #16
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ffa6 	bl	8005526 <ssd1306_WriteCommand>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff ff9d 	bl	8005526 <ssd1306_WriteCommand>
 80055ec:	4603      	mov	r3, r0
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80055f6:	2181      	movs	r1, #129	; 0x81
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff ff94 	bl	8005526 <ssd1306_WriteCommand>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8005608:	21ff      	movs	r1, #255	; 0xff
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff8b 	bl	8005526 <ssd1306_WriteCommand>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800561a:	21a1      	movs	r1, #161	; 0xa1
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ff82 	bl	8005526 <ssd1306_WriteCommand>
 8005622:	4603      	mov	r3, r0
 8005624:	461a      	mov	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 800562c:	21a6      	movs	r1, #166	; 0xa6
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff ff79 	bl	8005526 <ssd1306_WriteCommand>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800563e:	21a8      	movs	r1, #168	; 0xa8
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff ff70 	bl	8005526 <ssd1306_WriteCommand>
 8005646:	4603      	mov	r3, r0
 8005648:	461a      	mov	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x3F);
 8005650:	213f      	movs	r1, #63	; 0x3f
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff ff67 	bl	8005526 <ssd1306_WriteCommand>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005662:	21a4      	movs	r1, #164	; 0xa4
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff ff5e 	bl	8005526 <ssd1306_WriteCommand>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8005674:	21d3      	movs	r1, #211	; 0xd3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ff55 	bl	8005526 <ssd1306_WriteCommand>
 800567c:	4603      	mov	r3, r0
 800567e:	461a      	mov	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8005686:	2100      	movs	r1, #0
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff ff4c 	bl	8005526 <ssd1306_WriteCommand>
 800568e:	4603      	mov	r3, r0
 8005690:	461a      	mov	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8005698:	21d5      	movs	r1, #213	; 0xd5
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff ff43 	bl	8005526 <ssd1306_WriteCommand>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80056aa:	21f0      	movs	r1, #240	; 0xf0
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ff3a 	bl	8005526 <ssd1306_WriteCommand>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80056bc:	21d9      	movs	r1, #217	; 0xd9
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ff31 	bl	8005526 <ssd1306_WriteCommand>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80056ce:	2122      	movs	r1, #34	; 0x22
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ff28 	bl	8005526 <ssd1306_WriteCommand>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80056e0:	21da      	movs	r1, #218	; 0xda
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff ff1f 	bl	8005526 <ssd1306_WriteCommand>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x12);
 80056f2:	2112      	movs	r1, #18
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff ff16 	bl	8005526 <ssd1306_WriteCommand>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8005704:	21db      	movs	r1, #219	; 0xdb
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff ff0d 	bl	8005526 <ssd1306_WriteCommand>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8005716:	2120      	movs	r1, #32
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff04 	bl	8005526 <ssd1306_WriteCommand>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8005728:	218d      	movs	r1, #141	; 0x8d
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fefb 	bl	8005526 <ssd1306_WriteCommand>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800573a:	2114      	movs	r1, #20
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff fef2 	bl	8005526 <ssd1306_WriteCommand>
 8005742:	4603      	mov	r3, r0
 8005744:	461a      	mov	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 800574c:	21af      	movs	r1, #175	; 0xaf
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fee9 	bl	8005526 <ssd1306_WriteCommand>
 8005754:	4603      	mov	r3, r0
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <ssd1306_Init+0x214>
        return 1;
 8005764:	2301      	movs	r3, #1
 8005766:	e00f      	b.n	8005788 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8005768:	2000      	movs	r0, #0
 800576a:	f000 f813 	bl	8005794 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f834 	bl	80057dc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <ssd1306_Init+0x23c>)
 8005776:	2200      	movs	r2, #0
 8005778:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <ssd1306_Init+0x23c>)
 800577c:	2200      	movs	r2, #0
 800577e:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <ssd1306_Init+0x23c>)
 8005782:	2201      	movs	r2, #1
 8005784:	715a      	strb	r2, [r3, #5]

    return 0;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	20000a8c 	.word	0x20000a8c

08005794 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e00d      	b.n	80057c0 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <ssd1306_Fill+0x1a>
 80057aa:	2100      	movs	r1, #0
 80057ac:	e000      	b.n	80057b0 <ssd1306_Fill+0x1c>
 80057ae:	21ff      	movs	r1, #255	; 0xff
 80057b0:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <ssd1306_Fill+0x44>)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	460a      	mov	r2, r1
 80057b8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3301      	adds	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d3ed      	bcc.n	80057a4 <ssd1306_Fill+0x10>
    }
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	2000068c 	.word	0x2000068c

080057dc <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af04      	add	r7, sp, #16
 80057e2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	e020      	b.n	800582c <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	3b50      	subs	r3, #80	; 0x50
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fe97 	bl	8005526 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80057f8:	2100      	movs	r1, #0
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fe93 	bl	8005526 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8005800:	2110      	movs	r1, #16
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff fe8f 	bl	8005526 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	01db      	lsls	r3, r3, #7
 800580c:	4a0b      	ldr	r2, [pc, #44]	; (800583c <ssd1306_UpdateScreen+0x60>)
 800580e:	4413      	add	r3, r2
 8005810:	2264      	movs	r2, #100	; 0x64
 8005812:	9202      	str	r2, [sp, #8]
 8005814:	2280      	movs	r2, #128	; 0x80
 8005816:	9201      	str	r2, [sp, #4]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	2301      	movs	r3, #1
 800581c:	2240      	movs	r2, #64	; 0x40
 800581e:	2178      	movs	r1, #120	; 0x78
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f002 fabf 	bl	8007da4 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	3301      	adds	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b07      	cmp	r3, #7
 8005830:	d9db      	bls.n	80057ea <ssd1306_UpdateScreen+0xe>
    }
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	2000068c 	.word	0x2000068c

08005840 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
 800584a:	460b      	mov	r3, r1
 800584c:	71bb      	strb	r3, [r7, #6]
 800584e:	4613      	mov	r3, r2
 8005850:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8005852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005856:	2b00      	cmp	r3, #0
 8005858:	db48      	blt.n	80058ec <ssd1306_DrawPixel+0xac>
 800585a:	79bb      	ldrb	r3, [r7, #6]
 800585c:	2b3f      	cmp	r3, #63	; 0x3f
 800585e:	d845      	bhi.n	80058ec <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8005860:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <ssd1306_DrawPixel+0xb8>)
 8005862:	791b      	ldrb	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8005868:	797b      	ldrb	r3, [r7, #5]
 800586a:	2b00      	cmp	r3, #0
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8005876:	797b      	ldrb	r3, [r7, #5]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11a      	bne.n	80058b2 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800587c:	79fa      	ldrb	r2, [r7, #7]
 800587e:	79bb      	ldrb	r3, [r7, #6]
 8005880:	08db      	lsrs	r3, r3, #3
 8005882:	b2d8      	uxtb	r0, r3
 8005884:	4603      	mov	r3, r0
 8005886:	01db      	lsls	r3, r3, #7
 8005888:	4413      	add	r3, r2
 800588a:	4a1c      	ldr	r2, [pc, #112]	; (80058fc <ssd1306_DrawPixel+0xbc>)
 800588c:	5cd3      	ldrb	r3, [r2, r3]
 800588e:	b25a      	sxtb	r2, r3
 8005890:	79bb      	ldrb	r3, [r7, #6]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2101      	movs	r1, #1
 8005898:	fa01 f303 	lsl.w	r3, r1, r3
 800589c:	b25b      	sxtb	r3, r3
 800589e:	4313      	orrs	r3, r2
 80058a0:	b259      	sxtb	r1, r3
 80058a2:	79fa      	ldrb	r2, [r7, #7]
 80058a4:	4603      	mov	r3, r0
 80058a6:	01db      	lsls	r3, r3, #7
 80058a8:	4413      	add	r3, r2
 80058aa:	b2c9      	uxtb	r1, r1
 80058ac:	4a13      	ldr	r2, [pc, #76]	; (80058fc <ssd1306_DrawPixel+0xbc>)
 80058ae:	54d1      	strb	r1, [r2, r3]
 80058b0:	e01d      	b.n	80058ee <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80058b2:	79fa      	ldrb	r2, [r7, #7]
 80058b4:	79bb      	ldrb	r3, [r7, #6]
 80058b6:	08db      	lsrs	r3, r3, #3
 80058b8:	b2d8      	uxtb	r0, r3
 80058ba:	4603      	mov	r3, r0
 80058bc:	01db      	lsls	r3, r3, #7
 80058be:	4413      	add	r3, r2
 80058c0:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <ssd1306_DrawPixel+0xbc>)
 80058c2:	5cd3      	ldrb	r3, [r2, r3]
 80058c4:	b25a      	sxtb	r2, r3
 80058c6:	79bb      	ldrb	r3, [r7, #6]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	2101      	movs	r1, #1
 80058ce:	fa01 f303 	lsl.w	r3, r1, r3
 80058d2:	b25b      	sxtb	r3, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	b25b      	sxtb	r3, r3
 80058d8:	4013      	ands	r3, r2
 80058da:	b259      	sxtb	r1, r3
 80058dc:	79fa      	ldrb	r2, [r7, #7]
 80058de:	4603      	mov	r3, r0
 80058e0:	01db      	lsls	r3, r3, #7
 80058e2:	4413      	add	r3, r2
 80058e4:	b2c9      	uxtb	r1, r1
 80058e6:	4a05      	ldr	r2, [pc, #20]	; (80058fc <ssd1306_DrawPixel+0xbc>)
 80058e8:	54d1      	strb	r1, [r2, r3]
 80058ea:	e000      	b.n	80058ee <ssd1306_DrawPixel+0xae>
        return;
 80058ec:	bf00      	nop
    }
}
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20000a8c 	.word	0x20000a8c
 80058fc:	2000068c 	.word	0x2000068c

08005900 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b089      	sub	sp, #36	; 0x24
 8005904:	af00      	add	r7, sp, #0
 8005906:	4604      	mov	r4, r0
 8005908:	1d38      	adds	r0, r7, #4
 800590a:	e880 0006 	stmia.w	r0, {r1, r2}
 800590e:	461a      	mov	r2, r3
 8005910:	4623      	mov	r3, r4
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	4613      	mov	r3, r2
 8005916:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005918:	4b38      	ldr	r3, [pc, #224]	; (80059fc <ssd1306_WriteChar+0xfc>)
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	793b      	ldrb	r3, [r7, #4]
 8005920:	4413      	add	r3, r2
 8005922:	2b7f      	cmp	r3, #127	; 0x7f
 8005924:	dc06      	bgt.n	8005934 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8005926:	4b35      	ldr	r3, [pc, #212]	; (80059fc <ssd1306_WriteChar+0xfc>)
 8005928:	885b      	ldrh	r3, [r3, #2]
 800592a:	461a      	mov	r2, r3
 800592c:	797b      	ldrb	r3, [r7, #5]
 800592e:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005930:	2b3f      	cmp	r3, #63	; 0x3f
 8005932:	dd01      	ble.n	8005938 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8005934:	2300      	movs	r3, #0
 8005936:	e05d      	b.n	80059f4 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	e04c      	b.n	80059d8 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	3b20      	subs	r3, #32
 8005944:	7979      	ldrb	r1, [r7, #5]
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	4619      	mov	r1, r3
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	440b      	add	r3, r1
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e034      	b.n	80059c8 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d012      	beq.n	8005994 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800596e:	4b23      	ldr	r3, [pc, #140]	; (80059fc <ssd1306_WriteChar+0xfc>)
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	4413      	add	r3, r2
 800597a:	b2d8      	uxtb	r0, r3
 800597c:	4b1f      	ldr	r3, [pc, #124]	; (80059fc <ssd1306_WriteChar+0xfc>)
 800597e:	885b      	ldrh	r3, [r3, #2]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	4413      	add	r3, r2
 8005988:	b2db      	uxtb	r3, r3
 800598a:	7bba      	ldrb	r2, [r7, #14]
 800598c:	4619      	mov	r1, r3
 800598e:	f7ff ff57 	bl	8005840 <ssd1306_DrawPixel>
 8005992:	e016      	b.n	80059c2 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005994:	4b19      	ldr	r3, [pc, #100]	; (80059fc <ssd1306_WriteChar+0xfc>)
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	4413      	add	r3, r2
 80059a0:	b2d8      	uxtb	r0, r3
 80059a2:	4b16      	ldr	r3, [pc, #88]	; (80059fc <ssd1306_WriteChar+0xfc>)
 80059a4:	885b      	ldrh	r3, [r3, #2]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	b2d9      	uxtb	r1, r3
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	f7ff ff3f 	bl	8005840 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	3301      	adds	r3, #1
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	793b      	ldrb	r3, [r7, #4]
 80059ca:	461a      	mov	r2, r3
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d3c5      	bcc.n	800595e <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3301      	adds	r3, #1
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	797b      	ldrb	r3, [r7, #5]
 80059da:	461a      	mov	r2, r3
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4293      	cmp	r3, r2
 80059e0:	d3ad      	bcc.n	800593e <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <ssd1306_WriteChar+0xfc>)
 80059e4:	881a      	ldrh	r2, [r3, #0]
 80059e6:	793b      	ldrb	r3, [r7, #4]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	4413      	add	r3, r2
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	4b03      	ldr	r3, [pc, #12]	; (80059fc <ssd1306_WriteChar+0xfc>)
 80059f0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3724      	adds	r7, #36	; 0x24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd90      	pop	{r4, r7, pc}
 80059fc:	20000a8c 	.word	0x20000a8c

08005a00 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	1d38      	adds	r0, r7, #4
 8005a0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8005a0e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8005a10:	e012      	b.n	8005a38 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	7818      	ldrb	r0, [r3, #0]
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	1d3a      	adds	r2, r7, #4
 8005a1a:	ca06      	ldmia	r2, {r1, r2}
 8005a1c:	f7ff ff70 	bl	8005900 <ssd1306_WriteChar>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d002      	beq.n	8005a32 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	e008      	b.n	8005a44 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
    while (*str)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e8      	bne.n	8005a12 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	781b      	ldrb	r3, [r3, #0]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	460a      	mov	r2, r1
 8005a56:	71fb      	strb	r3, [r7, #7]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <ssd1306_SetCursor+0x2c>)
 8005a62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005a64:	79bb      	ldrb	r3, [r7, #6]
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <ssd1306_SetCursor+0x2c>)
 8005a6a:	805a      	strh	r2, [r3, #2]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20000a8c 	.word	0x20000a8c

08005a7c <ssd1306_DrawBattery>:

void ssd1306_DrawBattery(float remaining)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	; 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	ed87 0a01 	vstr	s0, [r7, #4]
	int xOffset = 4;
 8005a86:	2304      	movs	r3, #4
 8005a88:	60fb      	str	r3, [r7, #12]
	//clear section
	for (int x=0; x<26; x++){
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	e02d      	b.n	8005aec <ssd1306_DrawBattery+0x70>
		for (int y=50; y<64; y++){
 8005a90:	2332      	movs	r3, #50	; 0x32
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	e024      	b.n	8005ae0 <ssd1306_DrawBattery+0x64>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da00      	bge.n	8005a9e <ssd1306_DrawBattery+0x22>
 8005a9c:	3307      	adds	r3, #7
 8005a9e:	10db      	asrs	r3, r3, #3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	01d1      	lsls	r1, r2, #7
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	440b      	add	r3, r1
 8005aa8:	4994      	ldr	r1, [pc, #592]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	b259      	sxtb	r1, r3
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	4258      	negs	r0, r3
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	f000 0007 	and.w	r0, r0, #7
 8005aba:	bf58      	it	pl
 8005abc:	4243      	negpl	r3, r0
 8005abe:	2001      	movs	r0, #1
 8005ac0:	fa00 f303 	lsl.w	r3, r0, r3
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	400b      	ands	r3, r1
 8005acc:	b259      	sxtb	r1, r3
 8005ace:	01d2      	lsls	r2, r2, #7
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	4413      	add	r3, r2
 8005ad4:	b2c9      	uxtb	r1, r1
 8005ad6:	4a89      	ldr	r2, [pc, #548]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005ad8:	54d1      	strb	r1, [r2, r3]
		for (int y=50; y<64; y++){
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	3301      	adds	r3, #1
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2b3f      	cmp	r3, #63	; 0x3f
 8005ae4:	ddd7      	ble.n	8005a96 <ssd1306_DrawBattery+0x1a>
	for (int x=0; x<26; x++){
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	3301      	adds	r3, #1
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	2b19      	cmp	r3, #25
 8005af0:	ddce      	ble.n	8005a90 <ssd1306_DrawBattery+0x14>
		}
	}
	//draw outline
	for (int x=2+xOffset; x<24+xOffset; x++)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3302      	adds	r3, #2
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	e01c      	b.n	8005b34 <ssd1306_DrawBattery+0xb8>
	{
		SSD1306_Buffer[x + (52 / 8) * SSD1306_WIDTH] |= 1 << (52 % 8);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005b00:	4a7e      	ldr	r2, [pc, #504]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005b02:	5cd2      	ldrb	r2, [r2, r3]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005b0a:	f042 0210 	orr.w	r2, r2, #16
 8005b0e:	b2d1      	uxtb	r1, r2
 8005b10:	4a7a      	ldr	r2, [pc, #488]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005b12:	54d1      	strb	r1, [r2, r3]
		SSD1306_Buffer[x + (61 / 8) * SSD1306_WIDTH] |= 1 << (61 % 8);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8005b1a:	4a78      	ldr	r2, [pc, #480]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005b1c:	5cd2      	ldrb	r2, [r2, r3]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8005b24:	f042 0220 	orr.w	r2, r2, #32
 8005b28:	b2d1      	uxtb	r1, r2
 8005b2a:	4a74      	ldr	r2, [pc, #464]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005b2c:	54d1      	strb	r1, [r2, r3]
	for (int x=2+xOffset; x<24+xOffset; x++)
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3301      	adds	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3317      	adds	r3, #23
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	dddd      	ble.n	8005afa <ssd1306_DrawBattery+0x7e>
	}
	for (int y=52; y<62; y++)
 8005b3e:	2334      	movs	r3, #52	; 0x34
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	e072      	b.n	8005c2a <ssd1306_DrawBattery+0x1ae>
	{
		SSD1306_Buffer[2+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	1c99      	adds	r1, r3, #2
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	da00      	bge.n	8005b50 <ssd1306_DrawBattery+0xd4>
 8005b4e:	3307      	adds	r3, #7
 8005b50:	10db      	asrs	r3, r3, #3
 8005b52:	461a      	mov	r2, r3
 8005b54:	01d3      	lsls	r3, r2, #7
 8005b56:	440b      	add	r3, r1
 8005b58:	4968      	ldr	r1, [pc, #416]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	b259      	sxtb	r1, r3
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	4258      	negs	r0, r3
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	f000 0007 	and.w	r0, r0, #7
 8005b6a:	bf58      	it	pl
 8005b6c:	4243      	negpl	r3, r0
 8005b6e:	2001      	movs	r0, #1
 8005b70:	fa00 f303 	lsl.w	r3, r0, r3
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	430b      	orrs	r3, r1
 8005b78:	b258      	sxtb	r0, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1c99      	adds	r1, r3, #2
 8005b7e:	01d3      	lsls	r3, r2, #7
 8005b80:	440b      	add	r3, r1
 8005b82:	b2c1      	uxtb	r1, r0
 8005b84:	4a5d      	ldr	r2, [pc, #372]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005b86:	54d1      	strb	r1, [r2, r3]
		SSD1306_Buffer[23+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f103 0117 	add.w	r1, r3, #23
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	da00      	bge.n	8005b96 <ssd1306_DrawBattery+0x11a>
 8005b94:	3307      	adds	r3, #7
 8005b96:	10db      	asrs	r3, r3, #3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	01d3      	lsls	r3, r2, #7
 8005b9c:	440b      	add	r3, r1
 8005b9e:	4957      	ldr	r1, [pc, #348]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005ba0:	5ccb      	ldrb	r3, [r1, r3]
 8005ba2:	b259      	sxtb	r1, r3
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	4258      	negs	r0, r3
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	f000 0007 	and.w	r0, r0, #7
 8005bb0:	bf58      	it	pl
 8005bb2:	4243      	negpl	r3, r0
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	fa00 f303 	lsl.w	r3, r0, r3
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	b258      	sxtb	r0, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f103 0117 	add.w	r1, r3, #23
 8005bc6:	01d3      	lsls	r3, r2, #7
 8005bc8:	440b      	add	r3, r1
 8005bca:	b2c1      	uxtb	r1, r0
 8005bcc:	4a4b      	ldr	r2, [pc, #300]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005bce:	54d1      	strb	r1, [r2, r3]
		if (y < 61 && y > 52){
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b3c      	cmp	r3, #60	; 0x3c
 8005bd4:	dc26      	bgt.n	8005c24 <ssd1306_DrawBattery+0x1a8>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b34      	cmp	r3, #52	; 0x34
 8005bda:	dd23      	ble.n	8005c24 <ssd1306_DrawBattery+0x1a8>
			SSD1306_Buffer[25+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f103 0119 	add.w	r1, r3, #25
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da00      	bge.n	8005bea <ssd1306_DrawBattery+0x16e>
 8005be8:	3307      	adds	r3, #7
 8005bea:	10db      	asrs	r3, r3, #3
 8005bec:	461a      	mov	r2, r3
 8005bee:	01d3      	lsls	r3, r2, #7
 8005bf0:	440b      	add	r3, r1
 8005bf2:	4942      	ldr	r1, [pc, #264]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005bf4:	5ccb      	ldrb	r3, [r1, r3]
 8005bf6:	b259      	sxtb	r1, r3
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	4258      	negs	r0, r3
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	f000 0007 	and.w	r0, r0, #7
 8005c04:	bf58      	it	pl
 8005c06:	4243      	negpl	r3, r0
 8005c08:	2001      	movs	r0, #1
 8005c0a:	fa00 f303 	lsl.w	r3, r0, r3
 8005c0e:	b25b      	sxtb	r3, r3
 8005c10:	430b      	orrs	r3, r1
 8005c12:	b258      	sxtb	r0, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f103 0119 	add.w	r1, r3, #25
 8005c1a:	01d3      	lsls	r3, r2, #7
 8005c1c:	440b      	add	r3, r1
 8005c1e:	b2c1      	uxtb	r1, r0
 8005c20:	4a36      	ldr	r2, [pc, #216]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005c22:	54d1      	strb	r1, [r2, r3]
	for (int y=52; y<62; y++)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b3d      	cmp	r3, #61	; 0x3d
 8005c2e:	dd89      	ble.n	8005b44 <ssd1306_DrawBattery+0xc8>
		}
	}
	SSD1306_Buffer[24+xOffset + (53 / 8) * SSD1306_WIDTH] |= 1 << (53 % 8);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8005c36:	4a31      	ldr	r2, [pc, #196]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005c38:	5cd2      	ldrb	r2, [r2, r3]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8005c40:	f042 0220 	orr.w	r2, r2, #32
 8005c44:	b2d1      	uxtb	r1, r2
 8005c46:	4a2d      	ldr	r2, [pc, #180]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005c48:	54d1      	strb	r1, [r2, r3]
	SSD1306_Buffer[24+xOffset + (60 / 8) * SSD1306_WIDTH] |= 1 << (60 % 8);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8005c50:	4a2a      	ldr	r2, [pc, #168]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005c52:	5cd2      	ldrb	r2, [r2, r3]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8005c5a:	f042 0210 	orr.w	r2, r2, #16
 8005c5e:	b2d1      	uxtb	r1, r2
 8005c60:	4a26      	ldr	r2, [pc, #152]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005c62:	54d1      	strb	r1, [r2, r3]

	//Draw remaining
	int slices = (int)(20.0 * remaining);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fa fc17 	bl	8000498 <__aeabi_f2d>
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <ssd1306_DrawBattery+0x284>)
 8005c70:	f7fa fc6a 	bl	8000548 <__aeabi_dmul>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4610      	mov	r0, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	f7fa fe76 	bl	800096c <__aeabi_d2iz>
 8005c80:	4603      	mov	r3, r0
 8005c82:	60bb      	str	r3, [r7, #8]
	for (int x=3+xOffset; x<(4+xOffset+slices); x++)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3303      	adds	r3, #3
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e02b      	b.n	8005ce4 <ssd1306_DrawBattery+0x268>
	{
		for (int y=53; y<61; y++)
 8005c8c:	2335      	movs	r3, #53	; 0x35
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	e022      	b.n	8005cd8 <ssd1306_DrawBattery+0x25c>
			{
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	da00      	bge.n	8005c9a <ssd1306_DrawBattery+0x21e>
 8005c98:	3307      	adds	r3, #7
 8005c9a:	10db      	asrs	r3, r3, #3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	01d1      	lsls	r1, r2, #7
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	440b      	add	r3, r1
 8005ca4:	4915      	ldr	r1, [pc, #84]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005ca6:	5ccb      	ldrb	r3, [r1, r3]
 8005ca8:	b259      	sxtb	r1, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4258      	negs	r0, r3
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	f000 0007 	and.w	r0, r0, #7
 8005cb6:	bf58      	it	pl
 8005cb8:	4243      	negpl	r3, r0
 8005cba:	2001      	movs	r0, #1
 8005cbc:	fa00 f303 	lsl.w	r3, r0, r3
 8005cc0:	b25b      	sxtb	r3, r3
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	b259      	sxtb	r1, r3
 8005cc6:	01d2      	lsls	r2, r2, #7
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	b2c9      	uxtb	r1, r1
 8005cce:	4a0b      	ldr	r2, [pc, #44]	; (8005cfc <ssd1306_DrawBattery+0x280>)
 8005cd0:	54d1      	strb	r1, [r2, r3]
		for (int y=53; y<61; y++)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b3c      	cmp	r3, #60	; 0x3c
 8005cdc:	ddd9      	ble.n	8005c92 <ssd1306_DrawBattery+0x216>
	for (int x=3+xOffset; x<(4+xOffset+slices); x++)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1d1a      	adds	r2, r3, #4
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4413      	add	r3, r2
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	dbcc      	blt.n	8005c8c <ssd1306_DrawBattery+0x210>
			}
	}
}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	3728      	adds	r7, #40	; 0x28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	2000068c 	.word	0x2000068c
 8005d00:	40340000 	.word	0x40340000

08005d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0a:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0e:	4a10      	ldr	r2, [pc, #64]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d10:	f043 0301 	orr.w	r3, r3, #1
 8005d14:	6613      	str	r3, [r2, #96]	; 0x60
 8005d16:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	607b      	str	r3, [r7, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d26:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <HAL_MspInit+0x4c>)
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	f06f 0003 	mvn.w	r0, #3
 8005d42:	f001 fc2c 	bl	800759e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000

08005d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d5c:	f107 0314 	add.w	r3, r7, #20
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <HAL_ADC_MspInit+0x74>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d124      	bne.n	8005dc0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005d76:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <HAL_ADC_MspInit+0x78>)
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <HAL_ADC_MspInit+0x78>)
 8005d7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <HAL_ADC_MspInit+0x78>)
 8005d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <HAL_ADC_MspInit+0x78>)
 8005d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d92:	4a0e      	ldr	r2, [pc, #56]	; (8005dcc <HAL_ADC_MspInit+0x78>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d9a:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <HAL_ADC_MspInit+0x78>)
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATT_CHECK_Pin;
 8005da6:	2308      	movs	r3, #8
 8005da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005daa:	230b      	movs	r3, #11
 8005dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_CHECK_GPIO_Port, &GPIO_InitStruct);
 8005db2:	f107 0314 	add.w	r3, r7, #20
 8005db6:	4619      	mov	r1, r3
 8005db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dbc:	f001 fdd0 	bl	8007960 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005dc0:	bf00      	nop
 8005dc2:	3728      	adds	r7, #40	; 0x28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	50040000 	.word	0x50040000
 8005dcc:	40021000 	.word	0x40021000

08005dd0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	60da      	str	r2, [r3, #12]
 8005de6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a19      	ldr	r2, [pc, #100]	; (8005e54 <HAL_DAC_MspInit+0x84>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d12c      	bne.n	8005e4c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005df2:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <HAL_DAC_MspInit+0x88>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df6:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <HAL_DAC_MspInit+0x88>)
 8005df8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <HAL_DAC_MspInit+0x88>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e06:	613b      	str	r3, [r7, #16]
 8005e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e0a:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <HAL_DAC_MspInit+0x88>)
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <HAL_DAC_MspInit+0x88>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <HAL_DAC_MspInit+0x88>)
 8005e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = TCVC_Pin;
 8005e22:	2320      	movs	r3, #32
 8005e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e26:	2303      	movs	r3, #3
 8005e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TCVC_GPIO_Port, &GPIO_InitStruct);
 8005e2e:	f107 0314 	add.w	r3, r7, #20
 8005e32:	4619      	mov	r1, r3
 8005e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e38:	f001 fd92 	bl	8007960 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2108      	movs	r1, #8
 8005e40:	2036      	movs	r0, #54	; 0x36
 8005e42:	f001 fbac 	bl	800759e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005e46:	2036      	movs	r0, #54	; 0x36
 8005e48:	f001 fbc5 	bl	80075d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005e4c:	bf00      	nop
 8005e4e:	3728      	adds	r7, #40	; 0x28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40007400 	.word	0x40007400
 8005e58:	40021000 	.word	0x40021000

08005e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08c      	sub	sp, #48	; 0x30
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e64:	f107 031c 	add.w	r3, r7, #28
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a2e      	ldr	r2, [pc, #184]	; (8005f34 <HAL_I2C_MspInit+0xd8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d128      	bne.n	8005ed0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e7e:	4b2e      	ldr	r3, [pc, #184]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	4a2d      	ldr	r2, [pc, #180]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e8a:	4b2b      	ldr	r3, [pc, #172]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEM_SCL_Pin|MEM_SDA_Pin;
 8005e96:	23c0      	movs	r3, #192	; 0xc0
 8005e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e9a:	2312      	movs	r3, #18
 8005e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eaa:	f107 031c 	add.w	r3, r7, #28
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4822      	ldr	r0, [pc, #136]	; (8005f3c <HAL_I2C_MspInit+0xe0>)
 8005eb2:	f001 fd55 	bl	8007960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005eb6:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	4a1f      	ldr	r2, [pc, #124]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005ece:	e02d      	b.n	8005f2c <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1a      	ldr	r2, [pc, #104]	; (8005f40 <HAL_I2C_MspInit+0xe4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d128      	bne.n	8005f2c <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eda:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ede:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005ee0:	f043 0302 	orr.w	r3, r3, #2
 8005ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MON_SCL_Pin|MON_SDA_Pin;
 8005ef2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ef8:	2312      	movs	r3, #18
 8005efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005efc:	2301      	movs	r3, #1
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f00:	2303      	movs	r3, #3
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005f04:	2304      	movs	r3, #4
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f08:	f107 031c 	add.w	r3, r7, #28
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	480b      	ldr	r0, [pc, #44]	; (8005f3c <HAL_I2C_MspInit+0xe0>)
 8005f10:	f001 fd26 	bl	8007960 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f14:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	4a07      	ldr	r2, [pc, #28]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005f1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <HAL_I2C_MspInit+0xdc>)
 8005f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	bf00      	nop
 8005f2e:	3730      	adds	r7, #48	; 0x30
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40005400 	.word	0x40005400
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	48000400 	.word	0x48000400
 8005f40:	40005800 	.word	0x40005800

08005f44 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f4c:	f107 0314 	add.w	r3, r7, #20
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	609a      	str	r2, [r3, #8]
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f64:	d130      	bne.n	8005fc8 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f66:	4b1a      	ldr	r3, [pc, #104]	; (8005fd0 <HAL_TIM_IC_MspInit+0x8c>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6a:	4a19      	ldr	r2, [pc, #100]	; (8005fd0 <HAL_TIM_IC_MspInit+0x8c>)
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	6593      	str	r3, [r2, #88]	; 0x58
 8005f72:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <HAL_TIM_IC_MspInit+0x8c>)
 8005f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f7e:	4b14      	ldr	r3, [pc, #80]	; (8005fd0 <HAL_TIM_IC_MspInit+0x8c>)
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <HAL_TIM_IC_MspInit+0x8c>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f8a:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <HAL_TIM_IC_MspInit+0x8c>)
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TC_IN_Pin;
 8005f96:	2304      	movs	r3, #4
 8005f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_IN_GPIO_Port, &GPIO_InitStruct);
 8005faa:	f107 0314 	add.w	r3, r7, #20
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fb4:	f001 fcd4 	bl	8007960 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2102      	movs	r1, #2
 8005fbc:	201c      	movs	r0, #28
 8005fbe:	f001 faee 	bl	800759e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005fc2:	201c      	movs	r0, #28
 8005fc4:	f001 fb07 	bl	80075d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005fc8:	bf00      	nop
 8005fca:	3728      	adds	r7, #40	; 0x28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000

08005fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <HAL_TIM_Base_MspInit+0xac>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d114      	bne.n	8006010 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005fe6:	4b27      	ldr	r3, [pc, #156]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fea:	4a26      	ldr	r2, [pc, #152]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 8005fec:	f043 0310 	orr.w	r3, r3, #16
 8005ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ff2:	4b24      	ldr	r3, [pc, #144]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 8005ffe:	2200      	movs	r2, #0
 8006000:	2108      	movs	r1, #8
 8006002:	2036      	movs	r0, #54	; 0x36
 8006004:	f001 facb 	bl	800759e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006008:	2036      	movs	r0, #54	; 0x36
 800600a:	f001 fae4 	bl	80075d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800600e:	e032      	b.n	8006076 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1c      	ldr	r2, [pc, #112]	; (8006088 <HAL_TIM_Base_MspInit+0xb4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d114      	bne.n	8006044 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800601a:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	4a19      	ldr	r2, [pc, #100]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 8006020:	f043 0320 	orr.w	r3, r3, #32
 8006024:	6593      	str	r3, [r2, #88]	; 0x58
 8006026:	4b17      	ldr	r3, [pc, #92]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 8006028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006032:	2200      	movs	r2, #0
 8006034:	2100      	movs	r1, #0
 8006036:	2037      	movs	r0, #55	; 0x37
 8006038:	f001 fab1 	bl	800759e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800603c:	2037      	movs	r0, #55	; 0x37
 800603e:	f001 faca 	bl	80075d6 <HAL_NVIC_EnableIRQ>
}
 8006042:	e018      	b.n	8006076 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a10      	ldr	r2, [pc, #64]	; (800608c <HAL_TIM_Base_MspInit+0xb8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d113      	bne.n	8006076 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800604e:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 8006050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006052:	4a0c      	ldr	r2, [pc, #48]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 8006054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006058:	6613      	str	r3, [r2, #96]	; 0x60
 800605a:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <HAL_TIM_Base_MspInit+0xb0>)
 800605c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 7, 0);
 8006066:	2200      	movs	r2, #0
 8006068:	2107      	movs	r1, #7
 800606a:	2019      	movs	r0, #25
 800606c:	f001 fa97 	bl	800759e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006070:	2019      	movs	r0, #25
 8006072:	f001 fab0 	bl	80075d6 <HAL_NVIC_EnableIRQ>
}
 8006076:	bf00      	nop
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40001000 	.word	0x40001000
 8006084:	40021000 	.word	0x40021000
 8006088:	40001400 	.word	0x40001400
 800608c:	40014400 	.word	0x40014400

08006090 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a0a      	ldr	r2, [pc, #40]	; (80060c8 <HAL_PCD_MspInit+0x38>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10b      	bne.n	80060ba <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80060a2:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <HAL_PCD_MspInit+0x3c>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <HAL_PCD_MspInit+0x3c>)
 80060a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060ac:	6593      	str	r3, [r2, #88]	; 0x58
 80060ae:	4b07      	ldr	r3, [pc, #28]	; (80060cc <HAL_PCD_MspInit+0x3c>)
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40006800 	.word	0x40006800
 80060cc:	40021000 	.word	0x40021000

080060d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80060d4:	e7fe      	b.n	80060d4 <NMI_Handler+0x4>

080060d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060d6:	b480      	push	{r7}
 80060d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060da:	e7fe      	b.n	80060da <HardFault_Handler+0x4>

080060dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060e0:	e7fe      	b.n	80060e0 <MemManage_Handler+0x4>

080060e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060e2:	b480      	push	{r7}
 80060e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060e6:	e7fe      	b.n	80060e6 <BusFault_Handler+0x4>

080060e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060ec:	e7fe      	b.n	80060ec <UsageFault_Handler+0x4>

080060ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060ee:	b480      	push	{r7}
 80060f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006100:	bf00      	nop
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800610a:	b480      	push	{r7}
 800610c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800610e:	bf00      	nop
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800611c:	f000 f8e2 	bl	80062e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006120:	bf00      	nop
 8006122:	bd80      	pop	{r7, pc}

08006124 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006128:	4802      	ldr	r0, [pc, #8]	; (8006134 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800612a:	f004 f8c9 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200002f0 	.word	0x200002f0

08006138 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800613c:	4802      	ldr	r0, [pc, #8]	; (8006148 <TIM2_IRQHandler+0x10>)
 800613e:	f004 f8bf 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2000020c 	.word	0x2000020c

0800614c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006150:	4803      	ldr	r0, [pc, #12]	; (8006160 <TIM6_DAC_IRQHandler+0x14>)
 8006152:	f004 f8b5 	bl	800a2c0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8006156:	4803      	ldr	r0, [pc, #12]	; (8006164 <TIM6_DAC_IRQHandler+0x18>)
 8006158:	f001 fa79 	bl	800764e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800615c:	bf00      	nop
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000258 	.word	0x20000258
 8006164:	20000160 	.word	0x20000160

08006168 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800616c:	4802      	ldr	r0, [pc, #8]	; (8006178 <TIM7_IRQHandler+0x10>)
 800616e:	f004 f8a7 	bl	800a2c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006172:	bf00      	nop
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	200002a4 	.word	0x200002a4

0800617c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006180:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <SystemInit+0x64>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006186:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <SystemInit+0x64>)
 8006188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800618c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006190:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <SystemInit+0x68>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a13      	ldr	r2, [pc, #76]	; (80061e4 <SystemInit+0x68>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <SystemInit+0x68>)
 800619e:	2200      	movs	r2, #0
 80061a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80061a2:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <SystemInit+0x68>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a0f      	ldr	r2, [pc, #60]	; (80061e4 <SystemInit+0x68>)
 80061a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80061ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80061b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <SystemInit+0x68>)
 80061b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80061ba:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <SystemInit+0x68>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <SystemInit+0x68>)
 80061c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80061c6:	4b07      	ldr	r3, [pc, #28]	; (80061e4 <SystemInit+0x68>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <SystemInit+0x64>)
 80061ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061d2:	609a      	str	r2, [r3, #8]
#endif
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000ed00 	.word	0xe000ed00
 80061e4:	40021000 	.word	0x40021000

080061e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80061e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006220 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80061ec:	f7ff ffc6 	bl	800617c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80061f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80061f2:	e003      	b.n	80061fc <LoopCopyDataInit>

080061f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80061f4:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80061f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80061f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80061fa:	3104      	adds	r1, #4

080061fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80061fc:	480a      	ldr	r0, [pc, #40]	; (8006228 <LoopForever+0xa>)
	ldr	r3, =_edata
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <LoopForever+0xe>)
	adds	r2, r0, r1
 8006200:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006202:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006204:	d3f6      	bcc.n	80061f4 <CopyDataInit>
	ldr	r2, =_sbss
 8006206:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006208:	e002      	b.n	8006210 <LoopFillZerobss>

0800620a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800620a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800620c:	f842 3b04 	str.w	r3, [r2], #4

08006210 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <LoopForever+0x16>)
	cmp	r2, r3
 8006212:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006214:	d3f9      	bcc.n	800620a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006216:	f004 fcaf 	bl	800ab78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800621a:	f7fd fccb 	bl	8003bb4 <main>

0800621e <LoopForever>:

LoopForever:
    b LoopForever
 800621e:	e7fe      	b.n	800621e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006220:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8006224:	0800c2f4 	.word	0x0800c2f4
	ldr	r0, =_sdata
 8006228:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800622c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8006230:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8006234:	20000a98 	.word	0x20000a98

08006238 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006238:	e7fe      	b.n	8006238 <ADC1_IRQHandler>

0800623a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006244:	2003      	movs	r0, #3
 8006246:	f001 f99f 	bl	8007588 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800624a:	2000      	movs	r0, #0
 800624c:	f000 f80e 	bl	800626c <HAL_InitTick>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	71fb      	strb	r3, [r7, #7]
 800625a:	e001      	b.n	8006260 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800625c:	f7ff fd52 	bl	8005d04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006260:	79fb      	ldrb	r3, [r7, #7]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006278:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <HAL_InitTick+0x6c>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d023      	beq.n	80062c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006280:	4b16      	ldr	r3, [pc, #88]	; (80062dc <HAL_InitTick+0x70>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <HAL_InitTick+0x6c>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	4619      	mov	r1, r3
 800628a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800628e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006292:	fbb2 f3f3 	udiv	r3, r2, r3
 8006296:	4618      	mov	r0, r3
 8006298:	f001 f9ab 	bl	80075f2 <HAL_SYSTICK_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10f      	bne.n	80062c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b0f      	cmp	r3, #15
 80062a6:	d809      	bhi.n	80062bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062a8:	2200      	movs	r2, #0
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062b0:	f001 f975 	bl	800759e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80062b4:	4a0a      	ldr	r2, [pc, #40]	; (80062e0 <HAL_InitTick+0x74>)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	e007      	b.n	80062cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
 80062c0:	e004      	b.n	80062cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e001      	b.n	80062cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	2000006c 	.word	0x2000006c
 80062dc:	20000064 	.word	0x20000064
 80062e0:	20000068 	.word	0x20000068

080062e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_IncTick+0x20>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <HAL_IncTick+0x24>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4413      	add	r3, r2
 80062f4:	4a04      	ldr	r2, [pc, #16]	; (8006308 <HAL_IncTick+0x24>)
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	bf00      	nop
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	2000006c 	.word	0x2000006c
 8006308:	20000a94 	.word	0x20000a94

0800630c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return uwTick;
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <HAL_GetTick+0x14>)
 8006312:	681b      	ldr	r3, [r3, #0]
}
 8006314:	4618      	mov	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000a94 	.word	0x20000a94

08006324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800632c:	f7ff ffee 	bl	800630c <HAL_GetTick>
 8006330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633c:	d005      	beq.n	800634a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800633e:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <HAL_Delay+0x44>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800634a:	bf00      	nop
 800634c:	f7ff ffde 	bl	800630c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	429a      	cmp	r2, r3
 800635a:	d8f7      	bhi.n	800634c <HAL_Delay+0x28>
  {
  }
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	2000006c 	.word	0x2000006c

0800636c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	609a      	str	r2, [r3, #8]
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3360      	adds	r3, #96	; 0x60
 80063e6:	461a      	mov	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <LL_ADC_SetOffset+0x44>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	03fff000 	.word	0x03fff000

0800641c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3360      	adds	r3, #96	; 0x60
 800642a:	461a      	mov	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3360      	adds	r3, #96	; 0x60
 8006458:	461a      	mov	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	431a      	orrs	r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3330      	adds	r3, #48	; 0x30
 80064b4:	461a      	mov	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	f003 030c 	and.w	r3, r3, #12
 80064c0:	4413      	add	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	211f      	movs	r1, #31
 80064d0:	fa01 f303 	lsl.w	r3, r1, r3
 80064d4:	43db      	mvns	r3, r3
 80064d6:	401a      	ands	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	0e9b      	lsrs	r3, r3, #26
 80064dc:	f003 011f 	and.w	r1, r3, #31
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f003 031f 	and.w	r3, r3, #31
 80064e6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ea:	431a      	orrs	r2, r3
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3314      	adds	r3, #20
 800650c:	461a      	mov	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	0e5b      	lsrs	r3, r3, #25
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	4413      	add	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	0d1b      	lsrs	r3, r3, #20
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2107      	movs	r1, #7
 800652a:	fa01 f303 	lsl.w	r3, r1, r3
 800652e:	43db      	mvns	r3, r3
 8006530:	401a      	ands	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	0d1b      	lsrs	r3, r3, #20
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	431a      	orrs	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800656c:	43db      	mvns	r3, r3
 800656e:	401a      	ands	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f003 0318 	and.w	r3, r3, #24
 8006576:	4908      	ldr	r1, [pc, #32]	; (8006598 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006578:	40d9      	lsrs	r1, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	400b      	ands	r3, r1
 800657e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006582:	431a      	orrs	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	0007ffff 	.word	0x0007ffff

0800659c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80065ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6093      	str	r3, [r2, #8]
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d4:	d101      	bne.n	80065da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80065f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006624:	d101      	bne.n	800662a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800664c:	f043 0201 	orr.w	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <LL_ADC_IsEnabled+0x18>
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <LL_ADC_IsEnabled+0x1a>
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006696:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800669a:	f043 0204 	orr.w	r2, r3, #4
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d101      	bne.n	80066c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d101      	bne.n	80066ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006708:	2300      	movs	r3, #0
 800670a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e12a      	b.n	800696c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff fb15 	bl	8005d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ff3f 	bl	80065c0 <LL_ADC_IsDeepPowerDownEnabled>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff ff25 	bl	800659c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff ff5a 	bl	8006610 <LL_ADC_IsInternalRegulatorEnabled>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d113      	bne.n	800678a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff ff3e 	bl	80065e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800676c:	4b81      	ldr	r3, [pc, #516]	; (8006974 <HAL_ADC_Init+0x278>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	099b      	lsrs	r3, r3, #6
 8006772:	4a81      	ldr	r2, [pc, #516]	; (8006978 <HAL_ADC_Init+0x27c>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	099b      	lsrs	r3, r3, #6
 800677a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800677c:	e002      	b.n	8006784 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	3b01      	subs	r3, #1
 8006782:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f9      	bne.n	800677e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff ff3e 	bl	8006610 <LL_ADC_IsInternalRegulatorEnabled>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10d      	bne.n	80067b6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f043 0210 	orr.w	r2, r3, #16
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067aa:	f043 0201 	orr.w	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff ff77 	bl	80066ae <LL_ADC_REG_IsConversionOngoing>
 80067c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 80c5 	bne.w	800695a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 80c1 	bne.w	800695a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80067e0:	f043 0202 	orr.w	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ff37 	bl	8006660 <LL_ADC_IsEnabled>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067f8:	4860      	ldr	r0, [pc, #384]	; (800697c <HAL_ADC_Init+0x280>)
 80067fa:	f7ff ff31 	bl	8006660 <LL_ADC_IsEnabled>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4619      	mov	r1, r3
 800680a:	485d      	ldr	r0, [pc, #372]	; (8006980 <HAL_ADC_Init+0x284>)
 800680c:	f7ff fdae 	bl	800636c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	7e5b      	ldrb	r3, [r3, #25]
 8006814:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800681a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006820:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006826:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800682e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006830:	4313      	orrs	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d106      	bne.n	800684c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	3b01      	subs	r3, #1
 8006844:	045b      	lsls	r3, r3, #17
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4313      	orrs	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4313      	orrs	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	4b45      	ldr	r3, [pc, #276]	; (8006984 <HAL_ADC_Init+0x288>)
 8006870:	4013      	ands	r3, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6812      	ldr	r2, [r2, #0]
 8006876:	69b9      	ldr	r1, [r7, #24]
 8006878:	430b      	orrs	r3, r1
 800687a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff ff14 	bl	80066ae <LL_ADC_REG_IsConversionOngoing>
 8006886:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff ff21 	bl	80066d4 <LL_ADC_INJ_IsConversionOngoing>
 8006892:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d13d      	bne.n	8006916 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d13a      	bne.n	8006916 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80068a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80068ae:	4313      	orrs	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068bc:	f023 0302 	bic.w	r3, r3, #2
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	69b9      	ldr	r1, [r7, #24]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d118      	bne.n	8006906 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068de:	f023 0304 	bic.w	r3, r3, #4
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80068ea:	4311      	orrs	r1, r2
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80068f0:	4311      	orrs	r1, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068f6:	430a      	orrs	r2, r1
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	611a      	str	r2, [r3, #16]
 8006904:	e007      	b.n	8006916 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d10c      	bne.n	8006938 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	f023 010f 	bic.w	r1, r3, #15
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	631a      	str	r2, [r3, #48]	; 0x30
 8006936:	e007      	b.n	8006948 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 020f 	bic.w	r2, r2, #15
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694c:	f023 0303 	bic.w	r3, r3, #3
 8006950:	f043 0201 	orr.w	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	655a      	str	r2, [r3, #84]	; 0x54
 8006958:	e007      	b.n	800696a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f043 0210 	orr.w	r2, r3, #16
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800696a:	7ffb      	ldrb	r3, [r7, #31]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000064 	.word	0x20000064
 8006978:	053e2d63 	.word	0x053e2d63
 800697c:	50040000 	.word	0x50040000
 8006980:	50040300 	.word	0x50040300
 8006984:	fff0c007 	.word	0xfff0c007

08006988 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fe8a 	bl	80066ae <LL_ADC_REG_IsConversionOngoing>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d14f      	bne.n	8006a40 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d101      	bne.n	80069ae <HAL_ADC_Start+0x26>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e04b      	b.n	8006a46 <HAL_ADC_Start+0xbe>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fcbc 	bl	8007334 <ADC_Enable>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d137      	bne.n	8006a36 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e6:	d106      	bne.n	80069f6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ec:	f023 0206 	bic.w	r2, r3, #6
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	659a      	str	r2, [r3, #88]	; 0x58
 80069f4:	e002      	b.n	80069fc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	221c      	movs	r2, #28
 8006a02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fe29 	bl	8006686 <LL_ADC_REG_StartConversion>
 8006a34:	e006      	b.n	8006a44 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006a3e:	e001      	b.n	8006a44 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
 8006a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d102      	bne.n	8006a66 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8006a60:	2308      	movs	r3, #8
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e010      	b.n	8006a88 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e068      	b.n	8006b56 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8006a84:	2304      	movs	r3, #4
 8006a86:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006a88:	f7ff fc40 	bl	800630c <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006a8e:	e01a      	b.n	8006ac6 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a96:	d016      	beq.n	8006ac6 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006a98:	f7ff fc38 	bl	800630c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d302      	bcc.n	8006aae <HAL_ADC_PollForConversion+0x60>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10b      	bne.n	8006ac6 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	f043 0204 	orr.w	r2, r3, #4
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e047      	b.n	8006b56 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0dd      	beq.n	8006a90 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fcca 	bl	800647e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01c      	beq.n	8006b2a <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7e5b      	ldrb	r3, [r3, #25]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d118      	bne.n	8006b2a <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d111      	bne.n	8006b2a <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d105      	bne.n	8006b2a <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0201 	orr.w	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d104      	bne.n	8006b42 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2208      	movs	r2, #8
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	e008      	b.n	8006b54 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d103      	bne.n	8006b54 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	220c      	movs	r2, #12
 8006b52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b0b6      	sub	sp, #216	; 0xd8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_ADC_ConfigChannel+0x22>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e3b8      	b.n	800730c <HAL_ADC_ConfigChannel+0x794>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff fd81 	bl	80066ae <LL_ADC_REG_IsConversionOngoing>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f040 839d 	bne.w	80072ee <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d824      	bhi.n	8006c06 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	3b02      	subs	r3, #2
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d81b      	bhi.n	8006bfe <HAL_ADC_ConfigChannel+0x86>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <HAL_ADC_ConfigChannel+0x54>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006bed 	.word	0x08006bed
 8006bd8:	08006bf5 	.word	0x08006bf5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	220c      	movs	r2, #12
 8006be0:	605a      	str	r2, [r3, #4]
          break;
 8006be2:	e011      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2212      	movs	r2, #18
 8006be8:	605a      	str	r2, [r3, #4]
          break;
 8006bea:	e00d      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2218      	movs	r2, #24
 8006bf0:	605a      	str	r2, [r3, #4]
          break;
 8006bf2:	e009      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bfa:	605a      	str	r2, [r3, #4]
          break;
 8006bfc:	e004      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2206      	movs	r2, #6
 8006c02:	605a      	str	r2, [r3, #4]
          break;
 8006c04:	e000      	b.n	8006c08 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8006c06:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	6859      	ldr	r1, [r3, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	f7ff fc45 	bl	80064a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fd45 	bl	80066ae <LL_ADC_REG_IsConversionOngoing>
 8006c24:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fd51 	bl	80066d4 <LL_ADC_INJ_IsConversionOngoing>
 8006c32:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f040 81a6 	bne.w	8006f8c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 81a1 	bne.w	8006f8c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	6819      	ldr	r1, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f7ff fc50 	bl	80064fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	695a      	ldr	r2, [r3, #20]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	08db      	lsrs	r3, r3, #3
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d00a      	beq.n	8006c94 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6919      	ldr	r1, [r3, #16]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c8e:	f7ff fba1 	bl	80063d4 <LL_ADC_SetOffset>
 8006c92:	e17b      	b.n	8006f8c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fbbe 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <HAL_ADC_ConfigChannel+0x148>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fbb3 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	0e9b      	lsrs	r3, r3, #26
 8006cba:	f003 021f 	and.w	r2, r3, #31
 8006cbe:	e01e      	b.n	8006cfe <HAL_ADC_ConfigChannel+0x186>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fba8 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cd6:	fa93 f3a3 	rbit	r3, r3
 8006cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006cde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006ce6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8006cee:	2320      	movs	r3, #32
 8006cf0:	e004      	b.n	8006cfc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8006cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cf6:	fab3 f383 	clz	r3, r3
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d105      	bne.n	8006d16 <HAL_ADC_ConfigChannel+0x19e>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	0e9b      	lsrs	r3, r3, #26
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	e018      	b.n	8006d48 <HAL_ADC_ConfigChannel+0x1d0>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d22:	fa93 f3a3 	rbit	r3, r3
 8006d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8006d3a:	2320      	movs	r3, #32
 8006d3c:	e004      	b.n	8006d48 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8006d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d42:	fab3 f383 	clz	r3, r3
 8006d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d106      	bne.n	8006d5a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2200      	movs	r2, #0
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fb77 	bl	8006448 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fb5b 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <HAL_ADC_ConfigChannel+0x20e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2101      	movs	r1, #1
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fb50 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	0e9b      	lsrs	r3, r3, #26
 8006d80:	f003 021f 	and.w	r2, r3, #31
 8006d84:	e01e      	b.n	8006dc4 <HAL_ADC_ConfigChannel+0x24c>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fb45 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d9c:	fa93 f3a3 	rbit	r3, r3
 8006da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006da4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8006db4:	2320      	movs	r3, #32
 8006db6:	e004      	b.n	8006dc2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8006db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dbc:	fab3 f383 	clz	r3, r3
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d105      	bne.n	8006ddc <HAL_ADC_ConfigChannel+0x264>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	0e9b      	lsrs	r3, r3, #26
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	e018      	b.n	8006e0e <HAL_ADC_ConfigChannel+0x296>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006de8:	fa93 f3a3 	rbit	r3, r3
 8006dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006e00:	2320      	movs	r3, #32
 8006e02:	e004      	b.n	8006e0e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8006e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e08:	fab3 f383 	clz	r3, r3
 8006e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d106      	bne.n	8006e20 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2200      	movs	r2, #0
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fb14 	bl	8006448 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2102      	movs	r1, #2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff faf8 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x2d4>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2102      	movs	r1, #2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff faed 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006e42:	4603      	mov	r3, r0
 8006e44:	0e9b      	lsrs	r3, r3, #26
 8006e46:	f003 021f 	and.w	r2, r3, #31
 8006e4a:	e01e      	b.n	8006e8a <HAL_ADC_ConfigChannel+0x312>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2102      	movs	r1, #2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fae2 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e62:	fa93 f3a3 	rbit	r3, r3
 8006e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8006e7a:	2320      	movs	r3, #32
 8006e7c:	e004      	b.n	8006e88 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e82:	fab3 f383 	clz	r3, r3
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d105      	bne.n	8006ea2 <HAL_ADC_ConfigChannel+0x32a>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	0e9b      	lsrs	r3, r3, #26
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	e016      	b.n	8006ed0 <HAL_ADC_ConfigChannel+0x358>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eae:	fa93 f3a3 	rbit	r3, r3
 8006eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8006ec2:	2320      	movs	r3, #32
 8006ec4:	e004      	b.n	8006ed0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8006ec6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eca:	fab3 f383 	clz	r3, r3
 8006ece:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d106      	bne.n	8006ee2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2102      	movs	r1, #2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff fab3 	bl	8006448 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2103      	movs	r1, #3
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff fa97 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <HAL_ADC_ConfigChannel+0x396>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2103      	movs	r1, #3
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff fa8c 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006f04:	4603      	mov	r3, r0
 8006f06:	0e9b      	lsrs	r3, r3, #26
 8006f08:	f003 021f 	and.w	r2, r3, #31
 8006f0c:	e017      	b.n	8006f3e <HAL_ADC_ConfigChannel+0x3c6>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2103      	movs	r1, #3
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fa81 	bl	800641c <LL_ADC_GetOffsetChannel>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	fa93 f3a3 	rbit	r3, r3
 8006f24:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f28:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006f30:	2320      	movs	r3, #32
 8006f32:	e003      	b.n	8006f3c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f36:	fab3 f383 	clz	r3, r3
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d105      	bne.n	8006f56 <HAL_ADC_ConfigChannel+0x3de>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	0e9b      	lsrs	r3, r3, #26
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	e011      	b.n	8006f7a <HAL_ADC_ConfigChannel+0x402>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f5e:	fa93 f3a3 	rbit	r3, r3
 8006f62:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f66:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006f6e:	2320      	movs	r3, #32
 8006f70:	e003      	b.n	8006f7a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f74:	fab3 f383 	clz	r3, r3
 8006f78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d106      	bne.n	8006f8c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	2103      	movs	r1, #3
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff fa5e 	bl	8006448 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff fb65 	bl	8006660 <LL_ADC_IsEnabled>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 813f 	bne.w	800721c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6819      	ldr	r1, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7ff fad2 	bl	8006554 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4a8e      	ldr	r2, [pc, #568]	; (80071f0 <HAL_ADC_ConfigChannel+0x678>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	f040 8130 	bne.w	800721c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <HAL_ADC_ConfigChannel+0x46c>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	0e9b      	lsrs	r3, r3, #26
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	2b09      	cmp	r3, #9
 8006fda:	bf94      	ite	ls
 8006fdc:	2301      	movls	r3, #1
 8006fde:	2300      	movhi	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e019      	b.n	8007018 <HAL_ADC_ConfigChannel+0x4a0>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fec:	fa93 f3a3 	rbit	r3, r3
 8006ff0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006ff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ff4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006ffc:	2320      	movs	r3, #32
 8006ffe:	e003      	b.n	8007008 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007000:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007002:	fab3 f383 	clz	r3, r3
 8007006:	b2db      	uxtb	r3, r3
 8007008:	3301      	adds	r3, #1
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2b09      	cmp	r3, #9
 8007010:	bf94      	ite	ls
 8007012:	2301      	movls	r3, #1
 8007014:	2300      	movhi	r3, #0
 8007016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007018:	2b00      	cmp	r3, #0
 800701a:	d079      	beq.n	8007110 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007024:	2b00      	cmp	r3, #0
 8007026:	d107      	bne.n	8007038 <HAL_ADC_ConfigChannel+0x4c0>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	0e9b      	lsrs	r3, r3, #26
 800702e:	3301      	adds	r3, #1
 8007030:	069b      	lsls	r3, r3, #26
 8007032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007036:	e015      	b.n	8007064 <HAL_ADC_ConfigChannel+0x4ec>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007040:	fa93 f3a3 	rbit	r3, r3
 8007044:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007048:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800704a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8007050:	2320      	movs	r3, #32
 8007052:	e003      	b.n	800705c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8007054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007056:	fab3 f383 	clz	r3, r3
 800705a:	b2db      	uxtb	r3, r3
 800705c:	3301      	adds	r3, #1
 800705e:	069b      	lsls	r3, r3, #26
 8007060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <HAL_ADC_ConfigChannel+0x50c>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	0e9b      	lsrs	r3, r3, #26
 8007076:	3301      	adds	r3, #1
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f303 	lsl.w	r3, r1, r3
 8007082:	e017      	b.n	80070b4 <HAL_ADC_ConfigChannel+0x53c>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800708a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708c:	fa93 f3a3 	rbit	r3, r3
 8007090:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007094:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800709c:	2320      	movs	r3, #32
 800709e:	e003      	b.n	80070a8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80070a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a2:	fab3 f383 	clz	r3, r3
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	3301      	adds	r3, #1
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2101      	movs	r1, #1
 80070b0:	fa01 f303 	lsl.w	r3, r1, r3
 80070b4:	ea42 0103 	orr.w	r1, r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <HAL_ADC_ConfigChannel+0x562>
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	0e9b      	lsrs	r3, r3, #26
 80070ca:	3301      	adds	r3, #1
 80070cc:	f003 021f 	and.w	r2, r3, #31
 80070d0:	4613      	mov	r3, r2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	4413      	add	r3, r2
 80070d6:	051b      	lsls	r3, r3, #20
 80070d8:	e018      	b.n	800710c <HAL_ADC_ConfigChannel+0x594>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	fa93 f3a3 	rbit	r3, r3
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80070e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80070ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80070f2:	2320      	movs	r3, #32
 80070f4:	e003      	b.n	80070fe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80070f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f8:	fab3 f383 	clz	r3, r3
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	3301      	adds	r3, #1
 8007100:	f003 021f 	and.w	r2, r3, #31
 8007104:	4613      	mov	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	4413      	add	r3, r2
 800710a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800710c:	430b      	orrs	r3, r1
 800710e:	e080      	b.n	8007212 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <HAL_ADC_ConfigChannel+0x5b4>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	0e9b      	lsrs	r3, r3, #26
 8007122:	3301      	adds	r3, #1
 8007124:	069b      	lsls	r3, r3, #26
 8007126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800712a:	e015      	b.n	8007158 <HAL_ADC_ConfigChannel+0x5e0>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	fa93 f3a3 	rbit	r3, r3
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8007144:	2320      	movs	r3, #32
 8007146:	e003      	b.n	8007150 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	fab3 f383 	clz	r3, r3
 800714e:	b2db      	uxtb	r3, r3
 8007150:	3301      	adds	r3, #1
 8007152:	069b      	lsls	r3, r3, #26
 8007154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <HAL_ADC_ConfigChannel+0x600>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0e9b      	lsrs	r3, r3, #26
 800716a:	3301      	adds	r3, #1
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2101      	movs	r1, #1
 8007172:	fa01 f303 	lsl.w	r3, r1, r3
 8007176:	e017      	b.n	80071a8 <HAL_ADC_ConfigChannel+0x630>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	fa93 f3a3 	rbit	r3, r3
 8007184:	61fb      	str	r3, [r7, #28]
  return result;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8007190:	2320      	movs	r3, #32
 8007192:	e003      	b.n	800719c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	fab3 f383 	clz	r3, r3
 800719a:	b2db      	uxtb	r3, r3
 800719c:	3301      	adds	r3, #1
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2101      	movs	r1, #1
 80071a4:	fa01 f303 	lsl.w	r3, r1, r3
 80071a8:	ea42 0103 	orr.w	r1, r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10d      	bne.n	80071d4 <HAL_ADC_ConfigChannel+0x65c>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	0e9b      	lsrs	r3, r3, #26
 80071be:	3301      	adds	r3, #1
 80071c0:	f003 021f 	and.w	r2, r3, #31
 80071c4:	4613      	mov	r3, r2
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	4413      	add	r3, r2
 80071ca:	3b1e      	subs	r3, #30
 80071cc:	051b      	lsls	r3, r3, #20
 80071ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071d2:	e01d      	b.n	8007210 <HAL_ADC_ConfigChannel+0x698>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	fa93 f3a3 	rbit	r3, r3
 80071e0:	613b      	str	r3, [r7, #16]
  return result;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80071ec:	2320      	movs	r3, #32
 80071ee:	e005      	b.n	80071fc <HAL_ADC_ConfigChannel+0x684>
 80071f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	fab3 f383 	clz	r3, r3
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	3301      	adds	r3, #1
 80071fe:	f003 021f 	and.w	r2, r3, #31
 8007202:	4613      	mov	r3, r2
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	4413      	add	r3, r2
 8007208:	3b1e      	subs	r3, #30
 800720a:	051b      	lsls	r3, r3, #20
 800720c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007210:	430b      	orrs	r3, r1
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	6892      	ldr	r2, [r2, #8]
 8007216:	4619      	mov	r1, r3
 8007218:	f7ff f970 	bl	80064fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	4b3c      	ldr	r3, [pc, #240]	; (8007314 <HAL_ADC_ConfigChannel+0x79c>)
 8007222:	4013      	ands	r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d06b      	beq.n	8007300 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007228:	483b      	ldr	r0, [pc, #236]	; (8007318 <HAL_ADC_ConfigChannel+0x7a0>)
 800722a:	f7ff f8c5 	bl	80063b8 <LL_ADC_GetCommonPathInternalCh>
 800722e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a39      	ldr	r2, [pc, #228]	; (800731c <HAL_ADC_ConfigChannel+0x7a4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d126      	bne.n	800728a <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800723c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d120      	bne.n	800728a <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a34      	ldr	r2, [pc, #208]	; (8007320 <HAL_ADC_ConfigChannel+0x7a8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d156      	bne.n	8007300 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007256:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800725a:	4619      	mov	r1, r3
 800725c:	482e      	ldr	r0, [pc, #184]	; (8007318 <HAL_ADC_ConfigChannel+0x7a0>)
 800725e:	f7ff f898 	bl	8006392 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007262:	4b30      	ldr	r3, [pc, #192]	; (8007324 <HAL_ADC_ConfigChannel+0x7ac>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	4a2f      	ldr	r2, [pc, #188]	; (8007328 <HAL_ADC_ConfigChannel+0x7b0>)
 800726a:	fba2 2303 	umull	r2, r3, r2, r3
 800726e:	099a      	lsrs	r2, r3, #6
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800727a:	e002      	b.n	8007282 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3b01      	subs	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f9      	bne.n	800727c <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007288:	e03a      	b.n	8007300 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a27      	ldr	r2, [pc, #156]	; (800732c <HAL_ADC_ConfigChannel+0x7b4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d113      	bne.n	80072bc <HAL_ADC_ConfigChannel+0x744>
 8007294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10d      	bne.n	80072bc <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <HAL_ADC_ConfigChannel+0x7a8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d12a      	bne.n	8007300 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072b2:	4619      	mov	r1, r3
 80072b4:	4818      	ldr	r0, [pc, #96]	; (8007318 <HAL_ADC_ConfigChannel+0x7a0>)
 80072b6:	f7ff f86c 	bl	8006392 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072ba:	e021      	b.n	8007300 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1b      	ldr	r2, [pc, #108]	; (8007330 <HAL_ADC_ConfigChannel+0x7b8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d11c      	bne.n	8007300 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80072c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d116      	bne.n	8007300 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a12      	ldr	r2, [pc, #72]	; (8007320 <HAL_ADC_ConfigChannel+0x7a8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d111      	bne.n	8007300 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072e4:	4619      	mov	r1, r3
 80072e6:	480c      	ldr	r0, [pc, #48]	; (8007318 <HAL_ADC_ConfigChannel+0x7a0>)
 80072e8:	f7ff f853 	bl	8006392 <LL_ADC_SetCommonPathInternalCh>
 80072ec:	e008      	b.n	8007300 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007308:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800730c:	4618      	mov	r0, r3
 800730e:	37d8      	adds	r7, #216	; 0xd8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	80080000 	.word	0x80080000
 8007318:	50040300 	.word	0x50040300
 800731c:	c7520000 	.word	0xc7520000
 8007320:	50040000 	.word	0x50040000
 8007324:	20000064 	.word	0x20000064
 8007328:	053e2d63 	.word	0x053e2d63
 800732c:	cb840000 	.word	0xcb840000
 8007330:	80000001 	.word	0x80000001

08007334 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff f98d 	bl	8006660 <LL_ADC_IsEnabled>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d146      	bne.n	80073da <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <ADC_Enable+0xb0>)
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00d      	beq.n	8007376 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	f043 0210 	orr.w	r2, r3, #16
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736a:	f043 0201 	orr.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e032      	b.n	80073dc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff f95c 	bl	8006638 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007380:	f7fe ffc4 	bl	800630c <HAL_GetTick>
 8007384:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007386:	e021      	b.n	80073cc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff f967 	bl	8006660 <LL_ADC_IsEnabled>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff f94b 	bl	8006638 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80073a2:	f7fe ffb3 	bl	800630c <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d90d      	bls.n	80073cc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b4:	f043 0210 	orr.w	r2, r3, #16
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c0:	f043 0201 	orr.w	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e007      	b.n	80073dc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d1d6      	bne.n	8007388 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	8000003f 	.word	0x8000003f

080073e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073f8:	4b0c      	ldr	r3, [pc, #48]	; (800742c <__NVIC_SetPriorityGrouping+0x44>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007404:	4013      	ands	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800741a:	4a04      	ldr	r2, [pc, #16]	; (800742c <__NVIC_SetPriorityGrouping+0x44>)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	60d3      	str	r3, [r2, #12]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	e000ed00 	.word	0xe000ed00

08007430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007434:	4b04      	ldr	r3, [pc, #16]	; (8007448 <__NVIC_GetPriorityGrouping+0x18>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	0a1b      	lsrs	r3, r3, #8
 800743a:	f003 0307 	and.w	r3, r3, #7
}
 800743e:	4618      	mov	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	e000ed00 	.word	0xe000ed00

0800744c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745a:	2b00      	cmp	r3, #0
 800745c:	db0b      	blt.n	8007476 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	f003 021f 	and.w	r2, r3, #31
 8007464:	4907      	ldr	r1, [pc, #28]	; (8007484 <__NVIC_EnableIRQ+0x38>)
 8007466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	2001      	movs	r0, #1
 800746e:	fa00 f202 	lsl.w	r2, r0, r2
 8007472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	e000e100 	.word	0xe000e100

08007488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007498:	2b00      	cmp	r3, #0
 800749a:	db0a      	blt.n	80074b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	490c      	ldr	r1, [pc, #48]	; (80074d4 <__NVIC_SetPriority+0x4c>)
 80074a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a6:	0112      	lsls	r2, r2, #4
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	440b      	add	r3, r1
 80074ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074b0:	e00a      	b.n	80074c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	4908      	ldr	r1, [pc, #32]	; (80074d8 <__NVIC_SetPriority+0x50>)
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	3b04      	subs	r3, #4
 80074c0:	0112      	lsls	r2, r2, #4
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	440b      	add	r3, r1
 80074c6:	761a      	strb	r2, [r3, #24]
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	e000e100 	.word	0xe000e100
 80074d8:	e000ed00 	.word	0xe000ed00

080074dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f1c3 0307 	rsb	r3, r3, #7
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	bf28      	it	cs
 80074fa:	2304      	movcs	r3, #4
 80074fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	3304      	adds	r3, #4
 8007502:	2b06      	cmp	r3, #6
 8007504:	d902      	bls.n	800750c <NVIC_EncodePriority+0x30>
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	3b03      	subs	r3, #3
 800750a:	e000      	b.n	800750e <NVIC_EncodePriority+0x32>
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	fa02 f303 	lsl.w	r3, r2, r3
 800751a:	43da      	mvns	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	401a      	ands	r2, r3
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	fa01 f303 	lsl.w	r3, r1, r3
 800752e:	43d9      	mvns	r1, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007534:	4313      	orrs	r3, r2
         );
}
 8007536:	4618      	mov	r0, r3
 8007538:	3724      	adds	r7, #36	; 0x24
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
	...

08007544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3b01      	subs	r3, #1
 8007550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007554:	d301      	bcc.n	800755a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007556:	2301      	movs	r3, #1
 8007558:	e00f      	b.n	800757a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800755a:	4a0a      	ldr	r2, [pc, #40]	; (8007584 <SysTick_Config+0x40>)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3b01      	subs	r3, #1
 8007560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007562:	210f      	movs	r1, #15
 8007564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007568:	f7ff ff8e 	bl	8007488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <SysTick_Config+0x40>)
 800756e:	2200      	movs	r2, #0
 8007570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007572:	4b04      	ldr	r3, [pc, #16]	; (8007584 <SysTick_Config+0x40>)
 8007574:	2207      	movs	r2, #7
 8007576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	e000e010 	.word	0xe000e010

08007588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff ff29 	bl	80073e8 <__NVIC_SetPriorityGrouping>
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b086      	sub	sp, #24
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	4603      	mov	r3, r0
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	607a      	str	r2, [r7, #4]
 80075aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80075ac:	2300      	movs	r3, #0
 80075ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80075b0:	f7ff ff3e 	bl	8007430 <__NVIC_GetPriorityGrouping>
 80075b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	6978      	ldr	r0, [r7, #20]
 80075bc:	f7ff ff8e 	bl	80074dc <NVIC_EncodePriority>
 80075c0:	4602      	mov	r2, r0
 80075c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff ff5d 	bl	8007488 <__NVIC_SetPriority>
}
 80075ce:	bf00      	nop
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	4603      	mov	r3, r0
 80075de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff ff31 	bl	800744c <__NVIC_EnableIRQ>
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff ffa2 	bl	8007544 <SysTick_Config>
 8007600:	4603      	mov	r3, r0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e014      	b.n	8007646 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7fe fbcf 	bl	8005dd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2202      	movs	r2, #2
 8007636:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007664:	d120      	bne.n	80076a8 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007674:	d118      	bne.n	80076a8 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2204      	movs	r2, #4
 800767a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	f043 0201 	orr.w	r2, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007690:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076a0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f82d 	bl	8007702 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b6:	d120      	bne.n	80076fa <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c6:	d118      	bne.n	80076fa <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2204      	movs	r2, #4
 80076cc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f043 0202 	orr.w	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80076e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80076f2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f928 	bl	800794a <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b088      	sub	sp, #32
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	795b      	ldrb	r3, [r3, #5]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_DAC_ConfigChannel+0x1c>
 800772e:	2302      	movs	r3, #2
 8007730:	e107      	b.n	8007942 <HAL_DAC_ConfigChannel+0x22c>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2202      	movs	r2, #2
 800773c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b04      	cmp	r3, #4
 8007744:	d174      	bne.n	8007830 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007746:	f7fe fde1 	bl	800630c <HAL_GetTick>
 800774a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d134      	bne.n	80077bc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007752:	e011      	b.n	8007778 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007754:	f7fe fdda 	bl	800630c <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b01      	cmp	r3, #1
 8007760:	d90a      	bls.n	8007778 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f043 0208 	orr.w	r2, r3, #8
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2203      	movs	r2, #3
 8007772:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e0e4      	b.n	8007942 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e6      	bne.n	8007754 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8007786:	2001      	movs	r0, #1
 8007788:	f7fe fdcc 	bl	8006324 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	6992      	ldr	r2, [r2, #24]
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
 8007796:	e01e      	b.n	80077d6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007798:	f7fe fdb8 	bl	800630c <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d90a      	bls.n	80077bc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f043 0208 	orr.w	r2, r3, #8
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2203      	movs	r2, #3
 80077b6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e0c2      	b.n	8007942 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dbe8      	blt.n	8007798 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80077c6:	2001      	movs	r0, #1
 80077c8:	f7fe fdac 	bl	8006324 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	6992      	ldr	r2, [r2, #24]
 80077d4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80077e6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ea:	43db      	mvns	r3, r3
 80077ec:	ea02 0103 	and.w	r1, r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f003 0310 	and.w	r3, r3, #16
 80077fa:	409a      	lsls	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f003 0310 	and.w	r3, r3, #16
 8007810:	21ff      	movs	r1, #255	; 0xff
 8007812:	fa01 f303 	lsl.w	r3, r1, r3
 8007816:	43db      	mvns	r3, r3
 8007818:	ea02 0103 	and.w	r1, r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6a1a      	ldr	r2, [r3, #32]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f003 0310 	and.w	r3, r3, #16
 8007826:	409a      	lsls	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d11d      	bne.n	8007874 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	221f      	movs	r2, #31
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	43db      	mvns	r3, r3
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	4013      	ands	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	fa02 f303 	lsl.w	r3, r2, r3
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	4313      	orrs	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2207      	movs	r2, #7
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	43db      	mvns	r3, r3
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	4013      	ands	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	431a      	orrs	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6819      	ldr	r1, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	43da      	mvns	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	400a      	ands	r2, r1
 80078d8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	f640 72fc 	movw	r2, #4092	; 0xffc
 80078ec:	fa02 f303 	lsl.w	r3, r2, r3
 80078f0:	43db      	mvns	r3, r3
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	4013      	ands	r3, r2
 80078f6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	4313      	orrs	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6819      	ldr	r1, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	22c0      	movs	r2, #192	; 0xc0
 8007926:	fa02 f303 	lsl.w	r3, r2, r3
 800792a:	43da      	mvns	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	400a      	ands	r2, r1
 8007932:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800796e:	e154      	b.n	8007c1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	2101      	movs	r1, #1
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	fa01 f303 	lsl.w	r3, r1, r3
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 8146 	beq.w	8007c14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d00b      	beq.n	80079a8 <HAL_GPIO_Init+0x48>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d007      	beq.n	80079a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800799c:	2b11      	cmp	r3, #17
 800799e:	d003      	beq.n	80079a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b12      	cmp	r3, #18
 80079a6:	d130      	bne.n	8007a0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	2203      	movs	r2, #3
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	43db      	mvns	r3, r3
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4013      	ands	r3, r2
 80079be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	fa02 f303 	lsl.w	r3, r2, r3
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079de:	2201      	movs	r2, #1
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43db      	mvns	r3, r3
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4013      	ands	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	091b      	lsrs	r3, r3, #4
 80079f4:	f003 0201 	and.w	r2, r3, #1
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	fa02 f303 	lsl.w	r3, r2, r3
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	2203      	movs	r2, #3
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	43db      	mvns	r3, r3
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4013      	ands	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689a      	ldr	r2, [r3, #8]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d003      	beq.n	8007a4a <HAL_GPIO_Init+0xea>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2b12      	cmp	r3, #18
 8007a48:	d123      	bne.n	8007a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	08da      	lsrs	r2, r3, #3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	3208      	adds	r2, #8
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	220f      	movs	r2, #15
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43db      	mvns	r3, r3
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	08da      	lsrs	r2, r3, #3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3208      	adds	r2, #8
 8007a8c:	6939      	ldr	r1, [r7, #16]
 8007a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f003 0203 	and.w	r2, r3, #3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80a0 	beq.w	8007c14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ad4:	4b58      	ldr	r3, [pc, #352]	; (8007c38 <HAL_GPIO_Init+0x2d8>)
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad8:	4a57      	ldr	r2, [pc, #348]	; (8007c38 <HAL_GPIO_Init+0x2d8>)
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	6613      	str	r3, [r2, #96]	; 0x60
 8007ae0:	4b55      	ldr	r3, [pc, #340]	; (8007c38 <HAL_GPIO_Init+0x2d8>)
 8007ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007aec:	4a53      	ldr	r2, [pc, #332]	; (8007c3c <HAL_GPIO_Init+0x2dc>)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	089b      	lsrs	r3, r3, #2
 8007af2:	3302      	adds	r3, #2
 8007af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	220f      	movs	r2, #15
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	43db      	mvns	r3, r3
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b16:	d019      	beq.n	8007b4c <HAL_GPIO_Init+0x1ec>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a49      	ldr	r2, [pc, #292]	; (8007c40 <HAL_GPIO_Init+0x2e0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d013      	beq.n	8007b48 <HAL_GPIO_Init+0x1e8>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a48      	ldr	r2, [pc, #288]	; (8007c44 <HAL_GPIO_Init+0x2e4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00d      	beq.n	8007b44 <HAL_GPIO_Init+0x1e4>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a47      	ldr	r2, [pc, #284]	; (8007c48 <HAL_GPIO_Init+0x2e8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d007      	beq.n	8007b40 <HAL_GPIO_Init+0x1e0>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a46      	ldr	r2, [pc, #280]	; (8007c4c <HAL_GPIO_Init+0x2ec>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d101      	bne.n	8007b3c <HAL_GPIO_Init+0x1dc>
 8007b38:	2304      	movs	r3, #4
 8007b3a:	e008      	b.n	8007b4e <HAL_GPIO_Init+0x1ee>
 8007b3c:	2307      	movs	r3, #7
 8007b3e:	e006      	b.n	8007b4e <HAL_GPIO_Init+0x1ee>
 8007b40:	2303      	movs	r3, #3
 8007b42:	e004      	b.n	8007b4e <HAL_GPIO_Init+0x1ee>
 8007b44:	2302      	movs	r3, #2
 8007b46:	e002      	b.n	8007b4e <HAL_GPIO_Init+0x1ee>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e000      	b.n	8007b4e <HAL_GPIO_Init+0x1ee>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	f002 0203 	and.w	r2, r2, #3
 8007b54:	0092      	lsls	r2, r2, #2
 8007b56:	4093      	lsls	r3, r2
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007b5e:	4937      	ldr	r1, [pc, #220]	; (8007c3c <HAL_GPIO_Init+0x2dc>)
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	089b      	lsrs	r3, r3, #2
 8007b64:	3302      	adds	r3, #2
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007b6c:	4b38      	ldr	r3, [pc, #224]	; (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	43db      	mvns	r3, r3
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b90:	4a2f      	ldr	r2, [pc, #188]	; (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8007b96:	4b2e      	ldr	r3, [pc, #184]	; (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007bba:	4a25      	ldr	r2, [pc, #148]	; (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bc0:	4b23      	ldr	r3, [pc, #140]	; (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007be4:	4a1a      	ldr	r2, [pc, #104]	; (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007bea:	4b19      	ldr	r3, [pc, #100]	; (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c0e:	4a10      	ldr	r2, [pc, #64]	; (8007c50 <HAL_GPIO_Init+0x2f0>)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	3301      	adds	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f47f aea3 	bne.w	8007970 <HAL_GPIO_Init+0x10>
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	40021000 	.word	0x40021000
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	48000400 	.word	0x48000400
 8007c44:	48000800 	.word	0x48000800
 8007c48:	48000c00 	.word	0x48000c00
 8007c4c:	48001000 	.word	0x48001000
 8007c50:	40010400 	.word	0x40010400

08007c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	807b      	strh	r3, [r7, #2]
 8007c60:	4613      	mov	r3, r2
 8007c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c64:	787b      	ldrb	r3, [r7, #1]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c6a:	887a      	ldrh	r2, [r7, #2]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c70:	e002      	b.n	8007c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c72:	887a      	ldrh	r2, [r7, #2]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e081      	b.n	8007d9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fe f8d6 	bl	8005e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2224      	movs	r2, #36	; 0x24
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0201 	bic.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d107      	bne.n	8007cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cfa:	609a      	str	r2, [r3, #8]
 8007cfc:	e006      	b.n	8007d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d104      	bne.n	8007d1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691a      	ldr	r2, [r3, #16]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	ea42 0103 	orr.w	r1, r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	021a      	lsls	r2, r3, #8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69d9      	ldr	r1, [r3, #28]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	4608      	mov	r0, r1
 8007dae:	4611      	mov	r1, r2
 8007db0:	461a      	mov	r2, r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	817b      	strh	r3, [r7, #10]
 8007db6:	460b      	mov	r3, r1
 8007db8:	813b      	strh	r3, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	f040 80f9 	bne.w	8007fbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <HAL_I2C_Mem_Write+0x34>
 8007dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0ed      	b.n	8007fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_I2C_Mem_Write+0x4e>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e0e6      	b.n	8007fc0 <HAL_I2C_Mem_Write+0x21c>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007dfa:	f7fe fa87 	bl	800630c <HAL_GetTick>
 8007dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	2319      	movs	r3, #25
 8007e06:	2201      	movs	r2, #1
 8007e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fac3 	bl	8008398 <I2C_WaitOnFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0d1      	b.n	8007fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2221      	movs	r2, #33	; 0x21
 8007e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2240      	movs	r2, #64	; 0x40
 8007e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a3a      	ldr	r2, [r7, #32]
 8007e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e44:	88f8      	ldrh	r0, [r7, #6]
 8007e46:	893a      	ldrh	r2, [r7, #8]
 8007e48:	8979      	ldrh	r1, [r7, #10]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4603      	mov	r3, r0
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f9d3 	bl	8008200 <I2C_RequestMemoryWrite>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e0a9      	b.n	8007fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2bff      	cmp	r3, #255	; 0xff
 8007e74:	d90e      	bls.n	8007e94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	22ff      	movs	r2, #255	; 0xff
 8007e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	8979      	ldrh	r1, [r7, #10]
 8007e84:	2300      	movs	r3, #0
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fba5 	bl	80085dc <I2C_TransferConfig>
 8007e92:	e00f      	b.n	8007eb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	8979      	ldrh	r1, [r7, #10]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fb94 	bl	80085dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 faad 	bl	8008418 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e07b      	b.n	8007fc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	1c5a      	adds	r2, r3, #1
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d034      	beq.n	8007f6c <HAL_I2C_Mem_Write+0x1c8>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d130      	bne.n	8007f6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	2200      	movs	r2, #0
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fa3f 	bl	8008398 <I2C_WaitOnFlagUntilTimeout>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e04d      	b.n	8007fc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2bff      	cmp	r3, #255	; 0xff
 8007f2c:	d90e      	bls.n	8007f4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	22ff      	movs	r2, #255	; 0xff
 8007f32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	8979      	ldrh	r1, [r7, #10]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fb49 	bl	80085dc <I2C_TransferConfig>
 8007f4a:	e00f      	b.n	8007f6c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	8979      	ldrh	r1, [r7, #10]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fb38 	bl	80085dc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d19e      	bne.n	8007eb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 fa8c 	bl	8008498 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e01a      	b.n	8007fc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6859      	ldr	r1, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <HAL_I2C_Mem_Write+0x224>)
 8007f9e:	400b      	ands	r3, r1
 8007fa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e000      	b.n	8007fc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007fbe:	2302      	movs	r3, #2
  }
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	fe00e800 	.word	0xfe00e800

08007fcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b088      	sub	sp, #32
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	461a      	mov	r2, r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	817b      	strh	r3, [r7, #10]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	813b      	strh	r3, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	f040 80fd 	bne.w	80081ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_I2C_Mem_Read+0x34>
 8007ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008006:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e0f1      	b.n	80081f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008012:	2b01      	cmp	r3, #1
 8008014:	d101      	bne.n	800801a <HAL_I2C_Mem_Read+0x4e>
 8008016:	2302      	movs	r3, #2
 8008018:	e0ea      	b.n	80081f0 <HAL_I2C_Mem_Read+0x224>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008022:	f7fe f973 	bl	800630c <HAL_GetTick>
 8008026:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	2319      	movs	r3, #25
 800802e:	2201      	movs	r2, #1
 8008030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f9af 	bl	8008398 <I2C_WaitOnFlagUntilTimeout>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e0d5      	b.n	80081f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2222      	movs	r2, #34	; 0x22
 8008048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2240      	movs	r2, #64	; 0x40
 8008050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a3a      	ldr	r2, [r7, #32]
 800805e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800806c:	88f8      	ldrh	r0, [r7, #6]
 800806e:	893a      	ldrh	r2, [r7, #8]
 8008070:	8979      	ldrh	r1, [r7, #10]
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	4603      	mov	r3, r0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f913 	bl	80082a8 <I2C_RequestMemoryRead>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d005      	beq.n	8008094 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e0ad      	b.n	80081f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008098:	b29b      	uxth	r3, r3
 800809a:	2bff      	cmp	r3, #255	; 0xff
 800809c:	d90e      	bls.n	80080bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	22ff      	movs	r2, #255	; 0xff
 80080a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	8979      	ldrh	r1, [r7, #10]
 80080ac:	4b52      	ldr	r3, [pc, #328]	; (80081f8 <HAL_I2C_Mem_Read+0x22c>)
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 fa91 	bl	80085dc <I2C_TransferConfig>
 80080ba:	e00f      	b.n	80080dc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	8979      	ldrh	r1, [r7, #10]
 80080ce:	4b4a      	ldr	r3, [pc, #296]	; (80081f8 <HAL_I2C_Mem_Read+0x22c>)
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fa80 	bl	80085dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	2200      	movs	r2, #0
 80080e4:	2104      	movs	r1, #4
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f956 	bl	8008398 <I2C_WaitOnFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e07c      	b.n	80081f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008112:	3b01      	subs	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811e:	b29b      	uxth	r3, r3
 8008120:	3b01      	subs	r3, #1
 8008122:	b29a      	uxth	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d034      	beq.n	800819c <HAL_I2C_Mem_Read+0x1d0>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d130      	bne.n	800819c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	2200      	movs	r2, #0
 8008142:	2180      	movs	r1, #128	; 0x80
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 f927 	bl	8008398 <I2C_WaitOnFlagUntilTimeout>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e04d      	b.n	80081f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008158:	b29b      	uxth	r3, r3
 800815a:	2bff      	cmp	r3, #255	; 0xff
 800815c:	d90e      	bls.n	800817c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	22ff      	movs	r2, #255	; 0xff
 8008162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008168:	b2da      	uxtb	r2, r3
 800816a:	8979      	ldrh	r1, [r7, #10]
 800816c:	2300      	movs	r3, #0
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fa31 	bl	80085dc <I2C_TransferConfig>
 800817a:	e00f      	b.n	800819c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800818a:	b2da      	uxtb	r2, r3
 800818c:	8979      	ldrh	r1, [r7, #10]
 800818e:	2300      	movs	r3, #0
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 fa20 	bl	80085dc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d19a      	bne.n	80080dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 f974 	bl	8008498 <I2C_WaitOnSTOPFlagUntilTimeout>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e01a      	b.n	80081f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2220      	movs	r2, #32
 80081c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6859      	ldr	r1, [r3, #4]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <HAL_I2C_Mem_Read+0x230>)
 80081ce:	400b      	ands	r3, r1
 80081d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80081ee:	2302      	movs	r3, #2
  }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	80002400 	.word	0x80002400
 80081fc:	fe00e800 	.word	0xfe00e800

08008200 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af02      	add	r7, sp, #8
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	4608      	mov	r0, r1
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	4603      	mov	r3, r0
 8008210:	817b      	strh	r3, [r7, #10]
 8008212:	460b      	mov	r3, r1
 8008214:	813b      	strh	r3, [r7, #8]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800821a:	88fb      	ldrh	r3, [r7, #6]
 800821c:	b2da      	uxtb	r2, r3
 800821e:	8979      	ldrh	r1, [r7, #10]
 8008220:	4b20      	ldr	r3, [pc, #128]	; (80082a4 <I2C_RequestMemoryWrite+0xa4>)
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 f9d7 	bl	80085dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	69b9      	ldr	r1, [r7, #24]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f8f0 	bl	8008418 <I2C_WaitOnTXISFlagUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e02c      	b.n	800829c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d105      	bne.n	8008254 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008248:	893b      	ldrh	r3, [r7, #8]
 800824a:	b2da      	uxtb	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	629a      	str	r2, [r3, #40]	; 0x28
 8008252:	e015      	b.n	8008280 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008254:	893b      	ldrh	r3, [r7, #8]
 8008256:	0a1b      	lsrs	r3, r3, #8
 8008258:	b29b      	uxth	r3, r3
 800825a:	b2da      	uxtb	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	69b9      	ldr	r1, [r7, #24]
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 f8d6 	bl	8008418 <I2C_WaitOnTXISFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e012      	b.n	800829c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008276:	893b      	ldrh	r3, [r7, #8]
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2200      	movs	r2, #0
 8008288:	2180      	movs	r1, #128	; 0x80
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 f884 	bl	8008398 <I2C_WaitOnFlagUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	80002000 	.word	0x80002000

080082a8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	461a      	mov	r2, r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	817b      	strh	r3, [r7, #10]
 80082ba:	460b      	mov	r3, r1
 80082bc:	813b      	strh	r3, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	8979      	ldrh	r1, [r7, #10]
 80082c8:	4b20      	ldr	r3, [pc, #128]	; (800834c <I2C_RequestMemoryRead+0xa4>)
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 f984 	bl	80085dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	69b9      	ldr	r1, [r7, #24]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f89d 	bl	8008418 <I2C_WaitOnTXISFlagUntilTimeout>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e02c      	b.n	8008342 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d105      	bne.n	80082fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082ee:	893b      	ldrh	r3, [r7, #8]
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	629a      	str	r2, [r3, #40]	; 0x28
 80082f8:	e015      	b.n	8008326 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082fa:	893b      	ldrh	r3, [r7, #8]
 80082fc:	0a1b      	lsrs	r3, r3, #8
 80082fe:	b29b      	uxth	r3, r3
 8008300:	b2da      	uxtb	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	69b9      	ldr	r1, [r7, #24]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f883 	bl	8008418 <I2C_WaitOnTXISFlagUntilTimeout>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e012      	b.n	8008342 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800831c:	893b      	ldrh	r3, [r7, #8]
 800831e:	b2da      	uxtb	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2200      	movs	r2, #0
 800832e:	2140      	movs	r1, #64	; 0x40
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f831 	bl	8008398 <I2C_WaitOnFlagUntilTimeout>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e000      	b.n	8008342 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	80002000 	.word	0x80002000

08008350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b02      	cmp	r3, #2
 8008364:	d103      	bne.n	800836e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b01      	cmp	r3, #1
 800837a:	d007      	beq.n	800838c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	619a      	str	r2, [r3, #24]
  }
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4613      	mov	r3, r2
 80083a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083a8:	e022      	b.n	80083f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083b0:	d01e      	beq.n	80083f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b2:	f7fd ffab 	bl	800630c <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d302      	bcc.n	80083c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d113      	bne.n	80083f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083cc:	f043 0220 	orr.w	r2, r3, #32
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e00f      	b.n	8008410 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4013      	ands	r3, r2
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	bf0c      	ite	eq
 8008400:	2301      	moveq	r3, #1
 8008402:	2300      	movne	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	429a      	cmp	r2, r3
 800840c:	d0cd      	beq.n	80083aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008424:	e02c      	b.n	8008480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	68b9      	ldr	r1, [r7, #8]
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 f870 	bl	8008510 <I2C_IsAcknowledgeFailed>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e02a      	b.n	8008490 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008440:	d01e      	beq.n	8008480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008442:	f7fd ff63 	bl	800630c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	429a      	cmp	r2, r3
 8008450:	d302      	bcc.n	8008458 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d113      	bne.n	8008480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845c:	f043 0220 	orr.w	r2, r3, #32
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2220      	movs	r2, #32
 8008468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e007      	b.n	8008490 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b02      	cmp	r3, #2
 800848c:	d1cb      	bne.n	8008426 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084a4:	e028      	b.n	80084f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	68b9      	ldr	r1, [r7, #8]
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f830 	bl	8008510 <I2C_IsAcknowledgeFailed>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e026      	b.n	8008508 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ba:	f7fd ff27 	bl	800630c <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d302      	bcc.n	80084d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d113      	bne.n	80084f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d4:	f043 0220 	orr.w	r2, r3, #32
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e007      	b.n	8008508 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f003 0320 	and.w	r3, r3, #32
 8008502:	2b20      	cmp	r3, #32
 8008504:	d1cf      	bne.n	80084a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	f003 0310 	and.w	r3, r3, #16
 8008526:	2b10      	cmp	r3, #16
 8008528:	d151      	bne.n	80085ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800852a:	e022      	b.n	8008572 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008532:	d01e      	beq.n	8008572 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008534:	f7fd feea 	bl	800630c <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	429a      	cmp	r2, r3
 8008542:	d302      	bcc.n	800854a <I2C_IsAcknowledgeFailed+0x3a>
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d113      	bne.n	8008572 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854e:	f043 0220 	orr.w	r2, r3, #32
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e02e      	b.n	80085d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b20      	cmp	r3, #32
 800857e:	d1d5      	bne.n	800852c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2210      	movs	r2, #16
 8008586:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2220      	movs	r2, #32
 800858e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f7ff fedd 	bl	8008350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6859      	ldr	r1, [r3, #4]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80085a2:	400b      	ands	r3, r1
 80085a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085aa:	f043 0204 	orr.w	r2, r3, #4
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	fe00e800 	.word	0xfe00e800

080085dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	607b      	str	r3, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	817b      	strh	r3, [r7, #10]
 80085ea:	4613      	mov	r3, r2
 80085ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	0d5b      	lsrs	r3, r3, #21
 80085f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80085fc:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <I2C_TransferConfig+0x58>)
 80085fe:	430b      	orrs	r3, r1
 8008600:	43db      	mvns	r3, r3
 8008602:	ea02 0103 	and.w	r1, r2, r3
 8008606:	897b      	ldrh	r3, [r7, #10]
 8008608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800860c:	7a7b      	ldrb	r3, [r7, #9]
 800860e:	041b      	lsls	r3, r3, #16
 8008610:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	431a      	orrs	r2, r3
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	431a      	orrs	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	03ff63ff 	.word	0x03ff63ff

08008638 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b20      	cmp	r3, #32
 800864c:	d138      	bne.n	80086c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008658:	2302      	movs	r3, #2
 800865a:	e032      	b.n	80086c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2224      	movs	r2, #36	; 0x24
 8008668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0201 	bic.w	r2, r2, #1
 800867a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800868a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6819      	ldr	r1, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f042 0201 	orr.w	r2, r2, #1
 80086aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	e000      	b.n	80086c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086c0:	2302      	movs	r3, #2
  }
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	d139      	bne.n	8008758 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d101      	bne.n	80086f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80086ee:	2302      	movs	r3, #2
 80086f0:	e033      	b.n	800875a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2224      	movs	r2, #36	; 0x24
 80086fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0201 	bic.w	r2, r2, #1
 8008710:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008720:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	4313      	orrs	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0201 	orr.w	r2, r2, #1
 8008742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e000      	b.n	800875a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008758:	2302      	movs	r3, #2
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
	...

08008768 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008774:	4a0a      	ldr	r2, [pc, #40]	; (80087a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	6613      	str	r3, [r2, #96]	; 0x60
 800877c:	4b08      	ldr	r3, [pc, #32]	; (80087a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800877e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	4905      	ldr	r1, [pc, #20]	; (80087a4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4313      	orrs	r3, r2
 8008792:	604b      	str	r3, [r1, #4]
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	40021000 	.word	0x40021000
 80087a4:	40010000 	.word	0x40010000

080087a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087aa:	b08b      	sub	sp, #44	; 0x2c
 80087ac:	af06      	add	r7, sp, #24
 80087ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e104      	b.n	80089c4 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fd fc5e 	bl	8006090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2203      	movs	r2, #3
 80087d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 f96a 	bl	800aaba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	687e      	ldr	r6, [r7, #4]
 80087ee:	466d      	mov	r5, sp
 80087f0:	f106 0410 	add.w	r4, r6, #16
 80087f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	1d33      	adds	r3, r6, #4
 80087fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008800:	6838      	ldr	r0, [r7, #0]
 8008802:	f002 f949 	bl	800aa98 <USB_CoreInit>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e0d5      	b.n	80089c4 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f002 f966 	bl	800aaf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
 8008828:	e04c      	b.n	80088c4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	440b      	add	r3, r1
 800883a:	3301      	adds	r3, #1
 800883c:	2201      	movs	r2, #1
 800883e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	440b      	add	r3, r1
 8008850:	7bfa      	ldrb	r2, [r7, #15]
 8008852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008854:	7bfa      	ldrb	r2, [r7, #15]
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	b298      	uxth	r0, r3
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	440b      	add	r3, r1
 8008866:	3336      	adds	r3, #54	; 0x36
 8008868:	4602      	mov	r2, r0
 800886a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	440b      	add	r3, r1
 800887c:	3303      	adds	r3, #3
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008882:	7bfa      	ldrb	r2, [r7, #15]
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	440b      	add	r3, r1
 8008890:	3338      	adds	r3, #56	; 0x38
 8008892:	2200      	movs	r2, #0
 8008894:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008896:	7bfa      	ldrb	r2, [r7, #15]
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	440b      	add	r3, r1
 80088a4:	333c      	adds	r3, #60	; 0x3c
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80088aa:	7bfa      	ldrb	r2, [r7, #15]
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	440b      	add	r3, r1
 80088b8:	3340      	adds	r3, #64	; 0x40
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	3301      	adds	r3, #1
 80088c2:	73fb      	strb	r3, [r7, #15]
 80088c4:	7bfa      	ldrb	r2, [r7, #15]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d3ad      	bcc.n	800882a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
 80088d2:	e044      	b.n	800895e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80088d4:	7bfa      	ldrb	r2, [r7, #15]
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	440b      	add	r3, r1
 80088e2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80088e6:	2200      	movs	r2, #0
 80088e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80088ea:	7bfa      	ldrb	r2, [r7, #15]
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	440b      	add	r3, r1
 80088f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80088fc:	7bfa      	ldrb	r2, [r7, #15]
 80088fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008900:	7bfa      	ldrb	r2, [r7, #15]
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	440b      	add	r3, r1
 800890e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008916:	7bfa      	ldrb	r2, [r7, #15]
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	00db      	lsls	r3, r3, #3
 8008922:	440b      	add	r3, r1
 8008924:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800892c:	7bfa      	ldrb	r2, [r7, #15]
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	4613      	mov	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	440b      	add	r3, r1
 800893a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008942:	7bfa      	ldrb	r2, [r7, #15]
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	440b      	add	r3, r1
 8008950:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	3301      	adds	r3, #1
 800895c:	73fb      	strb	r3, [r7, #15]
 800895e:	7bfa      	ldrb	r2, [r7, #15]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	429a      	cmp	r2, r3
 8008966:	d3b5      	bcc.n	80088d4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	603b      	str	r3, [r7, #0]
 800896e:	687e      	ldr	r6, [r7, #4]
 8008970:	466d      	mov	r5, sp
 8008972:	f106 0410 	add.w	r4, r6, #16
 8008976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	602b      	str	r3, [r5, #0]
 800897e:	1d33      	adds	r3, r6, #4
 8008980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008982:	6838      	ldr	r0, [r7, #0]
 8008984:	f002 f8c1 	bl	800ab0a <USB_DevInit>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2202      	movs	r2, #2
 8008992:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e014      	b.n	80089c4 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d102      	bne.n	80089b8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f80a 	bl	80089cc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f002 f8c5 	bl	800ab4c <USB_DevDisconnect>

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f043 0302 	orr.w	r3, r3, #2
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8008a2a:	68da      	ldr	r2, [r3, #12]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f003 031f 	and.w	r3, r3, #31
 8008a32:	43db      	mvns	r3, r3
 8008a34:	401a      	ands	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	095b      	lsrs	r3, r3, #5
 8008a3a:	4908      	ldr	r1, [pc, #32]	; (8008a5c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8008a42:	689a      	ldr	r2, [r3, #8]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f003 031f 	and.w	r3, r3, #31
 8008a4a:	4904      	ldr	r1, [pc, #16]	; (8008a5c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	608b      	str	r3, [r1, #8]


}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	40007000 	.word	0x40007000

08008a60 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8008a64:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f023 0307 	bic.w	r3, r3, #7
 8008a6c:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8008a6e:	f043 0303 	orr.w	r3, r3, #3
 8008a72:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008a74:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8008a7a:	f043 0304 	orr.w	r3, r3, #4
 8008a7e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8008a80:	bf30      	wfi
}
 8008a82:	bf00      	nop
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	40007000 	.word	0x40007000
 8008a90:	e000ed00 	.word	0xe000ed00

08008a94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008a98:	4b04      	ldr	r3, [pc, #16]	; (8008aac <HAL_PWREx_GetVoltageRange+0x18>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	40007000 	.word	0x40007000

08008ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008abe:	d130      	bne.n	8008b22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ac0:	4b23      	ldr	r3, [pc, #140]	; (8008b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008acc:	d038      	beq.n	8008b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ace:	4b20      	ldr	r3, [pc, #128]	; (8008b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ad6:	4a1e      	ldr	r2, [pc, #120]	; (8008b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008adc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008ade:	4b1d      	ldr	r3, [pc, #116]	; (8008b54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2232      	movs	r2, #50	; 0x32
 8008ae4:	fb02 f303 	mul.w	r3, r2, r3
 8008ae8:	4a1b      	ldr	r2, [pc, #108]	; (8008b58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008aea:	fba2 2303 	umull	r2, r3, r2, r3
 8008aee:	0c9b      	lsrs	r3, r3, #18
 8008af0:	3301      	adds	r3, #1
 8008af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008af4:	e002      	b.n	8008afc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b08:	d102      	bne.n	8008b10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1f2      	bne.n	8008af6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b10:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b1c:	d110      	bne.n	8008b40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e00f      	b.n	8008b42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008b22:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b2e:	d007      	beq.n	8008b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b38:	4a05      	ldr	r2, [pc, #20]	; (8008b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	40007000 	.word	0x40007000
 8008b54:	20000064 	.word	0x20000064
 8008b58:	431bde83 	.word	0x431bde83

08008b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d102      	bne.n	8008b70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f000 bc11 	b.w	8009392 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b70:	4ba0      	ldr	r3, [pc, #640]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f003 030c 	and.w	r3, r3, #12
 8008b78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b7a:	4b9e      	ldr	r3, [pc, #632]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 80e4 	beq.w	8008d5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x4c>
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	2b0c      	cmp	r3, #12
 8008b9c:	f040 808b 	bne.w	8008cb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	f040 8087 	bne.w	8008cb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008ba8:	4b92      	ldr	r3, [pc, #584]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x64>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e3e8      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1a      	ldr	r2, [r3, #32]
 8008bc4:	4b8b      	ldr	r3, [pc, #556]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <HAL_RCC_OscConfig+0x7e>
 8008bd0:	4b88      	ldr	r3, [pc, #544]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bd8:	e005      	b.n	8008be6 <HAL_RCC_OscConfig+0x8a>
 8008bda:	4b86      	ldr	r3, [pc, #536]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008be0:	091b      	lsrs	r3, r3, #4
 8008be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d223      	bcs.n	8008c32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fd76 	bl	80096e0 <RCC_SetFlashLatencyFromMSIRange>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e3c9      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008bfe:	4b7d      	ldr	r3, [pc, #500]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a7c      	ldr	r2, [pc, #496]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c04:	f043 0308 	orr.w	r3, r3, #8
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	4b7a      	ldr	r3, [pc, #488]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	4977      	ldr	r1, [pc, #476]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c1c:	4b75      	ldr	r3, [pc, #468]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	69db      	ldr	r3, [r3, #28]
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	4972      	ldr	r1, [pc, #456]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	604b      	str	r3, [r1, #4]
 8008c30:	e025      	b.n	8008c7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c32:	4b70      	ldr	r3, [pc, #448]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a6f      	ldr	r2, [pc, #444]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c38:	f043 0308 	orr.w	r3, r3, #8
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	4b6d      	ldr	r3, [pc, #436]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	496a      	ldr	r1, [pc, #424]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c50:	4b68      	ldr	r3, [pc, #416]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	021b      	lsls	r3, r3, #8
 8008c5e:	4965      	ldr	r1, [pc, #404]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d109      	bne.n	8008c7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fd36 	bl	80096e0 <RCC_SetFlashLatencyFromMSIRange>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e389      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c7e:	f000 fca3 	bl	80095c8 <HAL_RCC_GetSysClockFreq>
 8008c82:	4602      	mov	r2, r0
 8008c84:	4b5b      	ldr	r3, [pc, #364]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	091b      	lsrs	r3, r3, #4
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	495a      	ldr	r1, [pc, #360]	; (8008df8 <HAL_RCC_OscConfig+0x29c>)
 8008c90:	5ccb      	ldrb	r3, [r1, r3]
 8008c92:	f003 031f 	and.w	r3, r3, #31
 8008c96:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9a:	4a58      	ldr	r2, [pc, #352]	; (8008dfc <HAL_RCC_OscConfig+0x2a0>)
 8008c9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008c9e:	4b58      	ldr	r3, [pc, #352]	; (8008e00 <HAL_RCC_OscConfig+0x2a4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd fae2 	bl	800626c <HAL_InitTick>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d052      	beq.n	8008d58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	e36d      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d032      	beq.n	8008d24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008cbe:	4b4d      	ldr	r3, [pc, #308]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a4c      	ldr	r2, [pc, #304]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008cc4:	f043 0301 	orr.w	r3, r3, #1
 8008cc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008cca:	f7fd fb1f 	bl	800630c <HAL_GetTick>
 8008cce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008cd0:	e008      	b.n	8008ce4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008cd2:	f7fd fb1b 	bl	800630c <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d901      	bls.n	8008ce4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e356      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ce4:	4b43      	ldr	r3, [pc, #268]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d0f0      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008cf0:	4b40      	ldr	r3, [pc, #256]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a3f      	ldr	r2, [pc, #252]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008cf6:	f043 0308 	orr.w	r3, r3, #8
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	4b3d      	ldr	r3, [pc, #244]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	493a      	ldr	r1, [pc, #232]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008d0e:	4b39      	ldr	r3, [pc, #228]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	4935      	ldr	r1, [pc, #212]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	604b      	str	r3, [r1, #4]
 8008d22:	e01a      	b.n	8008d5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008d24:	4b33      	ldr	r3, [pc, #204]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a32      	ldr	r2, [pc, #200]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008d2a:	f023 0301 	bic.w	r3, r3, #1
 8008d2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008d30:	f7fd faec 	bl	800630c <HAL_GetTick>
 8008d34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d38:	f7fd fae8 	bl	800630c <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e323      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008d4a:	4b2a      	ldr	r3, [pc, #168]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f0      	bne.n	8008d38 <HAL_RCC_OscConfig+0x1dc>
 8008d56:	e000      	b.n	8008d5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008d58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d073      	beq.n	8008e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d005      	beq.n	8008d78 <HAL_RCC_OscConfig+0x21c>
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	2b0c      	cmp	r3, #12
 8008d70:	d10e      	bne.n	8008d90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d10b      	bne.n	8008d90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d78:	4b1e      	ldr	r3, [pc, #120]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d063      	beq.n	8008e4c <HAL_RCC_OscConfig+0x2f0>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d15f      	bne.n	8008e4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e300      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d98:	d106      	bne.n	8008da8 <HAL_RCC_OscConfig+0x24c>
 8008d9a:	4b16      	ldr	r3, [pc, #88]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a15      	ldr	r2, [pc, #84]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	e01d      	b.n	8008de4 <HAL_RCC_OscConfig+0x288>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008db0:	d10c      	bne.n	8008dcc <HAL_RCC_OscConfig+0x270>
 8008db2:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a0f      	ldr	r2, [pc, #60]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a0c      	ldr	r2, [pc, #48]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	e00b      	b.n	8008de4 <HAL_RCC_OscConfig+0x288>
 8008dcc:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a08      	ldr	r2, [pc, #32]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a05      	ldr	r2, [pc, #20]	; (8008df4 <HAL_RCC_OscConfig+0x298>)
 8008dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01b      	beq.n	8008e24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dec:	f7fd fa8e 	bl	800630c <HAL_GetTick>
 8008df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008df2:	e010      	b.n	8008e16 <HAL_RCC_OscConfig+0x2ba>
 8008df4:	40021000 	.word	0x40021000
 8008df8:	0800c2a8 	.word	0x0800c2a8
 8008dfc:	20000064 	.word	0x20000064
 8008e00:	20000068 	.word	0x20000068
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e04:	f7fd fa82 	bl	800630c <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b64      	cmp	r3, #100	; 0x64
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e2bd      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e16:	4baf      	ldr	r3, [pc, #700]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f0      	beq.n	8008e04 <HAL_RCC_OscConfig+0x2a8>
 8008e22:	e014      	b.n	8008e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e24:	f7fd fa72 	bl	800630c <HAL_GetTick>
 8008e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e2a:	e008      	b.n	8008e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e2c:	f7fd fa6e 	bl	800630c <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	2b64      	cmp	r3, #100	; 0x64
 8008e38:	d901      	bls.n	8008e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e2a9      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e3e:	4ba5      	ldr	r3, [pc, #660]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f0      	bne.n	8008e2c <HAL_RCC_OscConfig+0x2d0>
 8008e4a:	e000      	b.n	8008e4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0302 	and.w	r3, r3, #2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d060      	beq.n	8008f1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d005      	beq.n	8008e6c <HAL_RCC_OscConfig+0x310>
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	2b0c      	cmp	r3, #12
 8008e64:	d119      	bne.n	8008e9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d116      	bne.n	8008e9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e6c:	4b99      	ldr	r3, [pc, #612]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <HAL_RCC_OscConfig+0x328>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e286      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e84:	4b93      	ldr	r3, [pc, #588]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	061b      	lsls	r3, r3, #24
 8008e92:	4990      	ldr	r1, [pc, #576]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e98:	e040      	b.n	8008f1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d023      	beq.n	8008eea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ea2:	4b8c      	ldr	r3, [pc, #560]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a8b      	ldr	r2, [pc, #556]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eae:	f7fd fa2d 	bl	800630c <HAL_GetTick>
 8008eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008eb4:	e008      	b.n	8008ec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eb6:	f7fd fa29 	bl	800630c <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d901      	bls.n	8008ec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e264      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ec8:	4b82      	ldr	r3, [pc, #520]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0f0      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ed4:	4b7f      	ldr	r3, [pc, #508]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	061b      	lsls	r3, r3, #24
 8008ee2:	497c      	ldr	r1, [pc, #496]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	604b      	str	r3, [r1, #4]
 8008ee8:	e018      	b.n	8008f1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008eea:	4b7a      	ldr	r3, [pc, #488]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a79      	ldr	r2, [pc, #484]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef6:	f7fd fa09 	bl	800630c <HAL_GetTick>
 8008efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008efc:	e008      	b.n	8008f10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008efe:	f7fd fa05 	bl	800630c <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d901      	bls.n	8008f10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e240      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f10:	4b70      	ldr	r3, [pc, #448]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1f0      	bne.n	8008efe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0308 	and.w	r3, r3, #8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d03c      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01c      	beq.n	8008f6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f30:	4b68      	ldr	r3, [pc, #416]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f36:	4a67      	ldr	r2, [pc, #412]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008f38:	f043 0301 	orr.w	r3, r3, #1
 8008f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f40:	f7fd f9e4 	bl	800630c <HAL_GetTick>
 8008f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f48:	f7fd f9e0 	bl	800630c <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e21b      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008f5a:	4b5e      	ldr	r3, [pc, #376]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0ef      	beq.n	8008f48 <HAL_RCC_OscConfig+0x3ec>
 8008f68:	e01b      	b.n	8008fa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f6a:	4b5a      	ldr	r3, [pc, #360]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f70:	4a58      	ldr	r2, [pc, #352]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008f72:	f023 0301 	bic.w	r3, r3, #1
 8008f76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f7a:	f7fd f9c7 	bl	800630c <HAL_GetTick>
 8008f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f80:	e008      	b.n	8008f94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f82:	f7fd f9c3 	bl	800630c <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d901      	bls.n	8008f94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e1fe      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008f94:	4b4f      	ldr	r3, [pc, #316]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1ef      	bne.n	8008f82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0304 	and.w	r3, r3, #4
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 80a6 	beq.w	80090fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008fb4:	4b47      	ldr	r3, [pc, #284]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10d      	bne.n	8008fdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fc0:	4b44      	ldr	r3, [pc, #272]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc4:	4a43      	ldr	r2, [pc, #268]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fca:	6593      	str	r3, [r2, #88]	; 0x58
 8008fcc:	4b41      	ldr	r3, [pc, #260]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8008fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fdc:	4b3e      	ldr	r3, [pc, #248]	; (80090d8 <HAL_RCC_OscConfig+0x57c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d118      	bne.n	800901a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fe8:	4b3b      	ldr	r3, [pc, #236]	; (80090d8 <HAL_RCC_OscConfig+0x57c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a3a      	ldr	r2, [pc, #232]	; (80090d8 <HAL_RCC_OscConfig+0x57c>)
 8008fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ff4:	f7fd f98a 	bl	800630c <HAL_GetTick>
 8008ff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ffc:	f7fd f986 	bl	800630c <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e1c1      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800900e:	4b32      	ldr	r3, [pc, #200]	; (80090d8 <HAL_RCC_OscConfig+0x57c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0f0      	beq.n	8008ffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d108      	bne.n	8009034 <HAL_RCC_OscConfig+0x4d8>
 8009022:	4b2c      	ldr	r3, [pc, #176]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8009024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009028:	4a2a      	ldr	r2, [pc, #168]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009032:	e024      	b.n	800907e <HAL_RCC_OscConfig+0x522>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	2b05      	cmp	r3, #5
 800903a:	d110      	bne.n	800905e <HAL_RCC_OscConfig+0x502>
 800903c:	4b25      	ldr	r3, [pc, #148]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 800903e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009042:	4a24      	ldr	r2, [pc, #144]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8009044:	f043 0304 	orr.w	r3, r3, #4
 8009048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800904c:	4b21      	ldr	r3, [pc, #132]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 800904e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009052:	4a20      	ldr	r2, [pc, #128]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800905c:	e00f      	b.n	800907e <HAL_RCC_OscConfig+0x522>
 800905e:	4b1d      	ldr	r3, [pc, #116]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8009060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009064:	4a1b      	ldr	r2, [pc, #108]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8009066:	f023 0301 	bic.w	r3, r3, #1
 800906a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800906e:	4b19      	ldr	r3, [pc, #100]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8009070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009074:	4a17      	ldr	r2, [pc, #92]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 8009076:	f023 0304 	bic.w	r3, r3, #4
 800907a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d016      	beq.n	80090b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009086:	f7fd f941 	bl	800630c <HAL_GetTick>
 800908a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800908c:	e00a      	b.n	80090a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800908e:	f7fd f93d 	bl	800630c <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	f241 3288 	movw	r2, #5000	; 0x1388
 800909c:	4293      	cmp	r3, r2
 800909e:	d901      	bls.n	80090a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e176      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090a4:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <HAL_RCC_OscConfig+0x578>)
 80090a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0ed      	beq.n	800908e <HAL_RCC_OscConfig+0x532>
 80090b2:	e01a      	b.n	80090ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090b4:	f7fd f92a 	bl	800630c <HAL_GetTick>
 80090b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090ba:	e00f      	b.n	80090dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090bc:	f7fd f926 	bl	800630c <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d906      	bls.n	80090dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e15f      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
 80090d2:	bf00      	nop
 80090d4:	40021000 	.word	0x40021000
 80090d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80090dc:	4baa      	ldr	r3, [pc, #680]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80090de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e8      	bne.n	80090bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090ea:	7ffb      	ldrb	r3, [r7, #31]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d105      	bne.n	80090fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090f0:	4ba5      	ldr	r3, [pc, #660]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80090f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f4:	4aa4      	ldr	r2, [pc, #656]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80090f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d03c      	beq.n	8009182 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	2b00      	cmp	r3, #0
 800910e:	d01c      	beq.n	800914a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009110:	4b9d      	ldr	r3, [pc, #628]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009116:	4a9c      	ldr	r2, [pc, #624]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009118:	f043 0301 	orr.w	r3, r3, #1
 800911c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009120:	f7fd f8f4 	bl	800630c <HAL_GetTick>
 8009124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009128:	f7fd f8f0 	bl	800630c <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e12b      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800913a:	4b93      	ldr	r3, [pc, #588]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800913c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0ef      	beq.n	8009128 <HAL_RCC_OscConfig+0x5cc>
 8009148:	e01b      	b.n	8009182 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800914a:	4b8f      	ldr	r3, [pc, #572]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800914c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009150:	4a8d      	ldr	r2, [pc, #564]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009152:	f023 0301 	bic.w	r3, r3, #1
 8009156:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800915a:	f7fd f8d7 	bl	800630c <HAL_GetTick>
 800915e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009160:	e008      	b.n	8009174 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009162:	f7fd f8d3 	bl	800630c <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d901      	bls.n	8009174 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e10e      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009174:	4b84      	ldr	r3, [pc, #528]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1ef      	bne.n	8009162 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8102 	beq.w	8009390 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	2b02      	cmp	r3, #2
 8009192:	f040 80c5 	bne.w	8009320 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009196:	4b7c      	ldr	r3, [pc, #496]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f003 0203 	and.w	r2, r3, #3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d12c      	bne.n	8009204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b4:	3b01      	subs	r3, #1
 80091b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d123      	bne.n	8009204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d11b      	bne.n	8009204 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091d8:	429a      	cmp	r2, r3
 80091da:	d113      	bne.n	8009204 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e6:	085b      	lsrs	r3, r3, #1
 80091e8:	3b01      	subs	r3, #1
 80091ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d109      	bne.n	8009204 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fa:	085b      	lsrs	r3, r3, #1
 80091fc:	3b01      	subs	r3, #1
 80091fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009200:	429a      	cmp	r2, r3
 8009202:	d067      	beq.n	80092d4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	2b0c      	cmp	r3, #12
 8009208:	d062      	beq.n	80092d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800920a:	4b5f      	ldr	r3, [pc, #380]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e0bb      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800921a:	4b5b      	ldr	r3, [pc, #364]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a5a      	ldr	r2, [pc, #360]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009224:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009226:	f7fd f871 	bl	800630c <HAL_GetTick>
 800922a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800922c:	e008      	b.n	8009240 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800922e:	f7fd f86d 	bl	800630c <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e0a8      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009240:	4b51      	ldr	r3, [pc, #324]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1f0      	bne.n	800922e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800924c:	4b4e      	ldr	r3, [pc, #312]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	4b4e      	ldr	r3, [pc, #312]	; (800938c <HAL_RCC_OscConfig+0x830>)
 8009252:	4013      	ands	r3, r2
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800925c:	3a01      	subs	r2, #1
 800925e:	0112      	lsls	r2, r2, #4
 8009260:	4311      	orrs	r1, r2
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009266:	0212      	lsls	r2, r2, #8
 8009268:	4311      	orrs	r1, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800926e:	0852      	lsrs	r2, r2, #1
 8009270:	3a01      	subs	r2, #1
 8009272:	0552      	lsls	r2, r2, #21
 8009274:	4311      	orrs	r1, r2
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800927a:	0852      	lsrs	r2, r2, #1
 800927c:	3a01      	subs	r2, #1
 800927e:	0652      	lsls	r2, r2, #25
 8009280:	4311      	orrs	r1, r2
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009286:	06d2      	lsls	r2, r2, #27
 8009288:	430a      	orrs	r2, r1
 800928a:	493f      	ldr	r1, [pc, #252]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800928c:	4313      	orrs	r3, r2
 800928e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009290:	4b3d      	ldr	r3, [pc, #244]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a3c      	ldr	r2, [pc, #240]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800929a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800929c:	4b3a      	ldr	r3, [pc, #232]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	4a39      	ldr	r2, [pc, #228]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80092a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80092a8:	f7fd f830 	bl	800630c <HAL_GetTick>
 80092ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092b0:	f7fd f82c 	bl	800630c <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e067      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092c2:	4b31      	ldr	r3, [pc, #196]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0f0      	beq.n	80092b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092ce:	e05f      	b.n	8009390 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e05e      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092d4:	4b2c      	ldr	r3, [pc, #176]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d157      	bne.n	8009390 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80092e0:	4b29      	ldr	r3, [pc, #164]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a28      	ldr	r2, [pc, #160]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80092e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092ec:	4b26      	ldr	r3, [pc, #152]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	4a25      	ldr	r2, [pc, #148]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 80092f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092f8:	f7fd f808 	bl	800630c <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092fe:	e008      	b.n	8009312 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009300:	f7fd f804 	bl	800630c <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b02      	cmp	r3, #2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e03f      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009312:	4b1d      	ldr	r3, [pc, #116]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0f0      	beq.n	8009300 <HAL_RCC_OscConfig+0x7a4>
 800931e:	e037      	b.n	8009390 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	2b0c      	cmp	r3, #12
 8009324:	d02d      	beq.n	8009382 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009326:	4b18      	ldr	r3, [pc, #96]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a17      	ldr	r2, [pc, #92]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800932c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009330:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d105      	bne.n	800934a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	4a11      	ldr	r2, [pc, #68]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009344:	f023 0303 	bic.w	r3, r3, #3
 8009348:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800934a:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	4a0e      	ldr	r2, [pc, #56]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009350:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009358:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800935a:	f7fc ffd7 	bl	800630c <HAL_GetTick>
 800935e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009360:	e008      	b.n	8009374 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009362:	f7fc ffd3 	bl	800630c <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d901      	bls.n	8009374 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e00e      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009374:	4b04      	ldr	r3, [pc, #16]	; (8009388 <HAL_RCC_OscConfig+0x82c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1f0      	bne.n	8009362 <HAL_RCC_OscConfig+0x806>
 8009380:	e006      	b.n	8009390 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e005      	b.n	8009392 <HAL_RCC_OscConfig+0x836>
 8009386:	bf00      	nop
 8009388:	40021000 	.word	0x40021000
 800938c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3720      	adds	r7, #32
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop

0800939c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e0c8      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093b0:	4b66      	ldr	r3, [pc, #408]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d910      	bls.n	80093e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093be:	4b63      	ldr	r3, [pc, #396]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f023 0207 	bic.w	r2, r3, #7
 80093c6:	4961      	ldr	r1, [pc, #388]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093ce:	4b5f      	ldr	r3, [pc, #380]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d001      	beq.n	80093e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e0b0      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d04c      	beq.n	8009486 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d107      	bne.n	8009404 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093f4:	4b56      	ldr	r3, [pc, #344]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d121      	bne.n	8009444 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e09e      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2b02      	cmp	r3, #2
 800940a:	d107      	bne.n	800941c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800940c:	4b50      	ldr	r3, [pc, #320]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d115      	bne.n	8009444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e092      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d107      	bne.n	8009434 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009424:	4b4a      	ldr	r3, [pc, #296]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d109      	bne.n	8009444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e086      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009434:	4b46      	ldr	r3, [pc, #280]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e07e      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009444:	4b42      	ldr	r3, [pc, #264]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f023 0203 	bic.w	r2, r3, #3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	493f      	ldr	r1, [pc, #252]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009452:	4313      	orrs	r3, r2
 8009454:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009456:	f7fc ff59 	bl	800630c <HAL_GetTick>
 800945a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800945c:	e00a      	b.n	8009474 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800945e:	f7fc ff55 	bl	800630c <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	f241 3288 	movw	r2, #5000	; 0x1388
 800946c:	4293      	cmp	r3, r2
 800946e:	d901      	bls.n	8009474 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e066      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009474:	4b36      	ldr	r3, [pc, #216]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f003 020c 	and.w	r2, r3, #12
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	429a      	cmp	r2, r3
 8009484:	d1eb      	bne.n	800945e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d008      	beq.n	80094a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009492:	4b2f      	ldr	r3, [pc, #188]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	492c      	ldr	r1, [pc, #176]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094a4:	4b29      	ldr	r3, [pc, #164]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d210      	bcs.n	80094d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094b2:	4b26      	ldr	r3, [pc, #152]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f023 0207 	bic.w	r2, r3, #7
 80094ba:	4924      	ldr	r1, [pc, #144]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	4313      	orrs	r3, r2
 80094c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094c2:	4b22      	ldr	r3, [pc, #136]	; (800954c <HAL_RCC_ClockConfig+0x1b0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d001      	beq.n	80094d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e036      	b.n	8009542 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d008      	beq.n	80094f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094e0:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	4918      	ldr	r1, [pc, #96]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0308 	and.w	r3, r3, #8
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d009      	beq.n	8009512 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094fe:	4b14      	ldr	r3, [pc, #80]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	4910      	ldr	r1, [pc, #64]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 800950e:	4313      	orrs	r3, r2
 8009510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009512:	f000 f859 	bl	80095c8 <HAL_RCC_GetSysClockFreq>
 8009516:	4602      	mov	r2, r0
 8009518:	4b0d      	ldr	r3, [pc, #52]	; (8009550 <HAL_RCC_ClockConfig+0x1b4>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	091b      	lsrs	r3, r3, #4
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	490c      	ldr	r1, [pc, #48]	; (8009554 <HAL_RCC_ClockConfig+0x1b8>)
 8009524:	5ccb      	ldrb	r3, [r1, r3]
 8009526:	f003 031f 	and.w	r3, r3, #31
 800952a:	fa22 f303 	lsr.w	r3, r2, r3
 800952e:	4a0a      	ldr	r2, [pc, #40]	; (8009558 <HAL_RCC_ClockConfig+0x1bc>)
 8009530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009532:	4b0a      	ldr	r3, [pc, #40]	; (800955c <HAL_RCC_ClockConfig+0x1c0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f7fc fe98 	bl	800626c <HAL_InitTick>
 800953c:	4603      	mov	r3, r0
 800953e:	72fb      	strb	r3, [r7, #11]

  return status;
 8009540:	7afb      	ldrb	r3, [r7, #11]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	40022000 	.word	0x40022000
 8009550:	40021000 	.word	0x40021000
 8009554:	0800c2a8 	.word	0x0800c2a8
 8009558:	20000064 	.word	0x20000064
 800955c:	20000068 	.word	0x20000068

08009560 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08a      	sub	sp, #40	; 0x28
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800956c:	4b15      	ldr	r3, [pc, #84]	; (80095c4 <HAL_RCC_MCOConfig+0x64>)
 800956e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009570:	4a14      	ldr	r2, [pc, #80]	; (80095c4 <HAL_RCC_MCOConfig+0x64>)
 8009572:	f043 0301 	orr.w	r3, r3, #1
 8009576:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009578:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <HAL_RCC_MCOConfig+0x64>)
 800957a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	613b      	str	r3, [r7, #16]
 8009582:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8009584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800958a:	2302      	movs	r3, #2
 800958c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800958e:	2302      	movs	r3, #2
 8009590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009592:	2300      	movs	r3, #0
 8009594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009596:	2300      	movs	r3, #0
 8009598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800959a:	f107 0314 	add.w	r3, r7, #20
 800959e:	4619      	mov	r1, r3
 80095a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095a4:	f7fe f9dc 	bl	8007960 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80095a8:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <HAL_RCC_MCOConfig+0x64>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80095b0:	68b9      	ldr	r1, [r7, #8]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	430b      	orrs	r3, r1
 80095b6:	4903      	ldr	r1, [pc, #12]	; (80095c4 <HAL_RCC_MCOConfig+0x64>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	608b      	str	r3, [r1, #8]
}
 80095bc:	bf00      	nop
 80095be:	3728      	adds	r7, #40	; 0x28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	40021000 	.word	0x40021000

080095c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b089      	sub	sp, #36	; 0x24
 80095cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
 80095d2:	2300      	movs	r3, #0
 80095d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095d6:	4b3e      	ldr	r3, [pc, #248]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f003 030c 	and.w	r3, r3, #12
 80095de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80095e0:	4b3b      	ldr	r3, [pc, #236]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <HAL_RCC_GetSysClockFreq+0x34>
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	2b0c      	cmp	r3, #12
 80095f4:	d121      	bne.n	800963a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d11e      	bne.n	800963a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80095fc:	4b34      	ldr	r3, [pc, #208]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0308 	and.w	r3, r3, #8
 8009604:	2b00      	cmp	r3, #0
 8009606:	d107      	bne.n	8009618 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009608:	4b31      	ldr	r3, [pc, #196]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800960a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	f003 030f 	and.w	r3, r3, #15
 8009614:	61fb      	str	r3, [r7, #28]
 8009616:	e005      	b.n	8009624 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009618:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	091b      	lsrs	r3, r3, #4
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009624:	4a2b      	ldr	r2, [pc, #172]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800962c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10d      	bne.n	8009650 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009638:	e00a      	b.n	8009650 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b04      	cmp	r3, #4
 800963e:	d102      	bne.n	8009646 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009640:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009642:	61bb      	str	r3, [r7, #24]
 8009644:	e004      	b.n	8009650 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	2b08      	cmp	r3, #8
 800964a:	d101      	bne.n	8009650 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800964c:	4b23      	ldr	r3, [pc, #140]	; (80096dc <HAL_RCC_GetSysClockFreq+0x114>)
 800964e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2b0c      	cmp	r3, #12
 8009654:	d134      	bne.n	80096c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009656:	4b1e      	ldr	r3, [pc, #120]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d003      	beq.n	800966e <HAL_RCC_GetSysClockFreq+0xa6>
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b03      	cmp	r3, #3
 800966a:	d003      	beq.n	8009674 <HAL_RCC_GetSysClockFreq+0xac>
 800966c:	e005      	b.n	800967a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800966e:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8009670:	617b      	str	r3, [r7, #20]
      break;
 8009672:	e005      	b.n	8009680 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009674:	4b19      	ldr	r3, [pc, #100]	; (80096dc <HAL_RCC_GetSysClockFreq+0x114>)
 8009676:	617b      	str	r3, [r7, #20]
      break;
 8009678:	e002      	b.n	8009680 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	617b      	str	r3, [r7, #20]
      break;
 800967e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009680:	4b13      	ldr	r3, [pc, #76]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	091b      	lsrs	r3, r3, #4
 8009686:	f003 0307 	and.w	r3, r3, #7
 800968a:	3301      	adds	r3, #1
 800968c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800968e:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	0a1b      	lsrs	r3, r3, #8
 8009694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	fb02 f203 	mul.w	r2, r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80096a6:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	0e5b      	lsrs	r3, r3, #25
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	3301      	adds	r3, #1
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80096be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80096c0:	69bb      	ldr	r3, [r7, #24]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3724      	adds	r7, #36	; 0x24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40021000 	.word	0x40021000
 80096d4:	0800c2b8 	.word	0x0800c2b8
 80096d8:	00f42400 	.word	0x00f42400
 80096dc:	0124f800 	.word	0x0124f800

080096e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80096e8:	2300      	movs	r3, #0
 80096ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80096ec:	4b2a      	ldr	r3, [pc, #168]	; (8009798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80096ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80096f8:	f7ff f9cc 	bl	8008a94 <HAL_PWREx_GetVoltageRange>
 80096fc:	6178      	str	r0, [r7, #20]
 80096fe:	e014      	b.n	800972a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009700:	4b25      	ldr	r3, [pc, #148]	; (8009798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009704:	4a24      	ldr	r2, [pc, #144]	; (8009798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800970a:	6593      	str	r3, [r2, #88]	; 0x58
 800970c:	4b22      	ldr	r3, [pc, #136]	; (8009798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800970e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009718:	f7ff f9bc 	bl	8008a94 <HAL_PWREx_GetVoltageRange>
 800971c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800971e:	4b1e      	ldr	r3, [pc, #120]	; (8009798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009722:	4a1d      	ldr	r2, [pc, #116]	; (8009798 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009728:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009730:	d10b      	bne.n	800974a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b80      	cmp	r3, #128	; 0x80
 8009736:	d919      	bls.n	800976c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2ba0      	cmp	r3, #160	; 0xa0
 800973c:	d902      	bls.n	8009744 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800973e:	2302      	movs	r3, #2
 8009740:	613b      	str	r3, [r7, #16]
 8009742:	e013      	b.n	800976c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009744:	2301      	movs	r3, #1
 8009746:	613b      	str	r3, [r7, #16]
 8009748:	e010      	b.n	800976c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b80      	cmp	r3, #128	; 0x80
 800974e:	d902      	bls.n	8009756 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009750:	2303      	movs	r3, #3
 8009752:	613b      	str	r3, [r7, #16]
 8009754:	e00a      	b.n	800976c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b80      	cmp	r3, #128	; 0x80
 800975a:	d102      	bne.n	8009762 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800975c:	2302      	movs	r3, #2
 800975e:	613b      	str	r3, [r7, #16]
 8009760:	e004      	b.n	800976c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b70      	cmp	r3, #112	; 0x70
 8009766:	d101      	bne.n	800976c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009768:	2301      	movs	r3, #1
 800976a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f023 0207 	bic.w	r2, r3, #7
 8009774:	4909      	ldr	r1, [pc, #36]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800977c:	4b07      	ldr	r3, [pc, #28]	; (800979c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0307 	and.w	r3, r3, #7
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	429a      	cmp	r2, r3
 8009788:	d001      	beq.n	800978e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e000      	b.n	8009790 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	40021000 	.word	0x40021000
 800979c:	40022000 	.word	0x40022000

080097a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097a8:	2300      	movs	r3, #0
 80097aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097ac:	2300      	movs	r3, #0
 80097ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d031      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80097c4:	d01a      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80097c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80097ca:	d814      	bhi.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80097d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097d4:	d10f      	bne.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80097d6:	4b5d      	ldr	r3, [pc, #372]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	4a5c      	ldr	r2, [pc, #368]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80097dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80097e2:	e00c      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3304      	adds	r3, #4
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fa1e 	bl	8009c2c <RCCEx_PLLSAI1_Config>
 80097f0:	4603      	mov	r3, r0
 80097f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80097f4:	e003      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	74fb      	strb	r3, [r7, #19]
      break;
 80097fa:	e000      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80097fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097fe:	7cfb      	ldrb	r3, [r7, #19]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d10b      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009804:	4b51      	ldr	r3, [pc, #324]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800980a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009812:	494e      	ldr	r1, [pc, #312]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009814:	4313      	orrs	r3, r2
 8009816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800981a:	e001      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981c:	7cfb      	ldrb	r3, [r7, #19]
 800981e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 809e 	beq.w	800996a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800982e:	2300      	movs	r3, #0
 8009830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009832:	4b46      	ldr	r3, [pc, #280]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800983e:	2301      	movs	r3, #1
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009842:	2300      	movs	r3, #0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00d      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009848:	4b40      	ldr	r3, [pc, #256]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800984a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984c:	4a3f      	ldr	r2, [pc, #252]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800984e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009852:	6593      	str	r3, [r2, #88]	; 0x58
 8009854:	4b3d      	ldr	r3, [pc, #244]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800985c:	60bb      	str	r3, [r7, #8]
 800985e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009860:	2301      	movs	r3, #1
 8009862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009864:	4b3a      	ldr	r3, [pc, #232]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a39      	ldr	r2, [pc, #228]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800986a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800986e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009870:	f7fc fd4c 	bl	800630c <HAL_GetTick>
 8009874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009876:	e009      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009878:	f7fc fd48 	bl	800630c <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	2b02      	cmp	r3, #2
 8009884:	d902      	bls.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	74fb      	strb	r3, [r7, #19]
        break;
 800988a:	e005      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800988c:	4b30      	ldr	r3, [pc, #192]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009894:	2b00      	cmp	r3, #0
 8009896:	d0ef      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009898:	7cfb      	ldrb	r3, [r7, #19]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d15a      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800989e:	4b2b      	ldr	r3, [pc, #172]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01e      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d019      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80098ba:	4b24      	ldr	r3, [pc, #144]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098c6:	4b21      	ldr	r3, [pc, #132]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098cc:	4a1f      	ldr	r2, [pc, #124]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098d6:	4b1d      	ldr	r3, [pc, #116]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098dc:	4a1b      	ldr	r2, [pc, #108]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80098e6:	4a19      	ldr	r2, [pc, #100]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f003 0301 	and.w	r3, r3, #1
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d016      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f8:	f7fc fd08 	bl	800630c <HAL_GetTick>
 80098fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098fe:	e00b      	b.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009900:	f7fc fd04 	bl	800630c <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	f241 3288 	movw	r2, #5000	; 0x1388
 800990e:	4293      	cmp	r3, r2
 8009910:	d902      	bls.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	74fb      	strb	r3, [r7, #19]
            break;
 8009916:	e006      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009918:	4b0c      	ldr	r3, [pc, #48]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800991a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0ec      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009926:	7cfb      	ldrb	r3, [r7, #19]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10b      	bne.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800992c:	4b07      	ldr	r3, [pc, #28]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800992e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009932:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800993a:	4904      	ldr	r1, [pc, #16]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800993c:	4313      	orrs	r3, r2
 800993e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009942:	e009      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009944:	7cfb      	ldrb	r3, [r7, #19]
 8009946:	74bb      	strb	r3, [r7, #18]
 8009948:	e006      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800994a:	bf00      	nop
 800994c:	40021000 	.word	0x40021000
 8009950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009954:	7cfb      	ldrb	r3, [r7, #19]
 8009956:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009958:	7c7b      	ldrb	r3, [r7, #17]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d105      	bne.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800995e:	4bb2      	ldr	r3, [pc, #712]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009962:	4ab1      	ldr	r2, [pc, #708]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009968:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009976:	4bac      	ldr	r3, [pc, #688]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997c:	f023 0203 	bic.w	r2, r3, #3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	49a8      	ldr	r1, [pc, #672]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009986:	4313      	orrs	r3, r2
 8009988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0302 	and.w	r3, r3, #2
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009998:	4ba3      	ldr	r3, [pc, #652]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800999a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800999e:	f023 020c 	bic.w	r2, r3, #12
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	49a0      	ldr	r1, [pc, #640]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099a8:	4313      	orrs	r3, r2
 80099aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0304 	and.w	r3, r3, #4
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80099ba:	4b9b      	ldr	r3, [pc, #620]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c8:	4997      	ldr	r1, [pc, #604]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0320 	and.w	r3, r3, #32
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099dc:	4b92      	ldr	r3, [pc, #584]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ea:	498f      	ldr	r1, [pc, #572]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00a      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80099fe:	4b8a      	ldr	r3, [pc, #552]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0c:	4986      	ldr	r1, [pc, #536]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00a      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a20:	4b81      	ldr	r3, [pc, #516]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2e:	497e      	ldr	r1, [pc, #504]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a42:	4b79      	ldr	r3, [pc, #484]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a50:	4975      	ldr	r1, [pc, #468]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a64:	4b70      	ldr	r3, [pc, #448]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a72:	496d      	ldr	r1, [pc, #436]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a86:	4b68      	ldr	r3, [pc, #416]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a94:	4964      	ldr	r1, [pc, #400]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d028      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009aa8:	4b5f      	ldr	r3, [pc, #380]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ab6:	495c      	ldr	r1, [pc, #368]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ac6:	d106      	bne.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ac8:	4b57      	ldr	r3, [pc, #348]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	4a56      	ldr	r2, [pc, #344]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ad2:	60d3      	str	r3, [r2, #12]
 8009ad4:	e011      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ade:	d10c      	bne.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 f8a0 	bl	8009c2c <RCCEx_PLLSAI1_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009af0:	7cfb      	ldrb	r3, [r7, #19]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8009af6:	7cfb      	ldrb	r3, [r7, #19]
 8009af8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d028      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009b06:	4b48      	ldr	r3, [pc, #288]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b14:	4944      	ldr	r1, [pc, #272]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b24:	d106      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b26:	4b40      	ldr	r3, [pc, #256]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	4a3f      	ldr	r2, [pc, #252]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b30:	60d3      	str	r3, [r2, #12]
 8009b32:	e011      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b3c:	d10c      	bne.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	3304      	adds	r3, #4
 8009b42:	2101      	movs	r1, #1
 8009b44:	4618      	mov	r0, r3
 8009b46:	f000 f871 	bl	8009c2c <RCCEx_PLLSAI1_Config>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009b4e:	7cfb      	ldrb	r3, [r7, #19]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8009b54:	7cfb      	ldrb	r3, [r7, #19]
 8009b56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d028      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b64:	4b30      	ldr	r3, [pc, #192]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b72:	492d      	ldr	r1, [pc, #180]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b82:	d106      	bne.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b84:	4b28      	ldr	r3, [pc, #160]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	4a27      	ldr	r2, [pc, #156]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b8e:	60d3      	str	r3, [r2, #12]
 8009b90:	e011      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b9a:	d10c      	bne.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 f842 	bl	8009c2c <RCCEx_PLLSAI1_Config>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bac:	7cfb      	ldrb	r3, [r7, #19]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8009bb2:	7cfb      	ldrb	r3, [r7, #19]
 8009bb4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d01c      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bc2:	4b19      	ldr	r3, [pc, #100]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd0:	4915      	ldr	r1, [pc, #84]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009be0:	d10c      	bne.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3304      	adds	r3, #4
 8009be6:	2102      	movs	r1, #2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f81f 	bl	8009c2c <RCCEx_PLLSAI1_Config>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bf2:	7cfb      	ldrb	r3, [r7, #19]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8009bf8:	7cfb      	ldrb	r3, [r7, #19]
 8009bfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00a      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c08:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c16:	4904      	ldr	r1, [pc, #16]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009c1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	40021000 	.word	0x40021000

08009c2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009c3a:	4b74      	ldr	r3, [pc, #464]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d018      	beq.n	8009c78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009c46:	4b71      	ldr	r3, [pc, #452]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f003 0203 	and.w	r2, r3, #3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d10d      	bne.n	8009c72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
       ||
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d009      	beq.n	8009c72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009c5e:	4b6b      	ldr	r3, [pc, #428]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	091b      	lsrs	r3, r3, #4
 8009c64:	f003 0307 	and.w	r3, r3, #7
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
       ||
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d047      	beq.n	8009d02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	73fb      	strb	r3, [r7, #15]
 8009c76:	e044      	b.n	8009d02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d018      	beq.n	8009cb2 <RCCEx_PLLSAI1_Config+0x86>
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d825      	bhi.n	8009cd0 <RCCEx_PLLSAI1_Config+0xa4>
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d002      	beq.n	8009c8e <RCCEx_PLLSAI1_Config+0x62>
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d009      	beq.n	8009ca0 <RCCEx_PLLSAI1_Config+0x74>
 8009c8c:	e020      	b.n	8009cd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009c8e:	4b5f      	ldr	r3, [pc, #380]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d11d      	bne.n	8009cd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c9e:	e01a      	b.n	8009cd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009ca0:	4b5a      	ldr	r3, [pc, #360]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d116      	bne.n	8009cda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009cb0:	e013      	b.n	8009cda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009cb2:	4b56      	ldr	r3, [pc, #344]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10f      	bne.n	8009cde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009cbe:	4b53      	ldr	r3, [pc, #332]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d109      	bne.n	8009cde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cce:	e006      	b.n	8009cde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd4:	e004      	b.n	8009ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009cd6:	bf00      	nop
 8009cd8:	e002      	b.n	8009ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009cda:	bf00      	nop
 8009cdc:	e000      	b.n	8009ce0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009cde:	bf00      	nop
    }

    if(status == HAL_OK)
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10d      	bne.n	8009d02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009ce6:	4b49      	ldr	r3, [pc, #292]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6819      	ldr	r1, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	011b      	lsls	r3, r3, #4
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	4943      	ldr	r1, [pc, #268]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d17c      	bne.n	8009e02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009d08:	4b40      	ldr	r3, [pc, #256]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a3f      	ldr	r2, [pc, #252]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d14:	f7fc fafa 	bl	800630c <HAL_GetTick>
 8009d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d1a:	e009      	b.n	8009d30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009d1c:	f7fc faf6 	bl	800630c <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d902      	bls.n	8009d30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8009d2e:	e005      	b.n	8009d3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d30:	4b36      	ldr	r3, [pc, #216]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1ef      	bne.n	8009d1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d15f      	bne.n	8009e02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d110      	bne.n	8009d6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009d48:	4b30      	ldr	r3, [pc, #192]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009d50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	6892      	ldr	r2, [r2, #8]
 8009d58:	0211      	lsls	r1, r2, #8
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	68d2      	ldr	r2, [r2, #12]
 8009d5e:	06d2      	lsls	r2, r2, #27
 8009d60:	430a      	orrs	r2, r1
 8009d62:	492a      	ldr	r1, [pc, #168]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	610b      	str	r3, [r1, #16]
 8009d68:	e027      	b.n	8009dba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d112      	bne.n	8009d96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009d70:	4b26      	ldr	r3, [pc, #152]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6892      	ldr	r2, [r2, #8]
 8009d80:	0211      	lsls	r1, r2, #8
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	6912      	ldr	r2, [r2, #16]
 8009d86:	0852      	lsrs	r2, r2, #1
 8009d88:	3a01      	subs	r2, #1
 8009d8a:	0552      	lsls	r2, r2, #21
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	491f      	ldr	r1, [pc, #124]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	610b      	str	r3, [r1, #16]
 8009d94:	e011      	b.n	8009dba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009d96:	4b1d      	ldr	r3, [pc, #116]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009d9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	6892      	ldr	r2, [r2, #8]
 8009da6:	0211      	lsls	r1, r2, #8
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6952      	ldr	r2, [r2, #20]
 8009dac:	0852      	lsrs	r2, r2, #1
 8009dae:	3a01      	subs	r2, #1
 8009db0:	0652      	lsls	r2, r2, #25
 8009db2:	430a      	orrs	r2, r1
 8009db4:	4915      	ldr	r1, [pc, #84]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009dba:	4b14      	ldr	r3, [pc, #80]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a13      	ldr	r2, [pc, #76]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009dc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc6:	f7fc faa1 	bl	800630c <HAL_GetTick>
 8009dca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009dcc:	e009      	b.n	8009de2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009dce:	f7fc fa9d 	bl	800630c <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d902      	bls.n	8009de2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	73fb      	strb	r3, [r7, #15]
          break;
 8009de0:	e005      	b.n	8009dee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009de2:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0ef      	beq.n	8009dce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	4903      	ldr	r1, [pc, #12]	; (8009e0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	40021000 	.word	0x40021000

08009e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e049      	b.n	8009eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fc f8cc 	bl	8005fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f000 fc08 	bl	800a664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d001      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e03b      	b.n	8009f50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68da      	ldr	r2, [r3, #12]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0201 	orr.w	r2, r2, #1
 8009eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a19      	ldr	r2, [pc, #100]	; (8009f5c <HAL_TIM_Base_Start_IT+0x9c>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d009      	beq.n	8009f0e <HAL_TIM_Base_Start_IT+0x4e>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f02:	d004      	beq.n	8009f0e <HAL_TIM_Base_Start_IT+0x4e>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a15      	ldr	r2, [pc, #84]	; (8009f60 <HAL_TIM_Base_Start_IT+0xa0>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d115      	bne.n	8009f3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	4b13      	ldr	r3, [pc, #76]	; (8009f64 <HAL_TIM_Base_Start_IT+0xa4>)
 8009f16:	4013      	ands	r3, r2
 8009f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b06      	cmp	r3, #6
 8009f1e:	d015      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x8c>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f26:	d011      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0201 	orr.w	r2, r2, #1
 8009f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f38:	e008      	b.n	8009f4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f042 0201 	orr.w	r2, r2, #1
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	e000      	b.n	8009f4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	40012c00 	.word	0x40012c00
 8009f60:	40014000 	.word	0x40014000
 8009f64:	00010007 	.word	0x00010007

08009f68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68da      	ldr	r2, [r3, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 0201 	bic.w	r2, r2, #1
 8009f7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6a1a      	ldr	r2, [r3, #32]
 8009f86:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10f      	bne.n	8009fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6a1a      	ldr	r2, [r3, #32]
 8009f96:	f240 4344 	movw	r3, #1092	; 0x444
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d107      	bne.n	8009fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0201 	bic.w	r2, r2, #1
 8009fae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e049      	b.n	800a06c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7fb ffa9 	bl	8005f44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3304      	adds	r3, #4
 800a002:	4619      	mov	r1, r3
 800a004:	4610      	mov	r0, r2
 800a006:	f000 fb2d 	bl	800a664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d104      	bne.n	800a08e <HAL_TIM_IC_Start_IT+0x1a>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	e023      	b.n	800a0d6 <HAL_TIM_IC_Start_IT+0x62>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b04      	cmp	r3, #4
 800a092:	d104      	bne.n	800a09e <HAL_TIM_IC_Start_IT+0x2a>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	e01b      	b.n	800a0d6 <HAL_TIM_IC_Start_IT+0x62>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d104      	bne.n	800a0ae <HAL_TIM_IC_Start_IT+0x3a>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	e013      	b.n	800a0d6 <HAL_TIM_IC_Start_IT+0x62>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b0c      	cmp	r3, #12
 800a0b2:	d104      	bne.n	800a0be <HAL_TIM_IC_Start_IT+0x4a>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	e00b      	b.n	800a0d6 <HAL_TIM_IC_Start_IT+0x62>
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b10      	cmp	r3, #16
 800a0c2:	d104      	bne.n	800a0ce <HAL_TIM_IC_Start_IT+0x5a>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	e003      	b.n	800a0d6 <HAL_TIM_IC_Start_IT+0x62>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d104      	bne.n	800a0e8 <HAL_TIM_IC_Start_IT+0x74>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	e013      	b.n	800a110 <HAL_TIM_IC_Start_IT+0x9c>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d104      	bne.n	800a0f8 <HAL_TIM_IC_Start_IT+0x84>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	e00b      	b.n	800a110 <HAL_TIM_IC_Start_IT+0x9c>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b08      	cmp	r3, #8
 800a0fc:	d104      	bne.n	800a108 <HAL_TIM_IC_Start_IT+0x94>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a104:	b2db      	uxtb	r3, r3
 800a106:	e003      	b.n	800a110 <HAL_TIM_IC_Start_IT+0x9c>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d102      	bne.n	800a11e <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d001      	beq.n	800a122 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e0c4      	b.n	800a2ac <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d104      	bne.n	800a132 <HAL_TIM_IC_Start_IT+0xbe>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a130:	e023      	b.n	800a17a <HAL_TIM_IC_Start_IT+0x106>
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b04      	cmp	r3, #4
 800a136:	d104      	bne.n	800a142 <HAL_TIM_IC_Start_IT+0xce>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2202      	movs	r2, #2
 800a13c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a140:	e01b      	b.n	800a17a <HAL_TIM_IC_Start_IT+0x106>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b08      	cmp	r3, #8
 800a146:	d104      	bne.n	800a152 <HAL_TIM_IC_Start_IT+0xde>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a150:	e013      	b.n	800a17a <HAL_TIM_IC_Start_IT+0x106>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b0c      	cmp	r3, #12
 800a156:	d104      	bne.n	800a162 <HAL_TIM_IC_Start_IT+0xee>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a160:	e00b      	b.n	800a17a <HAL_TIM_IC_Start_IT+0x106>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b10      	cmp	r3, #16
 800a166:	d104      	bne.n	800a172 <HAL_TIM_IC_Start_IT+0xfe>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a170:	e003      	b.n	800a17a <HAL_TIM_IC_Start_IT+0x106>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d104      	bne.n	800a18a <HAL_TIM_IC_Start_IT+0x116>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2202      	movs	r2, #2
 800a184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a188:	e013      	b.n	800a1b2 <HAL_TIM_IC_Start_IT+0x13e>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	d104      	bne.n	800a19a <HAL_TIM_IC_Start_IT+0x126>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a198:	e00b      	b.n	800a1b2 <HAL_TIM_IC_Start_IT+0x13e>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d104      	bne.n	800a1aa <HAL_TIM_IC_Start_IT+0x136>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1a8:	e003      	b.n	800a1b2 <HAL_TIM_IC_Start_IT+0x13e>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b0c      	cmp	r3, #12
 800a1b6:	d841      	bhi.n	800a23c <HAL_TIM_IC_Start_IT+0x1c8>
 800a1b8:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <HAL_TIM_IC_Start_IT+0x14c>)
 800a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1be:	bf00      	nop
 800a1c0:	0800a1f5 	.word	0x0800a1f5
 800a1c4:	0800a23d 	.word	0x0800a23d
 800a1c8:	0800a23d 	.word	0x0800a23d
 800a1cc:	0800a23d 	.word	0x0800a23d
 800a1d0:	0800a207 	.word	0x0800a207
 800a1d4:	0800a23d 	.word	0x0800a23d
 800a1d8:	0800a23d 	.word	0x0800a23d
 800a1dc:	0800a23d 	.word	0x0800a23d
 800a1e0:	0800a219 	.word	0x0800a219
 800a1e4:	0800a23d 	.word	0x0800a23d
 800a1e8:	0800a23d 	.word	0x0800a23d
 800a1ec:	0800a23d 	.word	0x0800a23d
 800a1f0:	0800a22b 	.word	0x0800a22b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68da      	ldr	r2, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 0202 	orr.w	r2, r2, #2
 800a202:	60da      	str	r2, [r3, #12]
      break;
 800a204:	e01b      	b.n	800a23e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68da      	ldr	r2, [r3, #12]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f042 0204 	orr.w	r2, r2, #4
 800a214:	60da      	str	r2, [r3, #12]
      break;
 800a216:	e012      	b.n	800a23e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0208 	orr.w	r2, r2, #8
 800a226:	60da      	str	r2, [r3, #12]
      break;
 800a228:	e009      	b.n	800a23e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0210 	orr.w	r2, r2, #16
 800a238:	60da      	str	r2, [r3, #12]
      break;
 800a23a:	e000      	b.n	800a23e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800a23c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2201      	movs	r2, #1
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fb7c 	bl	800a944 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a18      	ldr	r2, [pc, #96]	; (800a2b4 <HAL_TIM_IC_Start_IT+0x240>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d009      	beq.n	800a26a <HAL_TIM_IC_Start_IT+0x1f6>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25e:	d004      	beq.n	800a26a <HAL_TIM_IC_Start_IT+0x1f6>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a14      	ldr	r2, [pc, #80]	; (800a2b8 <HAL_TIM_IC_Start_IT+0x244>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d115      	bne.n	800a296 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <HAL_TIM_IC_Start_IT+0x248>)
 800a272:	4013      	ands	r3, r2
 800a274:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b06      	cmp	r3, #6
 800a27a:	d015      	beq.n	800a2a8 <HAL_TIM_IC_Start_IT+0x234>
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a282:	d011      	beq.n	800a2a8 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f042 0201 	orr.w	r2, r2, #1
 800a292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a294:	e008      	b.n	800a2a8 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f042 0201 	orr.w	r2, r2, #1
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	e000      	b.n	800a2aa <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	40012c00 	.word	0x40012c00
 800a2b8:	40014000 	.word	0x40014000
 800a2bc:	00010007 	.word	0x00010007

0800a2c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d122      	bne.n	800a31c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d11b      	bne.n	800a31c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f06f 0202 	mvn.w	r2, #2
 800a2ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f003 0303 	and.w	r3, r3, #3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7fa fd22 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 800a308:	e005      	b.n	800a316 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f98b 	bl	800a626 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f992 	bl	800a63a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b04      	cmp	r3, #4
 800a328:	d122      	bne.n	800a370 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f003 0304 	and.w	r3, r3, #4
 800a334:	2b04      	cmp	r3, #4
 800a336:	d11b      	bne.n	800a370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f06f 0204 	mvn.w	r2, #4
 800a340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2202      	movs	r2, #2
 800a346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7fa fcf8 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 800a35c:	e005      	b.n	800a36a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f961 	bl	800a626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f968 	bl	800a63a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	f003 0308 	and.w	r3, r3, #8
 800a37a:	2b08      	cmp	r3, #8
 800a37c:	d122      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	2b08      	cmp	r3, #8
 800a38a:	d11b      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f06f 0208 	mvn.w	r2, #8
 800a394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2204      	movs	r2, #4
 800a39a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7fa fcce 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 800a3b0:	e005      	b.n	800a3be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f937 	bl	800a626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f93e 	bl	800a63a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d122      	bne.n	800a418 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f003 0310 	and.w	r3, r3, #16
 800a3dc:	2b10      	cmp	r3, #16
 800a3de:	d11b      	bne.n	800a418 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f06f 0210 	mvn.w	r2, #16
 800a3e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2208      	movs	r2, #8
 800a3ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7fa fca4 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 800a404:	e005      	b.n	800a412 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f90d 	bl	800a626 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f914 	bl	800a63a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b01      	cmp	r3, #1
 800a424:	d10e      	bne.n	800a444 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b01      	cmp	r3, #1
 800a432:	d107      	bne.n	800a444 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f06f 0201 	mvn.w	r2, #1
 800a43c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7fa fdf2 	bl	8005028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44e:	2b80      	cmp	r3, #128	; 0x80
 800a450:	d10e      	bne.n	800a470 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45c:	2b80      	cmp	r3, #128	; 0x80
 800a45e:	d107      	bne.n	800a470 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fb00 	bl	800aa70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a47e:	d10e      	bne.n	800a49e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48a:	2b80      	cmp	r3, #128	; 0x80
 800a48c:	d107      	bne.n	800a49e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 faf3 	bl	800aa84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a8:	2b40      	cmp	r3, #64	; 0x40
 800a4aa:	d10e      	bne.n	800a4ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b6:	2b40      	cmp	r3, #64	; 0x40
 800a4b8:	d107      	bne.n	800a4ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f8c2 	bl	800a64e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	f003 0320 	and.w	r3, r3, #32
 800a4d4:	2b20      	cmp	r3, #32
 800a4d6:	d10e      	bne.n	800a4f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	d107      	bne.n	800a4f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f06f 0220 	mvn.w	r2, #32
 800a4ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fab3 	bl	800aa5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a510:	2b01      	cmp	r3, #1
 800a512:	d101      	bne.n	800a518 <HAL_TIM_IC_ConfigChannel+0x1a>
 800a514:	2302      	movs	r3, #2
 800a516:	e082      	b.n	800a61e <HAL_TIM_IC_ConfigChannel+0x120>
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d11b      	bne.n	800a55e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	6819      	ldr	r1, [r3, #0]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f000 f8f9 	bl	800a72c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	699a      	ldr	r2, [r3, #24]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 020c 	bic.w	r2, r2, #12
 800a548:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6999      	ldr	r1, [r3, #24]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	619a      	str	r2, [r3, #24]
 800a55c:	e05a      	b.n	800a614 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b04      	cmp	r3, #4
 800a562:	d11c      	bne.n	800a59e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	6819      	ldr	r1, [r3, #0]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	f000 f930 	bl	800a7d8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	699a      	ldr	r2, [r3, #24]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a586:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6999      	ldr	r1, [r3, #24]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	021a      	lsls	r2, r3, #8
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	619a      	str	r2, [r3, #24]
 800a59c:	e03a      	b.n	800a614 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b08      	cmp	r3, #8
 800a5a2:	d11b      	bne.n	800a5dc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	6819      	ldr	r1, [r3, #0]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f000 f94d 	bl	800a852 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	69da      	ldr	r2, [r3, #28]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 020c 	bic.w	r2, r2, #12
 800a5c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	69d9      	ldr	r1, [r3, #28]
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	61da      	str	r2, [r3, #28]
 800a5da:	e01b      	b.n	800a614 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	6819      	ldr	r1, [r3, #0]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f000 f96d 	bl	800a8ca <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	69da      	ldr	r2, [r3, #28]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a5fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	69d9      	ldr	r1, [r3, #28]
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	021a      	lsls	r2, r3, #8
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a62e:	bf00      	nop
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b083      	sub	sp, #12
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a642:	bf00      	nop
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a64e:	b480      	push	{r7}
 800a650:	b083      	sub	sp, #12
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
	...

0800a664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a2a      	ldr	r2, [pc, #168]	; (800a720 <TIM_Base_SetConfig+0xbc>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d003      	beq.n	800a684 <TIM_Base_SetConfig+0x20>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a682:	d108      	bne.n	800a696 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a68a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	4313      	orrs	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a21      	ldr	r2, [pc, #132]	; (800a720 <TIM_Base_SetConfig+0xbc>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d00b      	beq.n	800a6b6 <TIM_Base_SetConfig+0x52>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6a4:	d007      	beq.n	800a6b6 <TIM_Base_SetConfig+0x52>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a1e      	ldr	r2, [pc, #120]	; (800a724 <TIM_Base_SetConfig+0xc0>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d003      	beq.n	800a6b6 <TIM_Base_SetConfig+0x52>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a1d      	ldr	r2, [pc, #116]	; (800a728 <TIM_Base_SetConfig+0xc4>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d108      	bne.n	800a6c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	689a      	ldr	r2, [r3, #8]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a0c      	ldr	r2, [pc, #48]	; (800a720 <TIM_Base_SetConfig+0xbc>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d007      	beq.n	800a704 <TIM_Base_SetConfig+0xa0>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a0b      	ldr	r2, [pc, #44]	; (800a724 <TIM_Base_SetConfig+0xc0>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d003      	beq.n	800a704 <TIM_Base_SetConfig+0xa0>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a0a      	ldr	r2, [pc, #40]	; (800a728 <TIM_Base_SetConfig+0xc4>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d103      	bne.n	800a70c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	691a      	ldr	r2, [r3, #16]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	615a      	str	r2, [r3, #20]
}
 800a712:	bf00      	nop
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	40012c00 	.word	0x40012c00
 800a724:	40014000 	.word	0x40014000
 800a728:	40014400 	.word	0x40014400

0800a72c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	f023 0201 	bic.w	r2, r3, #1
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6a1b      	ldr	r3, [r3, #32]
 800a750:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	4a1e      	ldr	r2, [pc, #120]	; (800a7d0 <TIM_TI1_SetConfig+0xa4>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d007      	beq.n	800a76a <TIM_TI1_SetConfig+0x3e>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a760:	d003      	beq.n	800a76a <TIM_TI1_SetConfig+0x3e>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	4a1b      	ldr	r2, [pc, #108]	; (800a7d4 <TIM_TI1_SetConfig+0xa8>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d101      	bne.n	800a76e <TIM_TI1_SetConfig+0x42>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e000      	b.n	800a770 <TIM_TI1_SetConfig+0x44>
 800a76e:	2300      	movs	r3, #0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d008      	beq.n	800a786 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f023 0303 	bic.w	r3, r3, #3
 800a77a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4313      	orrs	r3, r2
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e003      	b.n	800a78e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f043 0301 	orr.w	r3, r3, #1
 800a78c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a794:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f023 030a 	bic.w	r3, r3, #10
 800a7a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f003 030a 	and.w	r3, r3, #10
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	621a      	str	r2, [r3, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	40012c00 	.word	0x40012c00
 800a7d4:	40014000 	.word	0x40014000

0800a7d8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	f023 0210 	bic.w	r2, r3, #16
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	021b      	lsls	r3, r3, #8
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a816:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	031b      	lsls	r3, r3, #12
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	4313      	orrs	r3, r2
 800a822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a82a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	4313      	orrs	r3, r2
 800a838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	697a      	ldr	r2, [r7, #20]
 800a83e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	621a      	str	r2, [r3, #32]
}
 800a846:	bf00      	nop
 800a848:	371c      	adds	r7, #28
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a852:	b480      	push	{r7}
 800a854:	b087      	sub	sp, #28
 800a856:	af00      	add	r7, sp, #0
 800a858:	60f8      	str	r0, [r7, #12]
 800a85a:	60b9      	str	r1, [r7, #8]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f023 0303 	bic.w	r3, r3, #3
 800a87e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4313      	orrs	r3, r2
 800a886:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a88e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	011b      	lsls	r3, r3, #4
 800a894:	b2db      	uxtb	r3, r3
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4313      	orrs	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a8a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	621a      	str	r2, [r3, #32]
}
 800a8be:	bf00      	nop
 800a8c0:	371c      	adds	r7, #28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b087      	sub	sp, #28
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	607a      	str	r2, [r7, #4]
 800a8d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	021b      	lsls	r3, r3, #8
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a908:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	031b      	lsls	r3, r3, #12
 800a90e:	b29b      	uxth	r3, r3
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	4313      	orrs	r3, r2
 800a914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a91c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	031b      	lsls	r3, r3, #12
 800a922:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	4313      	orrs	r3, r2
 800a92a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	621a      	str	r2, [r3, #32]
}
 800a938:	bf00      	nop
 800a93a:	371c      	adds	r7, #28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a944:	b480      	push	{r7}
 800a946:	b087      	sub	sp, #28
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f003 031f 	and.w	r3, r3, #31
 800a956:	2201      	movs	r2, #1
 800a958:	fa02 f303 	lsl.w	r3, r2, r3
 800a95c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6a1a      	ldr	r2, [r3, #32]
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	43db      	mvns	r3, r3
 800a966:	401a      	ands	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6a1a      	ldr	r2, [r3, #32]
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	f003 031f 	and.w	r3, r3, #31
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	fa01 f303 	lsl.w	r3, r1, r3
 800a97c:	431a      	orrs	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	621a      	str	r2, [r3, #32]
}
 800a982:	bf00      	nop
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d101      	bne.n	800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	e04f      	b.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a21      	ldr	r2, [pc, #132]	; (800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d108      	bne.n	800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a9d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a14      	ldr	r2, [pc, #80]	; (800aa54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d009      	beq.n	800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa10:	d004      	beq.n	800aa1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a10      	ldr	r2, [pc, #64]	; (800aa58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d10c      	bne.n	800aa36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	40012c00 	.word	0x40012c00
 800aa58:	40014000 	.word	0x40014000

0800aa5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa8c:	bf00      	nop
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800aa98:	b084      	sub	sp, #16
 800aa9a:	b480      	push	{r7}
 800aa9c:	b083      	sub	sp, #12
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	f107 0014 	add.w	r0, r7, #20
 800aaa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	b004      	add	sp, #16
 800aab8:	4770      	bx	lr

0800aaba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b085      	sub	sp, #20
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aac2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800aac6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aace:	b29a      	uxth	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	43db      	mvns	r3, r3
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	4013      	ands	r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	f107 0014 	add.w	r0, r7, #20
 800ab18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	b004      	add	sp, #16
 800ab4a:	4770      	bx	lr

0800ab4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
	...

0800ab78 <__libc_init_array>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	4d0d      	ldr	r5, [pc, #52]	; (800abb0 <__libc_init_array+0x38>)
 800ab7c:	4c0d      	ldr	r4, [pc, #52]	; (800abb4 <__libc_init_array+0x3c>)
 800ab7e:	1b64      	subs	r4, r4, r5
 800ab80:	10a4      	asrs	r4, r4, #2
 800ab82:	2600      	movs	r6, #0
 800ab84:	42a6      	cmp	r6, r4
 800ab86:	d109      	bne.n	800ab9c <__libc_init_array+0x24>
 800ab88:	4d0b      	ldr	r5, [pc, #44]	; (800abb8 <__libc_init_array+0x40>)
 800ab8a:	4c0c      	ldr	r4, [pc, #48]	; (800abbc <__libc_init_array+0x44>)
 800ab8c:	f000 f820 	bl	800abd0 <_init>
 800ab90:	1b64      	subs	r4, r4, r5
 800ab92:	10a4      	asrs	r4, r4, #2
 800ab94:	2600      	movs	r6, #0
 800ab96:	42a6      	cmp	r6, r4
 800ab98:	d105      	bne.n	800aba6 <__libc_init_array+0x2e>
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba0:	4798      	blx	r3
 800aba2:	3601      	adds	r6, #1
 800aba4:	e7ee      	b.n	800ab84 <__libc_init_array+0xc>
 800aba6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abaa:	4798      	blx	r3
 800abac:	3601      	adds	r6, #1
 800abae:	e7f2      	b.n	800ab96 <__libc_init_array+0x1e>
 800abb0:	0800c2e8 	.word	0x0800c2e8
 800abb4:	0800c2e8 	.word	0x0800c2e8
 800abb8:	0800c2e8 	.word	0x0800c2e8
 800abbc:	0800c2f0 	.word	0x0800c2f0

0800abc0 <memset>:
 800abc0:	4402      	add	r2, r0
 800abc2:	4603      	mov	r3, r0
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d100      	bne.n	800abca <memset+0xa>
 800abc8:	4770      	bx	lr
 800abca:	f803 1b01 	strb.w	r1, [r3], #1
 800abce:	e7f9      	b.n	800abc4 <memset+0x4>

0800abd0 <_init>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	bf00      	nop
 800abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd6:	bc08      	pop	{r3}
 800abd8:	469e      	mov	lr, r3
 800abda:	4770      	bx	lr

0800abdc <_fini>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr
