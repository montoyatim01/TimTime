
TimTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a22c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016b0  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba6c  0800ba6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba6c  0800ba6c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba6c  0800ba6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ba6c  0800ba6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba74  0800ba74  0001ba74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ba78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  20000070  0800bae8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  0800bae8  00020a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d7f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e53  00000000  00000000  00042e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  00046c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002753b  00000000  00000000  00048498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001d71d  00000000  00000000  0006f9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e5bc9  00000000  00000000  0008d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00172cb9  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001638  00000000  00000000  00172d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065cc  00000000  00000000  00174348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3a4 	.word	0x0800a3a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a3a4 	.word	0x0800a3a4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <_Z11batteryReadv>:
#include "Battery.h"
#include "Global.h"
#include "stm32l4xx_hal.h"

float batteryRead()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
    uint16_t averageReading = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	82fb      	strh	r3, [r7, #22]
    //uint8_t bufferPosition = 0;
    uint16_t readBuffer[8];

    HAL_ADC_Start(battADC);
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 fb76 	bl	800615c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(battADC, HAL_MAX_DELAY);
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f005 fbd2 	bl	8006222 <HAL_ADC_PollForConversion>
    for (int i=0; i<8; i++){
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	dc1b      	bgt.n	8000ac0 <_Z11batteryReadv+0x64>
        readBuffer[i] = HAL_ADC_GetValue(battADC);
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f005 fc50 	bl	8006332 <HAL_ADC_GetValue>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	f107 0118 	add.w	r1, r7, #24
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f823 2c18 	strh.w	r2, [r3, #-24]
        averageReading += readBuffer[i];
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	f107 0218 	add.w	r2, r7, #24
 8000aac:	4413      	add	r3, r2
 8000aae:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000ab2:	8afb      	ldrh	r3, [r7, #22]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	82fb      	strh	r3, [r7, #22]
    for (int i=0; i<8; i++){
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	3301      	adds	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	e7e0      	b.n	8000a82 <_Z11batteryReadv+0x26>
    }
    batteryRemaining = (battPercent((averageReading / 8)));
 8000ac0:	8afb      	ldrh	r3, [r7, #22]
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f816 	bl	8000af8 <_Z11battPercentt>
 8000acc:	eef0 7a40 	vmov.f32	s15, s0
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_Z11batteryReadv+0x98>)
 8000ad2:	edc3 7a00 	vstr	s15, [r3]
    return (battPercent((averageReading / 8)));
 8000ad6:	8afb      	ldrh	r3, [r7, #22]
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f80b 	bl	8000af8 <_Z11battPercentt>
 8000ae2:	eef0 7a40 	vmov.f32	s15, s0
    
    
}
 8000ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000048 	.word	0x20000048
 8000af4:	200000b4 	.word	0x200000b4

08000af8 <_Z11battPercentt>:


float battPercent(uint16_t analogReading){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
    if (analogReading >= 2700) {
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	f640 228b 	movw	r2, #2699	; 0xa8b
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d902      	bls.n	8000b12 <_Z11battPercentt+0x1a>
        return 1.0;
 8000b0c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b10:	e331      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2675 && analogReading < 2700) {
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	f640 2272 	movw	r2, #2674	; 0xa72
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d907      	bls.n	8000b2c <_Z11battPercentt+0x34>
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	f640 228b 	movw	r2, #2699	; 0xa8b
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d802      	bhi.n	8000b2c <_Z11battPercentt+0x34>
        return 1.0;
 8000b26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b2a:	e324      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2650 && analogReading < 2675) {
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	f640 2259 	movw	r2, #2649	; 0xa59
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d92c      	bls.n	8000b90 <_Z11battPercentt+0x98>
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f640 2272 	movw	r2, #2674	; 0xa72
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d827      	bhi.n	8000b90 <_Z11battPercentt+0x98>
        return ( (0.08*((float)analogReading)) - 115.0 )/100.0;
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b4a:	ee17 0a90 	vmov	r0, s15
 8000b4e:	f7ff fca3 	bl	8000498 <__aeabi_f2d>
 8000b52:	a3d8      	add	r3, pc, #864	; (adr r3, 8000eb4 <_Z11battPercentt+0x3bc>)
 8000b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b58:	f7ff fcf6 	bl	8000548 <__aeabi_dmul>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	a3d5      	add	r3, pc, #852	; (adr r3, 8000ebc <_Z11battPercentt+0x3c4>)
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	f7ff fb35 	bl	80001d8 <__aeabi_dsub>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	4bcb      	ldr	r3, [pc, #812]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000b7c:	f7ff fe0e 	bl	800079c <__aeabi_ddiv>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f7ff ff18 	bl	80009bc <__aeabi_d2f>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	e2f2      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2625 && analogReading < 2650) {
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	f5b3 6f24 	cmp.w	r3, #2624	; 0xa40
 8000b96:	d92c      	bls.n	8000bf2 <_Z11battPercentt+0xfa>
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	f640 2259 	movw	r2, #2649	; 0xa59
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d827      	bhi.n	8000bf2 <_Z11battPercentt+0xfa>
        return ( (0.12*((float)analogReading)) - 221.0 )/100.0;
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bac:	ee17 0a90 	vmov	r0, s15
 8000bb0:	f7ff fc72 	bl	8000498 <__aeabi_f2d>
 8000bb4:	a3a4      	add	r3, pc, #656	; (adr r3, 8000e48 <_Z11battPercentt+0x350>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fcc5 	bl	8000548 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	a3a2      	add	r3, pc, #648	; (adr r3, 8000e50 <_Z11battPercentt+0x358>)
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fb04 	bl	80001d8 <__aeabi_dsub>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	4bb2      	ldr	r3, [pc, #712]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000bde:	f7ff fddd 	bl	800079c <__aeabi_ddiv>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4610      	mov	r0, r2
 8000be8:	4619      	mov	r1, r3
 8000bea:	f7ff fee7 	bl	80009bc <__aeabi_d2f>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	e2c1      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2600 && analogReading < 2625) {
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f640 2227 	movw	r2, #2599	; 0xa27
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d92b      	bls.n	8000c54 <_Z11battPercentt+0x15c>
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	f5b3 6f24 	cmp.w	r3, #2624	; 0xa40
 8000c02:	d827      	bhi.n	8000c54 <_Z11battPercentt+0x15c>
        return ( (0.16*((float)analogReading)) - 326.0 )/100.0;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c0e:	ee17 0a90 	vmov	r0, s15
 8000c12:	f7ff fc41 	bl	8000498 <__aeabi_f2d>
 8000c16:	a390      	add	r3, pc, #576	; (adr r3, 8000e58 <_Z11battPercentt+0x360>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fc94 	bl	8000548 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	a38d      	add	r3, pc, #564	; (adr r3, 8000e60 <_Z11battPercentt+0x368>)
 8000c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2e:	f7ff fad3 	bl	80001d8 <__aeabi_dsub>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	4b9a      	ldr	r3, [pc, #616]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000c40:	f7ff fdac 	bl	800079c <__aeabi_ddiv>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff feb6 	bl	80009bc <__aeabi_d2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	e290      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2575 && analogReading < 2600) {
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	f640 220e 	movw	r2, #2574	; 0xa0e
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d92c      	bls.n	8000cb8 <_Z11battPercentt+0x1c0>
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	f640 2227 	movw	r2, #2599	; 0xa27
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d827      	bhi.n	8000cb8 <_Z11battPercentt+0x1c0>
        return ( (0.24*((float)analogReading)) - 534.0 )/100.0;
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c72:	ee17 0a90 	vmov	r0, s15
 8000c76:	f7ff fc0f 	bl	8000498 <__aeabi_f2d>
 8000c7a:	a37b      	add	r3, pc, #492	; (adr r3, 8000e68 <_Z11battPercentt+0x370>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	f7ff fc62 	bl	8000548 <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4610      	mov	r0, r2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b86      	ldr	r3, [pc, #536]	; (8000eac <_Z11battPercentt+0x3b4>)
 8000c92:	f7ff faa1 	bl	80001d8 <__aeabi_dsub>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000ca4:	f7ff fd7a 	bl	800079c <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fe84 	bl	80009bc <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	e25e      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2540 && analogReading < 2575) {
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	f640 12eb 	movw	r2, #2539	; 0x9eb
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d92c      	bls.n	8000d1c <_Z11battPercentt+0x224>
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	f640 220e 	movw	r2, #2574	; 0xa0e
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d827      	bhi.n	8000d1c <_Z11battPercentt+0x224>
        return ( (0.11428*((float)analogReading)) - 210.28 )/100.0;
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ee17 0a90 	vmov	r0, s15
 8000cda:	f7ff fbdd 	bl	8000498 <__aeabi_f2d>
 8000cde:	a364      	add	r3, pc, #400	; (adr r3, 8000e70 <_Z11battPercentt+0x378>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fc30 	bl	8000548 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	a361      	add	r3, pc, #388	; (adr r3, 8000e78 <_Z11battPercentt+0x380>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f7ff fa6f 	bl	80001d8 <__aeabi_dsub>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	4b68      	ldr	r3, [pc, #416]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000d08:	f7ff fd48 	bl	800079c <__aeabi_ddiv>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fe52 	bl	80009bc <__aeabi_d2f>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	e22c      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2525 && analogReading < 2540) {
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	f640 12dc 	movw	r2, #2524	; 0x9dc
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d92c      	bls.n	8000d80 <_Z11battPercentt+0x288>
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f640 12eb 	movw	r2, #2539	; 0x9eb
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d827      	bhi.n	8000d80 <_Z11battPercentt+0x288>
        return ( (0.4*((float)analogReading)) - 936.0 )/100.0;
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3a:	ee17 0a90 	vmov	r0, s15
 8000d3e:	f7ff fbab 	bl	8000498 <__aeabi_f2d>
 8000d42:	a34f      	add	r3, pc, #316	; (adr r3, 8000e80 <_Z11battPercentt+0x388>)
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	f7ff fbfe 	bl	8000548 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <_Z11battPercentt+0x3b8>)
 8000d5a:	f7ff fa3d 	bl	80001d8 <__aeabi_dsub>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000d6c:	f7ff fd16 	bl	800079c <__aeabi_ddiv>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fe20 	bl	80009bc <__aeabi_d2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	e1fa      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2500 && analogReading < 2525) {
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d92c      	bls.n	8000de4 <_Z11battPercentt+0x2ec>
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	f640 12dc 	movw	r2, #2524	; 0x9dc
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d827      	bhi.n	8000de4 <_Z11battPercentt+0x2ec>
        return ( (0.36*((float)analogReading)) - 835.0 )/100.0;
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9e:	ee17 0a90 	vmov	r0, s15
 8000da2:	f7ff fb79 	bl	8000498 <__aeabi_f2d>
 8000da6:	a338      	add	r3, pc, #224	; (adr r3, 8000e88 <_Z11battPercentt+0x390>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fbcc 	bl	8000548 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	a335      	add	r3, pc, #212	; (adr r3, 8000e90 <_Z11battPercentt+0x398>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fa0b 	bl	80001d8 <__aeabi_dsub>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000dd0:	f7ff fce4 	bl	800079c <__aeabi_ddiv>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f7ff fdee 	bl	80009bc <__aeabi_d2f>
 8000de0:	4603      	mov	r3, r0
 8000de2:	e1c8      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2470 && analogReading < 2500) {
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	f640 12a5 	movw	r2, #2469	; 0x9a5
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d96a      	bls.n	8000ec4 <_Z11battPercentt+0x3cc>
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d865      	bhi.n	8000ec4 <_Z11battPercentt+0x3cc>
        return ( (0.366*((float)analogReading)) - 851.66 )/100.0;
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e02:	ee17 0a90 	vmov	r0, s15
 8000e06:	f7ff fb47 	bl	8000498 <__aeabi_f2d>
 8000e0a:	a323      	add	r3, pc, #140	; (adr r3, 8000e98 <_Z11battPercentt+0x3a0>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fb9a 	bl	8000548 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	a320      	add	r3, pc, #128	; (adr r3, 8000ea0 <_Z11battPercentt+0x3a8>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff f9d9 	bl	80001d8 <__aeabi_dsub>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000e34:	f7ff fcb2 	bl	800079c <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fdbc 	bl	80009bc <__aeabi_d2f>
 8000e44:	4603      	mov	r3, r0
 8000e46:	e196      	b.n	8001176 <_Z11battPercentt+0x67e>
 8000e48:	eb851eb8 	.word	0xeb851eb8
 8000e4c:	3fbeb851 	.word	0x3fbeb851
 8000e50:	00000000 	.word	0x00000000
 8000e54:	406ba000 	.word	0x406ba000
 8000e58:	47ae147b 	.word	0x47ae147b
 8000e5c:	3fc47ae1 	.word	0x3fc47ae1
 8000e60:	00000000 	.word	0x00000000
 8000e64:	40746000 	.word	0x40746000
 8000e68:	eb851eb8 	.word	0xeb851eb8
 8000e6c:	3fceb851 	.word	0x3fceb851
 8000e70:	3e963dc5 	.word	0x3e963dc5
 8000e74:	3fbd4174 	.word	0x3fbd4174
 8000e78:	c28f5c29 	.word	0xc28f5c29
 8000e7c:	406a48f5 	.word	0x406a48f5
 8000e80:	9999999a 	.word	0x9999999a
 8000e84:	3fd99999 	.word	0x3fd99999
 8000e88:	70a3d70a 	.word	0x70a3d70a
 8000e8c:	3fd70a3d 	.word	0x3fd70a3d
 8000e90:	00000000 	.word	0x00000000
 8000e94:	408a1800 	.word	0x408a1800
 8000e98:	43958106 	.word	0x43958106
 8000e9c:	3fd76c8b 	.word	0x3fd76c8b
 8000ea0:	ae147ae1 	.word	0xae147ae1
 8000ea4:	408a9d47 	.word	0x408a9d47
 8000ea8:	40590000 	.word	0x40590000
 8000eac:	4080b000 	.word	0x4080b000
 8000eb0:	408d4000 	.word	0x408d4000
 8000eb4:	47ae147b 	.word	0x47ae147b
 8000eb8:	3fb47ae1 	.word	0x3fb47ae1
 8000ebc:	00000000 	.word	0x00000000
 8000ec0:	405cc000 	.word	0x405cc000
    }
    if (analogReading >= 2450 && analogReading < 2470) {
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	f640 1291 	movw	r2, #2449	; 0x991
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d92c      	bls.n	8000f28 <_Z11battPercentt+0x430>
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	f640 12a5 	movw	r2, #2469	; 0x9a5
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d827      	bhi.n	8000f28 <_Z11battPercentt+0x430>
        return ( (1.1*((float)analogReading)) - 2663.0 )/100.0;
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee2:	ee17 0a90 	vmov	r0, s15
 8000ee6:	f7ff fad7 	bl	8000498 <__aeabi_f2d>
 8000eea:	a3b8      	add	r3, pc, #736	; (adr r3, 80011cc <_Z11battPercentt+0x6d4>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb2a 	bl	8000548 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	a3b5      	add	r3, pc, #724	; (adr r3, 80011d4 <_Z11battPercentt+0x6dc>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff f969 	bl	80001d8 <__aeabi_dsub>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4bab      	ldr	r3, [pc, #684]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000f14:	f7ff fc42 	bl	800079c <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd4c 	bl	80009bc <__aeabi_d2f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	e126      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2435 && analogReading < 2450) {
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	f640 1282 	movw	r2, #2434	; 0x982
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d92c      	bls.n	8000f8c <_Z11battPercentt+0x494>
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f640 1291 	movw	r2, #2449	; 0x991
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d827      	bhi.n	8000f8c <_Z11battPercentt+0x494>
        return ( (0.9333*((float)analogReading)) - 2254.66 )/100.0;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f46:	ee17 0a90 	vmov	r0, s15
 8000f4a:	f7ff faa5 	bl	8000498 <__aeabi_f2d>
 8000f4e:	a38e      	add	r3, pc, #568	; (adr r3, 8001188 <_Z11battPercentt+0x690>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff faf8 	bl	8000548 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	a38b      	add	r3, pc, #556	; (adr r3, 8001190 <_Z11battPercentt+0x698>)
 8000f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f66:	f7ff f937 	bl	80001d8 <__aeabi_dsub>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b92      	ldr	r3, [pc, #584]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000f78:	f7ff fc10 	bl	800079c <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd1a 	bl	80009bc <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	e0f4      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2400 && analogReading < 2435) {
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000f92:	d32c      	bcc.n	8000fee <_Z11battPercentt+0x4f6>
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f640 1282 	movw	r2, #2434	; 0x982
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d827      	bhi.n	8000fee <_Z11battPercentt+0x4f6>
        return ( (0.1714285*((float)analogReading)) - 399.0 )/100.0;
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa8:	ee17 0a90 	vmov	r0, s15
 8000fac:	f7ff fa74 	bl	8000498 <__aeabi_f2d>
 8000fb0:	a379      	add	r3, pc, #484	; (adr r3, 8001198 <_Z11battPercentt+0x6a0>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fac7 	bl	8000548 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	a377      	add	r3, pc, #476	; (adr r3, 80011a0 <_Z11battPercentt+0x6a8>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff f906 	bl	80001d8 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b79      	ldr	r3, [pc, #484]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000fda:	f7ff fbdf 	bl	800079c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fce9 	bl	80009bc <__aeabi_d2f>
 8000fea:	4603      	mov	r3, r0
 8000fec:	e0c3      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2380 && analogReading < 2400) {
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f640 124b 	movw	r2, #2379	; 0x94b
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d92b      	bls.n	8001050 <_Z11battPercentt+0x558>
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000ffe:	d227      	bcs.n	8001050 <_Z11battPercentt+0x558>
        return ( (0.2*((float)analogReading)) - 468.0 )/100.0;
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100a:	ee17 0a90 	vmov	r0, s15
 800100e:	f7ff fa43 	bl	8000498 <__aeabi_f2d>
 8001012:	a365      	add	r3, pc, #404	; (adr r3, 80011a8 <_Z11battPercentt+0x6b0>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa96 	bl	8000548 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <_Z11battPercentt+0x6cc>)
 800102a:	f7ff f8d5 	bl	80001d8 <__aeabi_dsub>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <_Z11battPercentt+0x6c8>)
 800103c:	f7ff fbae 	bl	800079c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fcb8 	bl	80009bc <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	e092      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2344 && analogReading < 2380) {
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	f640 1227 	movw	r2, #2343	; 0x927
 8001056:	4293      	cmp	r3, r2
 8001058:	d92c      	bls.n	80010b4 <_Z11battPercentt+0x5bc>
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	f640 124b 	movw	r2, #2379	; 0x94b
 8001060:	4293      	cmp	r3, r2
 8001062:	d827      	bhi.n	80010b4 <_Z11battPercentt+0x5bc>
        return ( (0.111111*((float)analogReading)) - 256.0 )/100.0;
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106e:	ee17 0a90 	vmov	r0, s15
 8001072:	f7ff fa11 	bl	8000498 <__aeabi_f2d>
 8001076:	a34e      	add	r3, pc, #312	; (adr r3, 80011b0 <_Z11battPercentt+0x6b8>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fa64 	bl	8000548 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <_Z11battPercentt+0x6d0>)
 800108e:	f7ff f8a3 	bl	80001d8 <__aeabi_dsub>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <_Z11battPercentt+0x6c8>)
 80010a0:	f7ff fb7c 	bl	800079c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fc86 	bl	80009bc <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	e060      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2320 && analogReading < 2344) {
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80010ba:	d32d      	bcc.n	8001118 <_Z11battPercentt+0x620>
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	f640 1227 	movw	r2, #2343	; 0x927
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d828      	bhi.n	8001118 <_Z11battPercentt+0x620>
        return ( (0.125*((float)analogReading)) - 289.0 )/100.0;
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff f9e0 	bl	8000498 <__aeabi_f2d>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80010e0:	f7ff fa32 	bl	8000548 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	a332      	add	r3, pc, #200	; (adr r3, 80011b8 <_Z11battPercentt+0x6c0>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f871 	bl	80001d8 <__aeabi_dsub>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8001104:	f7ff fb4a 	bl	800079c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fc54 	bl	80009bc <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	e02e      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2300 && analogReading < 2320) {
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	f640 02fb 	movw	r2, #2299	; 0x8fb
 800111e:	4293      	cmp	r3, r2
 8001120:	d906      	bls.n	8001130 <_Z11battPercentt+0x638>
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8001128:	d202      	bcs.n	8001130 <_Z11battPercentt+0x638>
        return 0.0;
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	e022      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2260 && analogReading < 2300) {
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	f640 02d3 	movw	r2, #2259	; 0x8d3
 8001136:	4293      	cmp	r3, r2
 8001138:	d907      	bls.n	800114a <_Z11battPercentt+0x652>
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001140:	4293      	cmp	r3, r2
 8001142:	d802      	bhi.n	800114a <_Z11battPercentt+0x652>
        return 0.0;
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e015      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 1900 && analogReading < 2260) {
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	f240 726b 	movw	r2, #1899	; 0x76b
 8001150:	4293      	cmp	r3, r2
 8001152:	d907      	bls.n	8001164 <_Z11battPercentt+0x66c>
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	f640 02d3 	movw	r2, #2259	; 0x8d3
 800115a:	4293      	cmp	r3, r2
 800115c:	d802      	bhi.n	8001164 <_Z11battPercentt+0x66c>
        return 0.0;
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	e008      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading < 1900){
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f240 726b 	movw	r2, #1899	; 0x76b
 800116a:	4293      	cmp	r3, r2
 800116c:	d802      	bhi.n	8001174 <_Z11battPercentt+0x67c>
        return 0.0;
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e000      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    


 8001174:	e001      	b.n	800117a <_Z11battPercentt+0x682>
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f3af 8000 	nop.w
 8001188:	f62b6ae8 	.word	0xf62b6ae8
 800118c:	3feddd97 	.word	0x3feddd97
 8001190:	eb851eb8 	.word	0xeb851eb8
 8001194:	40a19d51 	.word	0x40a19d51
 8001198:	7c8d1959 	.word	0x7c8d1959
 800119c:	3fc5f15e 	.word	0x3fc5f15e
 80011a0:	00000000 	.word	0x00000000
 80011a4:	4078f000 	.word	0x4078f000
 80011a8:	9999999a 	.word	0x9999999a
 80011ac:	3fc99999 	.word	0x3fc99999
 80011b0:	3f39d1b3 	.word	0x3f39d1b3
 80011b4:	3fbc71c5 	.word	0x3fbc71c5
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40721000 	.word	0x40721000
 80011c0:	40590000 	.word	0x40590000
 80011c4:	407d4000 	.word	0x407d4000
 80011c8:	40700000 	.word	0x40700000
 80011cc:	9999999a 	.word	0x9999999a
 80011d0:	3ff19999 	.word	0x3ff19999
 80011d4:	00000000 	.word	0x00000000
 80011d8:	40a4ce00 	.word	0x40a4ce00

080011dc <_Z15calibrationMenuv>:


//00 Number
//01 OK
//02 Cancel
void calibrationMenu(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
    uint32_t buttonTime;
    bool inMenu = true;
 80011e2:	2301      	movs	r3, #1
 80011e4:	70fb      	strb	r3, [r7, #3]
    menuItemSelect = false;
 80011e6:	4ba7      	ldr	r3, [pc, #668]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
    
    updateDisplay(d_calibration);
 80011ec:	2008      	movs	r0, #8
 80011ee:	f000 fa51 	bl	8001694 <_Z13updateDisplayh>
    while(GPIOB->IDR & GPIO_PIN_8 || GPIOB->IDR & GPIO_PIN_9){
 80011f2:	4ba5      	ldr	r3, [pc, #660]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d105      	bne.n	800120a <_Z15calibrationMenuv+0x2e>
 80011fe:	4ba2      	ldr	r3, [pc, #648]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <_Z15calibrationMenuv+0x32>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <_Z15calibrationMenuv+0x34>
 800120e:	2300      	movs	r3, #0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d000      	beq.n	8001216 <_Z15calibrationMenuv+0x3a>
 8001214:	e7ed      	b.n	80011f2 <_Z15calibrationMenuv+0x16>
        //Do nothing while holding buttons
    }
    displayTimeout = HAL_GetTick();
 8001216:	f004 fc63 	bl	8005ae0 <HAL_GetTick>
 800121a:	4603      	mov	r3, r0
 800121c:	4a9b      	ldr	r2, [pc, #620]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 800121e:	6013      	str	r3, [r2, #0]
    while (inMenu){
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 814f 	beq.w	80014c6 <_Z15calibrationMenuv+0x2ea>
        updateDisplay(d_calibration);
 8001228:	2008      	movs	r0, #8
 800122a:	f000 fa33 	bl	8001694 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 30000){
 800122e:	f004 fc57 	bl	8005ae0 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	4b95      	ldr	r3, [pc, #596]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f247 5230 	movw	r2, #30000	; 0x7530
 800123e:	4293      	cmp	r3, r2
 8001240:	bf8c      	ite	hi
 8001242:	2301      	movhi	r3, #1
 8001244:	2300      	movls	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <_Z15calibrationMenuv+0x74>
            inMenu = false;
 800124c:	2300      	movs	r3, #0
 800124e:	70fb      	strb	r3, [r7, #3]
        }


        if (GPIOB->IDR & GPIO_PIN_9)
 8001250:	4b8d      	ldr	r3, [pc, #564]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d043      	beq.n	80012ee <_Z15calibrationMenuv+0x112>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8001266:	f004 fc3b 	bl	8005ae0 <HAL_GetTick>
 800126a:	4603      	mov	r3, r0
 800126c:	4a87      	ldr	r2, [pc, #540]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 800126e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001270:	f004 fc36 	bl	8005ae0 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800127e:	bf8c      	ite	hi
 8001280:	2301      	movhi	r3, #1
 8001282:	2300      	movls	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d031      	beq.n	80012ee <_Z15calibrationMenuv+0x112>
            {
                if (menuItemSelect)
 800128a:	4b7e      	ldr	r3, [pc, #504]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d01d      	beq.n	80012ce <_Z15calibrationMenuv+0xf2>
                { //Menu item selected, scrolling through values
                    switch (menuItem)
 8001292:	4b7f      	ldr	r3, [pc, #508]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b03      	cmp	r3, #3
 8001298:	d826      	bhi.n	80012e8 <_Z15calibrationMenuv+0x10c>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <_Z15calibrationMenuv+0xc4>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012e9 	.word	0x080012e9
 80012a8:	080012e9 	.word	0x080012e9
 80012ac:	080012e9 	.word	0x080012e9
                    {
                    case 0: //Number
                        if (newCal == 23000000)
 80012b0:	4b78      	ldr	r3, [pc, #480]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a78      	ldr	r2, [pc, #480]	; (8001498 <_Z15calibrationMenuv+0x2bc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d103      	bne.n	80012c2 <_Z15calibrationMenuv+0xe6>
                            newCal = 23000000;
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 80012bc:	4a76      	ldr	r2, [pc, #472]	; (8001498 <_Z15calibrationMenuv+0x2bc>)
 80012be:	601a      	str	r2, [r3, #0]
                        else
                            newCal--;
                        break;
 80012c0:	e012      	b.n	80012e8 <_Z15calibrationMenuv+0x10c>
                            newCal--;
 80012c2:	4b74      	ldr	r3, [pc, #464]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4a72      	ldr	r2, [pc, #456]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 80012ca:	6013      	str	r3, [r2, #0]
                        break;
 80012cc:	e00c      	b.n	80012e8 <_Z15calibrationMenuv+0x10c>
                        
                    }
                }
                else
                { //Scrolling through menu
                    menuItem++;
 80012ce:	4b70      	ldr	r3, [pc, #448]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b6e      	ldr	r3, [pc, #440]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80012d8:	701a      	strb	r2, [r3, #0]
                    if (menuItem > 2)
 80012da:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d902      	bls.n	80012e8 <_Z15calibrationMenuv+0x10c>
                        menuItem = 0;
 80012e2:	4b6b      	ldr	r3, [pc, #428]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 80012e8:	f004 fbfa 	bl	8005ae0 <HAL_GetTick>
 80012ec:	6078      	str	r0, [r7, #4]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 80012ee:	4b66      	ldr	r3, [pc, #408]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bf14      	ite	ne
 80012fa:	2301      	movne	r3, #1
 80012fc:	2300      	moveq	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d042      	beq.n	800138a <_Z15calibrationMenuv+0x1ae>
        { //Minus button

            displayTimeout = HAL_GetTick();
 8001304:	f004 fbec 	bl	8005ae0 <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	4a60      	ldr	r2, [pc, #384]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 800130c:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 800130e:	f004 fbe7 	bl	8005ae0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800131c:	bf8c      	ite	hi
 800131e:	2301      	movhi	r3, #1
 8001320:	2300      	movls	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d030      	beq.n	800138a <_Z15calibrationMenuv+0x1ae>
            {
                if (menuItemSelect)
 8001328:	4b56      	ldr	r3, [pc, #344]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d017      	beq.n	8001360 <_Z15calibrationMenuv+0x184>
                { //Scrolling through option
                    switch (menuItem)
 8001330:	4b57      	ldr	r3, [pc, #348]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d022      	beq.n	800137e <_Z15calibrationMenuv+0x1a2>
 8001338:	2b02      	cmp	r3, #2
 800133a:	dc23      	bgt.n	8001384 <_Z15calibrationMenuv+0x1a8>
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <_Z15calibrationMenuv+0x168>
 8001340:	2b01      	cmp	r3, #1
                        if (newCal > 25000000)
                            newCal = 25000000;
                        break;
                        
                    case 1: //OK
                        break;
 8001342:	e01f      	b.n	8001384 <_Z15calibrationMenuv+0x1a8>
                        newCal++;
 8001344:	4b53      	ldr	r3, [pc, #332]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	4a52      	ldr	r2, [pc, #328]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 800134c:	6013      	str	r3, [r2, #0]
                        if (newCal > 25000000)
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <_Z15calibrationMenuv+0x2c0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d914      	bls.n	8001382 <_Z15calibrationMenuv+0x1a6>
                            newCal = 25000000;
 8001358:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 800135a:	4a50      	ldr	r2, [pc, #320]	; (800149c <_Z15calibrationMenuv+0x2c0>)
 800135c:	601a      	str	r2, [r3, #0]
                        break;
 800135e:	e010      	b.n	8001382 <_Z15calibrationMenuv+0x1a6>
                        break;
                    }
                }
                else
                { //Scrolling through menu
                    if (menuItem == 0)
 8001360:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <_Z15calibrationMenuv+0x194>
                        menuItem = 2;
 8001368:	4b49      	ldr	r3, [pc, #292]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 800136a:	2202      	movs	r2, #2
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	e009      	b.n	8001384 <_Z15calibrationMenuv+0x1a8>
                    else
                        menuItem--;
 8001370:	4b47      	ldr	r3, [pc, #284]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b45      	ldr	r3, [pc, #276]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e002      	b.n	8001384 <_Z15calibrationMenuv+0x1a8>
                        break;
 800137e:	bf00      	nop
 8001380:	e000      	b.n	8001384 <_Z15calibrationMenuv+0x1a8>
                        break;
 8001382:	bf00      	nop
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8001384:	f004 fbac 	bl	8005ae0 <HAL_GetTick>
 8001388:	6078      	str	r0, [r7, #4]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 800138a:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <_Z15calibrationMenuv+0x2c4>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf14      	ite	ne
 8001396:	2301      	movne	r3, #1
 8001398:	2300      	moveq	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	f43f af3f 	beq.w	8001220 <_Z15calibrationMenuv+0x44>
        { //Menu button
            displayTimeout = HAL_GetTick();
 80013a2:	f004 fb9d 	bl	8005ae0 <HAL_GetTick>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a38      	ldr	r2, [pc, #224]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 80013aa:	6013      	str	r3, [r2, #0]
            if (!(GPIOB->IDR & GPIO_PIN_8))
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <_Z15calibrationMenuv+0x2ac>)
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f43f af2e 	beq.w	8001220 <_Z15calibrationMenuv+0x44>
            {

                displayTimeout = HAL_GetTick();
 80013c4:	f004 fb8c 	bl	8005ae0 <HAL_GetTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a30      	ldr	r2, [pc, #192]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 80013cc:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - buttonTime > 350) //Debounce
 80013ce:	f004 fb87 	bl	8005ae0 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80013dc:	bf8c      	ite	hi
 80013de:	2301      	movhi	r3, #1
 80013e0:	2300      	movls	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f43f af1b 	beq.w	8001220 <_Z15calibrationMenuv+0x44>
                {
                    if (!menuItemSelect)
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	f083 0301 	eor.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d057      	beq.n	80014a8 <_Z15calibrationMenuv+0x2cc>
                    { //if scrolling through menu items
                        switch (menuItem)
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <_Z15calibrationMenuv+0x2b4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d02d      	beq.n	800145c <_Z15calibrationMenuv+0x280>
 8001400:	2b02      	cmp	r3, #2
 8001402:	dc5c      	bgt.n	80014be <_Z15calibrationMenuv+0x2e2>
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <_Z15calibrationMenuv+0x232>
 8001408:	2b01      	cmp	r3, #1
 800140a:	d004      	beq.n	8001416 <_Z15calibrationMenuv+0x23a>
 800140c:	e057      	b.n	80014be <_Z15calibrationMenuv+0x2e2>
                        {
                        case 0: //Number
                            menuItemSelect = true;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
                            break;
 8001414:	e053      	b.n	80014be <_Z15calibrationMenuv+0x2e2>
                        case 1: //OK
                            calibrateSuccess = !writeCalibration(newCal);
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <_Z15calibrationMenuv+0x2b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f85c 	bl	80014d8 <_Z16writeCalibrationm>
 8001420:	4603      	mov	r3, r0
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <_Z15calibrationMenuv+0x2c8>)
 800142a:	701a      	strb	r2, [r3, #0]
                            //calibration = newCal;
                            calibrationStatus();
 800142c:	f000 f89c 	bl	8001568 <_Z17calibrationStatusv>

                            inMenu = false;
 8001430:	2300      	movs	r3, #0
 8001432:	70fb      	strb	r3, [r7, #3]
                            //Try writing cal
                            //Exit menu
                            menuItemSelect = true;
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <_Z15calibrationMenuv+0x2a8>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
                            //offsetAlert();
                            while (GPIOC->IDR & GPIO_PIN_13)
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <_Z15calibrationMenuv+0x2c4>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001442:	2b00      	cmp	r3, #0
 8001444:	bf14      	ite	ne
 8001446:	2301      	movne	r3, #1
 8001448:	2300      	moveq	r3, #0
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d033      	beq.n	80014b8 <_Z15calibrationMenuv+0x2dc>
                            {displayTimeout = HAL_GetTick();}
 8001450:	f004 fb46 	bl	8005ae0 <HAL_GetTick>
 8001454:	4603      	mov	r3, r0
 8001456:	4a0d      	ldr	r2, [pc, #52]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 8001458:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 800145a:	e7ee      	b.n	800143a <_Z15calibrationMenuv+0x25e>
                            break;
                        case 2: //Cancel
                            inMenu = false;
 800145c:	2300      	movs	r3, #0
 800145e:	70fb      	strb	r3, [r7, #3]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <_Z15calibrationMenuv+0x2c4>)
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf14      	ite	ne
 800146c:	2301      	movne	r3, #1
 800146e:	2300      	moveq	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d022      	beq.n	80014bc <_Z15calibrationMenuv+0x2e0>
                            {displayTimeout = HAL_GetTick();}
 8001476:	f004 fb33 	bl	8005ae0 <HAL_GetTick>
 800147a:	4603      	mov	r3, r0
 800147c:	4a03      	ldr	r2, [pc, #12]	; (800148c <_Z15calibrationMenuv+0x2b0>)
 800147e:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001480:	e7ee      	b.n	8001460 <_Z15calibrationMenuv+0x284>
 8001482:	bf00      	nop
 8001484:	200000e6 	.word	0x200000e6
 8001488:	48000400 	.word	0x48000400
 800148c:	200000dc 	.word	0x200000dc
 8001490:	200000e7 	.word	0x200000e7
 8001494:	2000008c 	.word	0x2000008c
 8001498:	015ef3c0 	.word	0x015ef3c0
 800149c:	017d7840 	.word	0x017d7840
 80014a0:	48000800 	.word	0x48000800
 80014a4:	20000090 	.word	0x20000090
                            break;
                        }
                    }
                    else //Exit menu option
                    {
                        switch (menuItem)
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <_Z15calibrationMenuv+0x2f4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d106      	bne.n	80014be <_Z15calibrationMenuv+0x2e2>
                        {
                        case 0: //Rate
                            menuItemSelect = false;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_Z15calibrationMenuv+0x2f8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
                            //calibration = newCal;
                            break;
 80014b6:	e002      	b.n	80014be <_Z15calibrationMenuv+0x2e2>
                            break;
 80014b8:	bf00      	nop
 80014ba:	e000      	b.n	80014be <_Z15calibrationMenuv+0x2e2>
                            break;
 80014bc:	bf00      	nop
                        }
                    }
                    buttonTime = HAL_GetTick(); //Debounce timer
 80014be:	f004 fb0f 	bl	8005ae0 <HAL_GetTick>
 80014c2:	6078      	str	r0, [r7, #4]
    while (inMenu){
 80014c4:	e6ac      	b.n	8001220 <_Z15calibrationMenuv+0x44>
            }
        }


    }
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200000e7 	.word	0x200000e7
 80014d4:	200000e6 	.word	0x200000e6

080014d8 <_Z16writeCalibrationm>:
/* Write Calibration
* Write the values of the user inputted calibration
* to the EEPROM
*
*/
bool writeCalibration(uint32_t calibrationWrite){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af04      	add	r7, sp, #16
 80014de:	6078      	str	r0, [r7, #4]
HAL_Delay(10);
 80014e0:	200a      	movs	r0, #10
 80014e2:	f004 fb09 	bl	8005af8 <HAL_Delay>
uint8_t calWrite[4];
calWrite[0] = calibrationWrite;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	723b      	strb	r3, [r7, #8]
calWrite[1] = calibrationWrite >> 8;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	727b      	strb	r3, [r7, #9]
calWrite[2] = calibrationWrite >> 16;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	72bb      	strb	r3, [r7, #10]
calWrite[3] = calibrationWrite >> 24;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	0e1b      	lsrs	r3, r3, #24
 8001500:	b2db      	uxtb	r3, r3
 8001502:	72fb      	strb	r3, [r7, #11]
for (int i=0; i<4; i++){
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b03      	cmp	r3, #3
 800150c:	dc25      	bgt.n	800155a <_Z16writeCalibrationm+0x82>
	if(HAL_I2C_Mem_Write(memI2C , 0x50<<1, 0x0005+i, 1, &calWrite[i], 1,1000)!= HAL_OK)	//offset
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <_Z16writeCalibrationm+0x8c>)
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	b29b      	uxth	r3, r3
 8001516:	3305      	adds	r3, #5
 8001518:	b299      	uxth	r1, r3
 800151a:	f107 0208 	add.w	r2, r7, #8
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4413      	add	r3, r2
 8001522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001526:	9202      	str	r2, [sp, #8]
 8001528:	2201      	movs	r2, #1
 800152a:	9201      	str	r2, [sp, #4]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	460a      	mov	r2, r1
 8001532:	21a0      	movs	r1, #160	; 0xa0
 8001534:	f006 f820 	bl	8007578 <HAL_I2C_Mem_Write>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <_Z16writeCalibrationm+0x74>
				{
						  return false;
 8001548:	2300      	movs	r3, #0
 800154a:	e007      	b.n	800155c <_Z16writeCalibrationm+0x84>
				}
				 HAL_Delay(10);
 800154c:	200a      	movs	r0, #10
 800154e:	f004 fad3 	bl	8005af8 <HAL_Delay>
for (int i=0; i<4; i++){
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e7d6      	b.n	8001508 <_Z16writeCalibrationm+0x30>
}
        
        return true;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000050 	.word	0x20000050

08001568 <_Z17calibrationStatusv>:

void calibrationStatus(){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
    menuItemSelect = false;
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <_Z17calibrationStatusv+0xd0>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
    bool inScreen = true;
 8001574:	2301      	movs	r3, #1
 8001576:	71fb      	strb	r3, [r7, #7]
    if (calibrateSuccess){
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <_Z17calibrationStatusv+0xd4>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <_Z17calibrationStatusv+0x28>
        calibration = newCal;
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <_Z17calibrationStatusv+0xd8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <_Z17calibrationStatusv+0xdc>)
 8001586:	6013      	str	r3, [r2, #0]
        updateDisplay(d_calOK);
 8001588:	2009      	movs	r0, #9
 800158a:	f000 f883 	bl	8001694 <_Z13updateDisplayh>
 800158e:	e002      	b.n	8001596 <_Z17calibrationStatusv+0x2e>
    } else {
        updateDisplay(d_calFail);
 8001590:	2010      	movs	r0, #16
 8001592:	f000 f87f 	bl	8001694 <_Z13updateDisplayh>
    }
    while(GPIOC->IDR & GPIO_PIN_13){
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <_Z17calibrationStatusv+0xe0>)
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d000      	beq.n	80015ae <_Z17calibrationStatusv+0x46>
 80015ac:	e7f3      	b.n	8001596 <_Z17calibrationStatusv+0x2e>
        //do nothing
    }
    if (calibrateSuccess){
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <_Z17calibrationStatusv+0xd4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01e      	beq.n	80015f4 <_Z17calibrationStatusv+0x8c>
        while(inScreen){
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d016      	beq.n	80015ea <_Z17calibrationStatusv+0x82>
            updateDisplay(d_calOK);
 80015bc:	2009      	movs	r0, #9
 80015be:	f000 f869 	bl	8001694 <_Z13updateDisplayh>
            if (GPIOC->IDR & GPIO_PIN_13) //Menu button
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <_Z17calibrationStatusv+0xe0>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0ee      	beq.n	80015b6 <_Z17calibrationStatusv+0x4e>
            {
                menuItemSelect = true;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <_Z17calibrationStatusv+0xd0>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
                updateDisplay(d_calOK);
 80015de:	2009      	movs	r0, #9
 80015e0:	f000 f858 	bl	8001694 <_Z13updateDisplayh>
                inScreen = false; 
 80015e4:	2300      	movs	r3, #0
 80015e6:	71fb      	strb	r3, [r7, #7]
        while(inScreen){
 80015e8:	e7e5      	b.n	80015b6 <_Z17calibrationStatusv+0x4e>
            }
        }
        HAL_Delay(500);
 80015ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015ee:	f004 fa83 	bl	8005af8 <HAL_Delay>
                inScreen = false; 
            }
        }
        HAL_Delay(500);
    }
 80015f2:	e01d      	b.n	8001630 <_Z17calibrationStatusv+0xc8>
        while(inScreen){
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d016      	beq.n	8001628 <_Z17calibrationStatusv+0xc0>
            updateDisplay(d_calFail);
 80015fa:	2010      	movs	r0, #16
 80015fc:	f000 f84a 	bl	8001694 <_Z13updateDisplayh>
        if (GPIOC->IDR & GPIO_PIN_13) //Menu button
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <_Z17calibrationStatusv+0xe0>)
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0ee      	beq.n	80015f4 <_Z17calibrationStatusv+0x8c>
                menuItemSelect = true;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <_Z17calibrationStatusv+0xd0>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
                updateDisplay(d_calFail);
 800161c:	2010      	movs	r0, #16
 800161e:	f000 f839 	bl	8001694 <_Z13updateDisplayh>
                inScreen = false; 
 8001622:	2300      	movs	r3, #0
 8001624:	71fb      	strb	r3, [r7, #7]
        while(inScreen){
 8001626:	e7e5      	b.n	80015f4 <_Z17calibrationStatusv+0x8c>
        HAL_Delay(500);
 8001628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162c:	f004 fa64 	bl	8005af8 <HAL_Delay>
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200000e6 	.word	0x200000e6
 800163c:	20000090 	.word	0x20000090
 8001640:	2000008c 	.word	0x2000008c
 8001644:	20000014 	.word	0x20000014
 8001648:	48000800 	.word	0x48000800

0800164c <_Z41__static_initialization_and_destruction_0ii>:
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d108      	bne.n	800166e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001662:	4293      	cmp	r3, r2
 8001664:	d103      	bne.n	800166e <_Z41__static_initialization_and_destruction_0ii+0x22>
uint32_t newCal = calibration;
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000014 	.word	0x20000014
 8001680:	2000008c 	.word	0x2000008c

08001684 <_GLOBAL__sub_I_newCal>:
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
 8001688:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff ffdd 	bl	800164c <_Z41__static_initialization_and_destruction_0ii>
 8001692:	bd80      	pop	{r7, pc}

08001694 <_Z13updateDisplayh>:

//#include "fonts.h"
const char* foo = "0123456789";
char tcDisplay[11] = {0};
void updateDisplay(uint8_t state)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	switch (state)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d846      	bhi.n	8001732 <_Z13updateDisplayh+0x9e>
 80016a4:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <_Z13updateDisplayh+0x18>)
 80016a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016aa:	bf00      	nop
 80016ac:	080016f1 	.word	0x080016f1
 80016b0:	080016f7 	.word	0x080016f7
 80016b4:	080016fd 	.word	0x080016fd
 80016b8:	08001703 	.word	0x08001703
 80016bc:	08001709 	.word	0x08001709
 80016c0:	0800170f 	.word	0x0800170f
 80016c4:	08001715 	.word	0x08001715
 80016c8:	0800171b 	.word	0x0800171b
 80016cc:	08001721 	.word	0x08001721
 80016d0:	08001727 	.word	0x08001727
 80016d4:	08001733 	.word	0x08001733
 80016d8:	08001733 	.word	0x08001733
 80016dc:	08001733 	.word	0x08001733
 80016e0:	08001733 	.word	0x08001733
 80016e4:	08001733 	.word	0x08001733
 80016e8:	08001733 	.word	0x08001733
 80016ec:	0800172d 	.word	0x0800172d
	{
	case d_off:
		displayOff();
 80016f0:	f000 f824 	bl	800173c <_Z10displayOffv>
		break;
 80016f4:	e01e      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_home:
		displayMain();
 80016f6:	f000 f82f 	bl	8001758 <_Z11displayMainv>
		break;
 80016fa:	e01b      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_menu:
		displayMenu();
 80016fc:	f000 f9e2 	bl	8001ac4 <_Z11displayMenuv>
		break;
 8001700:	e018      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_lock:
		displayLocked();
 8001702:	f000 f93b 	bl	800197c <_Z13displayLockedv>
		break;
 8001706:	e015      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_power:
		displayPower();
 8001708:	f000 f9a8 	bl	8001a5c <_Z12displayPowerv>
		break;
 800170c:	e012      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_rateWarn:
		displayConfirmationRateChange();
 800170e:	f000 fbf3 	bl	8001ef8 <_Z29displayConfirmationRateChangev>
		break;
 8001712:	e00f      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_offsetWarn:
		displayConfirmationOffsetChange();
 8001714:	f000 fc70 	bl	8001ff8 <_Z31displayConfirmationOffsetChangev>
		break;
 8001718:	e00c      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_rejamWarn:
		displayConfirmationRejam();
 800171a:	f000 fcc5 	bl	80020a8 <_Z24displayConfirmationRejamv>
		break;
 800171e:	e009      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_calibration:
		displayCalibration();
 8001720:	f000 fe7e 	bl	8002420 <_Z18displayCalibrationv>
		break;
 8001724:	e006      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_calOK:
		displayCalibrationOK();
 8001726:	f000 ffdf 	bl	80026e8 <_Z20displayCalibrationOKv>
		break;
 800172a:	e003      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	case d_calFail:
		displayCalibrationFail();
 800172c:	f001 f82e 	bl	800278c <_Z22displayCalibrationFailv>
		break;
 8001730:	e000      	b.n	8001734 <_Z13updateDisplayh+0xa0>
	default:
		break;
 8001732:	bf00      	nop
	}
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_Z10displayOffv>:

void displayOff()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001740:	2000      	movs	r0, #0
 8001742:	f003 fc11 	bl	8004f68 <ssd1306_Fill>
	ssd1306_UpdateScreen(dispI2C);
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <_Z10displayOffv+0x18>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fc30 	bl	8004fb0 <ssd1306_UpdateScreen>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000004c 	.word	0x2000004c

08001758 <_Z11displayMainv>:

void displayMain()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	//tcbreakout()
	char offsetStr[3];
	timecodeDisplay();
 800175e:	f000 fda7 	bl	80022b0 <_Z15timecodeDisplayv>
	ssd1306_SetCursor(4, 24);
 8001762:	2118      	movs	r1, #24
 8001764:	2004      	movs	r0, #4
 8001766:	f003 fd5b 	bl	8005220 <ssd1306_SetCursor>
	//TODO TC DISPLAY STRING
	ssd1306_WriteString(tcDisplay, Font_11x18, White);
 800176a:	4a71      	ldr	r2, [pc, #452]	; (8001930 <_Z11displayMainv+0x1d8>)
 800176c:	2301      	movs	r3, #1
 800176e:	ca06      	ldmia	r2, {r1, r2}
 8001770:	4870      	ldr	r0, [pc, #448]	; (8001934 <_Z11displayMainv+0x1dc>)
 8001772:	f003 fd2f 	bl	80051d4 <ssd1306_WriteString>

	ssd1306_SetCursor(8, 0);
 8001776:	2100      	movs	r1, #0
 8001778:	2008      	movs	r0, #8
 800177a:	f003 fd51 	bl	8005220 <ssd1306_SetCursor>
	switch (frameRate)
 800177e:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <_Z11displayMainv+0x1e0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d838      	bhi.n	80017f8 <_Z11displayMainv+0xa0>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <_Z11displayMainv+0x34>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	080017a5 	.word	0x080017a5
 8001790:	080017b3 	.word	0x080017b3
 8001794:	080017c1 	.word	0x080017c1
 8001798:	080017cf 	.word	0x080017cf
 800179c:	080017dd 	.word	0x080017dd
 80017a0:	080017eb 	.word	0x080017eb
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 80017a4:	4a65      	ldr	r2, [pc, #404]	; (800193c <_Z11displayMainv+0x1e4>)
 80017a6:	2301      	movs	r3, #1
 80017a8:	ca06      	ldmia	r2, {r1, r2}
 80017aa:	4865      	ldr	r0, [pc, #404]	; (8001940 <_Z11displayMainv+0x1e8>)
 80017ac:	f003 fd12 	bl	80051d4 <ssd1306_WriteString>
		break;
 80017b0:	e022      	b.n	80017f8 <_Z11displayMainv+0xa0>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 80017b2:	4a62      	ldr	r2, [pc, #392]	; (800193c <_Z11displayMainv+0x1e4>)
 80017b4:	2301      	movs	r3, #1
 80017b6:	ca06      	ldmia	r2, {r1, r2}
 80017b8:	4862      	ldr	r0, [pc, #392]	; (8001944 <_Z11displayMainv+0x1ec>)
 80017ba:	f003 fd0b 	bl	80051d4 <ssd1306_WriteString>
		break;
 80017be:	e01b      	b.n	80017f8 <_Z11displayMainv+0xa0>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 80017c0:	4a5e      	ldr	r2, [pc, #376]	; (800193c <_Z11displayMainv+0x1e4>)
 80017c2:	2301      	movs	r3, #1
 80017c4:	ca06      	ldmia	r2, {r1, r2}
 80017c6:	4860      	ldr	r0, [pc, #384]	; (8001948 <_Z11displayMainv+0x1f0>)
 80017c8:	f003 fd04 	bl	80051d4 <ssd1306_WriteString>
		break;
 80017cc:	e014      	b.n	80017f8 <_Z11displayMainv+0xa0>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 80017ce:	4a5b      	ldr	r2, [pc, #364]	; (800193c <_Z11displayMainv+0x1e4>)
 80017d0:	2301      	movs	r3, #1
 80017d2:	ca06      	ldmia	r2, {r1, r2}
 80017d4:	485d      	ldr	r0, [pc, #372]	; (800194c <_Z11displayMainv+0x1f4>)
 80017d6:	f003 fcfd 	bl	80051d4 <ssd1306_WriteString>
		break;
 80017da:	e00d      	b.n	80017f8 <_Z11displayMainv+0xa0>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 80017dc:	4a57      	ldr	r2, [pc, #348]	; (800193c <_Z11displayMainv+0x1e4>)
 80017de:	2301      	movs	r3, #1
 80017e0:	ca06      	ldmia	r2, {r1, r2}
 80017e2:	485b      	ldr	r0, [pc, #364]	; (8001950 <_Z11displayMainv+0x1f8>)
 80017e4:	f003 fcf6 	bl	80051d4 <ssd1306_WriteString>
		break;
 80017e8:	e006      	b.n	80017f8 <_Z11displayMainv+0xa0>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 80017ea:	4a54      	ldr	r2, [pc, #336]	; (800193c <_Z11displayMainv+0x1e4>)
 80017ec:	2301      	movs	r3, #1
 80017ee:	ca06      	ldmia	r2, {r1, r2}
 80017f0:	4858      	ldr	r0, [pc, #352]	; (8001954 <_Z11displayMainv+0x1fc>)
 80017f2:	f003 fcef 	bl	80051d4 <ssd1306_WriteString>
		break;
 80017f6:	bf00      	nop
	}

	ssd1306_SetCursor(92, 52);
 80017f8:	2134      	movs	r1, #52	; 0x34
 80017fa:	205c      	movs	r0, #92	; 0x5c
 80017fc:	f003 fd10 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <_Z11displayMainv+0x1e4>)
 8001802:	2301      	movs	r3, #1
 8001804:	ca06      	ldmia	r2, {r1, r2}
 8001806:	4854      	ldr	r0, [pc, #336]	; (8001958 <_Z11displayMainv+0x200>)
 8001808:	f003 fce4 	bl	80051d4 <ssd1306_WriteString>

	
	if (tcJammed)
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <_Z11displayMainv+0x204>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <_Z11displayMainv+0xd4>
	{
		ssd1306_SetCursor(84, 0);
 8001816:	2100      	movs	r1, #0
 8001818:	2054      	movs	r0, #84	; 0x54
 800181a:	f003 fd01 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("Jammed", Font_7x10, White);
 800181e:	4a47      	ldr	r2, [pc, #284]	; (800193c <_Z11displayMainv+0x1e4>)
 8001820:	2301      	movs	r3, #1
 8001822:	ca06      	ldmia	r2, {r1, r2}
 8001824:	484e      	ldr	r0, [pc, #312]	; (8001960 <_Z11displayMainv+0x208>)
 8001826:	f003 fcd5 	bl	80051d4 <ssd1306_WriteString>
 800182a:	e009      	b.n	8001840 <_Z11displayMainv+0xe8>
	}
	else
	{
		ssd1306_SetCursor(90, 0);
 800182c:	2100      	movs	r1, #0
 800182e:	205a      	movs	r0, #90	; 0x5a
 8001830:	f003 fcf6 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("Ready", Font_7x10, White);
 8001834:	4a41      	ldr	r2, [pc, #260]	; (800193c <_Z11displayMainv+0x1e4>)
 8001836:	2301      	movs	r3, #1
 8001838:	ca06      	ldmia	r2, {r1, r2}
 800183a:	484a      	ldr	r0, [pc, #296]	; (8001964 <_Z11displayMainv+0x20c>)
 800183c:	f003 fcca 	bl	80051d4 <ssd1306_WriteString>
	}
	if (intOffset != 30)
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <_Z11displayMainv+0x210>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b1e      	cmp	r3, #30
 8001846:	d067      	beq.n	8001918 <_Z11displayMainv+0x1c0>
	{
		ssd1306_SetCursor(30, 12);
 8001848:	210c      	movs	r1, #12
 800184a:	201e      	movs	r0, #30
 800184c:	f003 fce8 	bl	8005220 <ssd1306_SetCursor>
		if (intOffset > 30)
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <_Z11displayMainv+0x210>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b1e      	cmp	r3, #30
 8001856:	d925      	bls.n	80018a4 <_Z11displayMainv+0x14c>
		{
			offsetStr[0] = '+';
 8001858:	232b      	movs	r3, #43	; 0x2b
 800185a:	713b      	strb	r3, [r7, #4]
			offsetStr[1] = foo[(intOffset-30)/10];
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <_Z11displayMainv+0x214>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <_Z11displayMainv+0x210>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	3b1e      	subs	r3, #30
 8001866:	4942      	ldr	r1, [pc, #264]	; (8001970 <_Z11displayMainv+0x218>)
 8001868:	fb81 0103 	smull	r0, r1, r1, r3
 800186c:	1089      	asrs	r1, r1, #2
 800186e:	17db      	asrs	r3, r3, #31
 8001870:	1acb      	subs	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	717b      	strb	r3, [r7, #5]
			offsetStr[2] = foo[(intOffset-30)%10];
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <_Z11displayMainv+0x214>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <_Z11displayMainv+0x210>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f1a3 021e 	sub.w	r2, r3, #30
 8001884:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <_Z11displayMainv+0x218>)
 8001886:	fb83 1302 	smull	r1, r3, r3, r2
 800188a:	1099      	asrs	r1, r3, #2
 800188c:	17d3      	asrs	r3, r2, #31
 800188e:	1ac9      	subs	r1, r1, r3
 8001890:	460b      	mov	r3, r1
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	1ad1      	subs	r1, r2, r3
 800189a:	460b      	mov	r3, r1
 800189c:	4403      	add	r3, r0
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	71bb      	strb	r3, [r7, #6]
 80018a2:	e029      	b.n	80018f8 <_Z11displayMainv+0x1a0>
		}
		else if (intOffset < 30)
 80018a4:	4b30      	ldr	r3, [pc, #192]	; (8001968 <_Z11displayMainv+0x210>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b1d      	cmp	r3, #29
 80018aa:	d825      	bhi.n	80018f8 <_Z11displayMainv+0x1a0>
		{
			offsetStr[0] = '-';		
 80018ac:	232d      	movs	r3, #45	; 0x2d
 80018ae:	713b      	strb	r3, [r7, #4]
			offsetStr[1] = foo[(30-intOffset)/10];
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <_Z11displayMainv+0x214>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <_Z11displayMainv+0x210>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	f1c3 031e 	rsb	r3, r3, #30
 80018bc:	492c      	ldr	r1, [pc, #176]	; (8001970 <_Z11displayMainv+0x218>)
 80018be:	fb81 0103 	smull	r0, r1, r1, r3
 80018c2:	1089      	asrs	r1, r1, #2
 80018c4:	17db      	asrs	r3, r3, #31
 80018c6:	1acb      	subs	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	717b      	strb	r3, [r7, #5]
			offsetStr[2] = foo[(30-intOffset)%10];
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <_Z11displayMainv+0x214>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <_Z11displayMainv+0x210>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f1c3 021e 	rsb	r2, r3, #30
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <_Z11displayMainv+0x218>)
 80018dc:	fb83 1302 	smull	r1, r3, r3, r2
 80018e0:	1099      	asrs	r1, r3, #2
 80018e2:	17d3      	asrs	r3, r2, #31
 80018e4:	1ac9      	subs	r1, r1, r3
 80018e6:	460b      	mov	r3, r1
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	1ad1      	subs	r1, r2, r3
 80018f0:	460b      	mov	r3, r1
 80018f2:	4403      	add	r3, r0
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	71bb      	strb	r3, [r7, #6]
		}
		ssd1306_WriteString(offsetStr, Font_7x10, White);
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <_Z11displayMainv+0x1e4>)
 80018fa:	1d38      	adds	r0, r7, #4
 80018fc:	2301      	movs	r3, #1
 80018fe:	ca06      	ldmia	r2, {r1, r2}
 8001900:	f003 fc68 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(48, 12);
 8001904:	210c      	movs	r1, #12
 8001906:	2030      	movs	r0, #48	; 0x30
 8001908:	f003 fc8a 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(" Offset", Font_7x10, White);
 800190c:	4a0b      	ldr	r2, [pc, #44]	; (800193c <_Z11displayMainv+0x1e4>)
 800190e:	2301      	movs	r3, #1
 8001910:	ca06      	ldmia	r2, {r1, r2}
 8001912:	4818      	ldr	r0, [pc, #96]	; (8001974 <_Z11displayMainv+0x21c>)
 8001914:	f003 fc5e 	bl	80051d4 <ssd1306_WriteString>
	}
	displayBattery();
 8001918:	f000 fc46 	bl	80021a8 <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <_Z11displayMainv+0x220>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fb45 	bl	8004fb0 <ssd1306_UpdateScreen>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008
 8001934:	20000094 	.word	0x20000094
 8001938:	200000a9 	.word	0x200000a9
 800193c:	20000000 	.word	0x20000000
 8001940:	0800a3c8 	.word	0x0800a3c8
 8001944:	0800a3d0 	.word	0x0800a3d0
 8001948:	0800a3d4 	.word	0x0800a3d4
 800194c:	0800a3d8 	.word	0x0800a3d8
 8001950:	0800a3e0 	.word	0x0800a3e0
 8001954:	0800a3ec 	.word	0x0800a3ec
 8001958:	0800a3f0 	.word	0x0800a3f0
 800195c:	200000a8 	.word	0x200000a8
 8001960:	0800a3f8 	.word	0x0800a3f8
 8001964:	0800a400 	.word	0x0800a400
 8001968:	20000018 	.word	0x20000018
 800196c:	20000010 	.word	0x20000010
 8001970:	66666667 	.word	0x66666667
 8001974:	0800a408 	.word	0x0800a408
 8001978:	2000004c 	.word	0x2000004c

0800197c <_Z13displayLockedv>:

void displayLocked()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	timecodeDisplay();
 8001982:	f000 fc95 	bl	80022b0 <_Z15timecodeDisplayv>
	ssd1306_Fill(Black);
 8001986:	2000      	movs	r0, #0
 8001988:	f003 faee 	bl	8004f68 <ssd1306_Fill>
	ssd1306_SetCursor(44, 20);
 800198c:	2114      	movs	r1, #20
 800198e:	202c      	movs	r0, #44	; 0x2c
 8001990:	f003 fc46 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Locked", Font_7x10, White);
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <_Z13displayLockedv+0xb8>)
 8001996:	2301      	movs	r3, #1
 8001998:	ca06      	ldmia	r2, {r1, r2}
 800199a:	4827      	ldr	r0, [pc, #156]	; (8001a38 <_Z13displayLockedv+0xbc>)
 800199c:	f003 fc1a 	bl	80051d4 <ssd1306_WriteString>
	if (buttonsHeld)	
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <_Z13displayLockedv+0xc0>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d011      	beq.n	80019cc <_Z13displayLockedv+0x50>
	{
		ssd1306_SetCursor(60, 32);
 80019a8:	2120      	movs	r1, #32
 80019aa:	203c      	movs	r0, #60	; 0x3c
 80019ac:	f003 fc38 	bl	8005220 <ssd1306_SetCursor>
		char lockDisplay = foo[lockCountdown];
 80019b0:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <_Z13displayLockedv+0xc4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <_Z13displayLockedv+0xc8>)
 80019b6:	7812      	ldrb	r2, [r2, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	71fb      	strb	r3, [r7, #7]
		ssd1306_WriteChar(lockDisplay, Font_7x10, White);	//TODO Lock Countdown
 80019be:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <_Z13displayLockedv+0xb8>)
 80019c0:	79f8      	ldrb	r0, [r7, #7]
 80019c2:	2301      	movs	r3, #1
 80019c4:	ca06      	ldmia	r2, {r1, r2}
 80019c6:	f003 fb85 	bl	80050d4 <ssd1306_WriteChar>
 80019ca:	e013      	b.n	80019f4 <_Z13displayLockedv+0x78>
	}
	else
	{
		ssd1306_SetCursor(24, 30);
 80019cc:	211e      	movs	r1, #30
 80019ce:	2018      	movs	r0, #24
 80019d0:	f003 fc26 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("Hold < and >", Font_7x10, White);
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <_Z13displayLockedv+0xb8>)
 80019d6:	2301      	movs	r3, #1
 80019d8:	ca06      	ldmia	r2, {r1, r2}
 80019da:	481b      	ldr	r0, [pc, #108]	; (8001a48 <_Z13displayLockedv+0xcc>)
 80019dc:	f003 fbfa 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(34, 40);
 80019e0:	2128      	movs	r1, #40	; 0x28
 80019e2:	2022      	movs	r0, #34	; 0x22
 80019e4:	f003 fc1c 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("to unlock", Font_7x10, White);
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_Z13displayLockedv+0xb8>)
 80019ea:	2301      	movs	r3, #1
 80019ec:	ca06      	ldmia	r2, {r1, r2}
 80019ee:	4817      	ldr	r0, [pc, #92]	; (8001a4c <_Z13displayLockedv+0xd0>)
 80019f0:	f003 fbf0 	bl	80051d4 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(2, 6);
 80019f4:	2106      	movs	r1, #6
 80019f6:	2002      	movs	r0, #2
 80019f8:	f003 fc12 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString(tcDisplay, Font_7x10, White);
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <_Z13displayLockedv+0xb8>)
 80019fe:	2301      	movs	r3, #1
 8001a00:	ca06      	ldmia	r2, {r1, r2}
 8001a02:	4813      	ldr	r0, [pc, #76]	; (8001a50 <_Z13displayLockedv+0xd4>)
 8001a04:	f003 fbe6 	bl	80051d4 <ssd1306_WriteString>

	ssd1306_SetCursor(90, 6);
 8001a08:	2106      	movs	r1, #6
 8001a0a:	205a      	movs	r0, #90	; 0x5a
 8001a0c:	f003 fc08 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("23.98", Font_7x10, White);
 8001a10:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <_Z13displayLockedv+0xb8>)
 8001a12:	2301      	movs	r3, #1
 8001a14:	ca06      	ldmia	r2, {r1, r2}
 8001a16:	480f      	ldr	r0, [pc, #60]	; (8001a54 <_Z13displayLockedv+0xd8>)
 8001a18:	f003 fbdc 	bl	80051d4 <ssd1306_WriteString>
	displayBattery();	
 8001a1c:	f000 fbc4 	bl	80021a8 <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <_Z13displayLockedv+0xdc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 fac3 	bl	8004fb0 <ssd1306_UpdateScreen>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000
 8001a38:	0800a410 	.word	0x0800a410
 8001a3c:	200000be 	.word	0x200000be
 8001a40:	20000010 	.word	0x20000010
 8001a44:	200000bf 	.word	0x200000bf
 8001a48:	0800a418 	.word	0x0800a418
 8001a4c:	0800a428 	.word	0x0800a428
 8001a50:	20000094 	.word	0x20000094
 8001a54:	0800a3c8 	.word	0x0800a3c8
 8001a58:	2000004c 	.word	0x2000004c

08001a5c <_Z12displayPowerv>:

void displayPower()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f003 fa80 	bl	8004f68 <ssd1306_Fill>
	ssd1306_SetCursor(14, 10);
 8001a68:	210a      	movs	r1, #10
 8001a6a:	200e      	movs	r0, #14
 8001a6c:	f003 fbd8 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Power Off", Font_11x18, White);
 8001a70:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <_Z12displayPowerv+0x54>)
 8001a72:	2301      	movs	r3, #1
 8001a74:	ca06      	ldmia	r2, {r1, r2}
 8001a76:	480f      	ldr	r0, [pc, #60]	; (8001ab4 <_Z12displayPowerv+0x58>)
 8001a78:	f003 fbac 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(60, 36);
 8001a7c:	2124      	movs	r1, #36	; 0x24
 8001a7e:	203c      	movs	r0, #60	; 0x3c
 8001a80:	f003 fbce 	bl	8005220 <ssd1306_SetCursor>
	char powerDisplay = foo[powerCountdown];
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <_Z12displayPowerv+0x5c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <_Z12displayPowerv+0x60>)
 8001a8a:	7812      	ldrb	r2, [r2, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteChar(powerDisplay, Font_11x18, White); //TODO Power countdown
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <_Z12displayPowerv+0x54>)
 8001a94:	79f8      	ldrb	r0, [r7, #7]
 8001a96:	2301      	movs	r3, #1
 8001a98:	ca06      	ldmia	r2, {r1, r2}
 8001a9a:	f003 fb1b 	bl	80050d4 <ssd1306_WriteChar>
	ssd1306_UpdateScreen(dispI2C);
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_Z12displayPowerv+0x64>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fa84 	bl	8004fb0 <ssd1306_UpdateScreen>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	0800a434 	.word	0x0800a434
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	200000d8 	.word	0x200000d8
 8001ac0:	2000004c 	.word	0x2000004c

08001ac4 <_Z11displayMenuv>:

void displayMenu()
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f003 fa4c 	bl	8004f68 <ssd1306_Fill>
	//Frame rate
	//Auto power off
	//Exit
	ssd1306_SetCursor(50, 0);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2032      	movs	r0, #50	; 0x32
 8001ad4:	f003 fba4 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8001ad8:	4ab5      	ldr	r2, [pc, #724]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001ada:	2301      	movs	r3, #1
 8001adc:	ca06      	ldmia	r2, {r1, r2}
 8001ade:	48b5      	ldr	r0, [pc, #724]	; (8001db4 <_Z11displayMenuv+0x2f0>)
 8001ae0:	f003 fb78 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 12);
 8001ae4:	210c      	movs	r1, #12
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f003 fb9a 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Rate: ", Font_7x10, White);
 8001aec:	4ab0      	ldr	r2, [pc, #704]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001aee:	2301      	movs	r3, #1
 8001af0:	ca06      	ldmia	r2, {r1, r2}
 8001af2:	48b1      	ldr	r0, [pc, #708]	; (8001db8 <_Z11displayMenuv+0x2f4>)
 8001af4:	f003 fb6e 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 22);
 8001af8:	2116      	movs	r1, #22
 8001afa:	200a      	movs	r0, #10
 8001afc:	f003 fb90 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Offset: ", Font_7x10, White);
 8001b00:	4aab      	ldr	r2, [pc, #684]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001b02:	2301      	movs	r3, #1
 8001b04:	ca06      	ldmia	r2, {r1, r2}
 8001b06:	48ad      	ldr	r0, [pc, #692]	; (8001dbc <_Z11displayMenuv+0x2f8>)
 8001b08:	f003 fb64 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 32);
 8001b0c:	2120      	movs	r1, #32
 8001b0e:	200a      	movs	r0, #10
 8001b10:	f003 fb86 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Re-jam", Font_7x10, White);
 8001b14:	4aa6      	ldr	r2, [pc, #664]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001b16:	2301      	movs	r3, #1
 8001b18:	ca06      	ldmia	r2, {r1, r2}
 8001b1a:	48a9      	ldr	r0, [pc, #676]	; (8001dc0 <_Z11displayMenuv+0x2fc>)
 8001b1c:	f003 fb5a 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 42);
 8001b20:	212a      	movs	r1, #42	; 0x2a
 8001b22:	200a      	movs	r0, #10
 8001b24:	f003 fb7c 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Auto-Off: ", Font_7x10, White);
 8001b28:	4aa1      	ldr	r2, [pc, #644]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	ca06      	ldmia	r2, {r1, r2}
 8001b2e:	48a5      	ldr	r0, [pc, #660]	; (8001dc4 <_Z11displayMenuv+0x300>)
 8001b30:	f003 fb50 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(50, 52);
 8001b34:	2134      	movs	r1, #52	; 0x34
 8001b36:	2032      	movs	r0, #50	; 0x32
 8001b38:	f003 fb72 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Exit", Font_7x10, White);
 8001b3c:	4a9c      	ldr	r2, [pc, #624]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001b3e:	2301      	movs	r3, #1
 8001b40:	ca06      	ldmia	r2, {r1, r2}
 8001b42:	48a1      	ldr	r0, [pc, #644]	; (8001dc8 <_Z11displayMenuv+0x304>)
 8001b44:	f003 fb46 	bl	80051d4 <ssd1306_WriteString>

	ssd1306_SetCursor(50, 12);
 8001b48:	210c      	movs	r1, #12
 8001b4a:	2032      	movs	r0, #50	; 0x32
 8001b4c:	f003 fb68 	bl	8005220 <ssd1306_SetCursor>
	uint8_t dispRate;
	uint8_t dispOffset;
	char offsetStr[3];
	if (menuItemSelect){
 8001b50:	4b9e      	ldr	r3, [pc, #632]	; (8001dcc <_Z11displayMenuv+0x308>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <_Z11displayMenuv+0xa2>
		dispRate = rateAdjust;
 8001b58:	4b9d      	ldr	r3, [pc, #628]	; (8001dd0 <_Z11displayMenuv+0x30c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	71fb      	strb	r3, [r7, #7]
		dispOffset = offsetAdjust;
 8001b5e:	4b9d      	ldr	r3, [pc, #628]	; (8001dd4 <_Z11displayMenuv+0x310>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	71bb      	strb	r3, [r7, #6]
 8001b64:	e005      	b.n	8001b72 <_Z11displayMenuv+0xae>
	} else {
		dispRate = frameRate;
 8001b66:	4b9c      	ldr	r3, [pc, #624]	; (8001dd8 <_Z11displayMenuv+0x314>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	71fb      	strb	r3, [r7, #7]
		dispOffset = intOffset;
 8001b6c:	4b9b      	ldr	r3, [pc, #620]	; (8001ddc <_Z11displayMenuv+0x318>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	71bb      	strb	r3, [r7, #6]
	}
	switch (dispRate)
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d839      	bhi.n	8001bec <_Z11displayMenuv+0x128>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <_Z11displayMenuv+0xbc>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001b99 	.word	0x08001b99
 8001b84:	08001ba7 	.word	0x08001ba7
 8001b88:	08001bb5 	.word	0x08001bb5
 8001b8c:	08001bc3 	.word	0x08001bc3
 8001b90:	08001bd1 	.word	0x08001bd1
 8001b94:	08001bdf 	.word	0x08001bdf
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 8001b98:	4a85      	ldr	r2, [pc, #532]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	ca06      	ldmia	r2, {r1, r2}
 8001b9e:	4890      	ldr	r0, [pc, #576]	; (8001de0 <_Z11displayMenuv+0x31c>)
 8001ba0:	f003 fb18 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001ba4:	e022      	b.n	8001bec <_Z11displayMenuv+0x128>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 8001ba6:	4a82      	ldr	r2, [pc, #520]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001ba8:	2301      	movs	r3, #1
 8001baa:	ca06      	ldmia	r2, {r1, r2}
 8001bac:	488d      	ldr	r0, [pc, #564]	; (8001de4 <_Z11displayMenuv+0x320>)
 8001bae:	f003 fb11 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001bb2:	e01b      	b.n	8001bec <_Z11displayMenuv+0x128>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 8001bb4:	4a7e      	ldr	r2, [pc, #504]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	ca06      	ldmia	r2, {r1, r2}
 8001bba:	488b      	ldr	r0, [pc, #556]	; (8001de8 <_Z11displayMenuv+0x324>)
 8001bbc:	f003 fb0a 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001bc0:	e014      	b.n	8001bec <_Z11displayMenuv+0x128>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 8001bc2:	4a7b      	ldr	r2, [pc, #492]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	ca06      	ldmia	r2, {r1, r2}
 8001bc8:	4888      	ldr	r0, [pc, #544]	; (8001dec <_Z11displayMenuv+0x328>)
 8001bca:	f003 fb03 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001bce:	e00d      	b.n	8001bec <_Z11displayMenuv+0x128>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 8001bd0:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	ca06      	ldmia	r2, {r1, r2}
 8001bd6:	4886      	ldr	r0, [pc, #536]	; (8001df0 <_Z11displayMenuv+0x32c>)
 8001bd8:	f003 fafc 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001bdc:	e006      	b.n	8001bec <_Z11displayMenuv+0x128>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 8001bde:	4a74      	ldr	r2, [pc, #464]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001be0:	2301      	movs	r3, #1
 8001be2:	ca06      	ldmia	r2, {r1, r2}
 8001be4:	4883      	ldr	r0, [pc, #524]	; (8001df4 <_Z11displayMenuv+0x330>)
 8001be6:	f003 faf5 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001bea:	bf00      	nop
	}
	ssd1306_SetCursor(58, 22);
 8001bec:	2116      	movs	r1, #22
 8001bee:	203a      	movs	r0, #58	; 0x3a
 8001bf0:	f003 fb16 	bl	8005220 <ssd1306_SetCursor>
	//Insert offset
	if (dispOffset == 30)
 8001bf4:	79bb      	ldrb	r3, [r7, #6]
 8001bf6:	2b1e      	cmp	r3, #30
 8001bf8:	d106      	bne.n	8001c08 <_Z11displayMenuv+0x144>
	{
		offsetStr[0] = ' ';
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = '0';
 8001bfe:	2330      	movs	r3, #48	; 0x30
 8001c00:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = '0';
 8001c02:	2330      	movs	r3, #48	; 0x30
 8001c04:	70bb      	strb	r3, [r7, #2]
 8001c06:	e04d      	b.n	8001ca4 <_Z11displayMenuv+0x1e0>
	}
	else if (dispOffset > 30)
 8001c08:	79bb      	ldrb	r3, [r7, #6]
 8001c0a:	2b1e      	cmp	r3, #30
 8001c0c:	d923      	bls.n	8001c56 <_Z11displayMenuv+0x192>
	{
		offsetStr[0] = '+';
 8001c0e:	232b      	movs	r3, #43	; 0x2b
 8001c10:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = foo[(dispOffset-30)/10];
 8001c12:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <_Z11displayMenuv+0x334>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	3b1e      	subs	r3, #30
 8001c1a:	4978      	ldr	r1, [pc, #480]	; (8001dfc <_Z11displayMenuv+0x338>)
 8001c1c:	fb81 0103 	smull	r0, r1, r1, r3
 8001c20:	1089      	asrs	r1, r1, #2
 8001c22:	17db      	asrs	r3, r3, #31
 8001c24:	1acb      	subs	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = foo[(dispOffset-30)%10];
 8001c2c:	4b72      	ldr	r3, [pc, #456]	; (8001df8 <_Z11displayMenuv+0x334>)
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	f1a3 021e 	sub.w	r2, r3, #30
 8001c36:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <_Z11displayMenuv+0x338>)
 8001c38:	fb83 1302 	smull	r1, r3, r3, r2
 8001c3c:	1099      	asrs	r1, r3, #2
 8001c3e:	17d3      	asrs	r3, r2, #31
 8001c40:	1ac9      	subs	r1, r1, r3
 8001c42:	460b      	mov	r3, r1
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	1ad1      	subs	r1, r2, r3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4403      	add	r3, r0
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	70bb      	strb	r3, [r7, #2]
 8001c54:	e026      	b.n	8001ca4 <_Z11displayMenuv+0x1e0>
	}
	else if (dispOffset < 30)
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	2b1d      	cmp	r3, #29
 8001c5a:	d823      	bhi.n	8001ca4 <_Z11displayMenuv+0x1e0>
	{
		offsetStr[0] = '-';		
 8001c5c:	232d      	movs	r3, #45	; 0x2d
 8001c5e:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = foo[(30-dispOffset)/10];
 8001c60:	4b65      	ldr	r3, [pc, #404]	; (8001df8 <_Z11displayMenuv+0x334>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	f1c3 031e 	rsb	r3, r3, #30
 8001c6a:	4964      	ldr	r1, [pc, #400]	; (8001dfc <_Z11displayMenuv+0x338>)
 8001c6c:	fb81 0103 	smull	r0, r1, r1, r3
 8001c70:	1089      	asrs	r1, r1, #2
 8001c72:	17db      	asrs	r3, r3, #31
 8001c74:	1acb      	subs	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = foo[(30-dispOffset)%10];
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <_Z11displayMenuv+0x334>)
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	f1c3 021e 	rsb	r2, r3, #30
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <_Z11displayMenuv+0x338>)
 8001c88:	fb83 1302 	smull	r1, r3, r3, r2
 8001c8c:	1099      	asrs	r1, r3, #2
 8001c8e:	17d3      	asrs	r3, r2, #31
 8001c90:	1ac9      	subs	r1, r1, r3
 8001c92:	460b      	mov	r3, r1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	1ad1      	subs	r1, r2, r3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4403      	add	r3, r0
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	70bb      	strb	r3, [r7, #2]
	}
	
	ssd1306_WriteString(offsetStr, Font_7x10, White);
 8001ca4:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	2301      	movs	r3, #1
 8001caa:	ca06      	ldmia	r2, {r1, r2}
 8001cac:	f003 fa92 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(78,22);
 8001cb0:	2116      	movs	r1, #22
 8001cb2:	204e      	movs	r0, #78	; 0x4e
 8001cb4:	f003 fab4 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("     ", Font_7x10, White); 
 8001cb8:	4a3d      	ldr	r2, [pc, #244]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001cba:	2301      	movs	r3, #1
 8001cbc:	ca06      	ldmia	r2, {r1, r2}
 8001cbe:	4850      	ldr	r0, [pc, #320]	; (8001e00 <_Z11displayMenuv+0x33c>)
 8001cc0:	f003 fa88 	bl	80051d4 <ssd1306_WriteString>

	ssd1306_SetCursor(75, 42);
 8001cc4:	212a      	movs	r1, #42	; 0x2a
 8001cc6:	204b      	movs	r0, #75	; 0x4b
 8001cc8:	f003 faaa 	bl	8005220 <ssd1306_SetCursor>
	switch (autoOff)
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <_Z11displayMenuv+0x340>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d830      	bhi.n	8001d36 <_Z11displayMenuv+0x272>
 8001cd4:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <_Z11displayMenuv+0x218>)
 8001cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cda:	bf00      	nop
 8001cdc:	08001cf1 	.word	0x08001cf1
 8001ce0:	08001cff 	.word	0x08001cff
 8001ce4:	08001d0d 	.word	0x08001d0d
 8001ce8:	08001d1b 	.word	0x08001d1b
 8001cec:	08001d29 	.word	0x08001d29
	{
	case 0:
		ssd1306_WriteString("1 hr", Font_7x10, White);
 8001cf0:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	ca06      	ldmia	r2, {r1, r2}
 8001cf6:	4844      	ldr	r0, [pc, #272]	; (8001e08 <_Z11displayMenuv+0x344>)
 8001cf8:	f003 fa6c 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001cfc:	e01b      	b.n	8001d36 <_Z11displayMenuv+0x272>
	case 1:
		ssd1306_WriteString("2 hr", Font_7x10, White);
 8001cfe:	4a2c      	ldr	r2, [pc, #176]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001d00:	2301      	movs	r3, #1
 8001d02:	ca06      	ldmia	r2, {r1, r2}
 8001d04:	4841      	ldr	r0, [pc, #260]	; (8001e0c <_Z11displayMenuv+0x348>)
 8001d06:	f003 fa65 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001d0a:	e014      	b.n	8001d36 <_Z11displayMenuv+0x272>
	case 2:
		ssd1306_WriteString("4 hr", Font_7x10, White);
 8001d0c:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001d0e:	2301      	movs	r3, #1
 8001d10:	ca06      	ldmia	r2, {r1, r2}
 8001d12:	483f      	ldr	r0, [pc, #252]	; (8001e10 <_Z11displayMenuv+0x34c>)
 8001d14:	f003 fa5e 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001d18:	e00d      	b.n	8001d36 <_Z11displayMenuv+0x272>
	case 3:
		ssd1306_WriteString("8 hr", Font_7x10, White);
 8001d1a:	4a25      	ldr	r2, [pc, #148]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	ca06      	ldmia	r2, {r1, r2}
 8001d20:	483c      	ldr	r0, [pc, #240]	; (8001e14 <_Z11displayMenuv+0x350>)
 8001d22:	f003 fa57 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001d26:	e006      	b.n	8001d36 <_Z11displayMenuv+0x272>
	case 4:
		ssd1306_WriteString("12 hr", Font_7x10, White);
 8001d28:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	ca06      	ldmia	r2, {r1, r2}
 8001d2e:	483a      	ldr	r0, [pc, #232]	; (8001e18 <_Z11displayMenuv+0x354>)
 8001d30:	f003 fa50 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001d34:	bf00      	nop
	}

	switch (menuItem)
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <_Z11displayMenuv+0x358>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	f200 80c8 	bhi.w	8001ed0 <_Z11displayMenuv+0x40c>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <_Z11displayMenuv+0x284>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001d91 	.word	0x08001d91
 8001d50:	08001e3f 	.word	0x08001e3f
 8001d54:	08001e73 	.word	0x08001e73
 8001d58:	08001ea7 	.word	0x08001ea7
	{
	case 0:
		if (menuItemSelect)
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <_Z11displayMenuv+0x308>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00a      	beq.n	8001d7a <_Z11displayMenuv+0x2b6>
		{
			ssd1306_SetCursor(120, 12);
 8001d64:	210c      	movs	r1, #12
 8001d66:	2078      	movs	r0, #120	; 0x78
 8001d68:	f003 fa5a 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001d6c:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001d6e:	2301      	movs	r3, #1
 8001d70:	ca06      	ldmia	r2, {r1, r2}
 8001d72:	482b      	ldr	r0, [pc, #172]	; (8001e20 <_Z11displayMenuv+0x35c>)
 8001d74:	f003 fa2e 	bl	80051d4 <ssd1306_WriteString>
		else
		{
			ssd1306_SetCursor(2, 12);
			ssd1306_WriteString(">", Font_7x10, White);
		}
		break;
 8001d78:	e0aa      	b.n	8001ed0 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 12);
 8001d7a:	210c      	movs	r1, #12
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	f003 fa4f 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001d84:	2301      	movs	r3, #1
 8001d86:	ca06      	ldmia	r2, {r1, r2}
 8001d88:	4826      	ldr	r0, [pc, #152]	; (8001e24 <_Z11displayMenuv+0x360>)
 8001d8a:	f003 fa23 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001d8e:	e09f      	b.n	8001ed0 <_Z11displayMenuv+0x40c>
	case 1:
		if (menuItemSelect)
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <_Z11displayMenuv+0x308>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d047      	beq.n	8001e28 <_Z11displayMenuv+0x364>
		{
			ssd1306_SetCursor(120, 22);
 8001d98:	2116      	movs	r1, #22
 8001d9a:	2078      	movs	r0, #120	; 0x78
 8001d9c:	f003 fa40 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001da0:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <_Z11displayMenuv+0x2ec>)
 8001da2:	2301      	movs	r3, #1
 8001da4:	ca06      	ldmia	r2, {r1, r2}
 8001da6:	481e      	ldr	r0, [pc, #120]	; (8001e20 <_Z11displayMenuv+0x35c>)
 8001da8:	f003 fa14 	bl	80051d4 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 22);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8001dac:	e090      	b.n	8001ed0 <_Z11displayMenuv+0x40c>
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000
 8001db4:	0800a3f0 	.word	0x0800a3f0
 8001db8:	0800a440 	.word	0x0800a440
 8001dbc:	0800a448 	.word	0x0800a448
 8001dc0:	0800a454 	.word	0x0800a454
 8001dc4:	0800a45c 	.word	0x0800a45c
 8001dc8:	0800a468 	.word	0x0800a468
 8001dcc:	200000e6 	.word	0x200000e6
 8001dd0:	200000e4 	.word	0x200000e4
 8001dd4:	200000e5 	.word	0x200000e5
 8001dd8:	200000a9 	.word	0x200000a9
 8001ddc:	20000018 	.word	0x20000018
 8001de0:	0800a3c8 	.word	0x0800a3c8
 8001de4:	0800a3d0 	.word	0x0800a3d0
 8001de8:	0800a3d4 	.word	0x0800a3d4
 8001dec:	0800a3d8 	.word	0x0800a3d8
 8001df0:	0800a3e0 	.word	0x0800a3e0
 8001df4:	0800a3ec 	.word	0x0800a3ec
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	66666667 	.word	0x66666667
 8001e00:	0800a470 	.word	0x0800a470
 8001e04:	200000b0 	.word	0x200000b0
 8001e08:	0800a478 	.word	0x0800a478
 8001e0c:	0800a480 	.word	0x0800a480
 8001e10:	0800a488 	.word	0x0800a488
 8001e14:	0800a490 	.word	0x0800a490
 8001e18:	0800a498 	.word	0x0800a498
 8001e1c:	200000e7 	.word	0x200000e7
 8001e20:	0800a4a0 	.word	0x0800a4a0
 8001e24:	0800a4a4 	.word	0x0800a4a4
			ssd1306_SetCursor(2, 22);
 8001e28:	2116      	movs	r1, #22
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f003 f9f8 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001e30:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <_Z11displayMenuv+0x420>)
 8001e32:	2301      	movs	r3, #1
 8001e34:	ca06      	ldmia	r2, {r1, r2}
 8001e36:	482c      	ldr	r0, [pc, #176]	; (8001ee8 <_Z11displayMenuv+0x424>)
 8001e38:	f003 f9cc 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001e3c:	e048      	b.n	8001ed0 <_Z11displayMenuv+0x40c>
	case 2:
		if (menuItemSelect)
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <_Z11displayMenuv+0x428>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <_Z11displayMenuv+0x398>
		{
			ssd1306_SetCursor(120, 32);
 8001e46:	2120      	movs	r1, #32
 8001e48:	2078      	movs	r0, #120	; 0x78
 8001e4a:	f003 f9e9 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001e4e:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <_Z11displayMenuv+0x420>)
 8001e50:	2301      	movs	r3, #1
 8001e52:	ca06      	ldmia	r2, {r1, r2}
 8001e54:	4826      	ldr	r0, [pc, #152]	; (8001ef0 <_Z11displayMenuv+0x42c>)
 8001e56:	f003 f9bd 	bl	80051d4 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 32);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8001e5a:	e039      	b.n	8001ed0 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 32);
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f003 f9de 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001e64:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <_Z11displayMenuv+0x420>)
 8001e66:	2301      	movs	r3, #1
 8001e68:	ca06      	ldmia	r2, {r1, r2}
 8001e6a:	481f      	ldr	r0, [pc, #124]	; (8001ee8 <_Z11displayMenuv+0x424>)
 8001e6c:	f003 f9b2 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001e70:	e02e      	b.n	8001ed0 <_Z11displayMenuv+0x40c>
	case 3:
		if (menuItemSelect)
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <_Z11displayMenuv+0x428>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <_Z11displayMenuv+0x3cc>
		{
			ssd1306_SetCursor(120, 42);
 8001e7a:	212a      	movs	r1, #42	; 0x2a
 8001e7c:	2078      	movs	r0, #120	; 0x78
 8001e7e:	f003 f9cf 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <_Z11displayMenuv+0x420>)
 8001e84:	2301      	movs	r3, #1
 8001e86:	ca06      	ldmia	r2, {r1, r2}
 8001e88:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <_Z11displayMenuv+0x42c>)
 8001e8a:	f003 f9a3 	bl	80051d4 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 42);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8001e8e:	e01f      	b.n	8001ed0 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 42);
 8001e90:	212a      	movs	r1, #42	; 0x2a
 8001e92:	2002      	movs	r0, #2
 8001e94:	f003 f9c4 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001e98:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <_Z11displayMenuv+0x420>)
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	ca06      	ldmia	r2, {r1, r2}
 8001e9e:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <_Z11displayMenuv+0x424>)
 8001ea0:	f003 f998 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001ea4:	e014      	b.n	8001ed0 <_Z11displayMenuv+0x40c>
	case 4:
		ssd1306_SetCursor(41, 52);
 8001ea6:	2134      	movs	r1, #52	; 0x34
 8001ea8:	2029      	movs	r0, #41	; 0x29
 8001eaa:	f003 f9b9 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001eae:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <_Z11displayMenuv+0x420>)
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	ca06      	ldmia	r2, {r1, r2}
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <_Z11displayMenuv+0x424>)
 8001eb6:	f003 f98d 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(79, 52);
 8001eba:	2134      	movs	r1, #52	; 0x34
 8001ebc:	204f      	movs	r0, #79	; 0x4f
 8001ebe:	f003 f9af 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <_Z11displayMenuv+0x420>)
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	ca06      	ldmia	r2, {r1, r2}
 8001ec8:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <_Z11displayMenuv+0x42c>)
 8001eca:	f003 f983 	bl	80051d4 <ssd1306_WriteString>
		break;
 8001ece:	bf00      	nop
	}

	ssd1306_UpdateScreen(dispI2C);
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <_Z11displayMenuv+0x430>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 f86b 	bl	8004fb0 <ssd1306_UpdateScreen>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	0800a4a4 	.word	0x0800a4a4
 8001eec:	200000e6 	.word	0x200000e6
 8001ef0:	0800a4a0 	.word	0x0800a4a0
 8001ef4:	2000004c 	.word	0x2000004c

08001ef8 <_Z29displayConfirmationRateChangev>:

void displayConfirmationRateChange()
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f003 f833 	bl	8004f68 <ssd1306_Fill>
	ssd1306_SetCursor(8, 4);
 8001f02:	2104      	movs	r1, #4
 8001f04:	2008      	movs	r0, #8
 8001f06:	f003 f98b 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Changing the rate", Font_7x10, White);
 8001f0a:	4a31      	ldr	r2, [pc, #196]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	ca06      	ldmia	r2, {r1, r2}
 8001f10:	4830      	ldr	r0, [pc, #192]	; (8001fd4 <_Z29displayConfirmationRateChangev+0xdc>)
 8001f12:	f003 f95f 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 18);
 8001f16:	2112      	movs	r1, #18
 8001f18:	2010      	movs	r0, #16
 8001f1a:	f003 f981 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("will clear jam.", Font_7x10, White);
 8001f1e:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001f20:	2301      	movs	r3, #1
 8001f22:	ca06      	ldmia	r2, {r1, r2}
 8001f24:	482c      	ldr	r0, [pc, #176]	; (8001fd8 <_Z29displayConfirmationRateChangev+0xe0>)
 8001f26:	f003 f955 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 32);
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	2020      	movs	r0, #32
 8001f2e:	f003 f977 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 8001f32:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001f34:	2301      	movs	r3, #1
 8001f36:	ca06      	ldmia	r2, {r1, r2}
 8001f38:	4828      	ldr	r0, [pc, #160]	; (8001fdc <_Z29displayConfirmationRateChangev+0xe4>)
 8001f3a:	f003 f94b 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 8001f3e:	2132      	movs	r1, #50	; 0x32
 8001f40:	201e      	movs	r0, #30
 8001f42:	f003 f96d 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 8001f46:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001f48:	2301      	movs	r3, #1
 8001f4a:	ca06      	ldmia	r2, {r1, r2}
 8001f4c:	4824      	ldr	r0, [pc, #144]	; (8001fe0 <_Z29displayConfirmationRateChangev+0xe8>)
 8001f4e:	f003 f941 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 8001f52:	2132      	movs	r1, #50	; 0x32
 8001f54:	2050      	movs	r0, #80	; 0x50
 8001f56:	f003 f963 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 8001f5a:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	ca06      	ldmia	r2, {r1, r2}
 8001f60:	4820      	ldr	r0, [pc, #128]	; (8001fe4 <_Z29displayConfirmationRateChangev+0xec>)
 8001f62:	f003 f937 	bl	80051d4 <ssd1306_WriteString>
	if (highlightYes)
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <_Z29displayConfirmationRateChangev+0xf0>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d014      	beq.n	8001f98 <_Z29displayConfirmationRateChangev+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 8001f6e:	2132      	movs	r1, #50	; 0x32
 8001f70:	2048      	movs	r0, #72	; 0x48
 8001f72:	f003 f955 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001f76:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001f78:	2301      	movs	r3, #1
 8001f7a:	ca06      	ldmia	r2, {r1, r2}
 8001f7c:	481b      	ldr	r0, [pc, #108]	; (8001fec <_Z29displayConfirmationRateChangev+0xf4>)
 8001f7e:	f003 f929 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8001f82:	2132      	movs	r1, #50	; 0x32
 8001f84:	2066      	movs	r0, #102	; 0x66
 8001f86:	f003 f94b 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001f8a:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	ca06      	ldmia	r2, {r1, r2}
 8001f90:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <_Z29displayConfirmationRateChangev+0xf8>)
 8001f92:	f003 f91f 	bl	80051d4 <ssd1306_WriteString>
 8001f96:	e013      	b.n	8001fc0 <_Z29displayConfirmationRateChangev+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 8001f98:	2132      	movs	r1, #50	; 0x32
 8001f9a:	2016      	movs	r0, #22
 8001f9c:	f003 f940 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	ca06      	ldmia	r2, {r1, r2}
 8001fa6:	4811      	ldr	r0, [pc, #68]	; (8001fec <_Z29displayConfirmationRateChangev+0xf4>)
 8001fa8:	f003 f914 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 8001fac:	2132      	movs	r1, #50	; 0x32
 8001fae:	202d      	movs	r0, #45	; 0x2d
 8001fb0:	f003 f936 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <_Z29displayConfirmationRateChangev+0xd8>)
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	ca06      	ldmia	r2, {r1, r2}
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <_Z29displayConfirmationRateChangev+0xf8>)
 8001fbc:	f003 f90a 	bl	80051d4 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <_Z29displayConfirmationRateChangev+0xfc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fff3 	bl	8004fb0 <ssd1306_UpdateScreen>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	0800a4a8 	.word	0x0800a4a8
 8001fd8:	0800a4bc 	.word	0x0800a4bc
 8001fdc:	0800a4cc 	.word	0x0800a4cc
 8001fe0:	0800a4d8 	.word	0x0800a4d8
 8001fe4:	0800a4dc 	.word	0x0800a4dc
 8001fe8:	200000e8 	.word	0x200000e8
 8001fec:	0800a4a4 	.word	0x0800a4a4
 8001ff0:	0800a4a0 	.word	0x0800a4a0
 8001ff4:	2000004c 	.word	0x2000004c

08001ff8 <_Z31displayConfirmationOffsetChangev>:

void displayConfirmationOffsetChange()
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f002 ffb3 	bl	8004f68 <ssd1306_Fill>
	ssd1306_SetCursor(10, 10);
 8002002:	210a      	movs	r1, #10
 8002004:	200a      	movs	r0, #10
 8002006:	f003 f90b 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("The offset will", Font_7x10, White);
 800200a:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <_Z31displayConfirmationOffsetChangev+0x90>)
 800200c:	2301      	movs	r3, #1
 800200e:	ca06      	ldmia	r2, {r1, r2}
 8002010:	481e      	ldr	r0, [pc, #120]	; (800208c <_Z31displayConfirmationOffsetChangev+0x94>)
 8002012:	f003 f8df 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(14, 22);
 8002016:	2116      	movs	r1, #22
 8002018:	200e      	movs	r0, #14
 800201a:	f003 f901 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("take effect on", Font_7x10, White);
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <_Z31displayConfirmationOffsetChangev+0x90>)
 8002020:	2301      	movs	r3, #1
 8002022:	ca06      	ldmia	r2, {r1, r2}
 8002024:	481a      	ldr	r0, [pc, #104]	; (8002090 <_Z31displayConfirmationOffsetChangev+0x98>)
 8002026:	f003 f8d5 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(36, 34);
 800202a:	2122      	movs	r1, #34	; 0x22
 800202c:	2024      	movs	r0, #36	; 0x24
 800202e:	f003 f8f7 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("next jam.", Font_7x10, White);
 8002032:	4a15      	ldr	r2, [pc, #84]	; (8002088 <_Z31displayConfirmationOffsetChangev+0x90>)
 8002034:	2301      	movs	r3, #1
 8002036:	ca06      	ldmia	r2, {r1, r2}
 8002038:	4816      	ldr	r0, [pc, #88]	; (8002094 <_Z31displayConfirmationOffsetChangev+0x9c>)
 800203a:	f003 f8cb 	bl	80051d4 <ssd1306_WriteString>
	//ssd1306_SetCursor(14, 34);
	//ssd1306_WriteString("Continue?", Font_7x10, White);
	//ssd1306_SetCursor(30, 48);
	//ssd1306_WriteString("NO", Font_11x18, White);
	ssd1306_SetCursor(52, 50);
 800203e:	2132      	movs	r1, #50	; 0x32
 8002040:	2034      	movs	r0, #52	; 0x34
 8002042:	f003 f8ed 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <_Z31displayConfirmationOffsetChangev+0x90>)
 8002048:	2301      	movs	r3, #1
 800204a:	ca06      	ldmia	r2, {r1, r2}
 800204c:	4812      	ldr	r0, [pc, #72]	; (8002098 <_Z31displayConfirmationOffsetChangev+0xa0>)
 800204e:	f003 f8c1 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(44, 50);
 8002052:	2132      	movs	r1, #50	; 0x32
 8002054:	202c      	movs	r0, #44	; 0x2c
 8002056:	f003 f8e3 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <_Z31displayConfirmationOffsetChangev+0x90>)
 800205c:	2301      	movs	r3, #1
 800205e:	ca06      	ldmia	r2, {r1, r2}
 8002060:	480e      	ldr	r0, [pc, #56]	; (800209c <_Z31displayConfirmationOffsetChangev+0xa4>)
 8002062:	f003 f8b7 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(66, 50);
 8002066:	2132      	movs	r1, #50	; 0x32
 8002068:	2042      	movs	r0, #66	; 0x42
 800206a:	f003 f8d9 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 800206e:	4a06      	ldr	r2, [pc, #24]	; (8002088 <_Z31displayConfirmationOffsetChangev+0x90>)
 8002070:	2301      	movs	r3, #1
 8002072:	ca06      	ldmia	r2, {r1, r2}
 8002074:	480a      	ldr	r0, [pc, #40]	; (80020a0 <_Z31displayConfirmationOffsetChangev+0xa8>)
 8002076:	f003 f8ad 	bl	80051d4 <ssd1306_WriteString>
	
	ssd1306_UpdateScreen(dispI2C);
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <_Z31displayConfirmationOffsetChangev+0xac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f002 ff96 	bl	8004fb0 <ssd1306_UpdateScreen>
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000000 	.word	0x20000000
 800208c:	0800a4e0 	.word	0x0800a4e0
 8002090:	0800a4f0 	.word	0x0800a4f0
 8002094:	0800a500 	.word	0x0800a500
 8002098:	0800a50c 	.word	0x0800a50c
 800209c:	0800a4a4 	.word	0x0800a4a4
 80020a0:	0800a4a0 	.word	0x0800a4a0
 80020a4:	2000004c 	.word	0x2000004c

080020a8 <_Z24displayConfirmationRejamv>:

void displayConfirmationRejam()
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f002 ff5b 	bl	8004f68 <ssd1306_Fill>
	ssd1306_SetCursor(12, 6);
 80020b2:	2106      	movs	r1, #6
 80020b4:	200c      	movs	r0, #12
 80020b6:	f003 f8b3 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("This will clear", Font_7x10, White);
 80020ba:	4a31      	ldr	r2, [pc, #196]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 80020bc:	2301      	movs	r3, #1
 80020be:	ca06      	ldmia	r2, {r1, r2}
 80020c0:	4830      	ldr	r0, [pc, #192]	; (8002184 <_Z24displayConfirmationRejamv+0xdc>)
 80020c2:	f003 f887 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(24, 18);
 80020c6:	2112      	movs	r1, #18
 80020c8:	2018      	movs	r0, #24
 80020ca:	f003 f8a9 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("current jam.", Font_7x10, White);
 80020ce:	4a2c      	ldr	r2, [pc, #176]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 80020d0:	2301      	movs	r3, #1
 80020d2:	ca06      	ldmia	r2, {r1, r2}
 80020d4:	482c      	ldr	r0, [pc, #176]	; (8002188 <_Z24displayConfirmationRejamv+0xe0>)
 80020d6:	f003 f87d 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(34, 32);
 80020da:	2120      	movs	r1, #32
 80020dc:	2022      	movs	r0, #34	; 0x22
 80020de:	f003 f89f 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 80020e2:	4a27      	ldr	r2, [pc, #156]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 80020e4:	2301      	movs	r3, #1
 80020e6:	ca06      	ldmia	r2, {r1, r2}
 80020e8:	4828      	ldr	r0, [pc, #160]	; (800218c <_Z24displayConfirmationRejamv+0xe4>)
 80020ea:	f003 f873 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 80020ee:	2132      	movs	r1, #50	; 0x32
 80020f0:	201e      	movs	r0, #30
 80020f2:	f003 f895 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 80020f6:	4a22      	ldr	r2, [pc, #136]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 80020f8:	2301      	movs	r3, #1
 80020fa:	ca06      	ldmia	r2, {r1, r2}
 80020fc:	4824      	ldr	r0, [pc, #144]	; (8002190 <_Z24displayConfirmationRejamv+0xe8>)
 80020fe:	f003 f869 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 8002102:	2132      	movs	r1, #50	; 0x32
 8002104:	2050      	movs	r0, #80	; 0x50
 8002106:	f003 f88b 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 800210c:	2301      	movs	r3, #1
 800210e:	ca06      	ldmia	r2, {r1, r2}
 8002110:	4820      	ldr	r0, [pc, #128]	; (8002194 <_Z24displayConfirmationRejamv+0xec>)
 8002112:	f003 f85f 	bl	80051d4 <ssd1306_WriteString>
	if (highlightYes)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <_Z24displayConfirmationRejamv+0xf0>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d014      	beq.n	8002148 <_Z24displayConfirmationRejamv+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 800211e:	2132      	movs	r1, #50	; 0x32
 8002120:	2048      	movs	r0, #72	; 0x48
 8002122:	f003 f87d 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 8002128:	2301      	movs	r3, #1
 800212a:	ca06      	ldmia	r2, {r1, r2}
 800212c:	481b      	ldr	r0, [pc, #108]	; (800219c <_Z24displayConfirmationRejamv+0xf4>)
 800212e:	f003 f851 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8002132:	2132      	movs	r1, #50	; 0x32
 8002134:	2066      	movs	r0, #102	; 0x66
 8002136:	f003 f873 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 800213a:	4a11      	ldr	r2, [pc, #68]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 800213c:	2301      	movs	r3, #1
 800213e:	ca06      	ldmia	r2, {r1, r2}
 8002140:	4817      	ldr	r0, [pc, #92]	; (80021a0 <_Z24displayConfirmationRejamv+0xf8>)
 8002142:	f003 f847 	bl	80051d4 <ssd1306_WriteString>
 8002146:	e013      	b.n	8002170 <_Z24displayConfirmationRejamv+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 8002148:	2132      	movs	r1, #50	; 0x32
 800214a:	2016      	movs	r0, #22
 800214c:	f003 f868 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 8002152:	2301      	movs	r3, #1
 8002154:	ca06      	ldmia	r2, {r1, r2}
 8002156:	4811      	ldr	r0, [pc, #68]	; (800219c <_Z24displayConfirmationRejamv+0xf4>)
 8002158:	f003 f83c 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 800215c:	2132      	movs	r1, #50	; 0x32
 800215e:	202d      	movs	r0, #45	; 0x2d
 8002160:	f003 f85e 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002164:	4a06      	ldr	r2, [pc, #24]	; (8002180 <_Z24displayConfirmationRejamv+0xd8>)
 8002166:	2301      	movs	r3, #1
 8002168:	ca06      	ldmia	r2, {r1, r2}
 800216a:	480d      	ldr	r0, [pc, #52]	; (80021a0 <_Z24displayConfirmationRejamv+0xf8>)
 800216c:	f003 f832 	bl	80051d4 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <_Z24displayConfirmationRejamv+0xfc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f002 ff1b 	bl	8004fb0 <ssd1306_UpdateScreen>
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000
 8002184:	0800a510 	.word	0x0800a510
 8002188:	0800a520 	.word	0x0800a520
 800218c:	0800a4cc 	.word	0x0800a4cc
 8002190:	0800a4d8 	.word	0x0800a4d8
 8002194:	0800a4dc 	.word	0x0800a4dc
 8002198:	200000e8 	.word	0x200000e8
 800219c:	0800a4a4 	.word	0x0800a4a4
 80021a0:	0800a4a0 	.word	0x0800a4a0
 80021a4:	2000004c 	.word	0x2000004c

080021a8 <_Z14displayBatteryv>:

void displayBattery()
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
	char battDisp[4];
	ssd1306_DrawBattery(batteryRemaining); //TODO BATTERY
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <_Z14displayBatteryv+0xec>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	f003 f84a 	bl	8005250 <ssd1306_DrawBattery>
	ssd1306_SetCursor(34, 52);
 80021bc:	2134      	movs	r1, #52	; 0x34
 80021be:	2022      	movs	r0, #34	; 0x22
 80021c0:	f003 f82e 	bl	8005220 <ssd1306_SetCursor>
	int battPrint = int(batteryRemaining * 100.0);
 80021c4:	4b33      	ldr	r3, [pc, #204]	; (8002294 <_Z14displayBatteryv+0xec>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f965 	bl	8000498 <__aeabi_f2d>
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <_Z14displayBatteryv+0xf0>)
 80021d4:	f7fe f9b8 	bl	8000548 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fbc4 	bl	800096c <__aeabi_d2iz>
 80021e4:	4603      	mov	r3, r0
 80021e6:	607b      	str	r3, [r7, #4]
	if (battPrint == 100)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d108      	bne.n	8002200 <_Z14displayBatteryv+0x58>
	{
		battDisp[0] = '1';
 80021ee:	2331      	movs	r3, #49	; 0x31
 80021f0:	703b      	strb	r3, [r7, #0]
		battDisp[1] = '0';
 80021f2:	2330      	movs	r3, #48	; 0x30
 80021f4:	707b      	strb	r3, [r7, #1]
		battDisp[2] = '0';
 80021f6:	2330      	movs	r3, #48	; 0x30
 80021f8:	70bb      	strb	r3, [r7, #2]
		battDisp[3] = '%';
 80021fa:	2325      	movs	r3, #37	; 0x25
 80021fc:	70fb      	strb	r3, [r7, #3]
 80021fe:	e03d      	b.n	800227c <_Z14displayBatteryv+0xd4>
	}
	else
	{
		battDisp[0] = ' ';
 8002200:	2320      	movs	r3, #32
 8002202:	703b      	strb	r3, [r7, #0]
		battDisp[1] = foo[battPrint / 10];
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <_Z14displayBatteryv+0xf4>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4925      	ldr	r1, [pc, #148]	; (80022a0 <_Z14displayBatteryv+0xf8>)
 800220c:	fb81 0103 	smull	r0, r1, r1, r3
 8002210:	1089      	asrs	r1, r1, #2
 8002212:	17db      	asrs	r3, r3, #31
 8002214:	1acb      	subs	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	707b      	strb	r3, [r7, #1]
		battDisp[2] = foo[battPrint % 10];
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <_Z14displayBatteryv+0xf4>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <_Z14displayBatteryv+0xf8>)
 8002224:	fb83 1302 	smull	r1, r3, r3, r2
 8002228:	1099      	asrs	r1, r3, #2
 800222a:	17d3      	asrs	r3, r2, #31
 800222c:	1ac9      	subs	r1, r1, r3
 800222e:	460b      	mov	r3, r1
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	1ad1      	subs	r1, r2, r3
 8002238:	460b      	mov	r3, r1
 800223a:	4403      	add	r3, r0
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	70bb      	strb	r3, [r7, #2]
		if (!stat1 && stat2)
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <_Z14displayBatteryv+0xfc>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f083 0301 	eor.w	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d006      	beq.n	800225c <_Z14displayBatteryv+0xb4>
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <_Z14displayBatteryv+0x100>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <_Z14displayBatteryv+0xb4>
			battDisp[3] = '^';
 8002256:	235e      	movs	r3, #94	; 0x5e
 8002258:	70fb      	strb	r3, [r7, #3]
 800225a:	e00f      	b.n	800227c <_Z14displayBatteryv+0xd4>
		else if (stat1 && !stat2)
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <_Z14displayBatteryv+0xfc>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <_Z14displayBatteryv+0xd0>
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <_Z14displayBatteryv+0x100>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <_Z14displayBatteryv+0xd0>
			battDisp[3] = '!';
 8002272:	2321      	movs	r3, #33	; 0x21
 8002274:	70fb      	strb	r3, [r7, #3]
 8002276:	e001      	b.n	800227c <_Z14displayBatteryv+0xd4>
		else
			battDisp[3] = '%';
 8002278:	2325      	movs	r3, #37	; 0x25
 800227a:	70fb      	strb	r3, [r7, #3]
	}
	battDisp[4] = ' ';
 800227c:	2320      	movs	r3, #32
 800227e:	713b      	strb	r3, [r7, #4]
	ssd1306_WriteString(battDisp, Font_7x10, White);
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <_Z14displayBatteryv+0x104>)
 8002282:	4638      	mov	r0, r7
 8002284:	2301      	movs	r3, #1
 8002286:	ca06      	ldmia	r2, {r1, r2}
 8002288:	f002 ffa4 	bl	80051d4 <ssd1306_WriteString>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200000b4 	.word	0x200000b4
 8002298:	40590000 	.word	0x40590000
 800229c:	20000010 	.word	0x20000010
 80022a0:	66666667 	.word	0x66666667
 80022a4:	200000bc 	.word	0x200000bc
 80022a8:	200000bd 	.word	0x200000bd
 80022ac:	20000000 	.word	0x20000000

080022b0 <_Z15timecodeDisplayv>:
void timecodeDisplay()
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	tcDisplay[0] = foo[hr / 10];
 80022b4:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <_Z15timecodeDisplayv+0x124>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <_Z15timecodeDisplayv+0x128>)
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	4947      	ldr	r1, [pc, #284]	; (80023dc <_Z15timecodeDisplayv+0x12c>)
 80022be:	fba1 1202 	umull	r1, r2, r1, r2
 80022c2:	08d2      	lsrs	r2, r2, #3
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	4413      	add	r3, r2
 80022c8:	781a      	ldrb	r2, [r3, #0]
 80022ca:	4b45      	ldr	r3, [pc, #276]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 80022cc:	701a      	strb	r2, [r3, #0]
	tcDisplay[1] = foo[hr % 10];
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <_Z15timecodeDisplayv+0x124>)
 80022d0:	6818      	ldr	r0, [r3, #0]
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <_Z15timecodeDisplayv+0x128>)
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	4b41      	ldr	r3, [pc, #260]	; (80023dc <_Z15timecodeDisplayv+0x12c>)
 80022d8:	fba3 1302 	umull	r1, r3, r3, r2
 80022dc:	08d9      	lsrs	r1, r3, #3
 80022de:	460b      	mov	r3, r1
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4403      	add	r3, r0
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 80022f0:	705a      	strb	r2, [r3, #1]
	tcDisplay[2] = ':';
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 80022f4:	223a      	movs	r2, #58	; 0x3a
 80022f6:	709a      	strb	r2, [r3, #2]
	tcDisplay[3] = foo[mn / 10];
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <_Z15timecodeDisplayv+0x124>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a39      	ldr	r2, [pc, #228]	; (80023e4 <_Z15timecodeDisplayv+0x134>)
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	4936      	ldr	r1, [pc, #216]	; (80023dc <_Z15timecodeDisplayv+0x12c>)
 8002302:	fba1 1202 	umull	r1, r2, r1, r2
 8002306:	08d2      	lsrs	r2, r2, #3
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	4413      	add	r3, r2
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 8002310:	70da      	strb	r2, [r3, #3]
	tcDisplay[4] = foo[mn % 10];
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <_Z15timecodeDisplayv+0x124>)
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <_Z15timecodeDisplayv+0x134>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b30      	ldr	r3, [pc, #192]	; (80023dc <_Z15timecodeDisplayv+0x12c>)
 800231c:	fba3 1302 	umull	r1, r3, r3, r2
 8002320:	08d9      	lsrs	r1, r3, #3
 8002322:	460b      	mov	r3, r1
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4403      	add	r3, r0
 8002330:	781a      	ldrb	r2, [r3, #0]
 8002332:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 8002334:	711a      	strb	r2, [r3, #4]
	tcDisplay[5] = ':';
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 8002338:	223a      	movs	r2, #58	; 0x3a
 800233a:	715a      	strb	r2, [r3, #5]
	tcDisplay[6] = foo[sc / 10];
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <_Z15timecodeDisplayv+0x124>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a29      	ldr	r2, [pc, #164]	; (80023e8 <_Z15timecodeDisplayv+0x138>)
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	4925      	ldr	r1, [pc, #148]	; (80023dc <_Z15timecodeDisplayv+0x12c>)
 8002346:	fba1 1202 	umull	r1, r2, r1, r2
 800234a:	08d2      	lsrs	r2, r2, #3
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	4413      	add	r3, r2
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 8002354:	719a      	strb	r2, [r3, #6]
	tcDisplay[7] = foo[sc % 10];
 8002356:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <_Z15timecodeDisplayv+0x124>)
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <_Z15timecodeDisplayv+0x138>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <_Z15timecodeDisplayv+0x12c>)
 8002360:	fba3 1302 	umull	r1, r3, r3, r2
 8002364:	08d9      	lsrs	r1, r3, #3
 8002366:	460b      	mov	r3, r1
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4403      	add	r3, r0
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 8002378:	71da      	strb	r2, [r3, #7]
	tcDisplay[8] = (frameRate == 4) ? ';' : ':';
 800237a:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <_Z15timecodeDisplayv+0x13c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b04      	cmp	r3, #4
 8002380:	d101      	bne.n	8002386 <_Z15timecodeDisplayv+0xd6>
 8002382:	223b      	movs	r2, #59	; 0x3b
 8002384:	e000      	b.n	8002388 <_Z15timecodeDisplayv+0xd8>
 8002386:	223a      	movs	r2, #58	; 0x3a
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 800238a:	721a      	strb	r2, [r3, #8]
	tcDisplay[9] = foo[fr / 10];
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_Z15timecodeDisplayv+0x124>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a17      	ldr	r2, [pc, #92]	; (80023f0 <_Z15timecodeDisplayv+0x140>)
 8002392:	7812      	ldrb	r2, [r2, #0]
 8002394:	4911      	ldr	r1, [pc, #68]	; (80023dc <_Z15timecodeDisplayv+0x12c>)
 8002396:	fba1 1202 	umull	r1, r2, r1, r2
 800239a:	08d2      	lsrs	r2, r2, #3
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	4413      	add	r3, r2
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 80023a4:	725a      	strb	r2, [r3, #9]
	tcDisplay[10] = foo[fr % 10];
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <_Z15timecodeDisplayv+0x124>)
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <_Z15timecodeDisplayv+0x140>)
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <_Z15timecodeDisplayv+0x12c>)
 80023b0:	fba3 1302 	umull	r1, r3, r3, r2
 80023b4:	08d9      	lsrs	r1, r3, #3
 80023b6:	460b      	mov	r3, r1
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4403      	add	r3, r0
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <_Z15timecodeDisplayv+0x130>)
 80023c8:	729a      	strb	r2, [r3, #10]
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20000010 	.word	0x20000010
 80023d8:	200000b8 	.word	0x200000b8
 80023dc:	cccccccd 	.word	0xcccccccd
 80023e0:	20000094 	.word	0x20000094
 80023e4:	200000b9 	.word	0x200000b9
 80023e8:	200000ba 	.word	0x200000ba
 80023ec:	200000a9 	.word	0x200000a9
 80023f0:	200000bb 	.word	0x200000bb

080023f4 <_Z11initDisplayv>:
void initDisplay()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	 if (ssd1306_Init(dispI2C) != 0) {
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <_Z11initDisplayv+0x28>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 fc93 	bl	8004d28 <ssd1306_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <_Z11initDisplayv+0x22>
     Error_Handler();
 8002412:	f002 fc6d 	bl	8004cf0 <Error_Handler>
   }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000004c 	.word	0x2000004c

08002420 <_Z18displayCalibrationv>:

void displayCalibration(){
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
	char calStr[8];
	calStr[0] = foo[(newCal % 100000000)/10000000];
 8002426:	4b97      	ldr	r3, [pc, #604]	; (8002684 <_Z18displayCalibrationv+0x264>)
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	4b97      	ldr	r3, [pc, #604]	; (8002688 <_Z18displayCalibrationv+0x268>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b97      	ldr	r3, [pc, #604]	; (800268c <_Z18displayCalibrationv+0x26c>)
 8002430:	fba3 0302 	umull	r0, r3, r3, r2
 8002434:	0e5b      	lsrs	r3, r3, #25
 8002436:	4896      	ldr	r0, [pc, #600]	; (8002690 <_Z18displayCalibrationv+0x270>)
 8002438:	fb00 f303 	mul.w	r3, r0, r3
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	4a95      	ldr	r2, [pc, #596]	; (8002694 <_Z18displayCalibrationv+0x274>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0d9b      	lsrs	r3, r3, #22
 8002446:	440b      	add	r3, r1
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	703b      	strb	r3, [r7, #0]
	calStr[1] = foo[(newCal % 10000000)/1000000];
 800244c:	4b8d      	ldr	r3, [pc, #564]	; (8002684 <_Z18displayCalibrationv+0x264>)
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	4b8d      	ldr	r3, [pc, #564]	; (8002688 <_Z18displayCalibrationv+0x268>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b8f      	ldr	r3, [pc, #572]	; (8002694 <_Z18displayCalibrationv+0x274>)
 8002456:	fba3 0302 	umull	r0, r3, r3, r2
 800245a:	0d9b      	lsrs	r3, r3, #22
 800245c:	488e      	ldr	r0, [pc, #568]	; (8002698 <_Z18displayCalibrationv+0x278>)
 800245e:	fb00 f303 	mul.w	r3, r0, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	4a8d      	ldr	r2, [pc, #564]	; (800269c <_Z18displayCalibrationv+0x27c>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9b      	lsrs	r3, r3, #18
 800246c:	440b      	add	r3, r1
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	707b      	strb	r3, [r7, #1]
	calStr[2] = foo[(newCal % 1000000)/100000];
 8002472:	4b84      	ldr	r3, [pc, #528]	; (8002684 <_Z18displayCalibrationv+0x264>)
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	4b84      	ldr	r3, [pc, #528]	; (8002688 <_Z18displayCalibrationv+0x268>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <_Z18displayCalibrationv+0x27c>)
 800247c:	fba3 0302 	umull	r0, r3, r3, r2
 8002480:	0c9b      	lsrs	r3, r3, #18
 8002482:	4887      	ldr	r0, [pc, #540]	; (80026a0 <_Z18displayCalibrationv+0x280>)
 8002484:	fb00 f303 	mul.w	r3, r0, r3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <_Z18displayCalibrationv+0x284>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	09db      	lsrs	r3, r3, #7
 8002494:	440b      	add	r3, r1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	70bb      	strb	r3, [r7, #2]
	calStr[3] = foo[(newCal % 100000)/10000];
 800249a:	4b7a      	ldr	r3, [pc, #488]	; (8002684 <_Z18displayCalibrationv+0x264>)
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <_Z18displayCalibrationv+0x268>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	0953      	lsrs	r3, r2, #5
 80024a4:	487f      	ldr	r0, [pc, #508]	; (80026a4 <_Z18displayCalibrationv+0x284>)
 80024a6:	fba0 0303 	umull	r0, r3, r0, r3
 80024aa:	09db      	lsrs	r3, r3, #7
 80024ac:	487e      	ldr	r0, [pc, #504]	; (80026a8 <_Z18displayCalibrationv+0x288>)
 80024ae:	fb00 f303 	mul.w	r3, r0, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	4a7d      	ldr	r2, [pc, #500]	; (80026ac <_Z18displayCalibrationv+0x28c>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0b5b      	lsrs	r3, r3, #13
 80024bc:	440b      	add	r3, r1
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	70fb      	strb	r3, [r7, #3]
	calStr[4] = foo[(newCal % 10000)/1000];
 80024c2:	4b70      	ldr	r3, [pc, #448]	; (8002684 <_Z18displayCalibrationv+0x264>)
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	4b70      	ldr	r3, [pc, #448]	; (8002688 <_Z18displayCalibrationv+0x268>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b78      	ldr	r3, [pc, #480]	; (80026ac <_Z18displayCalibrationv+0x28c>)
 80024cc:	fba3 0302 	umull	r0, r3, r3, r2
 80024d0:	0b5b      	lsrs	r3, r3, #13
 80024d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80024d6:	fb00 f303 	mul.w	r3, r0, r3
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	4a74      	ldr	r2, [pc, #464]	; (80026b0 <_Z18displayCalibrationv+0x290>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	440b      	add	r3, r1
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	713b      	strb	r3, [r7, #4]
	calStr[5] = foo[(newCal % 1000)/100];
 80024ea:	4b66      	ldr	r3, [pc, #408]	; (8002684 <_Z18displayCalibrationv+0x264>)
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	4b66      	ldr	r3, [pc, #408]	; (8002688 <_Z18displayCalibrationv+0x268>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <_Z18displayCalibrationv+0x290>)
 80024f4:	fba3 0302 	umull	r0, r3, r3, r2
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024fe:	fb00 f303 	mul.w	r3, r0, r3
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	4a6b      	ldr	r2, [pc, #428]	; (80026b4 <_Z18displayCalibrationv+0x294>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	440b      	add	r3, r1
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	717b      	strb	r3, [r7, #5]
	calStr[6] = foo[(newCal % 100)/10];
 8002512:	4b5c      	ldr	r3, [pc, #368]	; (8002684 <_Z18displayCalibrationv+0x264>)
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <_Z18displayCalibrationv+0x268>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <_Z18displayCalibrationv+0x294>)
 800251c:	fba3 0302 	umull	r0, r3, r3, r2
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	2064      	movs	r0, #100	; 0x64
 8002524:	fb00 f303 	mul.w	r3, r0, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <_Z18displayCalibrationv+0x298>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	71bb      	strb	r3, [r7, #6]
	calStr[7] = foo[newCal % 10];
 8002538:	4b52      	ldr	r3, [pc, #328]	; (8002684 <_Z18displayCalibrationv+0x264>)
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	4b52      	ldr	r3, [pc, #328]	; (8002688 <_Z18displayCalibrationv+0x268>)
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <_Z18displayCalibrationv+0x298>)
 8002542:	fba3 2301 	umull	r2, r3, r3, r1
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	1aca      	subs	r2, r1, r3
 8002552:	1883      	adds	r3, r0, r2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
	ssd1306_Fill(Black);
 8002558:	2000      	movs	r0, #0
 800255a:	f002 fd05 	bl	8004f68 <ssd1306_Fill>
	ssd1306_SetCursor(24, 0);
 800255e:	2100      	movs	r1, #0
 8002560:	2018      	movs	r0, #24
 8002562:	f002 fe5d 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Calibration", Font_7x10, White);
 8002566:	4a55      	ldr	r2, [pc, #340]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 8002568:	2301      	movs	r3, #1
 800256a:	ca06      	ldmia	r2, {r1, r2}
 800256c:	4854      	ldr	r0, [pc, #336]	; (80026c0 <_Z18displayCalibrationv+0x2a0>)
 800256e:	f002 fe31 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 12);
 8002572:	210c      	movs	r1, #12
 8002574:	200a      	movs	r0, #10
 8002576:	f002 fe53 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Val:", Font_7x10, White);
 800257a:	4a50      	ldr	r2, [pc, #320]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 800257c:	2301      	movs	r3, #1
 800257e:	ca06      	ldmia	r2, {r1, r2}
 8002580:	4850      	ldr	r0, [pc, #320]	; (80026c4 <_Z18displayCalibrationv+0x2a4>)
 8002582:	f002 fe27 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 12);
 8002586:	210c      	movs	r1, #12
 8002588:	2028      	movs	r0, #40	; 0x28
 800258a:	f002 fe49 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString(calStr, Font_7x10, White);
 800258e:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 8002590:	4638      	mov	r0, r7
 8002592:	2301      	movs	r3, #1
 8002594:	ca06      	ldmia	r2, {r1, r2}
 8002596:	f002 fe1d 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(96,12);
 800259a:	210c      	movs	r1, #12
 800259c:	2060      	movs	r0, #96	; 0x60
 800259e:	f002 fe3f 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("    ",Font_7x10,White);
 80025a2:	4a46      	ldr	r2, [pc, #280]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 80025a4:	2301      	movs	r3, #1
 80025a6:	ca06      	ldmia	r2, {r1, r2}
 80025a8:	4847      	ldr	r0, [pc, #284]	; (80026c8 <_Z18displayCalibrationv+0x2a8>)
 80025aa:	f002 fe13 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(14, 50);
 80025ae:	2132      	movs	r1, #50	; 0x32
 80025b0:	200e      	movs	r0, #14
 80025b2:	f002 fe35 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 80025b6:	4a41      	ldr	r2, [pc, #260]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 80025b8:	2301      	movs	r3, #1
 80025ba:	ca06      	ldmia	r2, {r1, r2}
 80025bc:	4843      	ldr	r0, [pc, #268]	; (80026cc <_Z18displayCalibrationv+0x2ac>)
 80025be:	f002 fe09 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(60, 50);
 80025c2:	2132      	movs	r1, #50	; 0x32
 80025c4:	203c      	movs	r0, #60	; 0x3c
 80025c6:	f002 fe2b 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Cancel", Font_7x10, White);
 80025ca:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 80025cc:	2301      	movs	r3, #1
 80025ce:	ca06      	ldmia	r2, {r1, r2}
 80025d0:	483f      	ldr	r0, [pc, #252]	; (80026d0 <_Z18displayCalibrationv+0x2b0>)
 80025d2:	f002 fdff 	bl	80051d4 <ssd1306_WriteString>
	if (menuItem == 0){
 80025d6:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <_Z18displayCalibrationv+0x2b4>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <_Z18displayCalibrationv+0x1f0>
		if (menuItemSelect){
 80025de:	4b3e      	ldr	r3, [pc, #248]	; (80026d8 <_Z18displayCalibrationv+0x2b8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <_Z18displayCalibrationv+0x1dc>
			ssd1306_SetCursor(120, 12);
 80025e6:	210c      	movs	r1, #12
 80025e8:	2078      	movs	r0, #120	; 0x78
 80025ea:	f002 fe19 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 80025f0:	2301      	movs	r3, #1
 80025f2:	ca06      	ldmia	r2, {r1, r2}
 80025f4:	4839      	ldr	r0, [pc, #228]	; (80026dc <_Z18displayCalibrationv+0x2bc>)
 80025f6:	f002 fded 	bl	80051d4 <ssd1306_WriteString>
 80025fa:	e009      	b.n	8002610 <_Z18displayCalibrationv+0x1f0>
		} else {
			ssd1306_SetCursor(2, 12);
 80025fc:	210c      	movs	r1, #12
 80025fe:	2002      	movs	r0, #2
 8002600:	f002 fe0e 	bl	8005220 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8002604:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 8002606:	2301      	movs	r3, #1
 8002608:	ca06      	ldmia	r2, {r1, r2}
 800260a:	4835      	ldr	r0, [pc, #212]	; (80026e0 <_Z18displayCalibrationv+0x2c0>)
 800260c:	f002 fde2 	bl	80051d4 <ssd1306_WriteString>
		}
	}
	if (menuItem == 1)
 8002610:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <_Z18displayCalibrationv+0x2b4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d113      	bne.n	8002640 <_Z18displayCalibrationv+0x220>
	{
		ssd1306_SetCursor(6, 50);
 8002618:	2132      	movs	r1, #50	; 0x32
 800261a:	2006      	movs	r0, #6
 800261c:	f002 fe00 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002620:	4a26      	ldr	r2, [pc, #152]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 8002622:	2301      	movs	r3, #1
 8002624:	ca06      	ldmia	r2, {r1, r2}
 8002626:	482e      	ldr	r0, [pc, #184]	; (80026e0 <_Z18displayCalibrationv+0x2c0>)
 8002628:	f002 fdd4 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(28, 50);
 800262c:	2132      	movs	r1, #50	; 0x32
 800262e:	201c      	movs	r0, #28
 8002630:	f002 fdf6 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002634:	4a21      	ldr	r2, [pc, #132]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 8002636:	2301      	movs	r3, #1
 8002638:	ca06      	ldmia	r2, {r1, r2}
 800263a:	4828      	ldr	r0, [pc, #160]	; (80026dc <_Z18displayCalibrationv+0x2bc>)
 800263c:	f002 fdca 	bl	80051d4 <ssd1306_WriteString>
	}
	if (menuItem == 2)
 8002640:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <_Z18displayCalibrationv+0x2b4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d113      	bne.n	8002670 <_Z18displayCalibrationv+0x250>
	{
		ssd1306_SetCursor(52, 50);
 8002648:	2132      	movs	r1, #50	; 0x32
 800264a:	2034      	movs	r0, #52	; 0x34
 800264c:	f002 fde8 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8002650:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 8002652:	2301      	movs	r3, #1
 8002654:	ca06      	ldmia	r2, {r1, r2}
 8002656:	4822      	ldr	r0, [pc, #136]	; (80026e0 <_Z18displayCalibrationv+0x2c0>)
 8002658:	f002 fdbc 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 800265c:	2132      	movs	r1, #50	; 0x32
 800265e:	2066      	movs	r0, #102	; 0x66
 8002660:	f002 fdde 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002664:	4a15      	ldr	r2, [pc, #84]	; (80026bc <_Z18displayCalibrationv+0x29c>)
 8002666:	2301      	movs	r3, #1
 8002668:	ca06      	ldmia	r2, {r1, r2}
 800266a:	481c      	ldr	r0, [pc, #112]	; (80026dc <_Z18displayCalibrationv+0x2bc>)
 800266c:	f002 fdb2 	bl	80051d4 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <_Z18displayCalibrationv+0x2c4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fc9b 	bl	8004fb0 <ssd1306_UpdateScreen>


}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000010 	.word	0x20000010
 8002688:	2000008c 	.word	0x2000008c
 800268c:	55e63b89 	.word	0x55e63b89
 8002690:	05f5e100 	.word	0x05f5e100
 8002694:	6b5fca6b 	.word	0x6b5fca6b
 8002698:	00989680 	.word	0x00989680
 800269c:	431bde83 	.word	0x431bde83
 80026a0:	000f4240 	.word	0x000f4240
 80026a4:	0a7c5ac5 	.word	0x0a7c5ac5
 80026a8:	000186a0 	.word	0x000186a0
 80026ac:	d1b71759 	.word	0xd1b71759
 80026b0:	10624dd3 	.word	0x10624dd3
 80026b4:	51eb851f 	.word	0x51eb851f
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	20000000 	.word	0x20000000
 80026c0:	0800a530 	.word	0x0800a530
 80026c4:	0800a53c 	.word	0x0800a53c
 80026c8:	0800a544 	.word	0x0800a544
 80026cc:	0800a50c 	.word	0x0800a50c
 80026d0:	0800a54c 	.word	0x0800a54c
 80026d4:	200000e7 	.word	0x200000e7
 80026d8:	200000e6 	.word	0x200000e6
 80026dc:	0800a4a0 	.word	0x0800a4a0
 80026e0:	0800a4a4 	.word	0x0800a4a4
 80026e4:	2000004c 	.word	0x2000004c

080026e8 <_Z20displayCalibrationOKv>:
void displayCalibrationOK(){
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f002 fc3b 	bl	8004f68 <ssd1306_Fill>
	ssd1306_SetCursor(24, 0);
 80026f2:	2100      	movs	r1, #0
 80026f4:	2018      	movs	r0, #24
 80026f6:	f002 fd93 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Calibration", Font_7x10, White);
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <_Z20displayCalibrationOKv+0x84>)
 80026fc:	2301      	movs	r3, #1
 80026fe:	ca06      	ldmia	r2, {r1, r2}
 8002700:	481b      	ldr	r0, [pc, #108]	; (8002770 <_Z20displayCalibrationOKv+0x88>)
 8002702:	f002 fd67 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(38,12);
 8002706:	210c      	movs	r1, #12
 8002708:	2026      	movs	r0, #38	; 0x26
 800270a:	f002 fd89 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Success", Font_7x10, White);
 800270e:	4a17      	ldr	r2, [pc, #92]	; (800276c <_Z20displayCalibrationOKv+0x84>)
 8002710:	2301      	movs	r3, #1
 8002712:	ca06      	ldmia	r2, {r1, r2}
 8002714:	4817      	ldr	r0, [pc, #92]	; (8002774 <_Z20displayCalibrationOKv+0x8c>)
 8002716:	f002 fd5d 	bl	80051d4 <ssd1306_WriteString>

	ssd1306_SetCursor(58,50);
 800271a:	2132      	movs	r1, #50	; 0x32
 800271c:	203a      	movs	r0, #58	; 0x3a
 800271e:	f002 fd7f 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <_Z20displayCalibrationOKv+0x84>)
 8002724:	2301      	movs	r3, #1
 8002726:	ca06      	ldmia	r2, {r1, r2}
 8002728:	4813      	ldr	r0, [pc, #76]	; (8002778 <_Z20displayCalibrationOKv+0x90>)
 800272a:	f002 fd53 	bl	80051d4 <ssd1306_WriteString>
	if (menuItemSelect){
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <_Z20displayCalibrationOKv+0x94>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d013      	beq.n	800275e <_Z20displayCalibrationOKv+0x76>
		ssd1306_SetCursor(50, 50);
 8002736:	2132      	movs	r1, #50	; 0x32
 8002738:	2032      	movs	r0, #50	; 0x32
 800273a:	f002 fd71 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <_Z20displayCalibrationOKv+0x84>)
 8002740:	2301      	movs	r3, #1
 8002742:	ca06      	ldmia	r2, {r1, r2}
 8002744:	480e      	ldr	r0, [pc, #56]	; (8002780 <_Z20displayCalibrationOKv+0x98>)
 8002746:	f002 fd45 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(72, 50);
 800274a:	2132      	movs	r1, #50	; 0x32
 800274c:	2048      	movs	r0, #72	; 0x48
 800274e:	f002 fd67 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8002752:	4a06      	ldr	r2, [pc, #24]	; (800276c <_Z20displayCalibrationOKv+0x84>)
 8002754:	2301      	movs	r3, #1
 8002756:	ca06      	ldmia	r2, {r1, r2}
 8002758:	480a      	ldr	r0, [pc, #40]	; (8002784 <_Z20displayCalibrationOKv+0x9c>)
 800275a:	f002 fd3b 	bl	80051d4 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <_Z20displayCalibrationOKv+0xa0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fc24 	bl	8004fb0 <ssd1306_UpdateScreen>

}
 8002768:	bf00      	nop
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000000 	.word	0x20000000
 8002770:	0800a530 	.word	0x0800a530
 8002774:	0800a554 	.word	0x0800a554
 8002778:	0800a50c 	.word	0x0800a50c
 800277c:	200000e6 	.word	0x200000e6
 8002780:	0800a4a4 	.word	0x0800a4a4
 8002784:	0800a4a0 	.word	0x0800a4a0
 8002788:	2000004c 	.word	0x2000004c

0800278c <_Z22displayCalibrationFailv>:
void displayCalibrationFail(){
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8002790:	2000      	movs	r0, #0
 8002792:	f002 fbe9 	bl	8004f68 <ssd1306_Fill>
	ssd1306_SetCursor(24, 0);
 8002796:	2100      	movs	r1, #0
 8002798:	2018      	movs	r0, #24
 800279a:	f002 fd41 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Calibration", Font_7x10, White);
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <_Z22displayCalibrationFailv+0x84>)
 80027a0:	2301      	movs	r3, #1
 80027a2:	ca06      	ldmia	r2, {r1, r2}
 80027a4:	481b      	ldr	r0, [pc, #108]	; (8002814 <_Z22displayCalibrationFailv+0x88>)
 80027a6:	f002 fd15 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(54,12);
 80027aa:	210c      	movs	r1, #12
 80027ac:	2036      	movs	r0, #54	; 0x36
 80027ae:	f002 fd37 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("Fail", Font_7x10, White);
 80027b2:	4a17      	ldr	r2, [pc, #92]	; (8002810 <_Z22displayCalibrationFailv+0x84>)
 80027b4:	2301      	movs	r3, #1
 80027b6:	ca06      	ldmia	r2, {r1, r2}
 80027b8:	4817      	ldr	r0, [pc, #92]	; (8002818 <_Z22displayCalibrationFailv+0x8c>)
 80027ba:	f002 fd0b 	bl	80051d4 <ssd1306_WriteString>
	ssd1306_SetCursor(58,50);
 80027be:	2132      	movs	r1, #50	; 0x32
 80027c0:	203a      	movs	r0, #58	; 0x3a
 80027c2:	f002 fd2d 	bl	8005220 <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <_Z22displayCalibrationFailv+0x84>)
 80027c8:	2301      	movs	r3, #1
 80027ca:	ca06      	ldmia	r2, {r1, r2}
 80027cc:	4813      	ldr	r0, [pc, #76]	; (800281c <_Z22displayCalibrationFailv+0x90>)
 80027ce:	f002 fd01 	bl	80051d4 <ssd1306_WriteString>
	if (menuItemSelect){
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <_Z22displayCalibrationFailv+0x94>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d013      	beq.n	8002802 <_Z22displayCalibrationFailv+0x76>
		ssd1306_SetCursor(50, 50);
 80027da:	2132      	movs	r1, #50	; 0x32
 80027dc:	2032      	movs	r0, #50	; 0x32
 80027de:	f002 fd1f 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80027e2:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <_Z22displayCalibrationFailv+0x84>)
 80027e4:	2301      	movs	r3, #1
 80027e6:	ca06      	ldmia	r2, {r1, r2}
 80027e8:	480e      	ldr	r0, [pc, #56]	; (8002824 <_Z22displayCalibrationFailv+0x98>)
 80027ea:	f002 fcf3 	bl	80051d4 <ssd1306_WriteString>
		ssd1306_SetCursor(72, 50);
 80027ee:	2132      	movs	r1, #50	; 0x32
 80027f0:	2048      	movs	r0, #72	; 0x48
 80027f2:	f002 fd15 	bl	8005220 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 80027f6:	4a06      	ldr	r2, [pc, #24]	; (8002810 <_Z22displayCalibrationFailv+0x84>)
 80027f8:	2301      	movs	r3, #1
 80027fa:	ca06      	ldmia	r2, {r1, r2}
 80027fc:	480a      	ldr	r0, [pc, #40]	; (8002828 <_Z22displayCalibrationFailv+0x9c>)
 80027fe:	f002 fce9 	bl	80051d4 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <_Z22displayCalibrationFailv+0xa0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f002 fbd2 	bl	8004fb0 <ssd1306_UpdateScreen>


}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000000 	.word	0x20000000
 8002814:	0800a530 	.word	0x0800a530
 8002818:	0800a55c 	.word	0x0800a55c
 800281c:	0800a50c 	.word	0x0800a50c
 8002820:	200000e6 	.word	0x200000e6
 8002824:	0800a4a4 	.word	0x0800a4a4
 8002828:	0800a4a0 	.word	0x0800a4a0
 800282c:	2000004c 	.word	0x2000004c

08002830 <_Z8menuLoopv>:
uint8_t offsetAdjust;
bool menuItemSelect = false;
uint8_t menuItem = 0;
bool highlightYes = false;
void menuLoop()
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
    bool inMenu = true;
 8002836:	2301      	movs	r3, #1
 8002838:	71fb      	strb	r3, [r7, #7]
    rateAdjust = frameRate;
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <_Z8menuLoopv+0x22c>)
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <_Z8menuLoopv+0x230>)
 8002840:	701a      	strb	r2, [r3, #0]
    offsetAdjust = intOffset;
 8002842:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <_Z8menuLoopv+0x234>)
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <_Z8menuLoopv+0x238>)
 8002848:	701a      	strb	r2, [r3, #0]
	 * check if item is exit
	 * timeout for menu inactivity 10 seconds?
	 */
    

    displayTimeout = HAL_GetTick();
 800284a:	f003 f949 	bl	8005ae0 <HAL_GetTick>
 800284e:	4603      	mov	r3, r0
 8002850:	4a86      	ldr	r2, [pc, #536]	; (8002a6c <_Z8menuLoopv+0x23c>)
 8002852:	6013      	str	r3, [r2, #0]
    while (GPIOC->IDR & GPIO_PIN_13)
 8002854:	4b86      	ldr	r3, [pc, #536]	; (8002a70 <_Z8menuLoopv+0x240>)
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d000      	beq.n	800286c <_Z8menuLoopv+0x3c>
 800286a:	e7f3      	b.n	8002854 <_Z8menuLoopv+0x24>
    {
        //While still holding down the menu button
    }
    while (inMenu)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 81d7 	beq.w	8002c22 <_Z8menuLoopv+0x3f2>
    {
        updateDisplay(2);
 8002874:	2002      	movs	r0, #2
 8002876:	f7fe ff0d 	bl	8001694 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 10000)
 800287a:	f003 f931 	bl	8005ae0 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	4b7a      	ldr	r3, [pc, #488]	; (8002a6c <_Z8menuLoopv+0x23c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f242 7210 	movw	r2, #10000	; 0x2710
 800288a:	4293      	cmp	r3, r2
 800288c:	bf8c      	ite	hi
 800288e:	2301      	movhi	r3, #1
 8002890:	2300      	movls	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <_Z8menuLoopv+0x6c>
        {
            inMenu = false;
 8002898:	2300      	movs	r3, #0
 800289a:	71fb      	strb	r3, [r7, #7]
        }
        if (GPIOB->IDR & GPIO_PIN_9)
 800289c:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <_Z8menuLoopv+0x244>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf14      	ite	ne
 80028a8:	2301      	movne	r3, #1
 80028aa:	2300      	moveq	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d065      	beq.n	800297e <_Z8menuLoopv+0x14e>
        { //Plus button
            displayTimeout = HAL_GetTick();
 80028b2:	f003 f915 	bl	8005ae0 <HAL_GetTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a6c      	ldr	r2, [pc, #432]	; (8002a6c <_Z8menuLoopv+0x23c>)
 80028ba:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 80028bc:	f003 f910 	bl	8005ae0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <_Z8menuLoopv+0x248>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80028cc:	bf8c      	ite	hi
 80028ce:	2301      	movhi	r3, #1
 80028d0:	2300      	movls	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d052      	beq.n	800297e <_Z8menuLoopv+0x14e>
            {
                if (menuItemSelect)
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <_Z8menuLoopv+0x24c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d03c      	beq.n	800295a <_Z8menuLoopv+0x12a>
                { //Menu item selected, scrolling through values
                    switch (menuItem)
 80028e0:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <_Z8menuLoopv+0x250>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d845      	bhi.n	8002974 <_Z8menuLoopv+0x144>
 80028e8:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <_Z8menuLoopv+0xc0>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002901 	.word	0x08002901
 80028f4:	0800291f 	.word	0x0800291f
 80028f8:	08002975 	.word	0x08002975
 80028fc:	0800293d 	.word	0x0800293d
                    {
                    case 0: //Rate
                        if (rateAdjust == 0)
 8002900:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <_Z8menuLoopv+0x230>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <_Z8menuLoopv+0xe0>
                            rateAdjust = 5;
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <_Z8menuLoopv+0x230>)
 800290a:	2205      	movs	r2, #5
 800290c:	701a      	strb	r2, [r3, #0]
                        else
                            rateAdjust--;
                        break;
 800290e:	e031      	b.n	8002974 <_Z8menuLoopv+0x144>
                            rateAdjust--;
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <_Z8menuLoopv+0x230>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	3b01      	subs	r3, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b51      	ldr	r3, [pc, #324]	; (8002a60 <_Z8menuLoopv+0x230>)
 800291a:	701a      	strb	r2, [r3, #0]
                        break;
 800291c:	e02a      	b.n	8002974 <_Z8menuLoopv+0x144>
                    case 1: //Offset
                        if (offsetAdjust == 0)
 800291e:	4b52      	ldr	r3, [pc, #328]	; (8002a68 <_Z8menuLoopv+0x238>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <_Z8menuLoopv+0xfe>
                            offsetAdjust = 0;
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <_Z8menuLoopv+0x238>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
                        else
                            offsetAdjust--;
                        break;
 800292c:	e022      	b.n	8002974 <_Z8menuLoopv+0x144>
                            offsetAdjust--;
 800292e:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <_Z8menuLoopv+0x238>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3b01      	subs	r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <_Z8menuLoopv+0x238>)
 8002938:	701a      	strb	r2, [r3, #0]
                        break;
 800293a:	e01b      	b.n	8002974 <_Z8menuLoopv+0x144>
                    case 2:
                        break;
                    case 3:
                        if (autoOff == 0)
 800293c:	4b51      	ldr	r3, [pc, #324]	; (8002a84 <_Z8menuLoopv+0x254>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <_Z8menuLoopv+0x11c>
                            autoOff = 4;
 8002944:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <_Z8menuLoopv+0x254>)
 8002946:	2204      	movs	r2, #4
 8002948:	701a      	strb	r2, [r3, #0]
                        else
                            autoOff--;
                        break;
 800294a:	e013      	b.n	8002974 <_Z8menuLoopv+0x144>
                            autoOff--;
 800294c:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <_Z8menuLoopv+0x254>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	3b01      	subs	r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <_Z8menuLoopv+0x254>)
 8002956:	701a      	strb	r2, [r3, #0]
                        break;
 8002958:	e00c      	b.n	8002974 <_Z8menuLoopv+0x144>
                        
                    }
                }
                else
                { //Scrolling through menu
                    menuItem++;
 800295a:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <_Z8menuLoopv+0x250>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <_Z8menuLoopv+0x250>)
 8002964:	701a      	strb	r2, [r3, #0]
                    if (menuItem > 4)
 8002966:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <_Z8menuLoopv+0x250>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d902      	bls.n	8002974 <_Z8menuLoopv+0x144>
                        menuItem = 0;
 800296e:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <_Z8menuLoopv+0x250>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8002974:	f003 f8b4 	bl	8005ae0 <HAL_GetTick>
 8002978:	4603      	mov	r3, r0
 800297a:	4a3f      	ldr	r2, [pc, #252]	; (8002a78 <_Z8menuLoopv+0x248>)
 800297c:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <_Z8menuLoopv+0x244>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d07f      	beq.n	8002a94 <_Z8menuLoopv+0x264>
        { //Minus button

            displayTimeout = HAL_GetTick();
 8002994:	f003 f8a4 	bl	8005ae0 <HAL_GetTick>
 8002998:	4603      	mov	r3, r0
 800299a:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <_Z8menuLoopv+0x23c>)
 800299c:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 800299e:	f003 f89f 	bl	8005ae0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <_Z8menuLoopv+0x248>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80029ae:	bf8c      	ite	hi
 80029b0:	2301      	movhi	r3, #1
 80029b2:	2300      	movls	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d06c      	beq.n	8002a94 <_Z8menuLoopv+0x264>
            {
                if (menuItemSelect)
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <_Z8menuLoopv+0x24c>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d038      	beq.n	8002a34 <_Z8menuLoopv+0x204>
                { //Scrolling through option
                    switch (menuItem)
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <_Z8menuLoopv+0x250>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d85f      	bhi.n	8002a8a <_Z8menuLoopv+0x25a>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <_Z8menuLoopv+0x1a0>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029fd 	.word	0x080029fd
 80029d8:	08002a8b 	.word	0x08002a8b
 80029dc:	08002a19 	.word	0x08002a19
                    {
                    case 0:
                        rateAdjust++;
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <_Z8menuLoopv+0x230>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <_Z8menuLoopv+0x230>)
 80029ea:	701a      	strb	r2, [r3, #0]
                        if (rateAdjust > 5)
 80029ec:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <_Z8menuLoopv+0x230>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d92e      	bls.n	8002a52 <_Z8menuLoopv+0x222>
                            rateAdjust = 0;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <_Z8menuLoopv+0x230>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
                        break;
 80029fa:	e02a      	b.n	8002a52 <_Z8menuLoopv+0x222>
                        
                    case 1:
                        offsetAdjust++;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <_Z8menuLoopv+0x238>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <_Z8menuLoopv+0x238>)
 8002a06:	701a      	strb	r2, [r3, #0]
                        if (offsetAdjust > 60)
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <_Z8menuLoopv+0x238>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b3c      	cmp	r3, #60	; 0x3c
 8002a0e:	d922      	bls.n	8002a56 <_Z8menuLoopv+0x226>
                            offsetAdjust = 60;
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <_Z8menuLoopv+0x238>)
 8002a12:	223c      	movs	r2, #60	; 0x3c
 8002a14:	701a      	strb	r2, [r3, #0]
                        break;
 8002a16:	e01e      	b.n	8002a56 <_Z8menuLoopv+0x226>
                    case 2:
                        break;
                    case 3:
                        autoOff++;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <_Z8menuLoopv+0x254>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <_Z8menuLoopv+0x254>)
 8002a22:	701a      	strb	r2, [r3, #0]
                        if (autoOff > 4)
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <_Z8menuLoopv+0x254>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d92d      	bls.n	8002a88 <_Z8menuLoopv+0x258>
                            autoOff = 0;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <_Z8menuLoopv+0x254>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
                        break;
 8002a32:	e029      	b.n	8002a88 <_Z8menuLoopv+0x258>
                    }
                }
                else
                { //Scrolling through menu
                    if (menuItem == 0)
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <_Z8menuLoopv+0x250>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <_Z8menuLoopv+0x214>
                        menuItem = 4;
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <_Z8menuLoopv+0x250>)
 8002a3e:	2204      	movs	r2, #4
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e022      	b.n	8002a8a <_Z8menuLoopv+0x25a>
                    else
                        menuItem--;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <_Z8menuLoopv+0x250>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <_Z8menuLoopv+0x250>)
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e01b      	b.n	8002a8a <_Z8menuLoopv+0x25a>
                        break;
 8002a52:	bf00      	nop
 8002a54:	e019      	b.n	8002a8a <_Z8menuLoopv+0x25a>
                        break;
 8002a56:	bf00      	nop
 8002a58:	e017      	b.n	8002a8a <_Z8menuLoopv+0x25a>
 8002a5a:	bf00      	nop
 8002a5c:	200000a9 	.word	0x200000a9
 8002a60:	200000e4 	.word	0x200000e4
 8002a64:	20000018 	.word	0x20000018
 8002a68:	200000e5 	.word	0x200000e5
 8002a6c:	200000dc 	.word	0x200000dc
 8002a70:	48000800 	.word	0x48000800
 8002a74:	48000400 	.word	0x48000400
 8002a78:	200000e0 	.word	0x200000e0
 8002a7c:	200000e6 	.word	0x200000e6
 8002a80:	200000e7 	.word	0x200000e7
 8002a84:	200000b0 	.word	0x200000b0
                        break;
 8002a88:	bf00      	nop
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8002a8a:	f003 f829 	bl	8005ae0 <HAL_GetTick>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a67      	ldr	r2, [pc, #412]	; (8002c30 <_Z8menuLoopv+0x400>)
 8002a92:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8002a94:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <_Z8menuLoopv+0x404>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f43f aee0 	beq.w	800286c <_Z8menuLoopv+0x3c>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8002aac:	f003 f818 	bl	8005ae0 <HAL_GetTick>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4a61      	ldr	r2, [pc, #388]	; (8002c38 <_Z8menuLoopv+0x408>)
 8002ab4:	6013      	str	r3, [r2, #0]
            if (!(GPIOB->IDR & GPIO_PIN_8))
 8002ab6:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <_Z8menuLoopv+0x40c>)
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f43f aecf 	beq.w	800286c <_Z8menuLoopv+0x3c>
            {

                displayTimeout = HAL_GetTick();
 8002ace:	f003 f807 	bl	8005ae0 <HAL_GetTick>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <_Z8menuLoopv+0x408>)
 8002ad6:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002ad8:	f003 f802 	bl	8005ae0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b54      	ldr	r3, [pc, #336]	; (8002c30 <_Z8menuLoopv+0x400>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002ae8:	bf8c      	ite	hi
 8002aea:	2301      	movhi	r3, #1
 8002aec:	2300      	movls	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f43f aebb 	beq.w	800286c <_Z8menuLoopv+0x3c>
                {
                    if (!menuItemSelect)
 8002af6:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <_Z8menuLoopv+0x410>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	f083 0301 	eor.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d03b      	beq.n	8002b7c <_Z8menuLoopv+0x34c>
                    { //if scrolling through menu items
                        switch (menuItem)
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <_Z8menuLoopv+0x414>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	f200 8084 	bhi.w	8002c16 <_Z8menuLoopv+0x3e6>
 8002b0e:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <_Z8menuLoopv+0x2e4>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b29 	.word	0x08002b29
 8002b18:	08002b31 	.word	0x08002b31
 8002b1c:	08002b39 	.word	0x08002b39
 8002b20:	08002b5f 	.word	0x08002b5f
 8002b24:	08002b67 	.word	0x08002b67
                        {
                        case 0: //Rate
                            menuItemSelect = true;
 8002b28:	4b45      	ldr	r3, [pc, #276]	; (8002c40 <_Z8menuLoopv+0x410>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
                            break;
 8002b2e:	e072      	b.n	8002c16 <_Z8menuLoopv+0x3e6>
                        case 1: //Offset
                            menuItemSelect = true;
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <_Z8menuLoopv+0x410>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
                            //offsetAlert();
                            ///while (GPIOC->IDR & GPIO_PIN_13)
                            //{displayTimeout = HAL_GetTick();}
                            break;
 8002b36:	e06e      	b.n	8002c16 <_Z8menuLoopv+0x3e6>
                        case 2: //Re-jam
                            reJamAlert();
 8002b38:	f000 f9c4 	bl	8002ec4 <_Z10reJamAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 8002b3c:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <_Z8menuLoopv+0x404>)
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d060      	beq.n	8002c14 <_Z8menuLoopv+0x3e4>
                            {displayTimeout = HAL_GetTick();}
 8002b52:	f002 ffc5 	bl	8005ae0 <HAL_GetTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a37      	ldr	r2, [pc, #220]	; (8002c38 <_Z8menuLoopv+0x408>)
 8002b5a:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8002b5c:	e7ee      	b.n	8002b3c <_Z8menuLoopv+0x30c>
                            break;
                        case 3: //Auto-Off
                            menuItemSelect = true;
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <_Z8menuLoopv+0x410>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
                            break;
 8002b64:	e057      	b.n	8002c16 <_Z8menuLoopv+0x3e6>
                        case 4: //Exit menu
                            buttonTime = HAL_GetTick();
 8002b66:	f002 ffbb 	bl	8005ae0 <HAL_GetTick>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <_Z8menuLoopv+0x400>)
 8002b6e:	6013      	str	r3, [r2, #0]
                            //menuCount = HAL_GetTick();
                            //GPIOH->ODR |= GPIO_PIN_3; //Not sure what this does
                            //Write to EEPROM
                            inMenu = false;
 8002b70:	2300      	movs	r3, #0
 8002b72:	71fb      	strb	r3, [r7, #7]
                            uptimeMinutes = 0;
 8002b74:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <_Z8menuLoopv+0x418>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	801a      	strh	r2, [r3, #0]
                            break;
 8002b7a:	e04c      	b.n	8002c16 <_Z8menuLoopv+0x3e6>
                        }
                    }
                    else //Exit menu option
                    {
                        switch (menuItem)
 8002b7c:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <_Z8menuLoopv+0x414>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d848      	bhi.n	8002c16 <_Z8menuLoopv+0x3e6>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <_Z8menuLoopv+0x35c>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002b9d 	.word	0x08002b9d
 8002b90:	08002bd3 	.word	0x08002bd3
 8002b94:	08002c01 	.word	0x08002c01
 8002b98:	08002c0d 	.word	0x08002c0d
                        {
                        case 0: //Rate
                            menuItemSelect = false;
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <_Z8menuLoopv+0x410>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
                            rateAlert();
 8002ba2:	f000 f857 	bl	8002c54 <_Z9rateAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <_Z8menuLoopv+0x404>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <_Z8menuLoopv+0x398>
                            {displayTimeout = HAL_GetTick();}
 8002bbc:	f002 ff90 	bl	8005ae0 <HAL_GetTick>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <_Z8menuLoopv+0x408>)
 8002bc4:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8002bc6:	e7ee      	b.n	8002ba6 <_Z8menuLoopv+0x376>
                            rateAdjust = frameRate;
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <_Z8menuLoopv+0x41c>)
 8002bca:	781a      	ldrb	r2, [r3, #0]
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <_Z8menuLoopv+0x420>)
 8002bce:	701a      	strb	r2, [r3, #0]
                            break;
 8002bd0:	e021      	b.n	8002c16 <_Z8menuLoopv+0x3e6>
                        case 1: //Offset
                            offsetAlert();
 8002bd2:	f000 f909 	bl	8002de8 <_Z11offsetAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <_Z8menuLoopv+0x404>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <_Z8menuLoopv+0x3c8>
                            {displayTimeout = HAL_GetTick();}
 8002bec:	f002 ff78 	bl	8005ae0 <HAL_GetTick>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4a11      	ldr	r2, [pc, #68]	; (8002c38 <_Z8menuLoopv+0x408>)
 8002bf4:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8002bf6:	e7ee      	b.n	8002bd6 <_Z8menuLoopv+0x3a6>
                            menuItemSelect = false;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <_Z8menuLoopv+0x410>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
                            break;
 8002bfe:	e00a      	b.n	8002c16 <_Z8menuLoopv+0x3e6>
                        case 2: //Re-Jam
                            reJamAlert();
 8002c00:	f000 f960 	bl	8002ec4 <_Z10reJamAlertv>
                            menuItemSelect = false;
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <_Z8menuLoopv+0x410>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
                            break;
 8002c0a:	e004      	b.n	8002c16 <_Z8menuLoopv+0x3e6>
                        case 3: //Auto-Off
                            menuItemSelect = false;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <_Z8menuLoopv+0x410>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
                            break;
 8002c12:	e000      	b.n	8002c16 <_Z8menuLoopv+0x3e6>
                            break;
 8002c14:	bf00      	nop
                        }
                    }
                    buttonTime = HAL_GetTick(); //Debounce timer
 8002c16:	f002 ff63 	bl	8005ae0 <HAL_GetTick>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <_Z8menuLoopv+0x400>)
 8002c1e:	6013      	str	r3, [r2, #0]
    while (inMenu)
 8002c20:	e624      	b.n	800286c <_Z8menuLoopv+0x3c>
                }
            }
        }
    }
    updateDisplay(0x0);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fe fd36 	bl	8001694 <_Z13updateDisplayh>
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200000e0 	.word	0x200000e0
 8002c34:	48000800 	.word	0x48000800
 8002c38:	200000dc 	.word	0x200000dc
 8002c3c:	48000400 	.word	0x48000400
 8002c40:	200000e6 	.word	0x200000e6
 8002c44:	200000e7 	.word	0x200000e7
 8002c48:	200000b2 	.word	0x200000b2
 8002c4c:	200000a9 	.word	0x200000a9
 8002c50:	200000e4 	.word	0x200000e4

08002c54 <_Z9rateAlertv>:
        break;
    }
}

void rateAlert()
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 8002c5e:	4b5b      	ldr	r3, [pc, #364]	; (8002dcc <_Z9rateAlertv+0x178>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x5);
 8002c64:	2005      	movs	r0, #5
 8002c66:	f7fe fd15 	bl	8001694 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8002c6a:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <_Z9rateAlertv+0x17c>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf14      	ite	ne
 8002c76:	2301      	movne	r3, #1
 8002c78:	2300      	moveq	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d000      	beq.n	8002c82 <_Z9rateAlertv+0x2e>
 8002c80:	e7f3      	b.n	8002c6a <_Z9rateAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 809c 	beq.w	8002dc2 <_Z9rateAlertv+0x16e>
    {
        updateDisplay(0x5);
 8002c8a:	2005      	movs	r0, #5
 8002c8c:	f7fe fd02 	bl	8001694 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8002c90:	f002 ff26 	bl	8005ae0 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <_Z9rateAlertv+0x180>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf8c      	ite	hi
 8002ca4:	2301      	movhi	r3, #1
 8002ca6:	2300      	movls	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <_Z9rateAlertv+0x64>
        {
            highlightYes = false;
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <_Z9rateAlertv+0x178>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 8002cb8:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <_Z9rateAlertv+0x184>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01e      	beq.n	8002d0c <_Z9rateAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8002cce:	f002 ff07 	bl	8005ae0 <HAL_GetTick>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4a3f      	ldr	r2, [pc, #252]	; (8002dd4 <_Z9rateAlertv+0x180>)
 8002cd6:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002cd8:	f002 ff02 	bl	8005ae0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <_Z9rateAlertv+0x188>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002ce8:	bf8c      	ite	hi
 8002cea:	2301      	movhi	r3, #1
 8002cec:	2300      	movls	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <_Z9rateAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 8002cf4:	4b35      	ldr	r3, [pc, #212]	; (8002dcc <_Z9rateAlertv+0x178>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	f083 0301 	eor.w	r3, r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <_Z9rateAlertv+0x178>)
 8002d00:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8002d02:	f002 feed 	bl	8005ae0 <HAL_GetTick>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a34      	ldr	r2, [pc, #208]	; (8002ddc <_Z9rateAlertv+0x188>)
 8002d0a:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <_Z9rateAlertv+0x184>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01e      	beq.n	8002d60 <_Z9rateAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 8002d22:	f002 fedd 	bl	8005ae0 <HAL_GetTick>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4a2a      	ldr	r2, [pc, #168]	; (8002dd4 <_Z9rateAlertv+0x180>)
 8002d2a:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002d2c:	f002 fed8 	bl	8005ae0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <_Z9rateAlertv+0x188>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002d3c:	bf8c      	ite	hi
 8002d3e:	2301      	movhi	r3, #1
 8002d40:	2300      	movls	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <_Z9rateAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <_Z9rateAlertv+0x178>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f083 0301 	eor.w	r3, r3, #1
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <_Z9rateAlertv+0x178>)
 8002d54:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8002d56:	f002 fec3 	bl	8005ae0 <HAL_GetTick>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <_Z9rateAlertv+0x188>)
 8002d5e:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <_Z9rateAlertv+0x17c>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d085      	beq.n	8002c82 <_Z9rateAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8002d76:	f002 feb3 	bl	8005ae0 <HAL_GetTick>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <_Z9rateAlertv+0x180>)
 8002d7e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002d80:	f002 feae 	bl	8005ae0 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <_Z9rateAlertv+0x188>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002d90:	bf8c      	ite	hi
 8002d92:	2301      	movhi	r3, #1
 8002d94:	2300      	movls	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f43f af72 	beq.w	8002c82 <_Z9rateAlertv+0x2e>
            {
                if (highlightYes)
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <_Z9rateAlertv+0x178>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <_Z9rateAlertv+0x16a>
                {
                    frameRate = rateAdjust;
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <_Z9rateAlertv+0x18c>)
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <_Z9rateAlertv+0x190>)
 8002dac:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 8002dae:	f000 fa19 	bl	80031e4 <_Z13resetTimecodev>
                    highlightYes = false;
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <_Z9rateAlertv+0x178>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
                    inLoop = false;
 8002db8:	2300      	movs	r3, #0
 8002dba:	71fb      	strb	r3, [r7, #7]
                    break;
 8002dbc:	e001      	b.n	8002dc2 <_Z9rateAlertv+0x16e>
                }
                inLoop = false;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	71fb      	strb	r3, [r7, #7]
                break;
                buttonTime = HAL_GetTick(); //Debounce timer
            }
        }
    }
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200000e8 	.word	0x200000e8
 8002dd0:	48000800 	.word	0x48000800
 8002dd4:	200000dc 	.word	0x200000dc
 8002dd8:	48000400 	.word	0x48000400
 8002ddc:	200000e0 	.word	0x200000e0
 8002de0:	200000e4 	.word	0x200000e4
 8002de4:	200000a9 	.word	0x200000a9

08002de8 <_Z11offsetAlertv>:

void offsetAlert()
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8002dee:	2301      	movs	r3, #1
 8002df0:	71fb      	strb	r3, [r7, #7]
    updateDisplay(0x6);
 8002df2:	2006      	movs	r0, #6
 8002df4:	f7fe fc4e 	bl	8001694 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8002df8:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <_Z11offsetAlertv+0xc4>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d000      	beq.n	8002e10 <_Z11offsetAlertv+0x28>
 8002e0e:	e7f3      	b.n	8002df8 <_Z11offsetAlertv+0x10>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d046      	beq.n	8002ea4 <_Z11offsetAlertv+0xbc>
    {
        updateDisplay(0x6);
 8002e16:	2006      	movs	r0, #6
 8002e18:	f7fe fc3c 	bl	8001694 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 8000)
 8002e1c:	f002 fe60 	bl	8005ae0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <_Z11offsetAlertv+0xc8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002e2c:	bf8c      	ite	hi
 8002e2e:	2301      	movhi	r3, #1
 8002e30:	2300      	movls	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <_Z11offsetAlertv+0x5a>
        {
            highlightYes = false;
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <_Z11offsetAlertv+0xcc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <_Z11offsetAlertv+0xc4>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0db      	beq.n	8002e10 <_Z11offsetAlertv+0x28>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8002e58:	f002 fe42 	bl	8005ae0 <HAL_GetTick>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <_Z11offsetAlertv+0xc8>)
 8002e60:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002e62:	f002 fe3d 	bl	8005ae0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <_Z11offsetAlertv+0xd0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002e72:	bf8c      	ite	hi
 8002e74:	2301      	movhi	r3, #1
 8002e76:	2300      	movls	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0c8      	beq.n	8002e10 <_Z11offsetAlertv+0x28>
            {
                //Add/subtract offset to current frame?
                //Set offset for future jams?
                intOffset = offsetAdjust;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <_Z11offsetAlertv+0xd4>)
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <_Z11offsetAlertv+0xd8>)
 8002e84:	701a      	strb	r2, [r3, #0]
                highlightYes = !highlightYes;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <_Z11offsetAlertv+0xcc>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	f083 0301 	eor.w	r3, r3, #1
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <_Z11offsetAlertv+0xcc>)
 8002e92:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8002e94:	f002 fe24 	bl	8005ae0 <HAL_GetTick>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <_Z11offsetAlertv+0xd0>)
 8002e9c:	6013      	str	r3, [r2, #0]
                inLoop = false;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 8002ea2:	e7b5      	b.n	8002e10 <_Z11offsetAlertv+0x28>
            }
        }
    }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	48000800 	.word	0x48000800
 8002eb0:	200000dc 	.word	0x200000dc
 8002eb4:	200000e8 	.word	0x200000e8
 8002eb8:	200000e0 	.word	0x200000e0
 8002ebc:	200000e5 	.word	0x200000e5
 8002ec0:	20000018 	.word	0x20000018

08002ec4 <_Z10reJamAlertv>:

void reJamAlert()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 8002ece:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <_Z10reJamAlertv+0x184>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x7);
 8002ed4:	2007      	movs	r0, #7
 8002ed6:	f7fe fbdd 	bl	8001694 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8002eda:	4b5c      	ldr	r3, [pc, #368]	; (800304c <_Z10reJamAlertv+0x188>)
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	bf14      	ite	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	2300      	moveq	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d000      	beq.n	8002ef2 <_Z10reJamAlertv+0x2e>
 8002ef0:	e7f3      	b.n	8002eda <_Z10reJamAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a3 	beq.w	8003040 <_Z10reJamAlertv+0x17c>
    {
        updateDisplay(0x7);
 8002efa:	2007      	movs	r0, #7
 8002efc:	f7fe fbca 	bl	8001694 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8002f00:	f002 fdee 	bl	8005ae0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b52      	ldr	r3, [pc, #328]	; (8003050 <_Z10reJamAlertv+0x18c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf8c      	ite	hi
 8002f14:	2301      	movhi	r3, #1
 8002f16:	2300      	movls	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <_Z10reJamAlertv+0x64>
        {
            highlightYes = false;
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <_Z10reJamAlertv+0x184>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8002f24:	2300      	movs	r3, #0
 8002f26:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 8002f28:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <_Z10reJamAlertv+0x190>)
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01e      	beq.n	8002f7c <_Z10reJamAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8002f3e:	f002 fdcf 	bl	8005ae0 <HAL_GetTick>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4a42      	ldr	r2, [pc, #264]	; (8003050 <_Z10reJamAlertv+0x18c>)
 8002f46:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002f48:	f002 fdca 	bl	8005ae0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b42      	ldr	r3, [pc, #264]	; (8003058 <_Z10reJamAlertv+0x194>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002f58:	bf8c      	ite	hi
 8002f5a:	2301      	movhi	r3, #1
 8002f5c:	2300      	movls	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <_Z10reJamAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 8002f64:	4b38      	ldr	r3, [pc, #224]	; (8003048 <_Z10reJamAlertv+0x184>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	f083 0301 	eor.w	r3, r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <_Z10reJamAlertv+0x184>)
 8002f70:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8002f72:	f002 fdb5 	bl	8005ae0 <HAL_GetTick>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4a37      	ldr	r2, [pc, #220]	; (8003058 <_Z10reJamAlertv+0x194>)
 8002f7a:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <_Z10reJamAlertv+0x190>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01e      	beq.n	8002fd0 <_Z10reJamAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 8002f92:	f002 fda5 	bl	8005ae0 <HAL_GetTick>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <_Z10reJamAlertv+0x18c>)
 8002f9a:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002f9c:	f002 fda0 	bl	8005ae0 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <_Z10reJamAlertv+0x194>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002fac:	bf8c      	ite	hi
 8002fae:	2301      	movhi	r3, #1
 8002fb0:	2300      	movls	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <_Z10reJamAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 8002fb8:	4b23      	ldr	r3, [pc, #140]	; (8003048 <_Z10reJamAlertv+0x184>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	f083 0301 	eor.w	r3, r3, #1
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <_Z10reJamAlertv+0x184>)
 8002fc4:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8002fc6:	f002 fd8b 	bl	8005ae0 <HAL_GetTick>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4a22      	ldr	r2, [pc, #136]	; (8003058 <_Z10reJamAlertv+0x194>)
 8002fce:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <_Z10reJamAlertv+0x188>)
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d085      	beq.n	8002ef2 <_Z10reJamAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8002fe6:	f002 fd7b 	bl	8005ae0 <HAL_GetTick>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <_Z10reJamAlertv+0x18c>)
 8002fee:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002ff0:	f002 fd76 	bl	8005ae0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <_Z10reJamAlertv+0x194>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003000:	bf8c      	ite	hi
 8003002:	2301      	movhi	r3, #1
 8003004:	2300      	movls	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	f43f af72 	beq.w	8002ef2 <_Z10reJamAlertv+0x2e>
            {
                if (highlightYes)
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <_Z10reJamAlertv+0x184>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <_Z10reJamAlertv+0x16c>
                {
                    frameRate = rateAdjust;
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <_Z10reJamAlertv+0x198>)
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <_Z10reJamAlertv+0x19c>)
 800301c:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 800301e:	f000 f8e1 	bl	80031e4 <_Z13resetTimecodev>
                    highlightYes = !highlightYes;
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <_Z10reJamAlertv+0x184>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	f083 0301 	eor.w	r3, r3, #1
 800302a:	b2da      	uxtb	r2, r3
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <_Z10reJamAlertv+0x184>)
 800302e:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8003030:	f002 fd56 	bl	8005ae0 <HAL_GetTick>
 8003034:	4603      	mov	r3, r0
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <_Z10reJamAlertv+0x194>)
 8003038:	6013      	str	r3, [r2, #0]
                inLoop = false;
 800303a:	2300      	movs	r3, #0
 800303c:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 800303e:	e758      	b.n	8002ef2 <_Z10reJamAlertv+0x2e>
            }
        }
    }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	200000e8 	.word	0x200000e8
 800304c:	48000800 	.word	0x48000800
 8003050:	200000dc 	.word	0x200000dc
 8003054:	48000400 	.word	0x48000400
 8003058:	200000e0 	.word	0x200000e0
 800305c:	200000e4 	.word	0x200000e4
 8003060:	200000a9 	.word	0x200000a9

08003064 <_Z12initTimecodev>:

/* Init Timecode
* Get the current frame count based on the data read in from the timer
*TODO: Add in the user variables
*/
bool initTimecode(){
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
  int hr = int(tcIN[1] & 0x0F) + (int(tcIN[0] & 0x03)*10);
 800306a:	4b55      	ldr	r3, [pc, #340]	; (80031c0 <_Z12initTimecodev+0x15c>)
 800306c:	785b      	ldrb	r3, [r3, #1]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f003 010f 	and.w	r1, r3, #15
 8003074:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <_Z12initTimecodev+0x15c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 0203 	and.w	r2, r3, #3
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	440b      	add	r3, r1
 8003088:	60fb      	str	r3, [r7, #12]
  int mn = int(tcIN[3] & 0x0F) + (int(tcIN[2] & 0x07)*10);
 800308a:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <_Z12initTimecodev+0x15c>)
 800308c:	78db      	ldrb	r3, [r3, #3]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f003 010f 	and.w	r1, r3, #15
 8003094:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <_Z12initTimecodev+0x15c>)
 8003096:	789b      	ldrb	r3, [r3, #2]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0207 	and.w	r2, r3, #7
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	440b      	add	r3, r1
 80030a8:	60bb      	str	r3, [r7, #8]
  int sc = int(tcIN[5] & 0x0F) + (int(tcIN[4] & 0x07)*10);
 80030aa:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <_Z12initTimecodev+0x15c>)
 80030ac:	795b      	ldrb	r3, [r3, #5]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 010f 	and.w	r1, r3, #15
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <_Z12initTimecodev+0x15c>)
 80030b6:	791b      	ldrb	r3, [r3, #4]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0207 	and.w	r2, r3, #7
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	440b      	add	r3, r1
 80030c8:	607b      	str	r3, [r7, #4]
  int fr = int(tcIN[7] & 0x0F) + (int(tcIN[6] & 0x03)*10);
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <_Z12initTimecodev+0x15c>)
 80030cc:	79db      	ldrb	r3, [r3, #7]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f003 010f 	and.w	r1, r3, #15
 80030d4:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <_Z12initTimecodev+0x15c>)
 80030d6:	799b      	ldrb	r3, [r3, #6]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0203 	and.w	r2, r3, #3
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	440b      	add	r3, r1
 80030e8:	603b      	str	r3, [r7, #0]
  clockFrame = (hr * 60 * 60 * frameRateDivisor[frameRate]) + (mn * 60 * frameRateDivisor[frameRate]) + (sc * frameRateDivisor[frameRate]) + fr;
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <_Z12initTimecodev+0x160>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <_Z12initTimecodev+0x164>)
 80030f2:	5c9b      	ldrb	r3, [r3, r2]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	fb03 f302 	mul.w	r3, r3, r2
 80030fc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003100:	fb02 f103 	mul.w	r1, r2, r3
 8003104:	4b2f      	ldr	r3, [pc, #188]	; (80031c4 <_Z12initTimecodev+0x160>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <_Z12initTimecodev+0x164>)
 800310c:	5c9b      	ldrb	r3, [r3, r2]
 800310e:	461a      	mov	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	fb03 f202 	mul.w	r2, r3, r2
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	18ca      	adds	r2, r1, r3
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <_Z12initTimecodev+0x160>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <_Z12initTimecodev+0x164>)
 8003128:	5c5b      	ldrb	r3, [r3, r1]
 800312a:	4619      	mov	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	fb03 f301 	mul.w	r3, r3, r1
 8003132:	441a      	add	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <_Z12initTimecodev+0x168>)
 800313c:	601a      	str	r2, [r3, #0]
  //__HAL_TIM_SET_AUTORELOAD(outTIM,frameRateARR[frameRate]);
  if (intOffset > 30)
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <_Z12initTimecodev+0x16c>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b1e      	cmp	r3, #30
 8003144:	d909      	bls.n	800315a <_Z12initTimecodev+0xf6>
  {
    clockFrame += (intOffset - 30);
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <_Z12initTimecodev+0x16c>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <_Z12initTimecodev+0x168>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4413      	add	r3, r2
 8003152:	3b1e      	subs	r3, #30
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <_Z12initTimecodev+0x168>)
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e00c      	b.n	8003174 <_Z12initTimecodev+0x110>
  }
  else if (intOffset < 30)
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <_Z12initTimecodev+0x16c>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b1d      	cmp	r3, #29
 8003160:	d808      	bhi.n	8003174 <_Z12initTimecodev+0x110>
  {
    clockFrame -= (30-intOffset);
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <_Z12initTimecodev+0x16c>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <_Z12initTimecodev+0x168>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4413      	add	r3, r2
 800316e:	3b1e      	subs	r3, #30
 8003170:	4a16      	ldr	r2, [pc, #88]	; (80031cc <_Z12initTimecodev+0x168>)
 8003172:	6013      	str	r3, [r2, #0]
  }
  countTIM->Instance->ARR = frameRateARR[frameRate];
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <_Z12initTimecodev+0x160>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <_Z12initTimecodev+0x170>)
 800317c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <_Z12initTimecodev+0x174>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c
  countTIM->Init.Period = frameRateARR[frameRate];
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <_Z12initTimecodev+0x160>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <_Z12initTimecodev+0x170>)
 8003190:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003194:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <_Z12initTimecodev+0x174>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(countTIM);
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <_Z12initTimecodev+0x174>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f006 fa78 	bl	8009694 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(outTIM);
 80031a4:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <_Z12initTimecodev+0x178>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f006 fa73 	bl	8009694 <HAL_TIM_Base_Start_IT>
  tcJammed = true;
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <_Z12initTimecodev+0x17c>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
}
 80031b4:	bf00      	nop
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200000a0 	.word	0x200000a0
 80031c4:	200000a9 	.word	0x200000a9
 80031c8:	20000034 	.word	0x20000034
 80031cc:	200000ac 	.word	0x200000ac
 80031d0:	20000018 	.word	0x20000018
 80031d4:	2000003c 	.word	0x2000003c
 80031d8:	2000005c 	.word	0x2000005c
 80031dc:	20000058 	.word	0x20000058
 80031e0:	200000a8 	.word	0x200000a8

080031e4 <_Z13resetTimecodev>:

/* Reset Timecode
* Simple function to reset all timers and variables back to
* pre-jam state
*/
bool resetTimecode(){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
    clockFrame = 0;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <_Z13resetTimecodev+0x38>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(countTIM);
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <_Z13resetTimecodev+0x3c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f006 faa2 	bl	800973c <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(outTIM);
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <_Z13resetTimecodev+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f006 fa9d 	bl	800973c <HAL_TIM_Base_Stop_IT>
    //countTIM->Instance->ARR = frameRateARR[frameRate];
    //countTIM->Init.Period = frameRateARR[frameRate];
    //__HAL_TIM_SET_AUTORELOAD(&outTIM,frameRateARR[frameRate]);
    HAL_TIM_IC_Start_IT(inTIM, TIM_CHANNEL_3);
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <_Z13resetTimecodev+0x44>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2108      	movs	r1, #8
 8003208:	4618      	mov	r0, r3
 800320a:	f006 fb1d 	bl	8009848 <HAL_TIM_IC_Start_IT>
    tcJammed = false;
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <_Z13resetTimecodev+0x48>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
    //timer2 input yes
    //timer6 output no
}
 8003214:	bf00      	nop
 8003216:	4618      	mov	r0, r3
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200000ac 	.word	0x200000ac
 8003220:	2000005c 	.word	0x2000005c
 8003224:	20000058 	.word	0x20000058
 8003228:	20000054 	.word	0x20000054
 800322c:	200000a8 	.word	0x200000a8

08003230 <_Z10frameCheckv>:
*
*
*/

void frameCheck()
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  switch(frameRate)
 8003234:	4b60      	ldr	r3, [pc, #384]	; (80033b8 <_Z10frameCheckv+0x188>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b05      	cmp	r3, #5
 800323a:	f200 80b8 	bhi.w	80033ae <_Z10frameCheckv+0x17e>
 800323e:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <_Z10frameCheckv+0x14>)
 8003240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003244:	0800325d 	.word	0x0800325d
 8003248:	0800327b 	.word	0x0800327b
 800324c:	08003299 	.word	0x08003299
 8003250:	080032b5 	.word	0x080032b5
 8003254:	080032d1 	.word	0x080032d1
 8003258:	0800337d 	.word	0x0800337d
  {
    case 0: //23.98
      if (clockFrame == 2073600)
 800325c:	4b57      	ldr	r3, [pc, #348]	; (80033bc <_Z10frameCheckv+0x18c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <_Z10frameCheckv+0x190>)
 8003262:	4293      	cmp	r3, r2
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8093 	beq.w	8003398 <_Z10frameCheckv+0x168>
        clockFrame = 0;
 8003272:	4b52      	ldr	r3, [pc, #328]	; (80033bc <_Z10frameCheckv+0x18c>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
      break;
 8003278:	e08e      	b.n	8003398 <_Z10frameCheckv+0x168>
    case 1: //24
      if (clockFrame == 2073600)
 800327a:	4b50      	ldr	r3, [pc, #320]	; (80033bc <_Z10frameCheckv+0x18c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a50      	ldr	r2, [pc, #320]	; (80033c0 <_Z10frameCheckv+0x190>)
 8003280:	4293      	cmp	r3, r2
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8086 	beq.w	800339c <_Z10frameCheckv+0x16c>
        clockFrame = 0;
 8003290:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <_Z10frameCheckv+0x18c>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
      break;
 8003296:	e081      	b.n	800339c <_Z10frameCheckv+0x16c>
    case 2: //25
      if (clockFrame == 2160000)
 8003298:	4b48      	ldr	r3, [pc, #288]	; (80033bc <_Z10frameCheckv+0x18c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a49      	ldr	r2, [pc, #292]	; (80033c4 <_Z10frameCheckv+0x194>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d079      	beq.n	80033a0 <_Z10frameCheckv+0x170>
        clockFrame = 0;
 80032ac:	4b43      	ldr	r3, [pc, #268]	; (80033bc <_Z10frameCheckv+0x18c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
      break;
 80032b2:	e075      	b.n	80033a0 <_Z10frameCheckv+0x170>
    case 3: //29.97
      if (clockFrame == 2592000)
 80032b4:	4b41      	ldr	r3, [pc, #260]	; (80033bc <_Z10frameCheckv+0x18c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a43      	ldr	r2, [pc, #268]	; (80033c8 <_Z10frameCheckv+0x198>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	bf0c      	ite	eq
 80032be:	2301      	moveq	r3, #1
 80032c0:	2300      	movne	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d06d      	beq.n	80033a4 <_Z10frameCheckv+0x174>
        clockFrame = 0;
 80032c8:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <_Z10frameCheckv+0x18c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
      break;
 80032ce:	e069      	b.n	80033a4 <_Z10frameCheckv+0x174>
    case 4: //29.97 DF
      if (clockFrame == 2592000)
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <_Z10frameCheckv+0x18c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3c      	ldr	r2, [pc, #240]	; (80033c8 <_Z10frameCheckv+0x198>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bf0c      	ite	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	2300      	movne	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <_Z10frameCheckv+0xba>
        clockFrame = 0;
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <_Z10frameCheckv+0x18c>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
      if (clockFrame % 30 == 29 && (clockFrame / 30) % 60 == 59 && ((((clockFrame / 30) / 60) % 60)+1) % 10 != 0 )
 80032ea:	4b34      	ldr	r3, [pc, #208]	; (80033bc <_Z10frameCheckv+0x18c>)
 80032ec:	6819      	ldr	r1, [r3, #0]
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <_Z10frameCheckv+0x19c>)
 80032f0:	fba3 2301 	umull	r2, r3, r3, r1
 80032f4:	091a      	lsrs	r2, r3, #4
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	1aca      	subs	r2, r1, r3
 8003300:	2a1d      	cmp	r2, #29
 8003302:	d12d      	bne.n	8003360 <_Z10frameCheckv+0x130>
 8003304:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <_Z10frameCheckv+0x18c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a30      	ldr	r2, [pc, #192]	; (80033cc <_Z10frameCheckv+0x19c>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0919      	lsrs	r1, r3, #4
 8003310:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <_Z10frameCheckv+0x19c>)
 8003312:	fba3 2301 	umull	r2, r3, r3, r1
 8003316:	095a      	lsrs	r2, r3, #5
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	1aca      	subs	r2, r1, r3
 8003322:	2a3b      	cmp	r2, #59	; 0x3b
 8003324:	d11c      	bne.n	8003360 <_Z10frameCheckv+0x130>
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <_Z10frameCheckv+0x18c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <_Z10frameCheckv+0x1a0>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0a99      	lsrs	r1, r3, #10
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <_Z10frameCheckv+0x19c>)
 8003334:	fba3 2301 	umull	r2, r3, r3, r1
 8003338:	095a      	lsrs	r2, r3, #5
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	1aca      	subs	r2, r1, r3
 8003344:	1c51      	adds	r1, r2, #1
 8003346:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <_Z10frameCheckv+0x1a4>)
 8003348:	fba3 2301 	umull	r2, r3, r3, r1
 800334c:	08da      	lsrs	r2, r3, #3
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	1aca      	subs	r2, r1, r3
 8003358:	2a00      	cmp	r2, #0
 800335a:	d001      	beq.n	8003360 <_Z10frameCheckv+0x130>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <_Z10frameCheckv+0x132>
 8003360:	2300      	movs	r3, #0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d020      	beq.n	80033a8 <_Z10frameCheckv+0x178>
        {
          clockFrame++; 
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <_Z10frameCheckv+0x18c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	4a13      	ldr	r2, [pc, #76]	; (80033bc <_Z10frameCheckv+0x18c>)
 800336e:	6013      	str	r3, [r2, #0]
          clockFrame++;
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <_Z10frameCheckv+0x18c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	4a11      	ldr	r2, [pc, #68]	; (80033bc <_Z10frameCheckv+0x18c>)
 8003378:	6013      	str	r3, [r2, #0]
        }
      break;
 800337a:	e015      	b.n	80033a8 <_Z10frameCheckv+0x178>
    case 5: //30
      if (clockFrame == 2592000)
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <_Z10frameCheckv+0x18c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <_Z10frameCheckv+0x198>)
 8003382:	4293      	cmp	r3, r2
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <_Z10frameCheckv+0x17c>
        clockFrame = 0;
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <_Z10frameCheckv+0x18c>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
      break;
 8003396:	e009      	b.n	80033ac <_Z10frameCheckv+0x17c>
      break;
 8003398:	bf00      	nop
 800339a:	e008      	b.n	80033ae <_Z10frameCheckv+0x17e>
      break;
 800339c:	bf00      	nop
 800339e:	e006      	b.n	80033ae <_Z10frameCheckv+0x17e>
      break;
 80033a0:	bf00      	nop
 80033a2:	e004      	b.n	80033ae <_Z10frameCheckv+0x17e>
      break;
 80033a4:	bf00      	nop
 80033a6:	e002      	b.n	80033ae <_Z10frameCheckv+0x17e>
      break;
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <_Z10frameCheckv+0x17e>
      break;
 80033ac:	bf00      	nop
  }
}
 80033ae:	bf00      	nop
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	200000a9 	.word	0x200000a9
 80033bc:	200000ac 	.word	0x200000ac
 80033c0:	001fa400 	.word	0x001fa400
 80033c4:	0020f580 	.word	0x0020f580
 80033c8:	00278d00 	.word	0x00278d00
 80033cc:	88888889 	.word	0x88888889
 80033d0:	91a2b3c5 	.word	0x91a2b3c5
 80033d4:	cccccccd 	.word	0xcccccccd

080033d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033de:	f002 fb16 	bl	8005a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033e2:	f000 fce9 	bl	8003db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033e6:	f001 f80b 	bl	8004400 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80033ea:	f000 fd83 	bl	8003ef4 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 80033ee:	f000 fdef 	bl	8003fd0 <_ZL12MX_DAC1_Initv>
  MX_I2C1_Init();
 80033f2:	f000 fe29 	bl	8004048 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80033f6:	f000 fe75 	bl	80040e4 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 80033fa:	f000 fec5 	bl	8004188 <_ZL12MX_TIM2_Initv>
  MX_TIM6_Init();
 80033fe:	f000 ff25 	bl	800424c <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8003402:	f000 ff63 	bl	80042cc <_ZL12MX_TIM7_Initv>
  MX_TIM16_Init();
 8003406:	f000 ffa1 	bl	800434c <_ZL13MX_TIM16_Initv>
  MX_USB_PCD_Init();
 800340a:	f000 ffcb 	bl	80043a4 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */
  DAC1->DHR12R2 = 2048; //Set analog out for TXCO VCO
 800340e:	4b3c      	ldr	r3, [pc, #240]	; (8003500 <main+0x128>)
 8003410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003414:	615a      	str	r2, [r3, #20]

  /*Configure GPIO pin : PC13 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003416:	463b      	mov	r3, r7
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003424:	2301      	movs	r3, #1
 8003426:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003428:	2300      	movs	r3, #0
 800342a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800342c:	2302      	movs	r3, #2
 800342e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	463b      	mov	r3, r7
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003438:	f003 fe7c 	bl	8007134 <HAL_GPIO_Init>

/*if(GPIOA -> IDR & GPIO_PIN_9 || GPIOA -> IDR & GPIO_PIN_10){  //Stat 1 & 2
  powerUpMode = 2;
}*/

if(GPIOA -> IDR & GPIO_PIN_0){  //Power button
 800343c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d025      	beq.n	80034a0 <main+0xc8>
  uint32_t powerupTime = HAL_GetTick();
 8003454:	f002 fb44 	bl	8005ae0 <HAL_GetTick>
 8003458:	61b8      	str	r0, [r7, #24]
  while (GPIOA -> IDR & GPIO_PIN_0){
 800345a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <main+0xc8>
    if (HAL_GetTick() - powerupTime > 2000){
 8003472:	f002 fb35 	bl	8005ae0 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003480:	bf8c      	ite	hi
 8003482:	2301      	movhi	r3, #1
 8003484:	2300      	movls	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0e6      	beq.n	800345a <main+0x82>
      powerUpMode = 1;
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <main+0x12c>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
      GPIOB -> ODR |= GPIO_PIN_12;
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <main+0x130>)
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <main+0x130>)
 8003498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800349c:	6153      	str	r3, [r2, #20]
  while (GPIOA -> IDR & GPIO_PIN_0){
 800349e:	e7dc      	b.n	800345a <main+0x82>
  }
}



if (powerUpMode == 0){
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <main+0x12c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <main+0xdc>
HAL_Delay(500);
 80034a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034ac:	f002 fb24 	bl	8005af8 <HAL_Delay>

    HAL_PWR_EnterSTANDBYMode();
 80034b0:	f004 fec0 	bl	8008234 <HAL_PWR_EnterSTANDBYMode>

}



HAL_Delay(20);
 80034b4:	2014      	movs	r0, #20
 80034b6:	f002 fb1f 	bl	8005af8 <HAL_Delay>
//calWrite = writeCalibration();
calRead = readEEPROM();
 80034ba:	f001 fb1b 	bl	8004af4 <_Z10readEEPROMv>
 80034be:	4603      	mov	r3, r0
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <main+0x134>)
 80034c4:	701a      	strb	r2, [r3, #0]
HAL_Delay(10);
 80034c6:	200a      	movs	r0, #10
 80034c8:	f002 fb16 	bl	8005af8 <HAL_Delay>
  //HAL_Delay(1000);
  //GPIOB -> ODR |= GPIO_PIN_12;  //LED
 // HAL_Delay(1000);

  //GPIOA -> ODR |= GPIO_PIN_8; //Power enable
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3); //Input timer
 80034cc:	2108      	movs	r1, #8
 80034ce:	4810      	ldr	r0, [pc, #64]	; (8003510 <main+0x138>)
 80034d0:	f006 f9ba 	bl	8009848 <HAL_TIM_IC_Start_IT>
  //HAL_TIM_Base_Start(&htim7);
  //HAL_TIM_Base_Start_IT(&htim16);
  //HAL_TIM_Base_Start_IT(&htim6);
    tcWrite[8] = 0b11111100;  //Sync pattern
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <main+0x13c>)
 80034d6:	22fc      	movs	r2, #252	; 0xfc
 80034d8:	721a      	strb	r2, [r3, #8]
  tcWrite[9] = 0b10111111;  //Sync pattern
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <main+0x13c>)
 80034dc:	22bf      	movs	r2, #191	; 0xbf
 80034de:	725a      	strb	r2, [r3, #9]




initDisplay();
 80034e0:	f7fe ff88 	bl	80023f4 <_Z11initDisplayv>

if (GPIOB -> IDR & GPIO_PIN_8 && GPIOB -> IDR & GPIO_PIN_9){
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <main+0x130>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <main+0x140>
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <main+0x130>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <main+0x140>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e00c      	b.n	800351a <main+0x142>
 8003500:	40007400 	.word	0x40007400
 8003504:	20000662 	.word	0x20000662
 8003508:	48000400 	.word	0x48000400
 800350c:	20000061 	.word	0x20000061
 8003510:	200001fc 	.word	0x200001fc
 8003514:	20000634 	.word	0x20000634
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <main+0x14a>
  //Run Calibration menu
  calibrationMenu();
 800351e:	f7fd fe5d 	bl	80011dc <_Z15calibrationMenuv>
}
updateDisplay(0x0);
 8003522:	2000      	movs	r0, #0
 8003524:	f7fe f8b6 	bl	8001694 <_Z13updateDisplayh>
 updateDisplay(0x1);
 8003528:	2001      	movs	r0, #1
 800352a:	f7fe f8b3 	bl	8001694 <_Z13updateDisplayh>
 displayTimer = HAL_GetTick();
 800352e:	f002 fad7 	bl	8005ae0 <HAL_GetTick>
 8003532:	4603      	mov	r3, r0
 8003534:	4aae      	ldr	r2, [pc, #696]	; (80037f0 <main+0x418>)
 8003536:	6013      	str	r3, [r2, #0]
 batteryCheck = HAL_GetTick();
 8003538:	f002 fad2 	bl	8005ae0 <HAL_GetTick>
 800353c:	4603      	mov	r3, r0
 800353e:	4aad      	ldr	r2, [pc, #692]	; (80037f4 <main+0x41c>)
 8003540:	6013      	str	r3, [r2, #0]
 batteryRead();
 8003542:	f7fd fa8b 	bl	8000a5c <_Z11batteryReadv>
 batteryCheck = batteryCheck - 29900;
 8003546:	4bab      	ldr	r3, [pc, #684]	; (80037f4 <main+0x41c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f5a3 43e9 	sub.w	r3, r3, #29824	; 0x7480
 800354e:	3b4c      	subs	r3, #76	; 0x4c
 8003550:	4aa8      	ldr	r2, [pc, #672]	; (80037f4 <main+0x41c>)
 8003552:	6013      	str	r3, [r2, #0]
batteryRead();
 8003554:	f7fd fa82 	bl	8000a5c <_Z11batteryReadv>
    * Only update display every 4th cycle?
    * Run tests on optimal update range
    * Timecode output is top priority
    *
    */
if (HAL_GetTick() - batteryCheck > 30000){
 8003558:	f002 fac2 	bl	8005ae0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	4ba5      	ldr	r3, [pc, #660]	; (80037f4 <main+0x41c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f247 5230 	movw	r2, #30000	; 0x7530
 8003568:	4293      	cmp	r3, r2
 800356a:	bf8c      	ite	hi
 800356c:	2301      	movhi	r3, #1
 800356e:	2300      	movls	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d006      	beq.n	8003584 <main+0x1ac>
  batteryCheck = HAL_GetTick();
 8003576:	f002 fab3 	bl	8005ae0 <HAL_GetTick>
 800357a:	4603      	mov	r3, r0
 800357c:	4a9d      	ldr	r2, [pc, #628]	; (80037f4 <main+0x41c>)
 800357e:	6013      	str	r3, [r2, #0]
  batteryRead();
 8003580:	f7fd fa6c 	bl	8000a5c <_Z11batteryReadv>
}
   if (!isLocked && displayOn){
 8003584:	4b9c      	ldr	r3, [pc, #624]	; (80037f8 <main+0x420>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d025      	beq.n	80035de <main+0x206>
 8003592:	4b9a      	ldr	r3, [pc, #616]	; (80037fc <main+0x424>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d021      	beq.n	80035de <main+0x206>
     if (HAL_GetTick() - displayTimer > 5000){
 800359a:	f002 faa1 	bl	8005ae0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	4b93      	ldr	r3, [pc, #588]	; (80037f0 <main+0x418>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	bf8c      	ite	hi
 80035ae:	2301      	movhi	r3, #1
 80035b0:	2300      	movls	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <main+0x1f2>
       isLocked = true;
 80035b8:	4b8f      	ldr	r3, [pc, #572]	; (80037f8 <main+0x420>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
       displayOn = false;
 80035be:	4b8f      	ldr	r3, [pc, #572]	; (80037fc <main+0x424>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
       updateDisplay(0x0);
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7fe f865 	bl	8001694 <_Z13updateDisplayh>
     }
     if (displayLoopCounter == 120){
 80035ca:	4b8d      	ldr	r3, [pc, #564]	; (8003800 <main+0x428>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b78      	cmp	r3, #120	; 0x78
 80035d0:	d105      	bne.n	80035de <main+0x206>
      updateDisplay(0x1);
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7fe f85e 	bl	8001694 <_Z13updateDisplayh>
      displayLoopCounter = 0;
 80035d8:	4b89      	ldr	r3, [pc, #548]	; (8003800 <main+0x428>)
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
    }
   }

   if (isLocked && displayOn){
 80035de:	4b86      	ldr	r3, [pc, #536]	; (80037f8 <main+0x420>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d022      	beq.n	800362c <main+0x254>
 80035e6:	4b85      	ldr	r3, [pc, #532]	; (80037fc <main+0x424>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d01e      	beq.n	800362c <main+0x254>
     if (HAL_GetTick() - displayTimer > 5000){
 80035ee:	f002 fa77 	bl	8005ae0 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4b7e      	ldr	r3, [pc, #504]	; (80037f0 <main+0x418>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	bf8c      	ite	hi
 8003602:	2301      	movhi	r3, #1
 8003604:	2300      	movls	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <main+0x240>
       displayOn = false;
 800360c:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <main+0x424>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
       updateDisplay(0x0);
 8003612:	2000      	movs	r0, #0
 8003614:	f7fe f83e 	bl	8001694 <_Z13updateDisplayh>
     }
     if (displayLoopCounter == 120){
 8003618:	4b79      	ldr	r3, [pc, #484]	; (8003800 <main+0x428>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b78      	cmp	r3, #120	; 0x78
 800361e:	d105      	bne.n	800362c <main+0x254>
      updateDisplay(0x3);
 8003620:	2003      	movs	r0, #3
 8003622:	f7fe f837 	bl	8001694 <_Z13updateDisplayh>
      displayLoopCounter = 0;
 8003626:	4b76      	ldr	r3, [pc, #472]	; (8003800 <main+0x428>)
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
    }
   }
   //Add in code to turn on display with button press?

   
  displayLoopCounter++;
 800362c:	4b74      	ldr	r3, [pc, #464]	; (8003800 <main+0x428>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	4b72      	ldr	r3, [pc, #456]	; (8003800 <main+0x428>)
 8003636:	701a      	strb	r2, [r3, #0]
frameCheck();
 8003638:	f7ff fdfa 	bl	8003230 <_Z10frameCheckv>
	  stat1 = GPIOA -> IDR & GPIO_PIN_9;
 800363c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	bf14      	ite	ne
 800364a:	2301      	movne	r3, #1
 800364c:	2300      	moveq	r3, #0
 800364e:	b2da      	uxtb	r2, r3
 8003650:	4b6c      	ldr	r3, [pc, #432]	; (8003804 <main+0x42c>)
 8003652:	701a      	strb	r2, [r3, #0]
    stat2 = GPIOA -> IDR & GPIO_PIN_10;
 8003654:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	2b00      	cmp	r3, #0
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2da      	uxtb	r2, r3
 8003668:	4b67      	ldr	r3, [pc, #412]	; (8003808 <main+0x430>)
 800366a:	701a      	strb	r2, [r3, #0]
	    //PA4 STat2
	    //PA5 Stat1
    //if (clockFrame == 2073600) clockFrame = 0;
    clockFrameOutput = clockFrame + 1;
 800366c:	4b67      	ldr	r3, [pc, #412]	; (800380c <main+0x434>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	4a67      	ldr	r2, [pc, #412]	; (8003810 <main+0x438>)
 8003674:	6013      	str	r3, [r2, #0]
	    tcWrite[0] = ((clockFrameOutput % frameRateDivisor[frameRate]) % 10);
 8003676:	4b66      	ldr	r3, [pc, #408]	; (8003810 <main+0x438>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a66      	ldr	r2, [pc, #408]	; (8003814 <main+0x43c>)
 800367c:	7812      	ldrb	r2, [r2, #0]
 800367e:	4611      	mov	r1, r2
 8003680:	4a65      	ldr	r2, [pc, #404]	; (8003818 <main+0x440>)
 8003682:	5c52      	ldrb	r2, [r2, r1]
 8003684:	fbb3 f1f2 	udiv	r1, r3, r2
 8003688:	fb02 f201 	mul.w	r2, r2, r1
 800368c:	1a99      	subs	r1, r3, r2
 800368e:	4b63      	ldr	r3, [pc, #396]	; (800381c <main+0x444>)
 8003690:	fba3 2301 	umull	r2, r3, r3, r1
 8003694:	08da      	lsrs	r2, r3, #3
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	1aca      	subs	r2, r1, r3
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <main+0x448>)
 80036a4:	701a      	strb	r2, [r3, #0]
	    tcWrite[0] |= (tcIN[7] & 0xF0);
 80036a6:	4b5f      	ldr	r3, [pc, #380]	; (8003824 <main+0x44c>)
 80036a8:	79db      	ldrb	r3, [r3, #7]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80036b0:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <main+0x448>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b25a      	sxtb	r2, r3
 80036b6:	b24b      	sxtb	r3, r1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	b25b      	sxtb	r3, r3
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4b58      	ldr	r3, [pc, #352]	; (8003820 <main+0x448>)
 80036c0:	701a      	strb	r2, [r3, #0]

	    tcWrite[1] = (clockFrameOutput % frameRateDivisor[frameRate]) / 10;
 80036c2:	4b53      	ldr	r3, [pc, #332]	; (8003810 <main+0x438>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a53      	ldr	r2, [pc, #332]	; (8003814 <main+0x43c>)
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4a52      	ldr	r2, [pc, #328]	; (8003818 <main+0x440>)
 80036ce:	5c52      	ldrb	r2, [r2, r1]
 80036d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80036d4:	fb02 f201 	mul.w	r2, r2, r1
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	4a50      	ldr	r2, [pc, #320]	; (800381c <main+0x444>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	08db      	lsrs	r3, r3, #3
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b4e      	ldr	r3, [pc, #312]	; (8003820 <main+0x448>)
 80036e6:	705a      	strb	r2, [r3, #1]
	    tcWrite[1] |= (tcIN[6] & 0xF0);
 80036e8:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <main+0x44c>)
 80036ea:	799b      	ldrb	r3, [r3, #6]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80036f2:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <main+0x448>)
 80036f4:	785b      	ldrb	r3, [r3, #1]
 80036f6:	b25a      	sxtb	r2, r3
 80036f8:	b24b      	sxtb	r3, r1
 80036fa:	4313      	orrs	r3, r2
 80036fc:	b25b      	sxtb	r3, r3
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	4b47      	ldr	r3, [pc, #284]	; (8003820 <main+0x448>)
 8003702:	705a      	strb	r2, [r3, #1]

	    tcWrite[2] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) % 10;
 8003704:	4b42      	ldr	r3, [pc, #264]	; (8003810 <main+0x438>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a42      	ldr	r2, [pc, #264]	; (8003814 <main+0x43c>)
 800370a:	7812      	ldrb	r2, [r2, #0]
 800370c:	4611      	mov	r1, r2
 800370e:	4a42      	ldr	r2, [pc, #264]	; (8003818 <main+0x440>)
 8003710:	5c52      	ldrb	r2, [r2, r1]
 8003712:	fbb3 f1f2 	udiv	r1, r3, r2
 8003716:	4b44      	ldr	r3, [pc, #272]	; (8003828 <main+0x450>)
 8003718:	fba3 2301 	umull	r2, r3, r3, r1
 800371c:	095a      	lsrs	r2, r3, #5
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	1aca      	subs	r2, r1, r3
 8003728:	4b3c      	ldr	r3, [pc, #240]	; (800381c <main+0x444>)
 800372a:	fba3 1302 	umull	r1, r3, r3, r2
 800372e:	08d9      	lsrs	r1, r3, #3
 8003730:	460b      	mov	r3, r1
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	1ad1      	subs	r1, r2, r3
 800373a:	b2ca      	uxtb	r2, r1
 800373c:	4b38      	ldr	r3, [pc, #224]	; (8003820 <main+0x448>)
 800373e:	709a      	strb	r2, [r3, #2]
	    tcWrite[2] |= (tcIN[5] & 0xF0);
 8003740:	4b38      	ldr	r3, [pc, #224]	; (8003824 <main+0x44c>)
 8003742:	795b      	ldrb	r3, [r3, #5]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800374a:	4b35      	ldr	r3, [pc, #212]	; (8003820 <main+0x448>)
 800374c:	789b      	ldrb	r3, [r3, #2]
 800374e:	b25a      	sxtb	r2, r3
 8003750:	b24b      	sxtb	r3, r1
 8003752:	4313      	orrs	r3, r2
 8003754:	b25b      	sxtb	r3, r3
 8003756:	b2da      	uxtb	r2, r3
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <main+0x448>)
 800375a:	709a      	strb	r2, [r3, #2]

	    tcWrite[3] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) / 10;
 800375c:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <main+0x438>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2c      	ldr	r2, [pc, #176]	; (8003814 <main+0x43c>)
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	4611      	mov	r1, r2
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <main+0x440>)
 8003768:	5c52      	ldrb	r2, [r2, r1]
 800376a:	fbb3 f1f2 	udiv	r1, r3, r2
 800376e:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <main+0x450>)
 8003770:	fba3 2301 	umull	r2, r3, r3, r1
 8003774:	095a      	lsrs	r2, r3, #5
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	1aca      	subs	r2, r1, r3
 8003780:	4b26      	ldr	r3, [pc, #152]	; (800381c <main+0x444>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b25      	ldr	r3, [pc, #148]	; (8003820 <main+0x448>)
 800378c:	70da      	strb	r2, [r3, #3]
	    tcWrite[3] |= (tcIN[4] & 0xF0);
 800378e:	4b25      	ldr	r3, [pc, #148]	; (8003824 <main+0x44c>)
 8003790:	791b      	ldrb	r3, [r3, #4]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <main+0x448>)
 800379a:	78db      	ldrb	r3, [r3, #3]
 800379c:	b25a      	sxtb	r2, r3
 800379e:	b24b      	sxtb	r3, r1
 80037a0:	4313      	orrs	r3, r2
 80037a2:	b25b      	sxtb	r3, r3
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <main+0x448>)
 80037a8:	70da      	strb	r2, [r3, #3]

	    tcWrite[4] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) % 10;
 80037aa:	4b19      	ldr	r3, [pc, #100]	; (8003810 <main+0x438>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <main+0x43c>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	4619      	mov	r1, r3
 80037b4:	4b18      	ldr	r3, [pc, #96]	; (8003818 <main+0x440>)
 80037b6:	5c5b      	ldrb	r3, [r3, r1]
 80037b8:	4619      	mov	r1, r3
 80037ba:	460b      	mov	r3, r1
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a5b      	subs	r3, r3, r1
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <main+0x450>)
 80037c8:	fba3 2301 	umull	r2, r3, r3, r1
 80037cc:	095a      	lsrs	r2, r3, #5
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	1aca      	subs	r2, r1, r3
 80037d8:	4b10      	ldr	r3, [pc, #64]	; (800381c <main+0x444>)
 80037da:	fba3 1302 	umull	r1, r3, r3, r2
 80037de:	08d9      	lsrs	r1, r3, #3
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	1ad1      	subs	r1, r2, r3
 80037ea:	b2ca      	uxtb	r2, r1
 80037ec:	e01e      	b.n	800382c <main+0x454>
 80037ee:	bf00      	nop
 80037f0:	20000658 	.word	0x20000658
 80037f4:	20000678 	.word	0x20000678
 80037f8:	20000660 	.word	0x20000660
 80037fc:	20000060 	.word	0x20000060
 8003800:	20000657 	.word	0x20000657
 8003804:	200000bc 	.word	0x200000bc
 8003808:	200000bd 	.word	0x200000bd
 800380c:	200000ac 	.word	0x200000ac
 8003810:	20000620 	.word	0x20000620
 8003814:	200000a9 	.word	0x200000a9
 8003818:	20000034 	.word	0x20000034
 800381c:	cccccccd 	.word	0xcccccccd
 8003820:	20000634 	.word	0x20000634
 8003824:	200000a0 	.word	0x200000a0
 8003828:	88888889 	.word	0x88888889
 800382c:	4bab      	ldr	r3, [pc, #684]	; (8003adc <main+0x704>)
 800382e:	711a      	strb	r2, [r3, #4]
	    tcWrite[4] |= (tcIN[3] & 0xF0);
 8003830:	4bab      	ldr	r3, [pc, #684]	; (8003ae0 <main+0x708>)
 8003832:	78db      	ldrb	r3, [r3, #3]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800383a:	4ba8      	ldr	r3, [pc, #672]	; (8003adc <main+0x704>)
 800383c:	791b      	ldrb	r3, [r3, #4]
 800383e:	b25a      	sxtb	r2, r3
 8003840:	b24b      	sxtb	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	b25b      	sxtb	r3, r3
 8003846:	b2da      	uxtb	r2, r3
 8003848:	4ba4      	ldr	r3, [pc, #656]	; (8003adc <main+0x704>)
 800384a:	711a      	strb	r2, [r3, #4]

	    tcWrite[5] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) / 10;
 800384c:	4ba5      	ldr	r3, [pc, #660]	; (8003ae4 <main+0x70c>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4ba5      	ldr	r3, [pc, #660]	; (8003ae8 <main+0x710>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	4ba5      	ldr	r3, [pc, #660]	; (8003aec <main+0x714>)
 8003858:	5c5b      	ldrb	r3, [r3, r1]
 800385a:	4619      	mov	r1, r3
 800385c:	460b      	mov	r3, r1
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a5b      	subs	r3, r3, r1
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fbb2 f1f3 	udiv	r1, r2, r3
 8003868:	4ba1      	ldr	r3, [pc, #644]	; (8003af0 <main+0x718>)
 800386a:	fba3 2301 	umull	r2, r3, r3, r1
 800386e:	095a      	lsrs	r2, r3, #5
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	1aca      	subs	r2, r1, r3
 800387a:	4b9e      	ldr	r3, [pc, #632]	; (8003af4 <main+0x71c>)
 800387c:	fba3 2302 	umull	r2, r3, r3, r2
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	b2da      	uxtb	r2, r3
 8003884:	4b95      	ldr	r3, [pc, #596]	; (8003adc <main+0x704>)
 8003886:	715a      	strb	r2, [r3, #5]
	    tcWrite[5] |= (tcIN[2] & 0xF0);
 8003888:	4b95      	ldr	r3, [pc, #596]	; (8003ae0 <main+0x708>)
 800388a:	789b      	ldrb	r3, [r3, #2]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003892:	4b92      	ldr	r3, [pc, #584]	; (8003adc <main+0x704>)
 8003894:	795b      	ldrb	r3, [r3, #5]
 8003896:	b25a      	sxtb	r2, r3
 8003898:	b24b      	sxtb	r3, r1
 800389a:	4313      	orrs	r3, r2
 800389c:	b25b      	sxtb	r3, r3
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	4b8e      	ldr	r3, [pc, #568]	; (8003adc <main+0x704>)
 80038a2:	715a      	strb	r2, [r3, #5]

	    tcWrite[6] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) % 10;
 80038a4:	4b8f      	ldr	r3, [pc, #572]	; (8003ae4 <main+0x70c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a8f      	ldr	r2, [pc, #572]	; (8003ae8 <main+0x710>)
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	4611      	mov	r1, r2
 80038ae:	4a8f      	ldr	r2, [pc, #572]	; (8003aec <main+0x714>)
 80038b0:	5c52      	ldrb	r2, [r2, r1]
 80038b2:	4611      	mov	r1, r2
 80038b4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80038b8:	fb02 f201 	mul.w	r2, r2, r1
 80038bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80038c0:	4b8c      	ldr	r3, [pc, #560]	; (8003af4 <main+0x71c>)
 80038c2:	fba3 2301 	umull	r2, r3, r3, r1
 80038c6:	08da      	lsrs	r2, r3, #3
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	1aca      	subs	r2, r1, r3
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	4b81      	ldr	r3, [pc, #516]	; (8003adc <main+0x704>)
 80038d6:	719a      	strb	r2, [r3, #6]
	    tcWrite[6] |= (tcIN[1] & 0xF0);
 80038d8:	4b81      	ldr	r3, [pc, #516]	; (8003ae0 <main+0x708>)
 80038da:	785b      	ldrb	r3, [r3, #1]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80038e2:	4b7e      	ldr	r3, [pc, #504]	; (8003adc <main+0x704>)
 80038e4:	799b      	ldrb	r3, [r3, #6]
 80038e6:	b25a      	sxtb	r2, r3
 80038e8:	b24b      	sxtb	r3, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	4b7a      	ldr	r3, [pc, #488]	; (8003adc <main+0x704>)
 80038f2:	719a      	strb	r2, [r3, #6]

	    tcWrite[7] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) / 10;
 80038f4:	4b7b      	ldr	r3, [pc, #492]	; (8003ae4 <main+0x70c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7b      	ldr	r2, [pc, #492]	; (8003ae8 <main+0x710>)
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	4611      	mov	r1, r2
 80038fe:	4a7b      	ldr	r2, [pc, #492]	; (8003aec <main+0x714>)
 8003900:	5c52      	ldrb	r2, [r2, r1]
 8003902:	4611      	mov	r1, r2
 8003904:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003908:	fb02 f201 	mul.w	r2, r2, r1
 800390c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003910:	4a78      	ldr	r2, [pc, #480]	; (8003af4 <main+0x71c>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	08db      	lsrs	r3, r3, #3
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4b70      	ldr	r3, [pc, #448]	; (8003adc <main+0x704>)
 800391c:	71da      	strb	r2, [r3, #7]
	    tcWrite[7] |= (tcIN[0] & 0xF0);
 800391e:	4b70      	ldr	r3, [pc, #448]	; (8003ae0 <main+0x708>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003928:	4b6c      	ldr	r3, [pc, #432]	; (8003adc <main+0x704>)
 800392a:	79db      	ldrb	r3, [r3, #7]
 800392c:	b25a      	sxtb	r2, r3
 800392e:	b24b      	sxtb	r3, r1
 8003930:	4313      	orrs	r3, r2
 8003932:	b25b      	sxtb	r3, r3
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4b69      	ldr	r3, [pc, #420]	; (8003adc <main+0x704>)
 8003938:	71da      	strb	r2, [r3, #7]

	    hr = (clockFrameOutput / frameRateDivisor[frameRate]) / 3600;
 800393a:	4b6a      	ldr	r3, [pc, #424]	; (8003ae4 <main+0x70c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6a      	ldr	r2, [pc, #424]	; (8003ae8 <main+0x710>)
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	4611      	mov	r1, r2
 8003944:	4a69      	ldr	r2, [pc, #420]	; (8003aec <main+0x714>)
 8003946:	5c52      	ldrb	r2, [r2, r1]
 8003948:	fbb3 f3f2 	udiv	r3, r3, r2
 800394c:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <main+0x720>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0adb      	lsrs	r3, r3, #11
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b69      	ldr	r3, [pc, #420]	; (8003afc <main+0x724>)
 8003958:	701a      	strb	r2, [r3, #0]
		mn = ((clockFrameOutput / frameRateDivisor[frameRate]) / 60 ) % 60;
 800395a:	4b62      	ldr	r3, [pc, #392]	; (8003ae4 <main+0x70c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a62      	ldr	r2, [pc, #392]	; (8003ae8 <main+0x710>)
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	4611      	mov	r1, r2
 8003964:	4a61      	ldr	r2, [pc, #388]	; (8003aec <main+0x714>)
 8003966:	5c52      	ldrb	r2, [r2, r1]
 8003968:	fbb3 f3f2 	udiv	r3, r3, r2
 800396c:	4a60      	ldr	r2, [pc, #384]	; (8003af0 <main+0x718>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0959      	lsrs	r1, r3, #5
 8003974:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <main+0x718>)
 8003976:	fba3 2301 	umull	r2, r3, r3, r1
 800397a:	095a      	lsrs	r2, r3, #5
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	1aca      	subs	r2, r1, r3
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <main+0x728>)
 800398a:	701a      	strb	r2, [r3, #0]
		sc = (clockFrameOutput / frameRateDivisor[frameRate]) % 60;
 800398c:	4b55      	ldr	r3, [pc, #340]	; (8003ae4 <main+0x70c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a55      	ldr	r2, [pc, #340]	; (8003ae8 <main+0x710>)
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	4611      	mov	r1, r2
 8003996:	4a55      	ldr	r2, [pc, #340]	; (8003aec <main+0x714>)
 8003998:	5c52      	ldrb	r2, [r2, r1]
 800399a:	fbb3 f1f2 	udiv	r1, r3, r2
 800399e:	4b54      	ldr	r3, [pc, #336]	; (8003af0 <main+0x718>)
 80039a0:	fba3 2301 	umull	r2, r3, r3, r1
 80039a4:	095a      	lsrs	r2, r3, #5
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	1aca      	subs	r2, r1, r3
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	4b54      	ldr	r3, [pc, #336]	; (8003b04 <main+0x72c>)
 80039b4:	701a      	strb	r2, [r3, #0]
		fr = clockFrameOutput % frameRateDivisor[frameRate];
 80039b6:	4b4b      	ldr	r3, [pc, #300]	; (8003ae4 <main+0x70c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a4b      	ldr	r2, [pc, #300]	; (8003ae8 <main+0x710>)
 80039bc:	7812      	ldrb	r2, [r2, #0]
 80039be:	4611      	mov	r1, r2
 80039c0:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <main+0x714>)
 80039c2:	5c52      	ldrb	r2, [r2, r1]
 80039c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039c8:	fb02 f201 	mul.w	r2, r2, r1
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <main+0x730>)
 80039d2:	701a      	strb	r2, [r3, #0]


	    	    int oneBits = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
	    for (int i=0; i<10; i++){
 80039d8:	2300      	movs	r3, #0
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2b09      	cmp	r3, #9
 80039e0:	dc1b      	bgt.n	8003a1a <main+0x642>
	    	for (int b=0; b<8; b++){
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2b07      	cmp	r3, #7
 80039ea:	dc12      	bgt.n	8003a12 <main+0x63a>
	    		if (bitRead(tcWrite[i],b) == 1){
 80039ec:	4a3b      	ldr	r2, [pc, #236]	; (8003adc <main+0x704>)
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	4413      	add	r3, r2
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa42 f303 	asr.w	r3, r2, r3
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <main+0x632>
	    			oneBits++;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	3301      	adds	r3, #1
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
	    	for (int b=0; b<8; b++){
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	e7e9      	b.n	80039e6 <main+0x60e>
	    for (int i=0; i<10; i++){
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	3301      	adds	r3, #1
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	e7e0      	b.n	80039dc <main+0x604>
	    		}
	    	}
	    }
	    if (oneBits % 2 > 0){
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	bfb8      	it	lt
 8003a24:	425b      	neglt	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	dd07      	ble.n	8003a3a <main+0x662>
	    	((tcWrite[7]) |= (1UL << (3)));
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <main+0x704>)
 8003a2c:	79db      	ldrb	r3, [r3, #7]
 8003a2e:	f043 0308 	orr.w	r3, r3, #8
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	4b29      	ldr	r3, [pc, #164]	; (8003adc <main+0x704>)
 8003a36:	71da      	strb	r2, [r3, #7]
 8003a38:	e006      	b.n	8003a48 <main+0x670>
	    } else {
	    	((tcWrite[7]) &= ~(1UL << (3)));
 8003a3a:	4b28      	ldr	r3, [pc, #160]	; (8003adc <main+0x704>)
 8003a3c:	79db      	ldrb	r3, [r3, #7]
 8003a3e:	f023 0308 	bic.w	r3, r3, #8
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	4b25      	ldr	r3, [pc, #148]	; (8003adc <main+0x704>)
 8003a46:	71da      	strb	r2, [r3, #7]


	  

//button handlers
if(GPIOC -> IDR & GPIO_PIN_13){	//Menu button
 8003a48:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <main+0x734>)
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d068      	beq.n	8003b30 <main+0x758>
    }
    else {
      displayTimer = HAL_GetTick();
displayOn = true;
    }*/
    displayTimer = HAL_GetTick();
 8003a5e:	f002 f83f 	bl	8005ae0 <HAL_GetTick>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <main+0x738>)
 8003a66:	6013      	str	r3, [r2, #0]
displayOn = true;
 8003a68:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <main+0x73c>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
menuButton = true;
 8003a6e:	4b2a      	ldr	r3, [pc, #168]	; (8003b18 <main+0x740>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
if(HAL_GetTick() - menuButtonTime > 1000 && !isLocked){
 8003a74:	f002 f834 	bl	8005ae0 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b28      	ldr	r3, [pc, #160]	; (8003b1c <main+0x744>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a84:	d908      	bls.n	8003a98 <main+0x6c0>
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <main+0x748>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f083 0301 	eor.w	r3, r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <main+0x6c0>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <main+0x6c2>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d050      	beq.n	8003b40 <main+0x768>
  menuItem = 0;
 8003a9e:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <main+0x74c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
  menuItemSelect = false;
 8003aa4:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <main+0x750>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
  updateDisplay(d_menu);
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f7fd fdf2 	bl	8001694 <_Z13updateDisplayh>
  menuLoop();
 8003ab0:	f7fe febe 	bl	8002830 <_Z8menuLoopv>
  updateWrite = updateEEPROM();
 8003ab4:	f001 f8b8 	bl	8004c28 <_Z12updateEEPROMv>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <main+0x754>)
 8003abe:	701a      	strb	r2, [r3, #0]
  displayTimer = HAL_GetTick();
 8003ac0:	f002 f80e 	bl	8005ae0 <HAL_GetTick>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <main+0x738>)
 8003ac8:	6013      	str	r3, [r2, #0]
  updateDisplay(0x1);
 8003aca:	2001      	movs	r0, #1
 8003acc:	f7fd fde2 	bl	8001694 <_Z13updateDisplayh>
  menuButtonTime = HAL_GetTick();
 8003ad0:	f002 f806 	bl	8005ae0 <HAL_GetTick>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4a11      	ldr	r2, [pc, #68]	; (8003b1c <main+0x744>)
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e031      	b.n	8003b40 <main+0x768>
 8003adc:	20000634 	.word	0x20000634
 8003ae0:	200000a0 	.word	0x200000a0
 8003ae4:	20000620 	.word	0x20000620
 8003ae8:	200000a9 	.word	0x200000a9
 8003aec:	20000034 	.word	0x20000034
 8003af0:	88888889 	.word	0x88888889
 8003af4:	cccccccd 	.word	0xcccccccd
 8003af8:	91a2b3c5 	.word	0x91a2b3c5
 8003afc:	200000b8 	.word	0x200000b8
 8003b00:	200000b9 	.word	0x200000b9
 8003b04:	200000ba 	.word	0x200000ba
 8003b08:	200000bb 	.word	0x200000bb
 8003b0c:	48000800 	.word	0x48000800
 8003b10:	20000658 	.word	0x20000658
 8003b14:	20000060 	.word	0x20000060
 8003b18:	20000670 	.word	0x20000670
 8003b1c:	20000674 	.word	0x20000674
 8003b20:	20000660 	.word	0x20000660
 8003b24:	200000e7 	.word	0x200000e7
 8003b28:	200000e6 	.word	0x200000e6
 8003b2c:	20000062 	.word	0x20000062

}
	    }
      else {
        menuButton = false;
 8003b30:	4b8e      	ldr	r3, [pc, #568]	; (8003d6c <main+0x994>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
        menuButtonTime = HAL_GetTick();
 8003b36:	f001 ffd3 	bl	8005ae0 <HAL_GetTick>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4a8c      	ldr	r2, [pc, #560]	; (8003d70 <main+0x998>)
 8003b3e:	6013      	str	r3, [r2, #0]
      }

if(GPIOB -> IDR & GPIO_PIN_8){	//Up button
 8003b40:	4b8c      	ldr	r3, [pc, #560]	; (8003d74 <main+0x99c>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d013      	beq.n	8003b7e <main+0x7a6>
displayTimer = HAL_GetTick();
 8003b56:	f001 ffc3 	bl	8005ae0 <HAL_GetTick>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4a86      	ldr	r2, [pc, #536]	; (8003d78 <main+0x9a0>)
 8003b5e:	6013      	str	r3, [r2, #0]
displayOn = true;
 8003b60:	4b86      	ldr	r3, [pc, #536]	; (8003d7c <main+0x9a4>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
upButton = true;
 8003b66:	4b86      	ldr	r3, [pc, #536]	; (8003d80 <main+0x9a8>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
if (HAL_GetTick() - upButtonTime > 2000){
 8003b6c:	f001 ffb8 	bl	8005ae0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b84      	ldr	r3, [pc, #528]	; (8003d84 <main+0x9ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b7c:	e007      	b.n	8003b8e <main+0x7b6>
  //User Bits
}

	    }
      else {
        upButton = false;
 8003b7e:	4b80      	ldr	r3, [pc, #512]	; (8003d80 <main+0x9a8>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
        upButtonTime = HAL_GetTick();
 8003b84:	f001 ffac 	bl	8005ae0 <HAL_GetTick>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4a7e      	ldr	r2, [pc, #504]	; (8003d84 <main+0x9ac>)
 8003b8c:	6013      	str	r3, [r2, #0]
      }
if(GPIOB -> IDR & GPIO_PIN_9){	//Down button
 8003b8e:	4b79      	ldr	r3, [pc, #484]	; (8003d74 <main+0x99c>)
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <main+0x7de>
displayTimer = HAL_GetTick();
 8003ba4:	f001 ff9c 	bl	8005ae0 <HAL_GetTick>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4a73      	ldr	r2, [pc, #460]	; (8003d78 <main+0x9a0>)
 8003bac:	6013      	str	r3, [r2, #0]
displayOn = true;
 8003bae:	4b73      	ldr	r3, [pc, #460]	; (8003d7c <main+0x9a4>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e007      	b.n	8003bc6 <main+0x7ee>

	    }
      else{
        downButton = false;
 8003bb6:	4b74      	ldr	r3, [pc, #464]	; (8003d88 <main+0x9b0>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
        downButtonTime = HAL_GetTick();
 8003bbc:	f001 ff90 	bl	8005ae0 <HAL_GetTick>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4a72      	ldr	r2, [pc, #456]	; (8003d8c <main+0x9b4>)
 8003bc4:	6013      	str	r3, [r2, #0]
      }

if(GPIOA -> IDR & GPIO_PIN_0){  //Power button
 8003bc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf14      	ite	ne
 8003bd4:	2301      	movne	r3, #1
 8003bd6:	2300      	moveq	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d048      	beq.n	8003c70 <main+0x898>
  if (!isLocked){
 8003bde:	4b6c      	ldr	r3, [pc, #432]	; (8003d90 <main+0x9b8>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d041      	beq.n	8003c70 <main+0x898>
  updateDisplay(0x4);
 8003bec:	2004      	movs	r0, #4
 8003bee:	f7fd fd51 	bl	8001694 <_Z13updateDisplayh>
  uint32_t currentTime = HAL_GetTick();
 8003bf2:	f001 ff75 	bl	8005ae0 <HAL_GetTick>
 8003bf6:	6178      	str	r0, [r7, #20]
  while (GPIOA -> IDR & GPIO_PIN_0){
 8003bf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02f      	beq.n	8003c70 <main+0x898>
    powerCountdown =3 - ((HAL_GetTick() - currentTime)/1000);
 8003c10:	f001 ff66 	bl	8005ae0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	4a5e      	ldr	r2, [pc, #376]	; (8003d94 <main+0x9bc>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	099b      	lsrs	r3, r3, #6
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f1c3 0303 	rsb	r3, r3, #3
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b5b      	ldr	r3, [pc, #364]	; (8003d98 <main+0x9c0>)
 8003c2c:	701a      	strb	r2, [r3, #0]
    if (!powerOff){updateDisplay(0x4);}
 8003c2e:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <main+0x9c4>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	f083 0301 	eor.w	r3, r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <main+0x86a>
 8003c3c:	2004      	movs	r0, #4
 8003c3e:	f7fd fd29 	bl	8001694 <_Z13updateDisplayh>
    if (HAL_GetTick() - currentTime > 4000){
 8003c42:	f001 ff4d 	bl	8005ae0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003c50:	bf8c      	ite	hi
 8003c52:	2301      	movhi	r3, #1
 8003c54:	2300      	movls	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0cd      	beq.n	8003bf8 <main+0x820>
      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f004 fac9 	bl	80081f4 <HAL_PWR_EnableWakeUpPin>
      powerOff = true;
 8003c62:	4b4e      	ldr	r3, [pc, #312]	; (8003d9c <main+0x9c4>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
      updateDisplay(0x0);
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7fd fd13 	bl	8001694 <_Z13updateDisplayh>
  while (GPIOA -> IDR & GPIO_PIN_0){
 8003c6e:	e7c3      	b.n	8003bf8 <main+0x820>
    }
  }
}
  
}
if(powerOff){
 8003c70:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <main+0x9c4>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <main+0x8b8>
    //updateDisplay(0x0);
    HAL_Delay(2000);
 8003c78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c7c:	f001 ff3c 	bl	8005af8 <HAL_Delay>
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003c80:	4b47      	ldr	r3, [pc, #284]	; (8003da0 <main+0x9c8>)
 8003c82:	221f      	movs	r2, #31
 8003c84:	619a      	str	r2, [r3, #24]
    HAL_PWR_EnterSTANDBYMode();
 8003c86:	f004 fad5 	bl	8008234 <HAL_PWR_EnterSTANDBYMode>
    powerUpMode = 0;
 8003c8a:	4b46      	ldr	r3, [pc, #280]	; (8003da4 <main+0x9cc>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
    
}

if(isLocked && GPIOB -> IDR & GPIO_PIN_9 && GPIOB -> IDR & GPIO_PIN_8){//Both
 8003c90:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <main+0x9b8>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00d      	beq.n	8003cb4 <main+0x8dc>
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <main+0x99c>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <main+0x8dc>
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <main+0x99c>)
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <main+0x8dc>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <main+0x8de>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d04d      	beq.n	8003d56 <main+0x97e>
  if (!upButton && !downButton){
 8003cba:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <main+0x9a8>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	f083 0301 	eor.w	r3, r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
  
  }
  upButton = true;
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <main+0x9a8>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
  downButton = true;
 8003ccc:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <main+0x9b0>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
  buttonsHeld = true;
 8003cd2:	4b35      	ldr	r3, [pc, #212]	; (8003da8 <main+0x9d0>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
         buttonsHeld = false;
	    	while (!isLocked && (GPIOB -> IDR & GPIO_PIN_9 || GPIOB -> IDR & GPIO_PIN_8)){
	    		updateDisplay(0x01);
	    		displayTimer = HAL_GetTick();
	    	}*/
        lockCountdown = 3 - ((HAL_GetTick() - lockTimer)/1000);
 8003cd8:	f001 ff02 	bl	8005ae0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b33      	ldr	r3, [pc, #204]	; (8003dac <main+0x9d4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	4a2b      	ldr	r2, [pc, #172]	; (8003d94 <main+0x9bc>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f1c3 0303 	rsb	r3, r3, #3
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <main+0x9d8>)
 8003cf6:	701a      	strb	r2, [r3, #0]
        updateDisplay(0x03);
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	f7fd fccb 	bl	8001694 <_Z13updateDisplayh>
        if(HAL_GetTick() - upButtonTime > 3000 && HAL_GetTick() - downButtonTime > 3000){
 8003cfe:	f001 feef 	bl	8005ae0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <main+0x9ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d90b      	bls.n	8003d2a <main+0x952>
 8003d12:	f001 fee5 	bl	8005ae0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <main+0x9b4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <main+0x952>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <main+0x954>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f43f ac13 	beq.w	8003558 <main+0x180>
          isLocked = false;
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <main+0x9b8>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
	    			displayTimer = HAL_GetTick();
 8003d38:	f001 fed2 	bl	8005ae0 <HAL_GetTick>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4a0e      	ldr	r2, [pc, #56]	; (8003d78 <main+0x9a0>)
 8003d40:	6013      	str	r3, [r2, #0]
            buttonsHeld = false;
 8003d42:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <main+0x9d0>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
            uptimeMinutes = 0;
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <main+0x9dc>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	801a      	strh	r2, [r3, #0]
          updateDisplay(0x0);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fd fca0 	bl	8001694 <_Z13updateDisplayh>
 8003d54:	e400      	b.n	8003558 <main+0x180>

        

}
else {
  buttonsHeld = false;
 8003d56:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <main+0x9d0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
  lockTimer = HAL_GetTick();
 8003d5c:	f001 fec0 	bl	8005ae0 <HAL_GetTick>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4a12      	ldr	r2, [pc, #72]	; (8003dac <main+0x9d4>)
 8003d64:	6013      	str	r3, [r2, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8003d66:	f7ff bbf7 	b.w	8003558 <main+0x180>
 8003d6a:	bf00      	nop
 8003d6c:	20000670 	.word	0x20000670
 8003d70:	20000674 	.word	0x20000674
 8003d74:	48000400 	.word	0x48000400
 8003d78:	20000658 	.word	0x20000658
 8003d7c:	20000060 	.word	0x20000060
 8003d80:	20000663 	.word	0x20000663
 8003d84:	20000664 	.word	0x20000664
 8003d88:	20000668 	.word	0x20000668
 8003d8c:	2000066c 	.word	0x2000066c
 8003d90:	20000660 	.word	0x20000660
 8003d94:	10624dd3 	.word	0x10624dd3
 8003d98:	200000d8 	.word	0x200000d8
 8003d9c:	20000661 	.word	0x20000661
 8003da0:	40007000 	.word	0x40007000
 8003da4:	20000662 	.word	0x20000662
 8003da8:	200000be 	.word	0x200000be
 8003dac:	2000065c 	.word	0x2000065c
 8003db0:	200000bf 	.word	0x200000bf
 8003db4:	200000b2 	.word	0x200000b2

08003db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b0ae      	sub	sp, #184	; 0xb8
 8003dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dbe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003dc2:	2244      	movs	r2, #68	; 0x44
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f006 fae4 	bl	800a394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dcc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ddc:	463b      	mov	r3, r7
 8003dde:	2260      	movs	r2, #96	; 0x60
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f006 fad6 	bl	800a394 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003dec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003df0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003df2:	2302      	movs	r3, #2
 8003df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003dfe:	2302      	movs	r3, #2
 8003e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003e04:	230a      	movs	r3, #10
 8003e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e10:	2302      	movs	r3, #2
 8003e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003e16:	2304      	movs	r3, #4
 8003e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e1c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e20:	4618      	mov	r0, r3
 8003e22:	f004 fa85 	bl	8008330 <HAL_RCC_OscConfig>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003e36:	f000 ff5b 	bl	8004cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e3a:	230f      	movs	r3, #15
 8003e3c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e42:	2300      	movs	r3, #0
 8003e44:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e46:	2300      	movs	r3, #0
 8003e48:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e4e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e52:	2101      	movs	r1, #1
 8003e54:	4618      	mov	r0, r3
 8003e56:	f004 fe8b 	bl	8008b70 <HAL_RCC_ClockConfig>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003e6a:	f000 ff41 	bl	8004cf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8003e6e:	f246 03c0 	movw	r3, #24768	; 0x60c0
 8003e72:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e74:	2300      	movs	r3, #0
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e80:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003e82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e86:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8003e90:	230a      	movs	r3, #10
 8003e92:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003e94:	2307      	movs	r3, #7
 8003e96:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8003ea0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8003ea4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f005 f863 	bl	8008f74 <HAL_RCCEx_PeriphCLKConfig>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8003ebe:	f000 ff17 	bl	8004cf0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f004 ff33 	bl	8008d34 <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ece:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ed2:	f004 f9d7 	bl	8008284 <HAL_PWREx_ControlVoltageScaling>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <SystemClock_Config+0x132>
  {
    Error_Handler();
 8003ee6:	f000 ff03 	bl	8004cf0 <Error_Handler>
  }
}
 8003eea:	bf00      	nop
 8003eec:	37b8      	adds	r7, #184	; 0xb8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003efa:	463b      	mov	r3, r7
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
 8003f08:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003f0a:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f0c:	4a2e      	ldr	r2, [pc, #184]	; (8003fc8 <_ZL12MX_ADC1_Initv+0xd4>)
 8003f0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f10:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003f16:	4b2b      	ldr	r3, [pc, #172]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f1c:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f22:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f28:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003f2e:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003f34:	4b23      	ldr	r3, [pc, #140]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f48:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003f5c:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f6a:	4816      	ldr	r0, [pc, #88]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003f6c:	f001 ffb0 	bl	8005ed0 <HAL_ADC_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 8003f80:	f000 feb6 	bl	8004cf0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <_ZL12MX_ADC1_Initv+0xd8>)
 8003f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f88:	2306      	movs	r3, #6
 8003f8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003f90:	237f      	movs	r3, #127	; 0x7f
 8003f92:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003f94:	2304      	movs	r3, #4
 8003f96:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f9c:	463b      	mov	r3, r7
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4808      	ldr	r0, [pc, #32]	; (8003fc4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003fa2:	f002 f9d3 	bl	800634c <HAL_ADC_ConfigChannel>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8003fb6:	f000 fe9b 	bl	8004cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200000ec 	.word	0x200000ec
 8003fc8:	50040000 	.word	0x50040000
 8003fcc:	21800100 	.word	0x21800100

08003fd0 <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003fd6:	1d3b      	adds	r3, r7, #4
 8003fd8:	2224      	movs	r2, #36	; 0x24
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f006 f9d9 	bl	800a394 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <_ZL12MX_DAC1_Initv+0x70>)
 8003fe4:	4a17      	ldr	r2, [pc, #92]	; (8004044 <_ZL12MX_DAC1_Initv+0x74>)
 8003fe6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003fe8:	4815      	ldr	r0, [pc, #84]	; (8004040 <_ZL12MX_DAC1_Initv+0x70>)
 8003fea:	f002 fef8 	bl	8006dde <HAL_DAC_Init>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 8003ffe:	f000 fe77 	bl	8004cf0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	2210      	movs	r2, #16
 800401a:	4619      	mov	r1, r3
 800401c:	4808      	ldr	r0, [pc, #32]	; (8004040 <_ZL12MX_DAC1_Initv+0x70>)
 800401e:	f002 ff64 	bl	8006eea <HAL_DAC_ConfigChannel>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 8004032:	f000 fe5d 	bl	8004cf0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004036:	bf00      	nop
 8004038:	3728      	adds	r7, #40	; 0x28
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000150 	.word	0x20000150
 8004044:	40007400 	.word	0x40007400

08004048 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800404c:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 800404e:	4a23      	ldr	r2, [pc, #140]	; (80040dc <_ZL12MX_I2C1_Initv+0x94>)
 8004050:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8004052:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 8004054:	4a22      	ldr	r2, [pc, #136]	; (80040e0 <_ZL12MX_I2C1_Initv+0x98>)
 8004056:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 800405a:	2200      	movs	r2, #0
 800405c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800405e:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 8004060:	2201      	movs	r2, #1
 8004062:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004064:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 8004066:	2200      	movs	r2, #0
 8004068:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 800406c:	2200      	movs	r2, #0
 800406e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 8004072:	2200      	movs	r2, #0
 8004074:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 8004078:	2200      	movs	r2, #0
 800407a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 800407e:	2200      	movs	r2, #0
 8004080:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004082:	4815      	ldr	r0, [pc, #84]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 8004084:	f003 f9e8 	bl	8007458 <HAL_I2C_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	bf14      	ite	ne
 800408e:	2301      	movne	r3, #1
 8004090:	2300      	moveq	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8004098:	f000 fe2a 	bl	8004cf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800409c:	2100      	movs	r1, #0
 800409e:	480e      	ldr	r0, [pc, #56]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 80040a0:	f003 feb4 	bl	8007e0c <HAL_I2CEx_ConfigAnalogFilter>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80040b4:	f000 fe1c 	bl	8004cf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040b8:	2100      	movs	r1, #0
 80040ba:	4807      	ldr	r0, [pc, #28]	; (80040d8 <_ZL12MX_I2C1_Initv+0x90>)
 80040bc:	f003 fef1 	bl	8007ea2 <HAL_I2CEx_ConfigDigitalFilter>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80040d0:	f000 fe0e 	bl	8004cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040d4:	bf00      	nop
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000164 	.word	0x20000164
 80040dc:	40005400 	.word	0x40005400
 80040e0:	00506682 	.word	0x00506682

080040e4 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 80040ea:	4a25      	ldr	r2, [pc, #148]	; (8004180 <_ZL12MX_I2C2_Initv+0x9c>)
 80040ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010030D;
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 80040f0:	4a24      	ldr	r2, [pc, #144]	; (8004184 <_ZL12MX_I2C2_Initv+0xa0>)
 80040f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004106:	4b1d      	ldr	r3, [pc, #116]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 8004108:	2200      	movs	r2, #0
 800410a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 800410e:	2200      	movs	r2, #0
 8004110:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 8004114:	2200      	movs	r2, #0
 8004116:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004118:	4b18      	ldr	r3, [pc, #96]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 800411a:	2200      	movs	r2, #0
 800411c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800411e:	4817      	ldr	r0, [pc, #92]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 8004120:	f003 f99a 	bl	8007458 <HAL_I2C_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8004134:	f000 fddc 	bl	8004cf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004138:	2100      	movs	r1, #0
 800413a:	4810      	ldr	r0, [pc, #64]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 800413c:	f003 fe66 	bl	8007e0c <HAL_I2CEx_ConfigAnalogFilter>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8004150:	f000 fdce 	bl	8004cf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004154:	2100      	movs	r1, #0
 8004156:	4809      	ldr	r0, [pc, #36]	; (800417c <_ZL12MX_I2C2_Initv+0x98>)
 8004158:	f003 fea3 	bl	8007ea2 <HAL_I2CEx_ConfigDigitalFilter>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 800416c:	f000 fdc0 	bl	8004cf0 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8004170:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004174:	f003 fee2 	bl	8007f3c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	200001b0 	.word	0x200001b0
 8004180:	40005800 	.word	0x40005800
 8004184:	0010030d 	.word	0x0010030d

08004188 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800418e:	f107 0314 	add.w	r3, r7, #20
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80041a6:	4b28      	ldr	r3, [pc, #160]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 80041a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80041ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24-1;
 80041ae:	4b26      	ldr	r3, [pc, #152]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 80041b0:	2217      	movs	r2, #23
 80041b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b4:	4b24      	ldr	r3, [pc, #144]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80041ba:	4b23      	ldr	r3, [pc, #140]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 80041bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c2:	4b21      	ldr	r3, [pc, #132]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c8:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80041ce:	481e      	ldr	r0, [pc, #120]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 80041d0:	f005 fae3 	bl	800979a <HAL_TIM_IC_Init>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bf14      	ite	ne
 80041da:	2301      	movne	r3, #1
 80041dc:	2300      	moveq	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 80041e4:	f000 fd84 	bl	8004cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	4619      	mov	r1, r3
 80041f6:	4814      	ldr	r0, [pc, #80]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 80041f8:	f005 ffb4 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf14      	ite	ne
 8004202:	2301      	movne	r3, #1
 8004204:	2300      	moveq	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800420c:	f000 fd70 	bl	8004cf0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004210:	230a      	movs	r3, #10
 8004212:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004214:	2301      	movs	r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004220:	1d3b      	adds	r3, r7, #4
 8004222:	2208      	movs	r2, #8
 8004224:	4619      	mov	r1, r3
 8004226:	4808      	ldr	r0, [pc, #32]	; (8004248 <_ZL12MX_TIM2_Initv+0xc0>)
 8004228:	f005 fd53 	bl	8009cd2 <HAL_TIM_IC_ConfigChannel>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 800423c:	f000 fd58 	bl	8004cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004240:	bf00      	nop
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	200001fc 	.word	0x200001fc

0800424c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004252:	1d3b      	adds	r3, r7, #4
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <_ZL12MX_TIM6_Initv+0x78>)
 800425e:	4a1a      	ldr	r2, [pc, #104]	; (80042c8 <_ZL12MX_TIM6_Initv+0x7c>)
 8004260:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <_ZL12MX_TIM6_Initv+0x78>)
 8004264:	2217      	movs	r2, #23
 8004266:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <_ZL12MX_TIM6_Initv+0x78>)
 800426a:	2200      	movs	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <_ZL12MX_TIM6_Initv+0x78>)
 8004270:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004274:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004276:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <_ZL12MX_TIM6_Initv+0x78>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800427c:	4811      	ldr	r0, [pc, #68]	; (80042c4 <_ZL12MX_TIM6_Initv+0x78>)
 800427e:	f005 f9b1 	bl	80095e4 <HAL_TIM_Base_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8004292:	f000 fd2d 	bl	8004cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4808      	ldr	r0, [pc, #32]	; (80042c4 <_ZL12MX_TIM6_Initv+0x78>)
 80042a4:	f005 ff5e 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80042b8:	f000 fd1a 	bl	8004cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000248 	.word	0x20000248
 80042c8:	40001000 	.word	0x40001000

080042cc <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <_ZL12MX_TIM7_Initv+0x78>)
 80042de:	4a1a      	ldr	r2, [pc, #104]	; (8004348 <_ZL12MX_TIM7_Initv+0x7c>)
 80042e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 80042e2:	4b18      	ldr	r3, [pc, #96]	; (8004344 <_ZL12MX_TIM7_Initv+0x78>)
 80042e4:	2213      	movs	r2, #19
 80042e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e8:	4b16      	ldr	r3, [pc, #88]	; (8004344 <_ZL12MX_TIM7_Initv+0x78>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50049;
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <_ZL12MX_TIM7_Initv+0x78>)
 80042f0:	f24c 3281 	movw	r2, #50049	; 0xc381
 80042f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <_ZL12MX_TIM7_Initv+0x78>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042fc:	4811      	ldr	r0, [pc, #68]	; (8004344 <_ZL12MX_TIM7_Initv+0x78>)
 80042fe:	f005 f971 	bl	80095e4 <HAL_TIM_Base_Init>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 8004312:	f000 fced 	bl	8004cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4808      	ldr	r0, [pc, #32]	; (8004344 <_ZL12MX_TIM7_Initv+0x78>)
 8004324:	f005 ff1e 	bl	800a164 <HAL_TIMEx_MasterConfigSynchronization>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8004338:	f000 fcda 	bl	8004cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000294 	.word	0x20000294
 8004348:	40001400 	.word	0x40001400

0800434c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004350:	4b12      	ldr	r3, [pc, #72]	; (800439c <_ZL13MX_TIM16_Initv+0x50>)
 8004352:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <_ZL13MX_TIM16_Initv+0x54>)
 8004354:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <_ZL13MX_TIM16_Initv+0x50>)
 8004358:	2203      	movs	r2, #3
 800435a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <_ZL13MX_TIM16_Initv+0x50>)
 800435e:	2200      	movs	r2, #0
 8004360:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3128-1;
 8004362:	4b0e      	ldr	r3, [pc, #56]	; (800439c <_ZL13MX_TIM16_Initv+0x50>)
 8004364:	f640 4237 	movw	r2, #3127	; 0xc37
 8004368:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <_ZL13MX_TIM16_Initv+0x50>)
 800436c:	2200      	movs	r2, #0
 800436e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <_ZL13MX_TIM16_Initv+0x50>)
 8004372:	2200      	movs	r2, #0
 8004374:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <_ZL13MX_TIM16_Initv+0x50>)
 8004378:	2200      	movs	r2, #0
 800437a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800437c:	4807      	ldr	r0, [pc, #28]	; (800439c <_ZL13MX_TIM16_Initv+0x50>)
 800437e:	f005 f931 	bl	80095e4 <HAL_TIM_Base_Init>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8004392:	f000 fcad 	bl	8004cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200002e0 	.word	0x200002e0
 80043a0:	40014400 	.word	0x40014400

080043a4 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80043a8:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043aa:	4a14      	ldr	r2, [pc, #80]	; (80043fc <_ZL15MX_USB_PCD_Initv+0x58>)
 80043ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80043ae:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043b0:	2208      	movs	r2, #8
 80043b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80043b4:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043b6:	2202      	movs	r2, #2
 80043b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043bc:	2202      	movs	r2, #2
 80043be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80043d8:	4807      	ldr	r0, [pc, #28]	; (80043f8 <_ZL15MX_USB_PCD_Initv+0x54>)
 80043da:	f003 fdcf 	bl	8007f7c <HAL_PCD_Init>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 80043ee:	f000 fc7f 	bl	8004cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000032c 	.word	0x2000032c
 80043fc:	40006800 	.word	0x40006800

08004400 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004406:	f107 0314 	add.w	r3, r7, #20
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004416:	4b41      	ldr	r3, [pc, #260]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	4a40      	ldr	r2, [pc, #256]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 800441c:	f043 0304 	orr.w	r3, r3, #4
 8004420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800442e:	4b3b      	ldr	r3, [pc, #236]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	4a3a      	ldr	r2, [pc, #232]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 8004434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800443a:	4b38      	ldr	r3, [pc, #224]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004446:	4b35      	ldr	r3, [pc, #212]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	4a34      	ldr	r2, [pc, #208]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	4a2e      	ldr	r2, [pc, #184]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800446a:	4b2c      	ldr	r3, [pc, #176]	; (800451c <_ZL12MX_GPIO_Initv+0x11c>)
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8004476:	2200      	movs	r2, #0
 8004478:	f241 0102 	movw	r1, #4098	; 0x1002
 800447c:	4828      	ldr	r0, [pc, #160]	; (8004520 <_ZL12MX_GPIO_Initv+0x120>)
 800447e:	f002 ffd3 	bl	8007428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	4619      	mov	r1, r3
 8004496:	4823      	ldr	r0, [pc, #140]	; (8004524 <_ZL12MX_GPIO_Initv+0x124>)
 8004498:	f002 fe4c 	bl	8007134 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = TC_OUT_Pin|LED_STATUS_Pin;
 800449c:	f241 0302 	movw	r3, #4098	; 0x1002
 80044a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044aa:	2300      	movs	r3, #0
 80044ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ae:	f107 0314 	add.w	r3, r7, #20
 80044b2:	4619      	mov	r1, r3
 80044b4:	481a      	ldr	r0, [pc, #104]	; (8004520 <_ZL12MX_GPIO_Initv+0x120>)
 80044b6:	f002 fe3d 	bl	8007134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC_Pin */
  GPIO_InitStruct.Pin = OSC_Pin;
 80044ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c0:	2302      	movs	r3, #2
 80044c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c8:	2300      	movs	r3, #0
 80044ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80044cc:	2300      	movs	r3, #0
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OSC_GPIO_Port, &GPIO_InitStruct);
 80044d0:	f107 0314 	add.w	r3, r7, #20
 80044d4:	4619      	mov	r1, r3
 80044d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044da:	f002 fe2b 	bl	8007134 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin;
 80044de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80044e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4619      	mov	r1, r3
 80044f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044f6:	f002 fe1d 	bl	8007134 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_B_Pin;
 80044fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	4619      	mov	r1, r3
 800450e:	4804      	ldr	r0, [pc, #16]	; (8004520 <_ZL12MX_GPIO_Initv+0x120>)
 8004510:	f002 fe10 	bl	8007134 <HAL_GPIO_Init>

}
 8004514:	bf00      	nop
 8004516:	3728      	adds	r7, #40	; 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40021000 	.word	0x40021000
 8004520:	48000400 	.word	0x48000400
 8004524:	48000800 	.word	0x48000800

08004528 <HAL_TIM_IC_CaptureCallback>:
    HAL_NVIC_SystemReset();
  
}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
    //if ( GPIO_Pin == GPIO_PIN_8)
	if (htim->Instance == TIM2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	f040 80f4 	bne.w	8004724 <HAL_TIM_IC_CaptureCallback+0x1fc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800453c:	b672      	cpsid	i
}
 800453e:	bf00      	nop
		__disable_irq();
/* 
    Credit for this loop to read out the timecode:
    https://forum.arduino.cc/t/smpte-jam-sync/529740/4
*/
    	edgeTimeDiff = __HAL_TIM_GetCounter(htim);          // Get time difference between this and last edge
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	4a7a      	ldr	r2, [pc, #488]	; (8004730 <HAL_TIM_IC_CaptureCallback+0x208>)
 8004548:	6013      	str	r3, [r2, #0]

    	__HAL_TIM_SetCounter(htim,0);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	625a      	str	r2, [r3, #36]	; 0x24
    	                                    // Store time of this edge



    	  if ((edgeTimeDiff < uMin1) or (edgeTimeDiff > uMax0)) { // Drop out now if edge time not withing bounds
 8004552:	4b77      	ldr	r3, [pc, #476]	; (8004730 <HAL_TIM_IC_CaptureCallback+0x208>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b81      	cmp	r3, #129	; 0x81
 8004558:	d904      	bls.n	8004564 <HAL_TIM_IC_CaptureCallback+0x3c>
 800455a:	4b75      	ldr	r3, [pc, #468]	; (8004730 <HAL_TIM_IC_CaptureCallback+0x208>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
 8004562:	d301      	bcc.n	8004568 <HAL_TIM_IC_CaptureCallback+0x40>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <HAL_TIM_IC_CaptureCallback+0x42>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <HAL_TIM_IC_CaptureCallback+0x62>
    	    bitSet(tcFlags, tcFrameError);
 800456e:	4b71      	ldr	r3, [pc, #452]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f043 0302 	orr.w	r3, r3, #2
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4b6e      	ldr	r3, [pc, #440]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800457c:	701a      	strb	r2, [r3, #0]
    	    jamCount = 0;
 800457e:	4b6e      	ldr	r3, [pc, #440]	; (8004738 <HAL_TIM_IC_CaptureCallback+0x210>)
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004584:	b662      	cpsie	i
}
 8004586:	bf00      	nop
    	    __enable_irq();
    	    //Offset++;
    	    return;
 8004588:	e0ce      	b.n	8004728 <HAL_TIM_IC_CaptureCallback+0x200>
    	  }

    	  if (edgeTimeDiff > uMax1)                               // A zero bit arrived
 800458a:	4b69      	ldr	r3, [pc, #420]	; (8004730 <HAL_TIM_IC_CaptureCallback+0x208>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8004592:	bf8c      	ite	hi
 8004594:	2301      	movhi	r3, #1
 8004596:	2300      	movls	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d020      	beq.n	80045e0 <HAL_TIM_IC_CaptureCallback+0xb8>
    	  {
    	    if (bitRead(tcFlags, tcHalfOne) == 1){                // But we are expecting a 1 edge
 800459e:	4b65      	ldr	r3, [pc, #404]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	111b      	asrs	r3, r3, #4
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_IC_CaptureCallback+0xae>
    	      bitClear(tcFlags, tcHalfOne);
 80045b8:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f023 0310 	bic.w	r3, r3, #16
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	4b5b      	ldr	r3, [pc, #364]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80045c6:	701a      	strb	r2, [r3, #0]
    	      clearBuffer(tc, sizeof(tc)); //TODO WHAT DOES?
 80045c8:	210a      	movs	r1, #10
 80045ca:	485c      	ldr	r0, [pc, #368]	; (800473c <HAL_TIM_IC_CaptureCallback+0x214>)
 80045cc:	f000 f8be 	bl	800474c <_Z11clearBufferPhh>
  __ASM volatile ("cpsie i" : : : "memory");
 80045d0:	b662      	cpsie	i
}
 80045d2:	bf00      	nop
    	      __enable_irq();
    	      return;
 80045d4:	e0a8      	b.n	8004728 <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // 0 bit
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 80045d6:	210a      	movs	r1, #10
 80045d8:	4858      	ldr	r0, [pc, #352]	; (800473c <HAL_TIM_IC_CaptureCallback+0x214>)
 80045da:	f000 f8d3 	bl	8004784 <_Z10shiftRightPhh>
 80045de:	e029      	b.n	8004634 <HAL_TIM_IC_CaptureCallback+0x10c>
    	    // Shift replaces top bit with zero so nothing else to do
    	    //bitClear(tc[0], 7);                                   // Reset the 1 bit in the buffer
    	  }
    	  else                                                    // Not zero so must be a 1 bit
    	  { // 1 bit
    	    if (bitRead(tcFlags, tcHalfOne) == 0){                // First edge of a 1 bit
 80045e0:	4b54      	ldr	r3, [pc, #336]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_TIM_IC_CaptureCallback+0xe6>
    	      bitSet(tcFlags, tcHalfOne);                         // Flag we have the first half
 80045f8:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f043 0310 	orr.w	r3, r3, #16
 8004602:	b2da      	uxtb	r2, r3
 8004604:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004606:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004608:	b662      	cpsie	i
}
 800460a:	bf00      	nop
    	      __enable_irq();
    	      return;
 800460c:	e08c      	b.n	8004728 <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // Second edge of a 1 bit
    	    bitClear(tcFlags, tcHalfOne);                         // Clear half 1 flag
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f023 0310 	bic.w	r3, r3, #16
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b46      	ldr	r3, [pc, #280]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800461c:	701a      	strb	r2, [r3, #0]
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 800461e:	210a      	movs	r1, #10
 8004620:	4846      	ldr	r0, [pc, #280]	; (800473c <HAL_TIM_IC_CaptureCallback+0x214>)
 8004622:	f000 f8af 	bl	8004784 <_Z10shiftRightPhh>
    	    bitSet(tc[0], 7);                                     // Set the 1 bit in the buffer
 8004626:	4b45      	ldr	r3, [pc, #276]	; (800473c <HAL_TIM_IC_CaptureCallback+0x214>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800462e:	b2da      	uxtb	r2, r3
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <HAL_TIM_IC_CaptureCallback+0x214>)
 8004632:	701a      	strb	r2, [r3, #0]
    	  }
    	  // Congratulations, we have managed to read a valid 0 or 1 bit into buffer
    	  if (uint16_t( (tc[0] << 8) | (tc[1] & 0xff) ) == sync){                        // Last 2 bytes read = sync?
 8004634:	4b41      	ldr	r3, [pc, #260]	; (800473c <HAL_TIM_IC_CaptureCallback+0x214>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	b21a      	sxth	r2, r3
 800463c:	4b3f      	ldr	r3, [pc, #252]	; (800473c <HAL_TIM_IC_CaptureCallback+0x214>)
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	b21b      	sxth	r3, r3
 8004642:	4313      	orrs	r3, r2
 8004644:	b21b      	sxth	r3, r3
 8004646:	4a3e      	ldr	r2, [pc, #248]	; (8004740 <HAL_TIM_IC_CaptureCallback+0x218>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d16b      	bne.n	8004724 <HAL_TIM_IC_CaptureCallback+0x1fc>
    	    bitClear(tcFlags, tcFrameError);                      // Clear framing error
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f023 0302 	bic.w	r3, r3, #2
 8004656:	b2da      	uxtb	r2, r3
 8004658:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800465a:	701a      	strb	r2, [r3, #0]
    	    bitClear(tcFlags, tcOverrun);                         // Clear overrun error
 800465c:	4b35      	ldr	r3, [pc, #212]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f023 0304 	bic.w	r3, r3, #4
 8004666:	b2da      	uxtb	r2, r3
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800466a:	701a      	strb	r2, [r3, #0]
    	    if (bitRead(tcFlags, tcForceUpdate) == 1){
 800466c:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	10db      	asrs	r3, r3, #3
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_TIM_IC_CaptureCallback+0x16e>
    	      bitClear(tcFlags, tcValid);                         // Signal last TC read
 8004686:	4b2b      	ldr	r3, [pc, #172]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4b28      	ldr	r3, [pc, #160]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004694:	701a      	strb	r2, [r3, #0]
    	    }
    	    if (bitRead(tcFlags, tcValid) == 1){                  // Last TC not read
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_TIM_IC_CaptureCallback+0x196>
    	      bitSet(tcFlags, tcOverrun);                         // Flag overrun error
 80046ae:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f043 0304 	orr.w	r3, r3, #4
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80046bc:	701a      	strb	r2, [r3, #0]
    	     // __enable_irq();
    	     // return;                                             // Do nothing else
    	    }
    	    //if (jamEnable){
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	2b07      	cmp	r3, #7
 80046c6:	d80a      	bhi.n	80046de <HAL_TIM_IC_CaptureCallback+0x1b6>
    	    		tcIN[x] = tc[x + 2];
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	491b      	ldr	r1, [pc, #108]	; (800473c <HAL_TIM_IC_CaptureCallback+0x214>)
 80046d0:	5c89      	ldrb	r1, [r1, r2]
 80046d2:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80046d4:	54d1      	strb	r1, [r2, r3]
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	3301      	adds	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e7f1      	b.n	80046c2 <HAL_TIM_IC_CaptureCallback+0x19a>
    	    	}
    	    //}
    	    bitSet(tcFlags, tcValid);                             // Signal valid TC
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80046ec:	701a      	strb	r2, [r3, #0]
    	    jamCount++;
 80046ee:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_TIM_IC_CaptureCallback+0x210>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3301      	adds	r3, #1
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <HAL_TIM_IC_CaptureCallback+0x210>)
 80046fa:	701a      	strb	r2, [r3, #0]
    	    if (jamCount > 23){
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <HAL_TIM_IC_CaptureCallback+0x210>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b17      	cmp	r3, #23
 8004704:	bf8c      	ite	hi
 8004706:	2301      	movhi	r3, #1
 8004708:	2300      	movls	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <HAL_TIM_IC_CaptureCallback+0x1f8>
    	    	//jamEnable = false;
    	    	jamCount = 0;
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_TIM_IC_CaptureCallback+0x210>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
    	    	tcJammed = true;
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <HAL_TIM_IC_CaptureCallback+0x220>)
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
initTimecode();
 800471c:	f7fe fca2 	bl	8003064 <_Z12initTimecodev>
  __ASM volatile ("cpsie i" : : : "memory");
 8004720:	b662      	cpsie	i
}
 8004722:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004724:	b662      	cpsie	i
}
 8004726:	bf00      	nop
    	    //}
    	  }

    }
	__enable_irq();
}
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000630 	.word	0x20000630
 8004734:	2000062f 	.word	0x2000062f
 8004738:	2000062e 	.word	0x2000062e
 800473c:	20000624 	.word	0x20000624
 8004740:	ffffbffc 	.word	0xffffbffc
 8004744:	200000a0 	.word	0x200000a0
 8004748:	200000a8 	.word	0x200000a8

0800474c <_Z11clearBufferPhh>:

void clearBuffer(uint8_t theArray[], uint8_t theArraySize){
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	7bfa      	ldrb	r2, [r7, #15]
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	3b01      	subs	r3, #1
 8004762:	429a      	cmp	r2, r3
 8004764:	da08      	bge.n	8004778 <_Z11clearBufferPhh+0x2c>
    theArray[x] = 0;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4413      	add	r3, r2
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	3301      	adds	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
 8004776:	e7f1      	b.n	800475c <_Z11clearBufferPhh+0x10>
  }
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <_Z10shiftRightPhh>:

void shiftRight(uint8_t theArray[], uint8_t theArraySize){
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  uint8_t x;
  for (x = theArraySize; x > 0; x--){
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d024      	beq.n	80047e4 <_Z10shiftRightPhh+0x60>
    uint8_t xBit = bitRead(theArray[x - 1], 0);
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	3b01      	subs	r3, #1
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	73bb      	strb	r3, [r7, #14]
    theArray[x] = theArray[x] >> 1;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	4413      	add	r3, r2
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	1059      	asrs	r1, r3, #1
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	b2ca      	uxtb	r2, r1
 80047bc:	701a      	strb	r2, [r3, #0]
    theArray[x] = theArray[x] | (xBit << 7);
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4413      	add	r3, r2
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	b25a      	sxtb	r2, r3
 80047c8:	7bbb      	ldrb	r3, [r7, #14]
 80047ca:	01db      	lsls	r3, r3, #7
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b259      	sxtb	r1, r3
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	b2ca      	uxtb	r2, r1
 80047da:	701a      	strb	r2, [r3, #0]
  for (x = theArraySize; x > 0; x--){
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	3b01      	subs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	e7d7      	b.n	8004794 <_Z10shiftRightPhh+0x10>
  }
  theArray[x] = theArray[x] >> 1;
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	1059      	asrs	r1, r3, #1
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	b2ca      	uxtb	r2, r1
 80047f6:	701a      	strb	r2, [r3, #0]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
			  }
		  }
		ledCount++;
	}*/
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4aa1      	ldr	r2, [pc, #644]	; (8004a94 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004810:	4293      	cmp	r3, r2
 8004812:	f040 80bf 	bne.w	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
  {
	  switch (writeState){
 8004816:	4ba0      	ldr	r3, [pc, #640]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b07      	cmp	r3, #7
 800481c:	f200 80ba 	bhi.w	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	08004849 	.word	0x08004849
 800482c:	080048f7 	.word	0x080048f7
 8004830:	08004931 	.word	0x08004931
 8004834:	08004939 	.word	0x08004939
 8004838:	08004941 	.word	0x08004941
 800483c:	08004949 	.word	0x08004949
 8004840:	08004951 	.word	0x08004951
 8004844:	0800498b 	.word	0x0800498b
	  case 0x00:

		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8004848:	4b94      	ldr	r3, [pc, #592]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	085b      	lsrs	r3, r3, #1
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <HAL_TIM_PeriodElapsedCallback+0x6a>
			  (GPIOB->ODR) &= ~(1UL << (1));
 8004860:	4b8e      	ldr	r3, [pc, #568]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	4a8d      	ldr	r2, [pc, #564]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004866:	f023 0302 	bic.w	r3, r3, #2
 800486a:	6153      	str	r3, [r2, #20]
 800486c:	e005      	b.n	800487a <HAL_TIM_PeriodElapsedCallback+0x76>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 800486e:	4b8b      	ldr	r3, [pc, #556]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	4a8a      	ldr	r2, [pc, #552]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004874:	f043 0302 	orr.w	r3, r3, #2
 8004878:	6153      	str	r3, [r2, #20]
		  }

		  if (((tcWriteBuf[byteNumber] >> bitNumber) & 0x01) == 1){
 800487a:	4b89      	ldr	r3, [pc, #548]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a89      	ldr	r2, [pc, #548]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004880:	5cd3      	ldrb	r3, [r2, r3]
 8004882:	461a      	mov	r2, r3
 8004884:	4b88      	ldr	r3, [pc, #544]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	fa42 f303 	asr.w	r3, r2, r3
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_TIM_PeriodElapsedCallback+0x98>
			  writeState = 0x01;
 8004894:	4b80      	ldr	r3, [pc, #512]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e002      	b.n	80048a2 <HAL_TIM_PeriodElapsedCallback+0x9e>
		  } else {
			  writeState = 0x02;
 800489c:	4b7e      	ldr	r3, [pc, #504]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800489e:	2202      	movs	r2, #2
 80048a0:	701a      	strb	r2, [r3, #0]
		  }
		  bitNumber++;
 80048a2:	4b81      	ldr	r3, [pc, #516]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	4a7f      	ldr	r2, [pc, #508]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80048aa:	6013      	str	r3, [r2, #0]
		  if (bitNumber == 8){
 80048ac:	4b7e      	ldr	r3, [pc, #504]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d16e      	bne.n	8004992 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  bitNumber = 0;
 80048b4:	4b7c      	ldr	r3, [pc, #496]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
			  byteNumber++;
 80048ba:	4b79      	ldr	r3, [pc, #484]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3301      	adds	r3, #1
 80048c0:	4a77      	ldr	r2, [pc, #476]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80048c2:	6013      	str	r3, [r2, #0]
			  if (byteNumber == 10){
 80048c4:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b0a      	cmp	r3, #10
 80048ca:	d162      	bne.n	8004992 <HAL_TIM_PeriodElapsedCallback+0x18e>
				  byteNumber = 0;
 80048cc:	4b74      	ldr	r3, [pc, #464]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]

				  for (int i=0; i<10; i++){
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b09      	cmp	r3, #9
 80048da:	dc5a      	bgt.n	8004992 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  tcWriteBuf[i] = tcWrite[i];
 80048dc:	4a73      	ldr	r2, [pc, #460]	; (8004aac <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	7819      	ldrb	r1, [r3, #0]
 80048e4:	4a6f      	ldr	r2, [pc, #444]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	460a      	mov	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<10; i++){
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e7ef      	b.n	80048d6 <HAL_TIM_PeriodElapsedCallback+0xd2>
			  }
		  }
		  break;

	  case 0x01:
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 80048f6:	4b69      	ldr	r3, [pc, #420]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d006      	beq.n	800491c <HAL_TIM_PeriodElapsedCallback+0x118>
			  (GPIOB->ODR) &= ~(1UL << (1));
 800490e:	4b63      	ldr	r3, [pc, #396]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	4a62      	ldr	r2, [pc, #392]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004914:	f023 0302 	bic.w	r3, r3, #2
 8004918:	6153      	str	r3, [r2, #20]
 800491a:	e005      	b.n	8004928 <HAL_TIM_PeriodElapsedCallback+0x124>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 800491c:	4b5f      	ldr	r3, [pc, #380]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	4a5e      	ldr	r2, [pc, #376]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	6153      	str	r3, [r2, #20]
		  }
		  writeState = 0x00;
 8004928:	4b5b      	ldr	r3, [pc, #364]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800492a:	2200      	movs	r2, #0
 800492c:	701a      	strb	r2, [r3, #0]
		  break;
 800492e:	e031      	b.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x02:
		  writeState = 0x00;
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
		  break;
 8004936:	e02d      	b.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x03:
		  writeState = 0x04;
 8004938:	4b57      	ldr	r3, [pc, #348]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800493a:	2204      	movs	r2, #4
 800493c:	701a      	strb	r2, [r3, #0]
		  break;
 800493e:	e029      	b.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x04:
		  writeState = 0x01;
 8004940:	4b55      	ldr	r3, [pc, #340]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]
		  break;
 8004946:	e025      	b.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x05:
		  writeState = 0x06;
 8004948:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800494a:	2206      	movs	r2, #6
 800494c:	701a      	strb	r2, [r3, #0]

		  break;
 800494e:	e021      	b.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x06:
		  writeState = 0x07;
 8004950:	4b51      	ldr	r3, [pc, #324]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004952:	2207      	movs	r2, #7
 8004954:	701a      	strb	r2, [r3, #0]
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8004956:	4b51      	ldr	r3, [pc, #324]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b01      	cmp	r3, #1
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d006      	beq.n	800497c <HAL_TIM_PeriodElapsedCallback+0x178>
			  (GPIOB->ODR) &= ~(1UL << (1));
 800496e:	4b4b      	ldr	r3, [pc, #300]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4a4a      	ldr	r2, [pc, #296]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004974:	f023 0302 	bic.w	r3, r3, #2
 8004978:	6153      	str	r3, [r2, #20]
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
		  }
		  break;
 800497a:	e00b      	b.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
			  (GPIOB->ODR) |= (1UL << (1));
 800497c:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	4a46      	ldr	r2, [pc, #280]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004982:	f043 0302 	orr.w	r3, r3, #2
 8004986:	6153      	str	r3, [r2, #20]
		  break;
 8004988:	e004      	b.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x07:
		  writeState = 0x01;
 800498a:	4b43      	ldr	r3, [pc, #268]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
		  break;
 8004990:	e000      	b.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x190>
		  break;
 8004992:	bf00      	nop
	  }

  }
  if (htim == &htim7){  //Triggers once per frame
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a46      	ldr	r2, [pc, #280]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004998:	4293      	cmp	r3, r2
 800499a:	f040 80a3 	bne.w	8004ae4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
  __ASM volatile ("cpsid i" : : : "memory");
 800499e:	b672      	cpsid	i
}
 80049a0:	bf00      	nop
	  __disable_irq();
	  clockFrame++;
 80049a2:	4b44      	ldr	r3, [pc, #272]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	4a42      	ldr	r2, [pc, #264]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80049aa:	6013      	str	r3, [r2, #0]
	  if (compensate){    //If coming back from compensation
 80049ac:	4b42      	ldr	r3, [pc, #264]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d017      	beq.n	80049e6 <HAL_TIM_PeriodElapsedCallback+0x1e2>
		  //reset to proper ARR
		  __HAL_TIM_SET_AUTORELOAD(&htim7,frameRateARR[frameRate]);
 80049b6:	4b41      	ldr	r3, [pc, #260]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	4b40      	ldr	r3, [pc, #256]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80049be:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80049c2:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80049c8:	4b3c      	ldr	r3, [pc, #240]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	4b3c      	ldr	r3, [pc, #240]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80049d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80049d8:	60da      	str	r2, [r3, #12]
		  //TIM7->ARR = 50049;
		  compensate = false;
 80049da:	4b37      	ldr	r3, [pc, #220]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80049dc:	2200      	movs	r2, #0
 80049de:	701a      	strb	r2, [r3, #0]
		  compensationCounter = 0;
 80049e0:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	801a      	strh	r2, [r3, #0]
	  }
    //If it's time to compensate
	  if (compensationCounter == calibrationInterval[frameRate]){
 80049e6:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	4b33      	ldr	r3, [pc, #204]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	4619      	mov	r1, r3
 80049f4:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80049f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d024      	beq.n	8004a52 <HAL_TIM_PeriodElapsedCallback+0x24e>
		  __HAL_TIM_SET_AUTORELOAD(&htim7, (frameRateARR[frameRate] + calibrationArray[frameRate]));
 8004a08:	4b2c      	ldr	r3, [pc, #176]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004a10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004a1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a22:	441a      	add	r2, r3
 8004a24:	4b22      	ldr	r3, [pc, #136]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004a32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004a36:	461a      	mov	r2, r3
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4b23      	ldr	r3, [pc, #140]	; (8004acc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004a40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a44:	4413      	add	r3, r2
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004a4a:	60da      	str	r2, [r3, #12]
		  compensate = true;
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]

	  }
compensationCounter++;
 8004a52:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004a5e:	801a      	strh	r2, [r3, #0]

    if (clockFrame % frameRateDivisor[frameRate] == 0){
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a15      	ldr	r2, [pc, #84]	; (8004abc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	4611      	mov	r1, r2
 8004a6a:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8004a6c:	5c52      	ldrb	r2, [r2, r1]
 8004a6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a72:	fb02 f201 	mul.w	r2, r2, r1
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d026      	beq.n	8004ad4 <HAL_TIM_PeriodElapsedCallback+0x2d0>
		  (GPIOB->ODR) |= (1UL << (12));
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004a8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a90:	6153      	str	r3, [r2, #20]
 8004a92:	e025      	b.n	8004ae0 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8004a94:	200002e0 	.word	0x200002e0
 8004a98:	2000064a 	.word	0x2000064a
 8004a9c:	48000400 	.word	0x48000400
 8004aa0:	2000064c 	.word	0x2000064c
 8004aa4:	20000640 	.word	0x20000640
 8004aa8:	20000650 	.word	0x20000650
 8004aac:	20000634 	.word	0x20000634
 8004ab0:	20000294 	.word	0x20000294
 8004ab4:	200000ac 	.word	0x200000ac
 8004ab8:	20000656 	.word	0x20000656
 8004abc:	200000a9 	.word	0x200000a9
 8004ac0:	2000003c 	.word	0x2000003c
 8004ac4:	20000654 	.word	0x20000654
 8004ac8:	2000001c 	.word	0x2000001c
 8004acc:	200000c0 	.word	0x200000c0
 8004ad0:	20000034 	.word	0x20000034
	  } else {
			  (GPIOB->ODR) &= ~(1UL << (12));
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	4a05      	ldr	r2, [pc, #20]	; (8004af0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8004ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ade:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ae0:	b662      	cpsie	i
}
 8004ae2:	bf00      	nop
	  }

	  __enable_irq();
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	48000400 	.word	0x48000400

08004af4 <_Z10readEEPROMv>:
    {
        Error_Handler();
    } else {
    }
}
bool readEEPROM(){
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af04      	add	r7, sp, #16
  bool calibrationReadOK = true;
 8004afa:	2301      	movs	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
  uint8_t readCal[4];
  if(HAL_I2C_Mem_Read(memI2C, 0x50<<1, 0x0001, 1, &frameRate, 1, 1000)!= HAL_OK)	//offset
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <_Z10readEEPROMv+0x118>)
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b06:	9302      	str	r3, [sp, #8]
 8004b08:	2301      	movs	r3, #1
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <_Z10readEEPROMv+0x11c>)
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2301      	movs	r3, #1
 8004b12:	2201      	movs	r2, #1
 8004b14:	21a0      	movs	r1, #160	; 0xa0
 8004b16:	f002 fe43 	bl	80077a0 <HAL_I2C_Mem_Read>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
{
	//memOffset = 24;
	
}
HAL_Delay(20);
 8004b1e:	2014      	movs	r0, #20
 8004b20:	f000 ffea 	bl	8005af8 <HAL_Delay>
if(HAL_I2C_Mem_Read(memI2C, 0x50<<1, 0x0002, 1, &intOffset, 1, 1000)!= HAL_OK)	//frame rate
 8004b24:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <_Z10readEEPROMv+0x118>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b2c:	9302      	str	r3, [sp, #8]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <_Z10readEEPROMv+0x120>)
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2301      	movs	r3, #1
 8004b38:	2202      	movs	r2, #2
 8004b3a:	21a0      	movs	r1, #160	; 0xa0
 8004b3c:	f002 fe30 	bl	80077a0 <HAL_I2C_Mem_Read>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
{
	//frameRate = 0;
	
}
HAL_Delay(20);
 8004b44:	2014      	movs	r0, #20
 8004b46:	f000 ffd7 	bl	8005af8 <HAL_Delay>
if(HAL_I2C_Mem_Read(memI2C, 0x50<<1, 0x0003, 1, &autoOff, 1, 1000)!= HAL_OK)	//auto off
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <_Z10readEEPROMv+0x118>)
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b52:	9302      	str	r3, [sp, #8]
 8004b54:	2301      	movs	r3, #1
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	4b2f      	ldr	r3, [pc, #188]	; (8004c18 <_Z10readEEPROMv+0x124>)
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	2203      	movs	r2, #3
 8004b60:	21a0      	movs	r1, #160	; 0xa0
 8004b62:	f002 fe1d 	bl	80077a0 <HAL_I2C_Mem_Read>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
{
	//autoOff = 0;
	
}
HAL_Delay(20);
 8004b6a:	2014      	movs	r0, #20
 8004b6c:	f000 ffc4 	bl	8005af8 <HAL_Delay>
for (int i=0; i<4; i++){
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	dc25      	bgt.n	8004bc6 <_Z10readEEPROMv+0xd2>
if(HAL_I2C_Mem_Read(memI2C, 0x50<<1, 0x0005+i, 1, &readCal[i], 1, 1000)!= HAL_OK)	//auto off
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <_Z10readEEPROMv+0x118>)
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3305      	adds	r3, #5
 8004b84:	b299      	uxth	r1, r3
 8004b86:	1d3a      	adds	r2, r7, #4
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b90:	9202      	str	r2, [sp, #8]
 8004b92:	2201      	movs	r2, #1
 8004b94:	9201      	str	r2, [sp, #4]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	21a0      	movs	r1, #160	; 0xa0
 8004b9e:	f002 fdff 	bl	80077a0 <HAL_I2C_Mem_Read>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <_Z10readEEPROMv+0xc4>
{
	calibrationReadOK = false;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  break;
 8004bb6:	e006      	b.n	8004bc6 <_Z10readEEPROMv+0xd2>
}
HAL_Delay(10);
 8004bb8:	200a      	movs	r0, #10
 8004bba:	f000 ff9d 	bl	8005af8 <HAL_Delay>
for (int i=0; i<4; i++){
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	e7d6      	b.n	8004b74 <_Z10readEEPROMv+0x80>
}

if (calibrationReadOK){
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d019      	beq.n	8004c00 <_Z10readEEPROMv+0x10c>
calibration = (readCal[0]) | (readCal[1] << 8) | (readCal[2] << 16) | (readCal[3] << 24);
 8004bcc:	793b      	ldrb	r3, [r7, #4]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	797b      	ldrb	r3, [r7, #5]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	79bb      	ldrb	r3, [r7, #6]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	4313      	orrs	r3, r2
 8004be2:	461a      	mov	r2, r3
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <_Z10readEEPROMv+0x128>)
 8004be6:	601a      	str	r2, [r3, #0]
if (calibration < 23000000 || calibration > 25000000){
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <_Z10readEEPROMv+0x128>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <_Z10readEEPROMv+0x12c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d904      	bls.n	8004bfc <_Z10readEEPROMv+0x108>
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <_Z10readEEPROMv+0x128>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <_Z10readEEPROMv+0x130>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d901      	bls.n	8004c00 <_Z10readEEPROMv+0x10c>
  calibrationReadOK = false;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]
}
}

return calibrationReadOK;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000050 	.word	0x20000050
 8004c10:	200000a9 	.word	0x200000a9
 8004c14:	20000018 	.word	0x20000018
 8004c18:	200000b0 	.word	0x200000b0
 8004c1c:	20000014 	.word	0x20000014
 8004c20:	015ef3bf 	.word	0x015ef3bf
 8004c24:	017d7840 	.word	0x017d7840

08004c28 <_Z12updateEEPROMv>:
bool updateEEPROM(){
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af04      	add	r7, sp, #16
bool writeOK = true;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	71fb      	strb	r3, [r7, #7]
  //Offset
  //Timeout
  //User bits

  //Calibration
  HAL_Delay(10);
 8004c32:	200a      	movs	r0, #10
 8004c34:	f000 ff60 	bl	8005af8 <HAL_Delay>
	if(HAL_I2C_Mem_Write(memI2C , 0x50<<1, 0x0001, 1, &frameRate, 1,1000)!= HAL_OK)	//offset
 8004c38:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <_Z12updateEEPROMv+0xb8>)
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c40:	9302      	str	r3, [sp, #8]
 8004c42:	2301      	movs	r3, #1
 8004c44:	9301      	str	r3, [sp, #4]
 8004c46:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <_Z12updateEEPROMv+0xbc>)
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	21a0      	movs	r1, #160	; 0xa0
 8004c50:	f002 fc92 	bl	8007578 <HAL_I2C_Mem_Write>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <_Z12updateEEPROMv+0x40>
				{
						  writeOK = false;
 8004c64:	2300      	movs	r3, #0
 8004c66:	71fb      	strb	r3, [r7, #7]
				}
				  HAL_Delay(10);
 8004c68:	200a      	movs	r0, #10
 8004c6a:	f000 ff45 	bl	8005af8 <HAL_Delay>
			  
			 
				  if(HAL_I2C_Mem_Write(memI2C , 0x50<<1, 0x0002, 1, &intOffset, 1,250)!= HAL_OK)	//framerate
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <_Z12updateEEPROMv+0xb8>)
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	23fa      	movs	r3, #250	; 0xfa
 8004c74:	9302      	str	r3, [sp, #8]
 8004c76:	2301      	movs	r3, #1
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <_Z12updateEEPROMv+0xc0>)
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	2301      	movs	r3, #1
 8004c80:	2202      	movs	r2, #2
 8004c82:	21a0      	movs	r1, #160	; 0xa0
 8004c84:	f002 fc78 	bl	8007578 <HAL_I2C_Mem_Write>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bf14      	ite	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	2300      	moveq	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <_Z12updateEEPROMv+0x74>
					  {
						  writeOK = false;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	71fb      	strb	r3, [r7, #7]
					  }
				  HAL_Delay(10);
 8004c9c:	200a      	movs	r0, #10
 8004c9e:	f000 ff2b 	bl	8005af8 <HAL_Delay>
			  
			  
				  if(HAL_I2C_Mem_Write(memI2C , 0x50<<1, 0x0003, 1, &autoOff, 1,250)!= HAL_OK)	//autooff
 8004ca2:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <_Z12updateEEPROMv+0xb8>)
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	23fa      	movs	r3, #250	; 0xfa
 8004ca8:	9302      	str	r3, [sp, #8]
 8004caa:	2301      	movs	r3, #1
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <_Z12updateEEPROMv+0xc4>)
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	21a0      	movs	r1, #160	; 0xa0
 8004cb8:	f002 fc5e 	bl	8007578 <HAL_I2C_Mem_Write>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf14      	ite	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	2300      	moveq	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <_Z12updateEEPROMv+0xa8>
					  {
						  writeOK = false;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	71fb      	strb	r3, [r7, #7]
					  }
				  HAL_Delay(10);
 8004cd0:	200a      	movs	r0, #10
 8004cd2:	f000 ff11 	bl	8005af8 <HAL_Delay>
return writeOK;
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
			  
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000050 	.word	0x20000050
 8004ce4:	200000a9 	.word	0x200000a9
 8004ce8:	20000018 	.word	0x20000018
 8004cec:	200000b0 	.word	0x200000b0

08004cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf4:	b672      	cpsid	i
}
 8004cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cf8:	e7fe      	b.n	8004cf8 <Error_Handler+0x8>

08004cfa <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af04      	add	r7, sp, #16
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8004d06:	230a      	movs	r3, #10
 8004d08:	9302      	str	r3, [sp, #8]
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	1cfb      	adds	r3, r7, #3
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	2301      	movs	r3, #1
 8004d14:	2200      	movs	r2, #0
 8004d16:	2178      	movs	r1, #120	; 0x78
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f002 fc2d 	bl	8007578 <HAL_I2C_Mem_Write>
 8004d1e:	4603      	mov	r3, r0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8004d30:	2064      	movs	r0, #100	; 0x64
 8004d32:	f000 fee1 	bl	8005af8 <HAL_Delay>
    int status = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8004d3a:	21ae      	movs	r1, #174	; 0xae
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ffdc 	bl	8004cfa <ssd1306_WriteCommand>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461a      	mov	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8004d4c:	2120      	movs	r1, #32
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff ffd3 	bl	8004cfa <ssd1306_WriteCommand>
 8004d54:	4603      	mov	r3, r0
 8004d56:	461a      	mov	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004d5e:	2110      	movs	r1, #16
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ffca 	bl	8004cfa <ssd1306_WriteCommand>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8004d70:	21b0      	movs	r1, #176	; 0xb0
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ffc1 	bl	8004cfa <ssd1306_WriteCommand>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8004d82:	21c8      	movs	r1, #200	; 0xc8
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ffb8 	bl	8004cfa <ssd1306_WriteCommand>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8004d94:	2100      	movs	r1, #0
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ffaf 	bl	8004cfa <ssd1306_WriteCommand>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8004da6:	2110      	movs	r1, #16
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff ffa6 	bl	8004cfa <ssd1306_WriteCommand>
 8004dae:	4603      	mov	r3, r0
 8004db0:	461a      	mov	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8004db8:	2140      	movs	r1, #64	; 0x40
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ff9d 	bl	8004cfa <ssd1306_WriteCommand>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8004dca:	2181      	movs	r1, #129	; 0x81
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff94 	bl	8004cfa <ssd1306_WriteCommand>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8004ddc:	21ff      	movs	r1, #255	; 0xff
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ff8b 	bl	8004cfa <ssd1306_WriteCommand>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8004dee:	21a1      	movs	r1, #161	; 0xa1
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ff82 	bl	8004cfa <ssd1306_WriteCommand>
 8004df6:	4603      	mov	r3, r0
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8004e00:	21a6      	movs	r1, #166	; 0xa6
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff ff79 	bl	8004cfa <ssd1306_WriteCommand>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8004e12:	21a8      	movs	r1, #168	; 0xa8
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff ff70 	bl	8004cfa <ssd1306_WriteCommand>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x3F);
 8004e24:	213f      	movs	r1, #63	; 0x3f
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ff67 	bl	8004cfa <ssd1306_WriteCommand>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004e36:	21a4      	movs	r1, #164	; 0xa4
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ff5e 	bl	8004cfa <ssd1306_WriteCommand>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	461a      	mov	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8004e48:	21d3      	movs	r1, #211	; 0xd3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ff55 	bl	8004cfa <ssd1306_WriteCommand>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff4c 	bl	8004cfa <ssd1306_WriteCommand>
 8004e62:	4603      	mov	r3, r0
 8004e64:	461a      	mov	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8004e6c:	21d5      	movs	r1, #213	; 0xd5
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ff43 	bl	8004cfa <ssd1306_WriteCommand>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8004e7e:	21f0      	movs	r1, #240	; 0xf0
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff3a 	bl	8004cfa <ssd1306_WriteCommand>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8004e90:	21d9      	movs	r1, #217	; 0xd9
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff31 	bl	8004cfa <ssd1306_WriteCommand>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8004ea2:	2122      	movs	r1, #34	; 0x22
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ff28 	bl	8004cfa <ssd1306_WriteCommand>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	461a      	mov	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8004eb4:	21da      	movs	r1, #218	; 0xda
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ff1f 	bl	8004cfa <ssd1306_WriteCommand>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x12);
 8004ec6:	2112      	movs	r1, #18
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff ff16 	bl	8004cfa <ssd1306_WriteCommand>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8004ed8:	21db      	movs	r1, #219	; 0xdb
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff ff0d 	bl	8004cfa <ssd1306_WriteCommand>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8004eea:	2120      	movs	r1, #32
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff04 	bl	8004cfa <ssd1306_WriteCommand>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8004efc:	218d      	movs	r1, #141	; 0x8d
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fefb 	bl	8004cfa <ssd1306_WriteCommand>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8004f0e:	2114      	movs	r1, #20
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fef2 	bl	8004cfa <ssd1306_WriteCommand>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8004f20:	21af      	movs	r1, #175	; 0xaf
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fee9 	bl	8004cfa <ssd1306_WriteCommand>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <ssd1306_Init+0x214>
        return 1;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e00f      	b.n	8004f5c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f000 f813 	bl	8004f68 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f834 	bl	8004fb0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <ssd1306_Init+0x23c>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <ssd1306_Init+0x23c>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8004f54:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <ssd1306_Init+0x23c>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	715a      	strb	r2, [r3, #5]

    return 0;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000a7c 	.word	0x20000a7c

08004f68 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	e00d      	b.n	8004f94 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <ssd1306_Fill+0x1a>
 8004f7e:	2100      	movs	r1, #0
 8004f80:	e000      	b.n	8004f84 <ssd1306_Fill+0x1c>
 8004f82:	21ff      	movs	r1, #255	; 0xff
 8004f84:	4a09      	ldr	r2, [pc, #36]	; (8004fac <ssd1306_Fill+0x44>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	d3ed      	bcc.n	8004f78 <ssd1306_Fill+0x10>
    }
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	2000067c 	.word	0x2000067c

08004fb0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af04      	add	r7, sp, #16
 8004fb6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e020      	b.n	8005000 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	3b50      	subs	r3, #80	; 0x50
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fe97 	bl	8004cfa <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8004fcc:	2100      	movs	r1, #0
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff fe93 	bl	8004cfa <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8004fd4:	2110      	movs	r1, #16
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fe8f 	bl	8004cfa <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	01db      	lsls	r3, r3, #7
 8004fe0:	4a0b      	ldr	r2, [pc, #44]	; (8005010 <ssd1306_UpdateScreen+0x60>)
 8004fe2:	4413      	add	r3, r2
 8004fe4:	2264      	movs	r2, #100	; 0x64
 8004fe6:	9202      	str	r2, [sp, #8]
 8004fe8:	2280      	movs	r2, #128	; 0x80
 8004fea:	9201      	str	r2, [sp, #4]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2301      	movs	r3, #1
 8004ff0:	2240      	movs	r2, #64	; 0x40
 8004ff2:	2178      	movs	r1, #120	; 0x78
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f002 fabf 	bl	8007578 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b07      	cmp	r3, #7
 8005004:	d9db      	bls.n	8004fbe <ssd1306_UpdateScreen+0xe>
    }
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	2000067c 	.word	0x2000067c

08005014 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
 800501e:	460b      	mov	r3, r1
 8005020:	71bb      	strb	r3, [r7, #6]
 8005022:	4613      	mov	r3, r2
 8005024:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8005026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502a:	2b00      	cmp	r3, #0
 800502c:	db48      	blt.n	80050c0 <ssd1306_DrawPixel+0xac>
 800502e:	79bb      	ldrb	r3, [r7, #6]
 8005030:	2b3f      	cmp	r3, #63	; 0x3f
 8005032:	d845      	bhi.n	80050c0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <ssd1306_DrawPixel+0xb8>)
 8005036:	791b      	ldrb	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d006      	beq.n	800504a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800503c:	797b      	ldrb	r3, [r7, #5]
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800504a:	797b      	ldrb	r3, [r7, #5]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d11a      	bne.n	8005086 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005050:	79fa      	ldrb	r2, [r7, #7]
 8005052:	79bb      	ldrb	r3, [r7, #6]
 8005054:	08db      	lsrs	r3, r3, #3
 8005056:	b2d8      	uxtb	r0, r3
 8005058:	4603      	mov	r3, r0
 800505a:	01db      	lsls	r3, r3, #7
 800505c:	4413      	add	r3, r2
 800505e:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <ssd1306_DrawPixel+0xbc>)
 8005060:	5cd3      	ldrb	r3, [r2, r3]
 8005062:	b25a      	sxtb	r2, r3
 8005064:	79bb      	ldrb	r3, [r7, #6]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	b25b      	sxtb	r3, r3
 8005072:	4313      	orrs	r3, r2
 8005074:	b259      	sxtb	r1, r3
 8005076:	79fa      	ldrb	r2, [r7, #7]
 8005078:	4603      	mov	r3, r0
 800507a:	01db      	lsls	r3, r3, #7
 800507c:	4413      	add	r3, r2
 800507e:	b2c9      	uxtb	r1, r1
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <ssd1306_DrawPixel+0xbc>)
 8005082:	54d1      	strb	r1, [r2, r3]
 8005084:	e01d      	b.n	80050c2 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005086:	79fa      	ldrb	r2, [r7, #7]
 8005088:	79bb      	ldrb	r3, [r7, #6]
 800508a:	08db      	lsrs	r3, r3, #3
 800508c:	b2d8      	uxtb	r0, r3
 800508e:	4603      	mov	r3, r0
 8005090:	01db      	lsls	r3, r3, #7
 8005092:	4413      	add	r3, r2
 8005094:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <ssd1306_DrawPixel+0xbc>)
 8005096:	5cd3      	ldrb	r3, [r2, r3]
 8005098:	b25a      	sxtb	r2, r3
 800509a:	79bb      	ldrb	r3, [r7, #6]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	2101      	movs	r1, #1
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	b25b      	sxtb	r3, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	b25b      	sxtb	r3, r3
 80050ac:	4013      	ands	r3, r2
 80050ae:	b259      	sxtb	r1, r3
 80050b0:	79fa      	ldrb	r2, [r7, #7]
 80050b2:	4603      	mov	r3, r0
 80050b4:	01db      	lsls	r3, r3, #7
 80050b6:	4413      	add	r3, r2
 80050b8:	b2c9      	uxtb	r1, r1
 80050ba:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <ssd1306_DrawPixel+0xbc>)
 80050bc:	54d1      	strb	r1, [r2, r3]
 80050be:	e000      	b.n	80050c2 <ssd1306_DrawPixel+0xae>
        return;
 80050c0:	bf00      	nop
    }
}
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	20000a7c 	.word	0x20000a7c
 80050d0:	2000067c 	.word	0x2000067c

080050d4 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4604      	mov	r4, r0
 80050dc:	1d38      	adds	r0, r7, #4
 80050de:	e880 0006 	stmia.w	r0, {r1, r2}
 80050e2:	461a      	mov	r2, r3
 80050e4:	4623      	mov	r3, r4
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	4613      	mov	r3, r2
 80050ea:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80050ec:	4b38      	ldr	r3, [pc, #224]	; (80051d0 <ssd1306_WriteChar+0xfc>)
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	793b      	ldrb	r3, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	2b7f      	cmp	r3, #127	; 0x7f
 80050f8:	dc06      	bgt.n	8005108 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80050fa:	4b35      	ldr	r3, [pc, #212]	; (80051d0 <ssd1306_WriteChar+0xfc>)
 80050fc:	885b      	ldrh	r3, [r3, #2]
 80050fe:	461a      	mov	r2, r3
 8005100:	797b      	ldrb	r3, [r7, #5]
 8005102:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8005104:	2b3f      	cmp	r3, #63	; 0x3f
 8005106:	dd01      	ble.n	800510c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8005108:	2300      	movs	r3, #0
 800510a:	e05d      	b.n	80051c8 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e04c      	b.n	80051ac <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	3b20      	subs	r3, #32
 8005118:	7979      	ldrb	r1, [r7, #5]
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	4619      	mov	r1, r3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	440b      	add	r3, r1
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800512c:	2300      	movs	r3, #0
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	e034      	b.n	800519c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d012      	beq.n	8005168 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005142:	4b23      	ldr	r3, [pc, #140]	; (80051d0 <ssd1306_WriteChar+0xfc>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	4413      	add	r3, r2
 800514e:	b2d8      	uxtb	r0, r3
 8005150:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <ssd1306_WriteChar+0xfc>)
 8005152:	885b      	ldrh	r3, [r3, #2]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	4413      	add	r3, r2
 800515c:	b2db      	uxtb	r3, r3
 800515e:	7bba      	ldrb	r2, [r7, #14]
 8005160:	4619      	mov	r1, r3
 8005162:	f7ff ff57 	bl	8005014 <ssd1306_DrawPixel>
 8005166:	e016      	b.n	8005196 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005168:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <ssd1306_WriteChar+0xfc>)
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b2da      	uxtb	r2, r3
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	4413      	add	r3, r2
 8005174:	b2d8      	uxtb	r0, r3
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <ssd1306_WriteChar+0xfc>)
 8005178:	885b      	ldrh	r3, [r3, #2]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4413      	add	r3, r2
 8005182:	b2d9      	uxtb	r1, r3
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	2b00      	cmp	r3, #0
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	f7ff ff3f 	bl	8005014 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	3301      	adds	r3, #1
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	793b      	ldrb	r3, [r7, #4]
 800519e:	461a      	mov	r2, r3
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d3c5      	bcc.n	8005132 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	797b      	ldrb	r3, [r7, #5]
 80051ae:	461a      	mov	r2, r3
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d3ad      	bcc.n	8005112 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <ssd1306_WriteChar+0xfc>)
 80051b8:	881a      	ldrh	r2, [r3, #0]
 80051ba:	793b      	ldrb	r3, [r7, #4]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	4413      	add	r3, r2
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <ssd1306_WriteChar+0xfc>)
 80051c4:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3724      	adds	r7, #36	; 0x24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}
 80051d0:	20000a7c 	.word	0x20000a7c

080051d4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	1d38      	adds	r0, r7, #4
 80051de:	e880 0006 	stmia.w	r0, {r1, r2}
 80051e2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80051e4:	e012      	b.n	800520c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	7818      	ldrb	r0, [r3, #0]
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	1d3a      	adds	r2, r7, #4
 80051ee:	ca06      	ldmia	r2, {r1, r2}
 80051f0:	f7ff ff70 	bl	80050d4 <ssd1306_WriteChar>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d002      	beq.n	8005206 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	e008      	b.n	8005218 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
    while (*str)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e8      	bne.n	80051e6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	781b      	ldrb	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	460a      	mov	r2, r1
 800522a:	71fb      	strb	r3, [r7, #7]
 800522c:	4613      	mov	r3, r2
 800522e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	b29a      	uxth	r2, r3
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <ssd1306_SetCursor+0x2c>)
 8005236:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005238:	79bb      	ldrb	r3, [r7, #6]
 800523a:	b29a      	uxth	r2, r3
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <ssd1306_SetCursor+0x2c>)
 800523e:	805a      	strh	r2, [r3, #2]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000a7c 	.word	0x20000a7c

08005250 <ssd1306_DrawBattery>:

void ssd1306_DrawBattery(float remaining)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	; 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	ed87 0a01 	vstr	s0, [r7, #4]
	int xOffset = 4;
 800525a:	2304      	movs	r3, #4
 800525c:	60fb      	str	r3, [r7, #12]
	//clear section
	for (int x=0; x<26; x++){
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
 8005262:	e02d      	b.n	80052c0 <ssd1306_DrawBattery+0x70>
		for (int y=50; y<64; y++){
 8005264:	2332      	movs	r3, #50	; 0x32
 8005266:	623b      	str	r3, [r7, #32]
 8005268:	e024      	b.n	80052b4 <ssd1306_DrawBattery+0x64>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	2b00      	cmp	r3, #0
 800526e:	da00      	bge.n	8005272 <ssd1306_DrawBattery+0x22>
 8005270:	3307      	adds	r3, #7
 8005272:	10db      	asrs	r3, r3, #3
 8005274:	461a      	mov	r2, r3
 8005276:	01d1      	lsls	r1, r2, #7
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	440b      	add	r3, r1
 800527c:	4994      	ldr	r1, [pc, #592]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	b259      	sxtb	r1, r3
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	4258      	negs	r0, r3
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	f000 0007 	and.w	r0, r0, #7
 800528e:	bf58      	it	pl
 8005290:	4243      	negpl	r3, r0
 8005292:	2001      	movs	r0, #1
 8005294:	fa00 f303 	lsl.w	r3, r0, r3
 8005298:	b25b      	sxtb	r3, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	b25b      	sxtb	r3, r3
 800529e:	400b      	ands	r3, r1
 80052a0:	b259      	sxtb	r1, r3
 80052a2:	01d2      	lsls	r2, r2, #7
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	4413      	add	r3, r2
 80052a8:	b2c9      	uxtb	r1, r1
 80052aa:	4a89      	ldr	r2, [pc, #548]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 80052ac:	54d1      	strb	r1, [r2, r3]
		for (int y=50; y<64; y++){
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	3301      	adds	r3, #1
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	2b3f      	cmp	r3, #63	; 0x3f
 80052b8:	ddd7      	ble.n	800526a <ssd1306_DrawBattery+0x1a>
	for (int x=0; x<26; x++){
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	3301      	adds	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	2b19      	cmp	r3, #25
 80052c4:	ddce      	ble.n	8005264 <ssd1306_DrawBattery+0x14>
		}
	}
	//draw outline
	for (int x=2+xOffset; x<24+xOffset; x++)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	3302      	adds	r3, #2
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	e01c      	b.n	8005308 <ssd1306_DrawBattery+0xb8>
	{
		SSD1306_Buffer[x + (52 / 8) * SSD1306_WIDTH] |= 1 << (52 % 8);
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80052d4:	4a7e      	ldr	r2, [pc, #504]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 80052d6:	5cd2      	ldrb	r2, [r2, r3]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80052de:	f042 0210 	orr.w	r2, r2, #16
 80052e2:	b2d1      	uxtb	r1, r2
 80052e4:	4a7a      	ldr	r2, [pc, #488]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 80052e6:	54d1      	strb	r1, [r2, r3]
		SSD1306_Buffer[x + (61 / 8) * SSD1306_WIDTH] |= 1 << (61 % 8);
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80052ee:	4a78      	ldr	r2, [pc, #480]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 80052f0:	5cd2      	ldrb	r2, [r2, r3]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80052f8:	f042 0220 	orr.w	r2, r2, #32
 80052fc:	b2d1      	uxtb	r1, r2
 80052fe:	4a74      	ldr	r2, [pc, #464]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 8005300:	54d1      	strb	r1, [r2, r3]
	for (int x=2+xOffset; x<24+xOffset; x++)
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3301      	adds	r3, #1
 8005306:	61fb      	str	r3, [r7, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3317      	adds	r3, #23
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	429a      	cmp	r2, r3
 8005310:	dddd      	ble.n	80052ce <ssd1306_DrawBattery+0x7e>
	}
	for (int y=52; y<62; y++)
 8005312:	2334      	movs	r3, #52	; 0x34
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	e072      	b.n	80053fe <ssd1306_DrawBattery+0x1ae>
	{
		SSD1306_Buffer[2+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1c99      	adds	r1, r3, #2
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b00      	cmp	r3, #0
 8005320:	da00      	bge.n	8005324 <ssd1306_DrawBattery+0xd4>
 8005322:	3307      	adds	r3, #7
 8005324:	10db      	asrs	r3, r3, #3
 8005326:	461a      	mov	r2, r3
 8005328:	01d3      	lsls	r3, r2, #7
 800532a:	440b      	add	r3, r1
 800532c:	4968      	ldr	r1, [pc, #416]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 800532e:	5ccb      	ldrb	r3, [r1, r3]
 8005330:	b259      	sxtb	r1, r3
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	4258      	negs	r0, r3
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	f000 0007 	and.w	r0, r0, #7
 800533e:	bf58      	it	pl
 8005340:	4243      	negpl	r3, r0
 8005342:	2001      	movs	r0, #1
 8005344:	fa00 f303 	lsl.w	r3, r0, r3
 8005348:	b25b      	sxtb	r3, r3
 800534a:	430b      	orrs	r3, r1
 800534c:	b258      	sxtb	r0, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1c99      	adds	r1, r3, #2
 8005352:	01d3      	lsls	r3, r2, #7
 8005354:	440b      	add	r3, r1
 8005356:	b2c1      	uxtb	r1, r0
 8005358:	4a5d      	ldr	r2, [pc, #372]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 800535a:	54d1      	strb	r1, [r2, r3]
		SSD1306_Buffer[23+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f103 0117 	add.w	r1, r3, #23
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	da00      	bge.n	800536a <ssd1306_DrawBattery+0x11a>
 8005368:	3307      	adds	r3, #7
 800536a:	10db      	asrs	r3, r3, #3
 800536c:	461a      	mov	r2, r3
 800536e:	01d3      	lsls	r3, r2, #7
 8005370:	440b      	add	r3, r1
 8005372:	4957      	ldr	r1, [pc, #348]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 8005374:	5ccb      	ldrb	r3, [r1, r3]
 8005376:	b259      	sxtb	r1, r3
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	4258      	negs	r0, r3
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	f000 0007 	and.w	r0, r0, #7
 8005384:	bf58      	it	pl
 8005386:	4243      	negpl	r3, r0
 8005388:	2001      	movs	r0, #1
 800538a:	fa00 f303 	lsl.w	r3, r0, r3
 800538e:	b25b      	sxtb	r3, r3
 8005390:	430b      	orrs	r3, r1
 8005392:	b258      	sxtb	r0, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f103 0117 	add.w	r1, r3, #23
 800539a:	01d3      	lsls	r3, r2, #7
 800539c:	440b      	add	r3, r1
 800539e:	b2c1      	uxtb	r1, r0
 80053a0:	4a4b      	ldr	r2, [pc, #300]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 80053a2:	54d1      	strb	r1, [r2, r3]
		if (y < 61 && y > 52){
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b3c      	cmp	r3, #60	; 0x3c
 80053a8:	dc26      	bgt.n	80053f8 <ssd1306_DrawBattery+0x1a8>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b34      	cmp	r3, #52	; 0x34
 80053ae:	dd23      	ble.n	80053f8 <ssd1306_DrawBattery+0x1a8>
			SSD1306_Buffer[25+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f103 0119 	add.w	r1, r3, #25
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da00      	bge.n	80053be <ssd1306_DrawBattery+0x16e>
 80053bc:	3307      	adds	r3, #7
 80053be:	10db      	asrs	r3, r3, #3
 80053c0:	461a      	mov	r2, r3
 80053c2:	01d3      	lsls	r3, r2, #7
 80053c4:	440b      	add	r3, r1
 80053c6:	4942      	ldr	r1, [pc, #264]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 80053c8:	5ccb      	ldrb	r3, [r1, r3]
 80053ca:	b259      	sxtb	r1, r3
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	4258      	negs	r0, r3
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	f000 0007 	and.w	r0, r0, #7
 80053d8:	bf58      	it	pl
 80053da:	4243      	negpl	r3, r0
 80053dc:	2001      	movs	r0, #1
 80053de:	fa00 f303 	lsl.w	r3, r0, r3
 80053e2:	b25b      	sxtb	r3, r3
 80053e4:	430b      	orrs	r3, r1
 80053e6:	b258      	sxtb	r0, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f103 0119 	add.w	r1, r3, #25
 80053ee:	01d3      	lsls	r3, r2, #7
 80053f0:	440b      	add	r3, r1
 80053f2:	b2c1      	uxtb	r1, r0
 80053f4:	4a36      	ldr	r2, [pc, #216]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 80053f6:	54d1      	strb	r1, [r2, r3]
	for (int y=52; y<62; y++)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	3301      	adds	r3, #1
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b3d      	cmp	r3, #61	; 0x3d
 8005402:	dd89      	ble.n	8005318 <ssd1306_DrawBattery+0xc8>
		}
	}
	SSD1306_Buffer[24+xOffset + (53 / 8) * SSD1306_WIDTH] |= 1 << (53 % 8);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800540a:	4a31      	ldr	r2, [pc, #196]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 800540c:	5cd2      	ldrb	r2, [r2, r3]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8005414:	f042 0220 	orr.w	r2, r2, #32
 8005418:	b2d1      	uxtb	r1, r2
 800541a:	4a2d      	ldr	r2, [pc, #180]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 800541c:	54d1      	strb	r1, [r2, r3]
	SSD1306_Buffer[24+xOffset + (60 / 8) * SSD1306_WIDTH] |= 1 << (60 % 8);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8005424:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 8005426:	5cd2      	ldrb	r2, [r2, r3]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 7366 	add.w	r3, r3, #920	; 0x398
 800542e:	f042 0210 	orr.w	r2, r2, #16
 8005432:	b2d1      	uxtb	r1, r2
 8005434:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 8005436:	54d1      	strb	r1, [r2, r3]

	//Draw remaining
	int slices = (int)(20.0 * remaining);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7fb f82d 	bl	8000498 <__aeabi_f2d>
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <ssd1306_DrawBattery+0x284>)
 8005444:	f7fb f880 	bl	8000548 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4610      	mov	r0, r2
 800544e:	4619      	mov	r1, r3
 8005450:	f7fb fa8c 	bl	800096c <__aeabi_d2iz>
 8005454:	4603      	mov	r3, r0
 8005456:	60bb      	str	r3, [r7, #8]
	for (int x=3+xOffset; x<(4+xOffset+slices); x++)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3303      	adds	r3, #3
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e02b      	b.n	80054b8 <ssd1306_DrawBattery+0x268>
	{
		for (int y=53; y<61; y++)
 8005460:	2335      	movs	r3, #53	; 0x35
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e022      	b.n	80054ac <ssd1306_DrawBattery+0x25c>
			{
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	da00      	bge.n	800546e <ssd1306_DrawBattery+0x21e>
 800546c:	3307      	adds	r3, #7
 800546e:	10db      	asrs	r3, r3, #3
 8005470:	461a      	mov	r2, r3
 8005472:	01d1      	lsls	r1, r2, #7
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	440b      	add	r3, r1
 8005478:	4915      	ldr	r1, [pc, #84]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	b259      	sxtb	r1, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4258      	negs	r0, r3
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	f000 0007 	and.w	r0, r0, #7
 800548a:	bf58      	it	pl
 800548c:	4243      	negpl	r3, r0
 800548e:	2001      	movs	r0, #1
 8005490:	fa00 f303 	lsl.w	r3, r0, r3
 8005494:	b25b      	sxtb	r3, r3
 8005496:	430b      	orrs	r3, r1
 8005498:	b259      	sxtb	r1, r3
 800549a:	01d2      	lsls	r2, r2, #7
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	b2c9      	uxtb	r1, r1
 80054a2:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <ssd1306_DrawBattery+0x280>)
 80054a4:	54d1      	strb	r1, [r2, r3]
		for (int y=53; y<61; y++)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3301      	adds	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b3c      	cmp	r3, #60	; 0x3c
 80054b0:	ddd9      	ble.n	8005466 <ssd1306_DrawBattery+0x216>
	for (int x=3+xOffset; x<(4+xOffset+slices); x++)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	3301      	adds	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1d1a      	adds	r2, r3, #4
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4413      	add	r3, r2
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	dbcc      	blt.n	8005460 <ssd1306_DrawBattery+0x210>
			}
	}
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	3728      	adds	r7, #40	; 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	2000067c 	.word	0x2000067c
 80054d4:	40340000 	.word	0x40340000

080054d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054de:	4b11      	ldr	r3, [pc, #68]	; (8005524 <HAL_MspInit+0x4c>)
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	4a10      	ldr	r2, [pc, #64]	; (8005524 <HAL_MspInit+0x4c>)
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	6613      	str	r3, [r2, #96]	; 0x60
 80054ea:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <HAL_MspInit+0x4c>)
 80054ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_MspInit+0x4c>)
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_MspInit+0x4c>)
 80054fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005500:	6593      	str	r3, [r2, #88]	; 0x58
 8005502:	4b08      	ldr	r3, [pc, #32]	; (8005524 <HAL_MspInit+0x4c>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800550e:	2200      	movs	r2, #0
 8005510:	2101      	movs	r1, #1
 8005512:	f06f 0003 	mvn.w	r0, #3
 8005516:	f001 fc2c 	bl	8006d72 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000

08005528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a15      	ldr	r2, [pc, #84]	; (800559c <HAL_ADC_MspInit+0x74>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d124      	bne.n	8005594 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <HAL_ADC_MspInit+0x78>)
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <HAL_ADC_MspInit+0x78>)
 8005550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005556:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <HAL_ADC_MspInit+0x78>)
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005562:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <HAL_ADC_MspInit+0x78>)
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	4a0e      	ldr	r2, [pc, #56]	; (80055a0 <HAL_ADC_MspInit+0x78>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <HAL_ADC_MspInit+0x78>)
 8005570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATT_CHECK_Pin;
 800557a:	2308      	movs	r3, #8
 800557c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800557e:	230b      	movs	r3, #11
 8005580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_CHECK_GPIO_Port, &GPIO_InitStruct);
 8005586:	f107 0314 	add.w	r3, r7, #20
 800558a:	4619      	mov	r1, r3
 800558c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005590:	f001 fdd0 	bl	8007134 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005594:	bf00      	nop
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	50040000 	.word	0x50040000
 80055a0:	40021000 	.word	0x40021000

080055a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ac:	f107 0314 	add.w	r3, r7, #20
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a19      	ldr	r2, [pc, #100]	; (8005628 <HAL_DAC_MspInit+0x84>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d12c      	bne.n	8005620 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80055c6:	4b19      	ldr	r3, [pc, #100]	; (800562c <HAL_DAC_MspInit+0x88>)
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	4a18      	ldr	r2, [pc, #96]	; (800562c <HAL_DAC_MspInit+0x88>)
 80055cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055d0:	6593      	str	r3, [r2, #88]	; 0x58
 80055d2:	4b16      	ldr	r3, [pc, #88]	; (800562c <HAL_DAC_MspInit+0x88>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <HAL_DAC_MspInit+0x88>)
 80055e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e2:	4a12      	ldr	r2, [pc, #72]	; (800562c <HAL_DAC_MspInit+0x88>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055ea:	4b10      	ldr	r3, [pc, #64]	; (800562c <HAL_DAC_MspInit+0x88>)
 80055ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = TCVC_Pin;
 80055f6:	2320      	movs	r3, #32
 80055f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055fa:	2303      	movs	r3, #3
 80055fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TCVC_GPIO_Port, &GPIO_InitStruct);
 8005602:	f107 0314 	add.w	r3, r7, #20
 8005606:	4619      	mov	r1, r3
 8005608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800560c:	f001 fd92 	bl	8007134 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 8005610:	2200      	movs	r2, #0
 8005612:	2108      	movs	r1, #8
 8005614:	2036      	movs	r0, #54	; 0x36
 8005616:	f001 fbac 	bl	8006d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800561a:	2036      	movs	r0, #54	; 0x36
 800561c:	f001 fbc5 	bl	8006daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005620:	bf00      	nop
 8005622:	3728      	adds	r7, #40	; 0x28
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40007400 	.word	0x40007400
 800562c:	40021000 	.word	0x40021000

08005630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08c      	sub	sp, #48	; 0x30
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005638:	f107 031c 	add.w	r3, r7, #28
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	605a      	str	r2, [r3, #4]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2e      	ldr	r2, [pc, #184]	; (8005708 <HAL_I2C_MspInit+0xd8>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d128      	bne.n	80056a4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005652:	4b2e      	ldr	r3, [pc, #184]	; (800570c <HAL_I2C_MspInit+0xdc>)
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	4a2d      	ldr	r2, [pc, #180]	; (800570c <HAL_I2C_MspInit+0xdc>)
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800565e:	4b2b      	ldr	r3, [pc, #172]	; (800570c <HAL_I2C_MspInit+0xdc>)
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEM_SCL_Pin|MEM_SDA_Pin;
 800566a:	23c0      	movs	r3, #192	; 0xc0
 800566c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800566e:	2312      	movs	r3, #18
 8005670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005672:	2301      	movs	r3, #1
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005676:	2303      	movs	r3, #3
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800567a:	2304      	movs	r3, #4
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800567e:	f107 031c 	add.w	r3, r7, #28
 8005682:	4619      	mov	r1, r3
 8005684:	4822      	ldr	r0, [pc, #136]	; (8005710 <HAL_I2C_MspInit+0xe0>)
 8005686:	f001 fd55 	bl	8007134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800568a:	4b20      	ldr	r3, [pc, #128]	; (800570c <HAL_I2C_MspInit+0xdc>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HAL_I2C_MspInit+0xdc>)
 8005690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005694:	6593      	str	r3, [r2, #88]	; 0x58
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <HAL_I2C_MspInit+0xdc>)
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80056a2:	e02d      	b.n	8005700 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <HAL_I2C_MspInit+0xe4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d128      	bne.n	8005700 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ae:	4b17      	ldr	r3, [pc, #92]	; (800570c <HAL_I2C_MspInit+0xdc>)
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	4a16      	ldr	r2, [pc, #88]	; (800570c <HAL_I2C_MspInit+0xdc>)
 80056b4:	f043 0302 	orr.w	r3, r3, #2
 80056b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056ba:	4b14      	ldr	r3, [pc, #80]	; (800570c <HAL_I2C_MspInit+0xdc>)
 80056bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MON_SCL_Pin|MON_SDA_Pin;
 80056c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056cc:	2312      	movs	r3, #18
 80056ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056d0:	2301      	movs	r3, #1
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d4:	2303      	movs	r3, #3
 80056d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80056d8:	2304      	movs	r3, #4
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056dc:	f107 031c 	add.w	r3, r7, #28
 80056e0:	4619      	mov	r1, r3
 80056e2:	480b      	ldr	r0, [pc, #44]	; (8005710 <HAL_I2C_MspInit+0xe0>)
 80056e4:	f001 fd26 	bl	8007134 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80056e8:	4b08      	ldr	r3, [pc, #32]	; (800570c <HAL_I2C_MspInit+0xdc>)
 80056ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ec:	4a07      	ldr	r2, [pc, #28]	; (800570c <HAL_I2C_MspInit+0xdc>)
 80056ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056f2:	6593      	str	r3, [r2, #88]	; 0x58
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_I2C_MspInit+0xdc>)
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
}
 8005700:	bf00      	nop
 8005702:	3730      	adds	r7, #48	; 0x30
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40005400 	.word	0x40005400
 800570c:	40021000 	.word	0x40021000
 8005710:	48000400 	.word	0x48000400
 8005714:	40005800 	.word	0x40005800

08005718 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	605a      	str	r2, [r3, #4]
 800572a:	609a      	str	r2, [r3, #8]
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005738:	d130      	bne.n	800579c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <HAL_TIM_IC_MspInit+0x8c>)
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <HAL_TIM_IC_MspInit+0x8c>)
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	6593      	str	r3, [r2, #88]	; 0x58
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <HAL_TIM_IC_MspInit+0x8c>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_TIM_IC_MspInit+0x8c>)
 8005754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005756:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <HAL_TIM_IC_MspInit+0x8c>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <HAL_TIM_IC_MspInit+0x8c>)
 8005760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TC_IN_Pin;
 800576a:	2304      	movs	r3, #4
 800576c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576e:	2302      	movs	r3, #2
 8005770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005776:	2300      	movs	r3, #0
 8005778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800577a:	2301      	movs	r3, #1
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_IN_GPIO_Port, &GPIO_InitStruct);
 800577e:	f107 0314 	add.w	r3, r7, #20
 8005782:	4619      	mov	r1, r3
 8005784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005788:	f001 fcd4 	bl	8007134 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800578c:	2200      	movs	r2, #0
 800578e:	2102      	movs	r1, #2
 8005790:	201c      	movs	r0, #28
 8005792:	f001 faee 	bl	8006d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005796:	201c      	movs	r0, #28
 8005798:	f001 fb07 	bl	8006daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800579c:	bf00      	nop
 800579e:	3728      	adds	r7, #40	; 0x28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40021000 	.word	0x40021000

080057a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a27      	ldr	r2, [pc, #156]	; (8005854 <HAL_TIM_Base_MspInit+0xac>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d114      	bne.n	80057e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80057ba:	4b27      	ldr	r3, [pc, #156]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	4a26      	ldr	r2, [pc, #152]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 80057c0:	f043 0310 	orr.w	r3, r3, #16
 80057c4:	6593      	str	r3, [r2, #88]	; 0x58
 80057c6:	4b24      	ldr	r3, [pc, #144]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 80057d2:	2200      	movs	r2, #0
 80057d4:	2108      	movs	r1, #8
 80057d6:	2036      	movs	r0, #54	; 0x36
 80057d8:	f001 facb 	bl	8006d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80057dc:	2036      	movs	r0, #54	; 0x36
 80057de:	f001 fae4 	bl	8006daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80057e2:	e032      	b.n	800584a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1c      	ldr	r2, [pc, #112]	; (800585c <HAL_TIM_Base_MspInit+0xb4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d114      	bne.n	8005818 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80057ee:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	4a19      	ldr	r2, [pc, #100]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 80057f4:	f043 0320 	orr.w	r3, r3, #32
 80057f8:	6593      	str	r3, [r2, #88]	; 0x58
 80057fa:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005806:	2200      	movs	r2, #0
 8005808:	2100      	movs	r1, #0
 800580a:	2037      	movs	r0, #55	; 0x37
 800580c:	f001 fab1 	bl	8006d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005810:	2037      	movs	r0, #55	; 0x37
 8005812:	f001 faca 	bl	8006daa <HAL_NVIC_EnableIRQ>
}
 8005816:	e018      	b.n	800584a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a10      	ldr	r2, [pc, #64]	; (8005860 <HAL_TIM_Base_MspInit+0xb8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d113      	bne.n	800584a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005822:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 8005828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800582c:	6613      	str	r3, [r2, #96]	; 0x60
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <HAL_TIM_Base_MspInit+0xb0>)
 8005830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 7, 0);
 800583a:	2200      	movs	r2, #0
 800583c:	2107      	movs	r1, #7
 800583e:	2019      	movs	r0, #25
 8005840:	f001 fa97 	bl	8006d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005844:	2019      	movs	r0, #25
 8005846:	f001 fab0 	bl	8006daa <HAL_NVIC_EnableIRQ>
}
 800584a:	bf00      	nop
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40001000 	.word	0x40001000
 8005858:	40021000 	.word	0x40021000
 800585c:	40001400 	.word	0x40001400
 8005860:	40014400 	.word	0x40014400

08005864 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0a      	ldr	r2, [pc, #40]	; (800589c <HAL_PCD_MspInit+0x38>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d10b      	bne.n	800588e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <HAL_PCD_MspInit+0x3c>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <HAL_PCD_MspInit+0x3c>)
 800587c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005880:	6593      	str	r3, [r2, #88]	; 0x58
 8005882:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <HAL_PCD_MspInit+0x3c>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	40006800 	.word	0x40006800
 80058a0:	40021000 	.word	0x40021000

080058a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058a8:	e7fe      	b.n	80058a8 <NMI_Handler+0x4>

080058aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058aa:	b480      	push	{r7}
 80058ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ae:	e7fe      	b.n	80058ae <HardFault_Handler+0x4>

080058b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058b4:	e7fe      	b.n	80058b4 <MemManage_Handler+0x4>

080058b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058ba:	e7fe      	b.n	80058ba <BusFault_Handler+0x4>

080058bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058c0:	e7fe      	b.n	80058c0 <UsageFault_Handler+0x4>

080058c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058c6:	bf00      	nop
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058de:	b480      	push	{r7}
 80058e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058f0:	f000 f8e2 	bl	8005ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058f4:	bf00      	nop
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80058fc:	4802      	ldr	r0, [pc, #8]	; (8005908 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80058fe:	f004 f8c9 	bl	8009a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200002e0 	.word	0x200002e0

0800590c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005910:	4802      	ldr	r0, [pc, #8]	; (800591c <TIM2_IRQHandler+0x10>)
 8005912:	f004 f8bf 	bl	8009a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	200001fc 	.word	0x200001fc

08005920 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005924:	4803      	ldr	r0, [pc, #12]	; (8005934 <TIM6_DAC_IRQHandler+0x14>)
 8005926:	f004 f8b5 	bl	8009a94 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800592a:	4803      	ldr	r0, [pc, #12]	; (8005938 <TIM6_DAC_IRQHandler+0x18>)
 800592c:	f001 fa79 	bl	8006e22 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005930:	bf00      	nop
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000248 	.word	0x20000248
 8005938:	20000150 	.word	0x20000150

0800593c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005940:	4802      	ldr	r0, [pc, #8]	; (800594c <TIM7_IRQHandler+0x10>)
 8005942:	f004 f8a7 	bl	8009a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000294 	.word	0x20000294

08005950 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005954:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <SystemInit+0x64>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <SystemInit+0x64>)
 800595c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005964:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <SystemInit+0x68>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <SystemInit+0x68>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <SystemInit+0x68>)
 8005972:	2200      	movs	r2, #0
 8005974:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <SystemInit+0x68>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <SystemInit+0x68>)
 800597c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005980:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005984:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005986:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <SystemInit+0x68>)
 8005988:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800598c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <SystemInit+0x68>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <SystemInit+0x68>)
 8005994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005998:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <SystemInit+0x68>)
 800599c:	2200      	movs	r2, #0
 800599e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <SystemInit+0x64>)
 80059a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059a6:	609a      	str	r2, [r3, #8]
#endif
}
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	e000ed00 	.word	0xe000ed00
 80059b8:	40021000 	.word	0x40021000

080059bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80059bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80059c0:	f7ff ffc6 	bl	8005950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80059c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80059c6:	e003      	b.n	80059d0 <LoopCopyDataInit>

080059c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80059c8:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80059ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80059cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80059ce:	3104      	adds	r1, #4

080059d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80059d0:	480a      	ldr	r0, [pc, #40]	; (80059fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80059d2:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <LoopForever+0xe>)
	adds	r2, r0, r1
 80059d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80059d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80059d8:	d3f6      	bcc.n	80059c8 <CopyDataInit>
	ldr	r2, =_sbss
 80059da:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <LoopForever+0x12>)
	b	LoopFillZerobss
 80059dc:	e002      	b.n	80059e4 <LoopFillZerobss>

080059de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80059de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80059e0:	f842 3b04 	str.w	r3, [r2], #4

080059e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <LoopForever+0x16>)
	cmp	r2, r3
 80059e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80059e8:	d3f9      	bcc.n	80059de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059ea:	f004 fcaf 	bl	800a34c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80059ee:	f7fd fcf3 	bl	80033d8 <main>

080059f2 <LoopForever>:

LoopForever:
    b LoopForever
 80059f2:	e7fe      	b.n	80059f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80059f4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80059f8:	0800ba78 	.word	0x0800ba78
	ldr	r0, =_sdata
 80059fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005a00:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8005a04:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8005a08:	20000a88 	.word	0x20000a88

08005a0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005a0c:	e7fe      	b.n	8005a0c <ADC1_IRQHandler>

08005a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a18:	2003      	movs	r0, #3
 8005a1a:	f001 f99f 	bl	8006d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a1e:	2000      	movs	r0, #0
 8005a20:	f000 f80e 	bl	8005a40 <HAL_InitTick>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	71fb      	strb	r3, [r7, #7]
 8005a2e:	e001      	b.n	8005a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005a30:	f7ff fd52 	bl	80054d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005a34:	79fb      	ldrb	r3, [r7, #7]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005a4c:	4b17      	ldr	r3, [pc, #92]	; (8005aac <HAL_InitTick+0x6c>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d023      	beq.n	8005a9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005a54:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <HAL_InitTick+0x70>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4b14      	ldr	r3, [pc, #80]	; (8005aac <HAL_InitTick+0x6c>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 f9ab 	bl	8006dc6 <HAL_SYSTICK_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b0f      	cmp	r3, #15
 8005a7a:	d809      	bhi.n	8005a90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a84:	f001 f975 	bl	8006d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a88:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <HAL_InitTick+0x74>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	e007      	b.n	8005aa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
 8005a94:	e004      	b.n	8005aa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	e001      	b.n	8005aa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	2000006c 	.word	0x2000006c
 8005ab0:	20000064 	.word	0x20000064
 8005ab4:	20000068 	.word	0x20000068

08005ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_IncTick+0x20>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_IncTick+0x24>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <HAL_IncTick+0x24>)
 8005aca:	6013      	str	r3, [r2, #0]
}
 8005acc:	bf00      	nop
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	2000006c 	.word	0x2000006c
 8005adc:	20000a84 	.word	0x20000a84

08005ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <HAL_GetTick+0x14>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000a84 	.word	0x20000a84

08005af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b00:	f7ff ffee 	bl	8005ae0 <HAL_GetTick>
 8005b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b10:	d005      	beq.n	8005b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005b12:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_Delay+0x44>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b1e:	bf00      	nop
 8005b20:	f7ff ffde 	bl	8005ae0 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d8f7      	bhi.n	8005b20 <HAL_Delay+0x28>
  {
  }
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2000006c 	.word	0x2000006c

08005b40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3360      	adds	r3, #96	; 0x60
 8005bba:	461a      	mov	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b08      	ldr	r3, [pc, #32]	; (8005bec <LL_ADC_SetOffset+0x44>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	03fff000 	.word	0x03fff000

08005bf0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3360      	adds	r3, #96	; 0x60
 8005bfe:	461a      	mov	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3360      	adds	r3, #96	; 0x60
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	431a      	orrs	r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3330      	adds	r3, #48	; 0x30
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	4413      	add	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	211f      	movs	r1, #31
 8005ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	401a      	ands	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0e9b      	lsrs	r3, r3, #26
 8005cb0:	f003 011f 	and.w	r1, r3, #31
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3314      	adds	r3, #20
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	0e5b      	lsrs	r3, r3, #25
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	4413      	add	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	0d1b      	lsrs	r3, r3, #20
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	2107      	movs	r1, #7
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	401a      	ands	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0d1b      	lsrs	r3, r3, #20
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	431a      	orrs	r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d40:	43db      	mvns	r3, r3
 8005d42:	401a      	ands	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f003 0318 	and.w	r3, r3, #24
 8005d4a:	4908      	ldr	r1, [pc, #32]	; (8005d6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005d4c:	40d9      	lsrs	r1, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	400b      	ands	r3, r1
 8005d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d56:	431a      	orrs	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	0007ffff 	.word	0x0007ffff

08005d70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005d80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6093      	str	r3, [r2, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da8:	d101      	bne.n	8005dae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005dcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005df8:	d101      	bne.n	8005dfe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e20:	f043 0201 	orr.w	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <LL_ADC_IsEnabled+0x18>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <LL_ADC_IsEnabled+0x1a>
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e6e:	f043 0204 	orr.w	r2, r3, #4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d101      	bne.n	8005e9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d101      	bne.n	8005ec0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e12a      	b.n	8006140 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fb15 	bl	8005528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff ff3f 	bl	8005d94 <LL_ADC_IsDeepPowerDownEnabled>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff ff25 	bl	8005d70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff ff5a 	bl	8005de4 <LL_ADC_IsInternalRegulatorEnabled>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d113      	bne.n	8005f5e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff ff3e 	bl	8005dbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005f40:	4b81      	ldr	r3, [pc, #516]	; (8006148 <HAL_ADC_Init+0x278>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	099b      	lsrs	r3, r3, #6
 8005f46:	4a81      	ldr	r2, [pc, #516]	; (800614c <HAL_ADC_Init+0x27c>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	099b      	lsrs	r3, r3, #6
 8005f4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f50:	e002      	b.n	8005f58 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f9      	bne.n	8005f52 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff ff3e 	bl	8005de4 <LL_ADC_IsInternalRegulatorEnabled>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10d      	bne.n	8005f8a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	f043 0210 	orr.w	r2, r3, #16
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	f043 0201 	orr.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff ff77 	bl	8005e82 <LL_ADC_REG_IsConversionOngoing>
 8005f94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 80c5 	bne.w	800612e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 80c1 	bne.w	800612e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005fb4:	f043 0202 	orr.w	r2, r3, #2
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff ff37 	bl	8005e34 <LL_ADC_IsEnabled>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fcc:	4860      	ldr	r0, [pc, #384]	; (8006150 <HAL_ADC_Init+0x280>)
 8005fce:	f7ff ff31 	bl	8005e34 <LL_ADC_IsEnabled>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d105      	bne.n	8005fe4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	485d      	ldr	r0, [pc, #372]	; (8006154 <HAL_ADC_Init+0x284>)
 8005fe0:	f7ff fdae 	bl	8005b40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	7e5b      	ldrb	r3, [r3, #25]
 8005fe8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005fee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005ff4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005ffa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006002:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006004:	4313      	orrs	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d106      	bne.n	8006020 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	3b01      	subs	r3, #1
 8006018:	045b      	lsls	r3, r3, #17
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4313      	orrs	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4313      	orrs	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	4b45      	ldr	r3, [pc, #276]	; (8006158 <HAL_ADC_Init+0x288>)
 8006044:	4013      	ands	r3, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	69b9      	ldr	r1, [r7, #24]
 800604c:	430b      	orrs	r3, r1
 800604e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff14 	bl	8005e82 <LL_ADC_REG_IsConversionOngoing>
 800605a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff ff21 	bl	8005ea8 <LL_ADC_INJ_IsConversionOngoing>
 8006066:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d13d      	bne.n	80060ea <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d13a      	bne.n	80060ea <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006078:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006080:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006082:	4313      	orrs	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006090:	f023 0302 	bic.w	r3, r3, #2
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	69b9      	ldr	r1, [r7, #24]
 800609a:	430b      	orrs	r3, r1
 800609c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d118      	bne.n	80060da <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060b2:	f023 0304 	bic.w	r3, r3, #4
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060be:	4311      	orrs	r1, r2
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80060c4:	4311      	orrs	r1, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060ca:	430a      	orrs	r2, r1
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	611a      	str	r2, [r3, #16]
 80060d8:	e007      	b.n	80060ea <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0201 	bic.w	r2, r2, #1
 80060e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d10c      	bne.n	800610c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	f023 010f 	bic.w	r1, r3, #15
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	1e5a      	subs	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
 800610a:	e007      	b.n	800611c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 020f 	bic.w	r2, r2, #15
 800611a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006120:	f023 0303 	bic.w	r3, r3, #3
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	655a      	str	r2, [r3, #84]	; 0x54
 800612c:	e007      	b.n	800613e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f043 0210 	orr.w	r2, r3, #16
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800613e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000064 	.word	0x20000064
 800614c:	053e2d63 	.word	0x053e2d63
 8006150:	50040000 	.word	0x50040000
 8006154:	50040300 	.word	0x50040300
 8006158:	fff0c007 	.word	0xfff0c007

0800615c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fe8a 	bl	8005e82 <LL_ADC_REG_IsConversionOngoing>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d14f      	bne.n	8006214 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_ADC_Start+0x26>
 800617e:	2302      	movs	r3, #2
 8006180:	e04b      	b.n	800621a <HAL_ADC_Start+0xbe>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fcbc 	bl	8006b08 <ADC_Enable>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d137      	bne.n	800620a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ba:	d106      	bne.n	80061ca <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c0:	f023 0206 	bic.w	r2, r3, #6
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	659a      	str	r2, [r3, #88]	; 0x58
 80061c8:	e002      	b.n	80061d0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	221c      	movs	r2, #28
 80061d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d007      	beq.n	80061fe <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fe29 	bl	8005e5a <LL_ADC_REG_StartConversion>
 8006208:	e006      	b.n	8006218 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006212:	e001      	b.n	8006218 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006214:	2302      	movs	r3, #2
 8006216:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b086      	sub	sp, #24
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d102      	bne.n	800623a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8006234:	2308      	movs	r3, #8
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e010      	b.n	800625c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624c:	f043 0220 	orr.w	r2, r3, #32
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e068      	b.n	800632a <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8006258:	2304      	movs	r3, #4
 800625a:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800625c:	f7ff fc40 	bl	8005ae0 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006262:	e01a      	b.n	800629a <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626a:	d016      	beq.n	800629a <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800626c:	f7ff fc38 	bl	8005ae0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d302      	bcc.n	8006282 <HAL_ADC_PollForConversion+0x60>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	f043 0204 	orr.w	r2, r3, #4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e047      	b.n	800632a <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0dd      	beq.n	8006264 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fcca 	bl	8005c52 <LL_ADC_REG_IsTriggerSourceSWStart>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01c      	beq.n	80062fe <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7e5b      	ldrb	r3, [r3, #25]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d118      	bne.n	80062fe <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d111      	bne.n	80062fe <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d105      	bne.n	80062fe <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	f043 0201 	orr.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d104      	bne.n	8006316 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2208      	movs	r2, #8
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	e008      	b.n	8006328 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d103      	bne.n	8006328 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	220c      	movs	r2, #12
 8006326:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b0b6      	sub	sp, #216	; 0xd8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_ADC_ConfigChannel+0x22>
 800636a:	2302      	movs	r3, #2
 800636c:	e3b8      	b.n	8006ae0 <HAL_ADC_ConfigChannel+0x794>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fd81 	bl	8005e82 <LL_ADC_REG_IsConversionOngoing>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 839d 	bne.w	8006ac2 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b05      	cmp	r3, #5
 800638e:	d824      	bhi.n	80063da <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	3b02      	subs	r3, #2
 8006396:	2b03      	cmp	r3, #3
 8006398:	d81b      	bhi.n	80063d2 <HAL_ADC_ConfigChannel+0x86>
 800639a:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <HAL_ADC_ConfigChannel+0x54>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063b9 	.word	0x080063b9
 80063a8:	080063c1 	.word	0x080063c1
 80063ac:	080063c9 	.word	0x080063c9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	220c      	movs	r2, #12
 80063b4:	605a      	str	r2, [r3, #4]
          break;
 80063b6:	e011      	b.n	80063dc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2212      	movs	r2, #18
 80063bc:	605a      	str	r2, [r3, #4]
          break;
 80063be:	e00d      	b.n	80063dc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2218      	movs	r2, #24
 80063c4:	605a      	str	r2, [r3, #4]
          break;
 80063c6:	e009      	b.n	80063dc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ce:	605a      	str	r2, [r3, #4]
          break;
 80063d0:	e004      	b.n	80063dc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2206      	movs	r2, #6
 80063d6:	605a      	str	r2, [r3, #4]
          break;
 80063d8:	e000      	b.n	80063dc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80063da:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	6859      	ldr	r1, [r3, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	f7ff fc45 	bl	8005c78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fd45 	bl	8005e82 <LL_ADC_REG_IsConversionOngoing>
 80063f8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fd51 	bl	8005ea8 <LL_ADC_INJ_IsConversionOngoing>
 8006406:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800640a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 81a6 	bne.w	8006760 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 81a1 	bne.w	8006760 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	6819      	ldr	r1, [r3, #0]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	461a      	mov	r2, r3
 800642c:	f7ff fc50 	bl	8005cd0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	08db      	lsrs	r3, r3, #3
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b04      	cmp	r3, #4
 8006450:	d00a      	beq.n	8006468 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6919      	ldr	r1, [r3, #16]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006462:	f7ff fba1 	bl	8005ba8 <LL_ADC_SetOffset>
 8006466:	e17b      	b.n	8006760 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff fbbe 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 8006474:	4603      	mov	r3, r0
 8006476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_ADC_ConfigChannel+0x148>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2100      	movs	r1, #0
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fbb3 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 800648a:	4603      	mov	r3, r0
 800648c:	0e9b      	lsrs	r3, r3, #26
 800648e:	f003 021f 	and.w	r2, r3, #31
 8006492:	e01e      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x186>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fba8 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064aa:	fa93 f3a3 	rbit	r3, r3
 80064ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80064b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80064ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80064c2:	2320      	movs	r3, #32
 80064c4:	e004      	b.n	80064d0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80064c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064ca:	fab3 f383 	clz	r3, r3
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d105      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x19e>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	0e9b      	lsrs	r3, r3, #26
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	e018      	b.n	800651c <HAL_ADC_ConfigChannel+0x1d0>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80064f6:	fa93 f3a3 	rbit	r3, r3
 80064fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80064fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006502:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800650e:	2320      	movs	r3, #32
 8006510:	e004      	b.n	800651c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8006512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006516:	fab3 f383 	clz	r3, r3
 800651a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800651c:	429a      	cmp	r2, r3
 800651e:	d106      	bne.n	800652e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2200      	movs	r2, #0
 8006526:	2100      	movs	r1, #0
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff fb77 	bl	8005c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2101      	movs	r1, #1
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fb5b 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 800653a:	4603      	mov	r3, r0
 800653c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <HAL_ADC_ConfigChannel+0x20e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2101      	movs	r1, #1
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fb50 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 8006550:	4603      	mov	r3, r0
 8006552:	0e9b      	lsrs	r3, r3, #26
 8006554:	f003 021f 	and.w	r2, r3, #31
 8006558:	e01e      	b.n	8006598 <HAL_ADC_ConfigChannel+0x24c>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2101      	movs	r1, #1
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff fb45 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 8006566:	4603      	mov	r3, r0
 8006568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006570:	fa93 f3a3 	rbit	r3, r3
 8006574:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800657c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8006588:	2320      	movs	r3, #32
 800658a:	e004      	b.n	8006596 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800658c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006590:	fab3 f383 	clz	r3, r3
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_ADC_ConfigChannel+0x264>
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	0e9b      	lsrs	r3, r3, #26
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	e018      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x296>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065bc:	fa93 f3a3 	rbit	r3, r3
 80065c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80065c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80065cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80065d4:	2320      	movs	r3, #32
 80065d6:	e004      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80065d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065dc:	fab3 f383 	clz	r3, r3
 80065e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d106      	bne.n	80065f4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	2101      	movs	r1, #1
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fb14 	bl	8005c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2102      	movs	r1, #2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff faf8 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 8006600:	4603      	mov	r3, r0
 8006602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <HAL_ADC_ConfigChannel+0x2d4>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2102      	movs	r1, #2
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff faed 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 8006616:	4603      	mov	r3, r0
 8006618:	0e9b      	lsrs	r3, r3, #26
 800661a:	f003 021f 	and.w	r2, r3, #31
 800661e:	e01e      	b.n	800665e <HAL_ADC_ConfigChannel+0x312>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2102      	movs	r1, #2
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fae2 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 800662c:	4603      	mov	r3, r0
 800662e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006636:	fa93 f3a3 	rbit	r3, r3
 800663a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800663e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800664e:	2320      	movs	r3, #32
 8006650:	e004      	b.n	800665c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006656:	fab3 f383 	clz	r3, r3
 800665a:	b2db      	uxtb	r3, r3
 800665c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x32a>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	0e9b      	lsrs	r3, r3, #26
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	e016      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x358>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006682:	fa93 f3a3 	rbit	r3, r3
 8006686:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800668a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800668e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8006696:	2320      	movs	r3, #32
 8006698:	e004      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800669a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800669e:	fab3 f383 	clz	r3, r3
 80066a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d106      	bne.n	80066b6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2200      	movs	r2, #0
 80066ae:	2102      	movs	r1, #2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fab3 	bl	8005c1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2103      	movs	r1, #3
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fa97 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <HAL_ADC_ConfigChannel+0x396>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2103      	movs	r1, #3
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fa8c 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 80066d8:	4603      	mov	r3, r0
 80066da:	0e9b      	lsrs	r3, r3, #26
 80066dc:	f003 021f 	and.w	r2, r3, #31
 80066e0:	e017      	b.n	8006712 <HAL_ADC_ConfigChannel+0x3c6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2103      	movs	r1, #3
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fa81 	bl	8005bf0 <LL_ADC_GetOffsetChannel>
 80066ee:	4603      	mov	r3, r0
 80066f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f4:	fa93 f3a3 	rbit	r3, r3
 80066f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80066fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80066fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006704:	2320      	movs	r3, #32
 8006706:	e003      	b.n	8006710 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800670a:	fab3 f383 	clz	r3, r3
 800670e:	b2db      	uxtb	r3, r3
 8006710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <HAL_ADC_ConfigChannel+0x3de>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	0e9b      	lsrs	r3, r3, #26
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	e011      	b.n	800674e <HAL_ADC_ConfigChannel+0x402>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006732:	fa93 f3a3 	rbit	r3, r3
 8006736:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800673a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800673c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006742:	2320      	movs	r3, #32
 8006744:	e003      	b.n	800674e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006748:	fab3 f383 	clz	r3, r3
 800674c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800674e:	429a      	cmp	r2, r3
 8006750:	d106      	bne.n	8006760 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2200      	movs	r2, #0
 8006758:	2103      	movs	r1, #3
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fa5e 	bl	8005c1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fb65 	bl	8005e34 <LL_ADC_IsEnabled>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 813f 	bne.w	80069f0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	6819      	ldr	r1, [r3, #0]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	461a      	mov	r2, r3
 8006780:	f7ff fad2 	bl	8005d28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4a8e      	ldr	r2, [pc, #568]	; (80069c4 <HAL_ADC_ConfigChannel+0x678>)
 800678a:	4293      	cmp	r3, r2
 800678c:	f040 8130 	bne.w	80069f0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10b      	bne.n	80067b8 <HAL_ADC_ConfigChannel+0x46c>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	0e9b      	lsrs	r3, r3, #26
 80067a6:	3301      	adds	r3, #1
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2b09      	cmp	r3, #9
 80067ae:	bf94      	ite	ls
 80067b0:	2301      	movls	r3, #1
 80067b2:	2300      	movhi	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	e019      	b.n	80067ec <HAL_ADC_ConfigChannel+0x4a0>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c0:	fa93 f3a3 	rbit	r3, r3
 80067c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80067c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80067ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80067d0:	2320      	movs	r3, #32
 80067d2:	e003      	b.n	80067dc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80067d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d6:	fab3 f383 	clz	r3, r3
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	3301      	adds	r3, #1
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2b09      	cmp	r3, #9
 80067e4:	bf94      	ite	ls
 80067e6:	2301      	movls	r3, #1
 80067e8:	2300      	movhi	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d079      	beq.n	80068e4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d107      	bne.n	800680c <HAL_ADC_ConfigChannel+0x4c0>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	0e9b      	lsrs	r3, r3, #26
 8006802:	3301      	adds	r3, #1
 8006804:	069b      	lsls	r3, r3, #26
 8006806:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800680a:	e015      	b.n	8006838 <HAL_ADC_ConfigChannel+0x4ec>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006814:	fa93 f3a3 	rbit	r3, r3
 8006818:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800681a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800681e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006824:	2320      	movs	r3, #32
 8006826:	e003      	b.n	8006830 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682a:	fab3 f383 	clz	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	3301      	adds	r3, #1
 8006832:	069b      	lsls	r3, r3, #26
 8006834:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <HAL_ADC_ConfigChannel+0x50c>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	0e9b      	lsrs	r3, r3, #26
 800684a:	3301      	adds	r3, #1
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	2101      	movs	r1, #1
 8006852:	fa01 f303 	lsl.w	r3, r1, r3
 8006856:	e017      	b.n	8006888 <HAL_ADC_ConfigChannel+0x53c>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800685e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006860:	fa93 f3a3 	rbit	r3, r3
 8006864:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006868:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800686a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006870:	2320      	movs	r3, #32
 8006872:	e003      	b.n	800687c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8006874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006876:	fab3 f383 	clz	r3, r3
 800687a:	b2db      	uxtb	r3, r3
 800687c:	3301      	adds	r3, #1
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	2101      	movs	r1, #1
 8006884:	fa01 f303 	lsl.w	r3, r1, r3
 8006888:	ea42 0103 	orr.w	r1, r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10a      	bne.n	80068ae <HAL_ADC_ConfigChannel+0x562>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	0e9b      	lsrs	r3, r3, #26
 800689e:	3301      	adds	r3, #1
 80068a0:	f003 021f 	and.w	r2, r3, #31
 80068a4:	4613      	mov	r3, r2
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	4413      	add	r3, r2
 80068aa:	051b      	lsls	r3, r3, #20
 80068ac:	e018      	b.n	80068e0 <HAL_ADC_ConfigChannel+0x594>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	fa93 f3a3 	rbit	r3, r3
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80068c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80068c6:	2320      	movs	r3, #32
 80068c8:	e003      	b.n	80068d2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	fab3 f383 	clz	r3, r3
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	3301      	adds	r3, #1
 80068d4:	f003 021f 	and.w	r2, r3, #31
 80068d8:	4613      	mov	r3, r2
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	4413      	add	r3, r2
 80068de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068e0:	430b      	orrs	r3, r1
 80068e2:	e080      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d107      	bne.n	8006900 <HAL_ADC_ConfigChannel+0x5b4>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	0e9b      	lsrs	r3, r3, #26
 80068f6:	3301      	adds	r3, #1
 80068f8:	069b      	lsls	r3, r3, #26
 80068fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80068fe:	e015      	b.n	800692c <HAL_ADC_ConfigChannel+0x5e0>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	fa93 f3a3 	rbit	r3, r3
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006918:	2320      	movs	r3, #32
 800691a:	e003      	b.n	8006924 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	fab3 f383 	clz	r3, r3
 8006922:	b2db      	uxtb	r3, r3
 8006924:	3301      	adds	r3, #1
 8006926:	069b      	lsls	r3, r3, #26
 8006928:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006934:	2b00      	cmp	r3, #0
 8006936:	d109      	bne.n	800694c <HAL_ADC_ConfigChannel+0x600>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	0e9b      	lsrs	r3, r3, #26
 800693e:	3301      	adds	r3, #1
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	2101      	movs	r1, #1
 8006946:	fa01 f303 	lsl.w	r3, r1, r3
 800694a:	e017      	b.n	800697c <HAL_ADC_ConfigChannel+0x630>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	fa93 f3a3 	rbit	r3, r3
 8006958:	61fb      	str	r3, [r7, #28]
  return result;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006964:	2320      	movs	r3, #32
 8006966:	e003      	b.n	8006970 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	fab3 f383 	clz	r3, r3
 800696e:	b2db      	uxtb	r3, r3
 8006970:	3301      	adds	r3, #1
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	2101      	movs	r1, #1
 8006978:	fa01 f303 	lsl.w	r3, r1, r3
 800697c:	ea42 0103 	orr.w	r1, r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10d      	bne.n	80069a8 <HAL_ADC_ConfigChannel+0x65c>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	0e9b      	lsrs	r3, r3, #26
 8006992:	3301      	adds	r3, #1
 8006994:	f003 021f 	and.w	r2, r3, #31
 8006998:	4613      	mov	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	4413      	add	r3, r2
 800699e:	3b1e      	subs	r3, #30
 80069a0:	051b      	lsls	r3, r3, #20
 80069a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80069a6:	e01d      	b.n	80069e4 <HAL_ADC_ConfigChannel+0x698>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	fa93 f3a3 	rbit	r3, r3
 80069b4:	613b      	str	r3, [r7, #16]
  return result;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d103      	bne.n	80069c8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80069c0:	2320      	movs	r3, #32
 80069c2:	e005      	b.n	80069d0 <HAL_ADC_ConfigChannel+0x684>
 80069c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	fab3 f383 	clz	r3, r3
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	3301      	adds	r3, #1
 80069d2:	f003 021f 	and.w	r2, r3, #31
 80069d6:	4613      	mov	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	4413      	add	r3, r2
 80069dc:	3b1e      	subs	r3, #30
 80069de:	051b      	lsls	r3, r3, #20
 80069e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069e4:	430b      	orrs	r3, r1
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	6892      	ldr	r2, [r2, #8]
 80069ea:	4619      	mov	r1, r3
 80069ec:	f7ff f970 	bl	8005cd0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	4b3c      	ldr	r3, [pc, #240]	; (8006ae8 <HAL_ADC_ConfigChannel+0x79c>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d06b      	beq.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069fc:	483b      	ldr	r0, [pc, #236]	; (8006aec <HAL_ADC_ConfigChannel+0x7a0>)
 80069fe:	f7ff f8c5 	bl	8005b8c <LL_ADC_GetCommonPathInternalCh>
 8006a02:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a39      	ldr	r2, [pc, #228]	; (8006af0 <HAL_ADC_ConfigChannel+0x7a4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d126      	bne.n	8006a5e <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d120      	bne.n	8006a5e <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a34      	ldr	r2, [pc, #208]	; (8006af4 <HAL_ADC_ConfigChannel+0x7a8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d156      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a2e:	4619      	mov	r1, r3
 8006a30:	482e      	ldr	r0, [pc, #184]	; (8006aec <HAL_ADC_ConfigChannel+0x7a0>)
 8006a32:	f7ff f898 	bl	8005b66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006a36:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <HAL_ADC_ConfigChannel+0x7ac>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	099b      	lsrs	r3, r3, #6
 8006a3c:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <HAL_ADC_ConfigChannel+0x7b0>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	099a      	lsrs	r2, r3, #6
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006a4e:	e002      	b.n	8006a56 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1f9      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a5c:	e03a      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <HAL_ADC_ConfigChannel+0x7b4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d113      	bne.n	8006a90 <HAL_ADC_ConfigChannel+0x744>
 8006a68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10d      	bne.n	8006a90 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1e      	ldr	r2, [pc, #120]	; (8006af4 <HAL_ADC_ConfigChannel+0x7a8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d12a      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a86:	4619      	mov	r1, r3
 8006a88:	4818      	ldr	r0, [pc, #96]	; (8006aec <HAL_ADC_ConfigChannel+0x7a0>)
 8006a8a:	f7ff f86c 	bl	8005b66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a8e:	e021      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <HAL_ADC_ConfigChannel+0x7b8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d11c      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d116      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a12      	ldr	r2, [pc, #72]	; (8006af4 <HAL_ADC_ConfigChannel+0x7a8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d111      	bne.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ab8:	4619      	mov	r1, r3
 8006aba:	480c      	ldr	r0, [pc, #48]	; (8006aec <HAL_ADC_ConfigChannel+0x7a0>)
 8006abc:	f7ff f853 	bl	8005b66 <LL_ADC_SetCommonPathInternalCh>
 8006ac0:	e008      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	f043 0220 	orr.w	r2, r3, #32
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006adc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	37d8      	adds	r7, #216	; 0xd8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	80080000 	.word	0x80080000
 8006aec:	50040300 	.word	0x50040300
 8006af0:	c7520000 	.word	0xc7520000
 8006af4:	50040000 	.word	0x50040000
 8006af8:	20000064 	.word	0x20000064
 8006afc:	053e2d63 	.word	0x053e2d63
 8006b00:	cb840000 	.word	0xcb840000
 8006b04:	80000001 	.word	0x80000001

08006b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff f98d 	bl	8005e34 <LL_ADC_IsEnabled>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d146      	bne.n	8006bae <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <ADC_Enable+0xb0>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	f043 0210 	orr.w	r2, r3, #16
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3e:	f043 0201 	orr.w	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e032      	b.n	8006bb0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff f95c 	bl	8005e0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006b54:	f7fe ffc4 	bl	8005ae0 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b5a:	e021      	b.n	8006ba0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff f967 	bl	8005e34 <LL_ADC_IsEnabled>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff f94b 	bl	8005e0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b76:	f7fe ffb3 	bl	8005ae0 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d90d      	bls.n	8006ba0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b88:	f043 0210 	orr.w	r2, r3, #16
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b94:	f043 0201 	orr.w	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e007      	b.n	8006bb0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d1d6      	bne.n	8006b5c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	8000003f 	.word	0x8000003f

08006bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <__NVIC_SetPriorityGrouping+0x44>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bee:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <__NVIC_SetPriorityGrouping+0x44>)
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	60d3      	str	r3, [r2, #12]
}
 8006bf4:	bf00      	nop
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	e000ed00 	.word	0xe000ed00

08006c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c04:	b480      	push	{r7}
 8006c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <__NVIC_GetPriorityGrouping+0x18>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	f003 0307 	and.w	r3, r3, #7
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	e000ed00 	.word	0xe000ed00

08006c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	db0b      	blt.n	8006c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	f003 021f 	and.w	r2, r3, #31
 8006c38:	4907      	ldr	r1, [pc, #28]	; (8006c58 <__NVIC_EnableIRQ+0x38>)
 8006c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3e:	095b      	lsrs	r3, r3, #5
 8006c40:	2001      	movs	r0, #1
 8006c42:	fa00 f202 	lsl.w	r2, r0, r2
 8006c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	e000e100 	.word	0xe000e100

08006c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	6039      	str	r1, [r7, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	db0a      	blt.n	8006c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	490c      	ldr	r1, [pc, #48]	; (8006ca8 <__NVIC_SetPriority+0x4c>)
 8006c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7a:	0112      	lsls	r2, r2, #4
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	440b      	add	r3, r1
 8006c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c84:	e00a      	b.n	8006c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	4908      	ldr	r1, [pc, #32]	; (8006cac <__NVIC_SetPriority+0x50>)
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	3b04      	subs	r3, #4
 8006c94:	0112      	lsls	r2, r2, #4
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	440b      	add	r3, r1
 8006c9a:	761a      	strb	r2, [r3, #24]
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	e000e100 	.word	0xe000e100
 8006cac:	e000ed00 	.word	0xe000ed00

08006cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b089      	sub	sp, #36	; 0x24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f1c3 0307 	rsb	r3, r3, #7
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	bf28      	it	cs
 8006cce:	2304      	movcs	r3, #4
 8006cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	2b06      	cmp	r3, #6
 8006cd8:	d902      	bls.n	8006ce0 <NVIC_EncodePriority+0x30>
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3b03      	subs	r3, #3
 8006cde:	e000      	b.n	8006ce2 <NVIC_EncodePriority+0x32>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	fa02 f303 	lsl.w	r3, r2, r3
 8006cee:	43da      	mvns	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	401a      	ands	r2, r3
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006d02:	43d9      	mvns	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d08:	4313      	orrs	r3, r2
         );
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3724      	adds	r7, #36	; 0x24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
	...

08006d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d28:	d301      	bcc.n	8006d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e00f      	b.n	8006d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <SysTick_Config+0x40>)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d36:	210f      	movs	r1, #15
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d3c:	f7ff ff8e 	bl	8006c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <SysTick_Config+0x40>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d46:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <SysTick_Config+0x40>)
 8006d48:	2207      	movs	r2, #7
 8006d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	e000e010 	.word	0xe000e010

08006d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff29 	bl	8006bbc <__NVIC_SetPriorityGrouping>
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	4603      	mov	r3, r0
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d84:	f7ff ff3e 	bl	8006c04 <__NVIC_GetPriorityGrouping>
 8006d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	6978      	ldr	r0, [r7, #20]
 8006d90:	f7ff ff8e 	bl	8006cb0 <NVIC_EncodePriority>
 8006d94:	4602      	mov	r2, r0
 8006d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff ff5d 	bl	8006c5c <__NVIC_SetPriority>
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	4603      	mov	r3, r0
 8006db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff ff31 	bl	8006c20 <__NVIC_EnableIRQ>
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ffa2 	bl	8006d18 <SysTick_Config>
 8006dd4:	4603      	mov	r3, r0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e014      	b.n	8006e1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	791b      	ldrb	r3, [r3, #4]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe fbcf 	bl	80055a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e38:	d120      	bne.n	8006e7c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e48:	d118      	bne.n	8006e7c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f043 0201 	orr.w	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e74:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f82d 	bl	8006ed6 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e8a:	d120      	bne.n	8006ece <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e9a:	d118      	bne.n	8006ece <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f043 0202 	orr.w	r2, r3, #2
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006eb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f928 	bl	800711e <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b088      	sub	sp, #32
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	795b      	ldrb	r3, [r3, #5]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_DAC_ConfigChannel+0x1c>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e107      	b.n	8007116 <HAL_DAC_ConfigChannel+0x22c>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d174      	bne.n	8007004 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006f1a:	f7fe fde1 	bl	8005ae0 <HAL_GetTick>
 8006f1e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d134      	bne.n	8006f90 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006f26:	e011      	b.n	8006f4c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f28:	f7fe fdda 	bl	8005ae0 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d90a      	bls.n	8006f4c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f043 0208 	orr.w	r2, r3, #8
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2203      	movs	r2, #3
 8006f46:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e0e4      	b.n	8007116 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e6      	bne.n	8006f28 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	f7fe fdcc 	bl	8005af8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	6992      	ldr	r2, [r2, #24]
 8006f68:	641a      	str	r2, [r3, #64]	; 0x40
 8006f6a:	e01e      	b.n	8006faa <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f6c:	f7fe fdb8 	bl	8005ae0 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d90a      	bls.n	8006f90 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f043 0208 	orr.w	r2, r3, #8
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2203      	movs	r2, #3
 8006f8a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e0c2      	b.n	8007116 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	dbe8      	blt.n	8006f6c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	f7fe fdac 	bl	8005af8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	6992      	ldr	r2, [r2, #24]
 8006fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f003 0310 	and.w	r3, r3, #16
 8006fb6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006fba:	fa01 f303 	lsl.w	r3, r1, r3
 8006fbe:	43db      	mvns	r3, r3
 8006fc0:	ea02 0103 	and.w	r1, r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	69da      	ldr	r2, [r3, #28]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f003 0310 	and.w	r3, r3, #16
 8006fce:	409a      	lsls	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	21ff      	movs	r1, #255	; 0xff
 8006fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fea:	43db      	mvns	r3, r3
 8006fec:	ea02 0103 	and.w	r1, r2, r3
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	6a1a      	ldr	r2, [r3, #32]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	409a      	lsls	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d11d      	bne.n	8007048 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f003 0310 	and.w	r3, r3, #16
 800701a:	221f      	movs	r2, #31
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	4013      	ands	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	4313      	orrs	r3, r2
 800703e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2207      	movs	r2, #7
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	43db      	mvns	r3, r3
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	4013      	ands	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	431a      	orrs	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6819      	ldr	r1, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	43da      	mvns	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	400a      	ands	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	f640 72fc 	movw	r2, #4092	; 0xffc
 80070c0:	fa02 f303 	lsl.w	r3, r2, r3
 80070c4:	43db      	mvns	r3, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4013      	ands	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6819      	ldr	r1, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	22c0      	movs	r2, #192	; 0xc0
 80070fa:	fa02 f303 	lsl.w	r3, r2, r3
 80070fe:	43da      	mvns	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	400a      	ands	r2, r1
 8007106:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
	...

08007134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007142:	e154      	b.n	80073ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	2101      	movs	r1, #1
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	fa01 f303 	lsl.w	r3, r1, r3
 8007150:	4013      	ands	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8146 	beq.w	80073e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d00b      	beq.n	800717c <HAL_GPIO_Init+0x48>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d007      	beq.n	800717c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007170:	2b11      	cmp	r3, #17
 8007172:	d003      	beq.n	800717c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b12      	cmp	r3, #18
 800717a:	d130      	bne.n	80071de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	005b      	lsls	r3, r3, #1
 8007186:	2203      	movs	r2, #3
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	43db      	mvns	r3, r3
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4013      	ands	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071b2:	2201      	movs	r2, #1
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	43db      	mvns	r3, r3
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4013      	ands	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	091b      	lsrs	r3, r3, #4
 80071c8:	f003 0201 	and.w	r2, r3, #1
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	2203      	movs	r2, #3
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	43db      	mvns	r3, r3
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4013      	ands	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4313      	orrs	r3, r2
 8007206:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d003      	beq.n	800721e <HAL_GPIO_Init+0xea>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2b12      	cmp	r3, #18
 800721c:	d123      	bne.n	8007266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	08da      	lsrs	r2, r3, #3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3208      	adds	r2, #8
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	220f      	movs	r2, #15
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	43db      	mvns	r3, r3
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4013      	ands	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	08da      	lsrs	r2, r3, #3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3208      	adds	r2, #8
 8007260:	6939      	ldr	r1, [r7, #16]
 8007262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	2203      	movs	r2, #3
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	43db      	mvns	r3, r3
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4013      	ands	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f003 0203 	and.w	r2, r3, #3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80a0 	beq.w	80073e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072a8:	4b58      	ldr	r3, [pc, #352]	; (800740c <HAL_GPIO_Init+0x2d8>)
 80072aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ac:	4a57      	ldr	r2, [pc, #348]	; (800740c <HAL_GPIO_Init+0x2d8>)
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	6613      	str	r3, [r2, #96]	; 0x60
 80072b4:	4b55      	ldr	r3, [pc, #340]	; (800740c <HAL_GPIO_Init+0x2d8>)
 80072b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80072c0:	4a53      	ldr	r2, [pc, #332]	; (8007410 <HAL_GPIO_Init+0x2dc>)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	089b      	lsrs	r3, r3, #2
 80072c6:	3302      	adds	r3, #2
 80072c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	220f      	movs	r2, #15
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	43db      	mvns	r3, r3
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4013      	ands	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80072ea:	d019      	beq.n	8007320 <HAL_GPIO_Init+0x1ec>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a49      	ldr	r2, [pc, #292]	; (8007414 <HAL_GPIO_Init+0x2e0>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d013      	beq.n	800731c <HAL_GPIO_Init+0x1e8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a48      	ldr	r2, [pc, #288]	; (8007418 <HAL_GPIO_Init+0x2e4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00d      	beq.n	8007318 <HAL_GPIO_Init+0x1e4>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a47      	ldr	r2, [pc, #284]	; (800741c <HAL_GPIO_Init+0x2e8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d007      	beq.n	8007314 <HAL_GPIO_Init+0x1e0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a46      	ldr	r2, [pc, #280]	; (8007420 <HAL_GPIO_Init+0x2ec>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d101      	bne.n	8007310 <HAL_GPIO_Init+0x1dc>
 800730c:	2304      	movs	r3, #4
 800730e:	e008      	b.n	8007322 <HAL_GPIO_Init+0x1ee>
 8007310:	2307      	movs	r3, #7
 8007312:	e006      	b.n	8007322 <HAL_GPIO_Init+0x1ee>
 8007314:	2303      	movs	r3, #3
 8007316:	e004      	b.n	8007322 <HAL_GPIO_Init+0x1ee>
 8007318:	2302      	movs	r3, #2
 800731a:	e002      	b.n	8007322 <HAL_GPIO_Init+0x1ee>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <HAL_GPIO_Init+0x1ee>
 8007320:	2300      	movs	r3, #0
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	f002 0203 	and.w	r2, r2, #3
 8007328:	0092      	lsls	r2, r2, #2
 800732a:	4093      	lsls	r3, r2
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007332:	4937      	ldr	r1, [pc, #220]	; (8007410 <HAL_GPIO_Init+0x2dc>)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	089b      	lsrs	r3, r3, #2
 8007338:	3302      	adds	r3, #2
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007340:	4b38      	ldr	r3, [pc, #224]	; (8007424 <HAL_GPIO_Init+0x2f0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	43db      	mvns	r3, r3
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4013      	ands	r3, r2
 800734e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007364:	4a2f      	ldr	r2, [pc, #188]	; (8007424 <HAL_GPIO_Init+0x2f0>)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <HAL_GPIO_Init+0x2f0>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	43db      	mvns	r3, r3
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4013      	ands	r3, r2
 8007378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800738e:	4a25      	ldr	r2, [pc, #148]	; (8007424 <HAL_GPIO_Init+0x2f0>)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007394:	4b23      	ldr	r3, [pc, #140]	; (8007424 <HAL_GPIO_Init+0x2f0>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	43db      	mvns	r3, r3
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4013      	ands	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80073b8:	4a1a      	ldr	r2, [pc, #104]	; (8007424 <HAL_GPIO_Init+0x2f0>)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80073be:	4b19      	ldr	r3, [pc, #100]	; (8007424 <HAL_GPIO_Init+0x2f0>)
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	43db      	mvns	r3, r3
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4013      	ands	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80073e2:	4a10      	ldr	r2, [pc, #64]	; (8007424 <HAL_GPIO_Init+0x2f0>)
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	3301      	adds	r3, #1
 80073ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f47f aea3 	bne.w	8007144 <HAL_GPIO_Init+0x10>
  }
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40021000 	.word	0x40021000
 8007410:	40010000 	.word	0x40010000
 8007414:	48000400 	.word	0x48000400
 8007418:	48000800 	.word	0x48000800
 800741c:	48000c00 	.word	0x48000c00
 8007420:	48001000 	.word	0x48001000
 8007424:	40010400 	.word	0x40010400

08007428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	807b      	strh	r3, [r7, #2]
 8007434:	4613      	mov	r3, r2
 8007436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007438:	787b      	ldrb	r3, [r7, #1]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800743e:	887a      	ldrh	r2, [r7, #2]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007444:	e002      	b.n	800744c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007446:	887a      	ldrh	r2, [r7, #2]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e081      	b.n	800756e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fe f8d6 	bl	8005630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2224      	movs	r2, #36	; 0x24
 8007488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0201 	bic.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d107      	bne.n	80074d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	e006      	b.n	80074e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d104      	bne.n	80074f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	ea42 0103 	orr.w	r1, r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	021a      	lsls	r2, r3, #8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	69d9      	ldr	r1, [r3, #28]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1a      	ldr	r2, [r3, #32]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0201 	orr.w	r2, r2, #1
 800754e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af02      	add	r7, sp, #8
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	4608      	mov	r0, r1
 8007582:	4611      	mov	r1, r2
 8007584:	461a      	mov	r2, r3
 8007586:	4603      	mov	r3, r0
 8007588:	817b      	strh	r3, [r7, #10]
 800758a:	460b      	mov	r3, r1
 800758c:	813b      	strh	r3, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b20      	cmp	r3, #32
 800759c:	f040 80f9 	bne.w	8007792 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <HAL_I2C_Mem_Write+0x34>
 80075a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d105      	bne.n	80075b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0ed      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_I2C_Mem_Write+0x4e>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e0e6      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075ce:	f7fe fa87 	bl	8005ae0 <HAL_GetTick>
 80075d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2319      	movs	r3, #25
 80075da:	2201      	movs	r2, #1
 80075dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fac3 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e0d1      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2221      	movs	r2, #33	; 0x21
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2240      	movs	r2, #64	; 0x40
 80075fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a3a      	ldr	r2, [r7, #32]
 800760a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007618:	88f8      	ldrh	r0, [r7, #6]
 800761a:	893a      	ldrh	r2, [r7, #8]
 800761c:	8979      	ldrh	r1, [r7, #10]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4603      	mov	r3, r0
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f9d3 	bl	80079d4 <I2C_RequestMemoryWrite>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e0a9      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007644:	b29b      	uxth	r3, r3
 8007646:	2bff      	cmp	r3, #255	; 0xff
 8007648:	d90e      	bls.n	8007668 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	22ff      	movs	r2, #255	; 0xff
 800764e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007654:	b2da      	uxtb	r2, r3
 8007656:	8979      	ldrh	r1, [r7, #10]
 8007658:	2300      	movs	r3, #0
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fba5 	bl	8007db0 <I2C_TransferConfig>
 8007666:	e00f      	b.n	8007688 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007676:	b2da      	uxtb	r2, r3
 8007678:	8979      	ldrh	r1, [r7, #10]
 800767a:	2300      	movs	r3, #0
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fb94 	bl	8007db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 faad 	bl	8007bec <I2C_WaitOnTXISFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e07b      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	781a      	ldrb	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d034      	beq.n	8007740 <HAL_I2C_Mem_Write+0x1c8>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d130      	bne.n	8007740 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	2200      	movs	r2, #0
 80076e6:	2180      	movs	r1, #128	; 0x80
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fa3f 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e04d      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2bff      	cmp	r3, #255	; 0xff
 8007700:	d90e      	bls.n	8007720 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770c:	b2da      	uxtb	r2, r3
 800770e:	8979      	ldrh	r1, [r7, #10]
 8007710:	2300      	movs	r3, #0
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fb49 	bl	8007db0 <I2C_TransferConfig>
 800771e:	e00f      	b.n	8007740 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772e:	b2da      	uxtb	r2, r3
 8007730:	8979      	ldrh	r1, [r7, #10]
 8007732:	2300      	movs	r3, #0
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fb38 	bl	8007db0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007744:	b29b      	uxth	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d19e      	bne.n	8007688 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fa8c 	bl	8007c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e01a      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2220      	movs	r2, #32
 8007764:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6859      	ldr	r1, [r3, #4]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	4b0a      	ldr	r3, [pc, #40]	; (800779c <HAL_I2C_Mem_Write+0x224>)
 8007772:	400b      	ands	r3, r1
 8007774:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2220      	movs	r2, #32
 800777a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	e000      	b.n	8007794 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007792:	2302      	movs	r3, #2
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	fe00e800 	.word	0xfe00e800

080077a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	817b      	strh	r3, [r7, #10]
 80077b2:	460b      	mov	r3, r1
 80077b4:	813b      	strh	r3, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	f040 80fd 	bne.w	80079c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_I2C_Mem_Read+0x34>
 80077ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d105      	bne.n	80077e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0f1      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_I2C_Mem_Read+0x4e>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e0ea      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077f6:	f7fe f973 	bl	8005ae0 <HAL_GetTick>
 80077fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	2319      	movs	r3, #25
 8007802:	2201      	movs	r2, #1
 8007804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 f9af 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0d5      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2222      	movs	r2, #34	; 0x22
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2240      	movs	r2, #64	; 0x40
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007840:	88f8      	ldrh	r0, [r7, #6]
 8007842:	893a      	ldrh	r2, [r7, #8]
 8007844:	8979      	ldrh	r1, [r7, #10]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	9301      	str	r3, [sp, #4]
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4603      	mov	r3, r0
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f913 	bl	8007a7c <I2C_RequestMemoryRead>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0ad      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	2bff      	cmp	r3, #255	; 0xff
 8007870:	d90e      	bls.n	8007890 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	8979      	ldrh	r1, [r7, #10]
 8007880:	4b52      	ldr	r3, [pc, #328]	; (80079cc <HAL_I2C_Mem_Read+0x22c>)
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fa91 	bl	8007db0 <I2C_TransferConfig>
 800788e:	e00f      	b.n	80078b0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	8979      	ldrh	r1, [r7, #10]
 80078a2:	4b4a      	ldr	r3, [pc, #296]	; (80079cc <HAL_I2C_Mem_Read+0x22c>)
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fa80 	bl	8007db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2200      	movs	r2, #0
 80078b8:	2104      	movs	r1, #4
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f956 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e07c      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d034      	beq.n	8007970 <HAL_I2C_Mem_Read+0x1d0>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d130      	bne.n	8007970 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	2200      	movs	r2, #0
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f927 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e04d      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792c:	b29b      	uxth	r3, r3
 800792e:	2bff      	cmp	r3, #255	; 0xff
 8007930:	d90e      	bls.n	8007950 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793c:	b2da      	uxtb	r2, r3
 800793e:	8979      	ldrh	r1, [r7, #10]
 8007940:	2300      	movs	r3, #0
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fa31 	bl	8007db0 <I2C_TransferConfig>
 800794e:	e00f      	b.n	8007970 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007954:	b29a      	uxth	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795e:	b2da      	uxtb	r2, r3
 8007960:	8979      	ldrh	r1, [r7, #10]
 8007962:	2300      	movs	r3, #0
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fa20 	bl	8007db0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d19a      	bne.n	80078b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f000 f974 	bl	8007c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e01a      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2220      	movs	r2, #32
 8007994:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6859      	ldr	r1, [r3, #4]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <HAL_I2C_Mem_Read+0x230>)
 80079a2:	400b      	ands	r3, r1
 80079a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	e000      	b.n	80079c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80079c2:	2302      	movs	r3, #2
  }
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	80002400 	.word	0x80002400
 80079d0:	fe00e800 	.word	0xfe00e800

080079d4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af02      	add	r7, sp, #8
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	817b      	strh	r3, [r7, #10]
 80079e6:	460b      	mov	r3, r1
 80079e8:	813b      	strh	r3, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	8979      	ldrh	r1, [r7, #10]
 80079f4:	4b20      	ldr	r3, [pc, #128]	; (8007a78 <I2C_RequestMemoryWrite+0xa4>)
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f9d7 	bl	8007db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f8f0 	bl	8007bec <I2C_WaitOnTXISFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e02c      	b.n	8007a70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d105      	bne.n	8007a28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a1c:	893b      	ldrh	r3, [r7, #8]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	629a      	str	r2, [r3, #40]	; 0x28
 8007a26:	e015      	b.n	8007a54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a28:	893b      	ldrh	r3, [r7, #8]
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f8d6 	bl	8007bec <I2C_WaitOnTXISFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e012      	b.n	8007a70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a4a:	893b      	ldrh	r3, [r7, #8]
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2180      	movs	r1, #128	; 0x80
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f884 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	80002000 	.word	0x80002000

08007a7c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	4608      	mov	r0, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	817b      	strh	r3, [r7, #10]
 8007a8e:	460b      	mov	r3, r1
 8007a90:	813b      	strh	r3, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	8979      	ldrh	r1, [r7, #10]
 8007a9c:	4b20      	ldr	r3, [pc, #128]	; (8007b20 <I2C_RequestMemoryRead+0xa4>)
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 f984 	bl	8007db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	69b9      	ldr	r1, [r7, #24]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f89d 	bl	8007bec <I2C_WaitOnTXISFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e02c      	b.n	8007b16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d105      	bne.n	8007ace <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ac2:	893b      	ldrh	r3, [r7, #8]
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	629a      	str	r2, [r3, #40]	; 0x28
 8007acc:	e015      	b.n	8007afa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ace:	893b      	ldrh	r3, [r7, #8]
 8007ad0:	0a1b      	lsrs	r3, r3, #8
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	69b9      	ldr	r1, [r7, #24]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f883 	bl	8007bec <I2C_WaitOnTXISFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e012      	b.n	8007b16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007af0:	893b      	ldrh	r3, [r7, #8]
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2200      	movs	r2, #0
 8007b02:	2140      	movs	r1, #64	; 0x40
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f831 	bl	8007b6c <I2C_WaitOnFlagUntilTimeout>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	80002000 	.word	0x80002000

08007b24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d103      	bne.n	8007b42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d007      	beq.n	8007b60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	619a      	str	r2, [r3, #24]
  }
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b7c:	e022      	b.n	8007bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b84:	d01e      	beq.n	8007bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b86:	f7fd ffab 	bl	8005ae0 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d302      	bcc.n	8007b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d113      	bne.n	8007bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba0:	f043 0220 	orr.w	r2, r3, #32
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e00f      	b.n	8007be4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	bf0c      	ite	eq
 8007bd4:	2301      	moveq	r3, #1
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d0cd      	beq.n	8007b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bf8:	e02c      	b.n	8007c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 f870 	bl	8007ce4 <I2C_IsAcknowledgeFailed>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e02a      	b.n	8007c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c14:	d01e      	beq.n	8007c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c16:	f7fd ff63 	bl	8005ae0 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d302      	bcc.n	8007c2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d113      	bne.n	8007c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c30:	f043 0220 	orr.w	r2, r3, #32
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e007      	b.n	8007c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d1cb      	bne.n	8007bfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c78:	e028      	b.n	8007ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 f830 	bl	8007ce4 <I2C_IsAcknowledgeFailed>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e026      	b.n	8007cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8e:	f7fd ff27 	bl	8005ae0 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d113      	bne.n	8007ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca8:	f043 0220 	orr.w	r2, r3, #32
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e007      	b.n	8007cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d1cf      	bne.n	8007c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f003 0310 	and.w	r3, r3, #16
 8007cfa:	2b10      	cmp	r3, #16
 8007cfc:	d151      	bne.n	8007da2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cfe:	e022      	b.n	8007d46 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d06:	d01e      	beq.n	8007d46 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d08:	f7fd feea 	bl	8005ae0 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d302      	bcc.n	8007d1e <I2C_IsAcknowledgeFailed+0x3a>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d113      	bne.n	8007d46 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e02e      	b.n	8007da4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	f003 0320 	and.w	r3, r3, #32
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d1d5      	bne.n	8007d00 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2210      	movs	r2, #16
 8007d5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2220      	movs	r2, #32
 8007d62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fedd 	bl	8007b24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6859      	ldr	r1, [r3, #4]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4b0d      	ldr	r3, [pc, #52]	; (8007dac <I2C_IsAcknowledgeFailed+0xc8>)
 8007d76:	400b      	ands	r3, r1
 8007d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	f043 0204 	orr.w	r2, r3, #4
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	fe00e800 	.word	0xfe00e800

08007db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	817b      	strh	r3, [r7, #10]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	0d5b      	lsrs	r3, r3, #21
 8007dcc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <I2C_TransferConfig+0x58>)
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	ea02 0103 	and.w	r1, r2, r3
 8007dda:	897b      	ldrh	r3, [r7, #10]
 8007ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007de0:	7a7b      	ldrb	r3, [r7, #9]
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	431a      	orrs	r2, r3
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	431a      	orrs	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	03ff63ff 	.word	0x03ff63ff

08007e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d138      	bne.n	8007e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e032      	b.n	8007e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2224      	movs	r2, #36	; 0x24
 8007e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0201 	bic.w	r2, r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6819      	ldr	r1, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e000      	b.n	8007e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e94:	2302      	movs	r3, #2
  }
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d139      	bne.n	8007f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e033      	b.n	8007f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2224      	movs	r2, #36	; 0x24
 8007ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0201 	bic.w	r2, r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0201 	orr.w	r2, r2, #1
 8007f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e000      	b.n	8007f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f2c:	2302      	movs	r3, #2
  }
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f44:	4b0b      	ldr	r3, [pc, #44]	; (8007f74 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f48:	4a0a      	ldr	r2, [pc, #40]	; (8007f74 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007f4a:	f043 0301 	orr.w	r3, r3, #1
 8007f4e:	6613      	str	r3, [r2, #96]	; 0x60
 8007f50:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	4905      	ldr	r1, [pc, #20]	; (8007f78 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	604b      	str	r3, [r1, #4]
}
 8007f68:	bf00      	nop
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	40021000 	.word	0x40021000
 8007f78:	40010000 	.word	0x40010000

08007f7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7e:	b08b      	sub	sp, #44	; 0x2c
 8007f80:	af06      	add	r7, sp, #24
 8007f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e104      	b.n	8008198 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fd fc5e 	bl	8005864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2203      	movs	r2, #3
 8007fac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f002 f96a 	bl	800a28e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	687e      	ldr	r6, [r7, #4]
 8007fc2:	466d      	mov	r5, sp
 8007fc4:	f106 0410 	add.w	r4, r6, #16
 8007fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	602b      	str	r3, [r5, #0]
 8007fd0:	1d33      	adds	r3, r6, #4
 8007fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007fd4:	6838      	ldr	r0, [r7, #0]
 8007fd6:	f002 f949 	bl	800a26c <USB_CoreInit>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e0d5      	b.n	8008198 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f002 f966 	bl	800a2c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
 8007ffc:	e04c      	b.n	8008098 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	440b      	add	r3, r1
 800800e:	3301      	adds	r3, #1
 8008010:	2201      	movs	r2, #1
 8008012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	440b      	add	r3, r1
 8008024:	7bfa      	ldrb	r2, [r7, #15]
 8008026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008028:	7bfa      	ldrb	r2, [r7, #15]
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	b298      	uxth	r0, r3
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	440b      	add	r3, r1
 800803a:	3336      	adds	r3, #54	; 0x36
 800803c:	4602      	mov	r2, r0
 800803e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	440b      	add	r3, r1
 8008050:	3303      	adds	r3, #3
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008056:	7bfa      	ldrb	r2, [r7, #15]
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	440b      	add	r3, r1
 8008064:	3338      	adds	r3, #56	; 0x38
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800806a:	7bfa      	ldrb	r2, [r7, #15]
 800806c:	6879      	ldr	r1, [r7, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	440b      	add	r3, r1
 8008078:	333c      	adds	r3, #60	; 0x3c
 800807a:	2200      	movs	r2, #0
 800807c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800807e:	7bfa      	ldrb	r2, [r7, #15]
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	440b      	add	r3, r1
 800808c:	3340      	adds	r3, #64	; 0x40
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	3301      	adds	r3, #1
 8008096:	73fb      	strb	r3, [r7, #15]
 8008098:	7bfa      	ldrb	r2, [r7, #15]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d3ad      	bcc.n	8007ffe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
 80080a6:	e044      	b.n	8008132 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80080a8:	7bfa      	ldrb	r2, [r7, #15]
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	440b      	add	r3, r1
 80080b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80080be:	7bfa      	ldrb	r2, [r7, #15]
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	440b      	add	r3, r1
 80080cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80080d0:	7bfa      	ldrb	r2, [r7, #15]
 80080d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80080d4:	7bfa      	ldrb	r2, [r7, #15]
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	440b      	add	r3, r1
 80080e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80080e6:	2200      	movs	r2, #0
 80080e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80080ea:	7bfa      	ldrb	r2, [r7, #15]
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	440b      	add	r3, r1
 80080f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008100:	7bfa      	ldrb	r2, [r7, #15]
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	440b      	add	r3, r1
 800810e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008116:	7bfa      	ldrb	r2, [r7, #15]
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	440b      	add	r3, r1
 8008124:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	3301      	adds	r3, #1
 8008130:	73fb      	strb	r3, [r7, #15]
 8008132:	7bfa      	ldrb	r2, [r7, #15]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	d3b5      	bcc.n	80080a8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	603b      	str	r3, [r7, #0]
 8008142:	687e      	ldr	r6, [r7, #4]
 8008144:	466d      	mov	r5, sp
 8008146:	f106 0410 	add.w	r4, r6, #16
 800814a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800814c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	1d33      	adds	r3, r6, #4
 8008154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008156:	6838      	ldr	r0, [r7, #0]
 8008158:	f002 f8c1 	bl	800a2de <USB_DevInit>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e014      	b.n	8008198 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d102      	bne.n	800818c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f80a 	bl	80081a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f002 f8c5 	bl	800a320 <USB_DevDisconnect>

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f043 0302 	orr.w	r3, r3, #2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 80081fc:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	43db      	mvns	r3, r3
 8008208:	401a      	ands	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	095b      	lsrs	r3, r3, #5
 800820e:	4908      	ldr	r1, [pc, #32]	; (8008230 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8008210:	4313      	orrs	r3, r2
 8008212:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8008214:	4b06      	ldr	r3, [pc, #24]	; (8008230 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f003 031f 	and.w	r3, r3, #31
 800821e:	4904      	ldr	r1, [pc, #16]	; (8008230 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8008220:	4313      	orrs	r3, r2
 8008222:	608b      	str	r3, [r1, #8]


}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	40007000 	.word	0x40007000

08008234 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8008238:	4b09      	ldr	r3, [pc, #36]	; (8008260 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f023 0307 	bic.w	r3, r3, #7
 8008240:	4a07      	ldr	r2, [pc, #28]	; (8008260 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8008242:	f043 0303 	orr.w	r3, r3, #3
 8008246:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	4a05      	ldr	r2, [pc, #20]	; (8008264 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800824e:	f043 0304 	orr.w	r3, r3, #4
 8008252:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8008254:	bf30      	wfi
}
 8008256:	bf00      	nop
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	40007000 	.word	0x40007000
 8008264:	e000ed00 	.word	0xe000ed00

08008268 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800826c:	4b04      	ldr	r3, [pc, #16]	; (8008280 <HAL_PWREx_GetVoltageRange+0x18>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008274:	4618      	mov	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40007000 	.word	0x40007000

08008284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008292:	d130      	bne.n	80082f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008294:	4b23      	ldr	r3, [pc, #140]	; (8008324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800829c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a0:	d038      	beq.n	8008314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082a2:	4b20      	ldr	r3, [pc, #128]	; (8008324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082aa:	4a1e      	ldr	r2, [pc, #120]	; (8008324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80082b2:	4b1d      	ldr	r3, [pc, #116]	; (8008328 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2232      	movs	r2, #50	; 0x32
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
 80082bc:	4a1b      	ldr	r2, [pc, #108]	; (800832c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80082be:	fba2 2303 	umull	r2, r3, r2, r3
 80082c2:	0c9b      	lsrs	r3, r3, #18
 80082c4:	3301      	adds	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082c8:	e002      	b.n	80082d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082d0:	4b14      	ldr	r3, [pc, #80]	; (8008324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082dc:	d102      	bne.n	80082e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f2      	bne.n	80082ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80082e4:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f0:	d110      	bne.n	8008314 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e00f      	b.n	8008316 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80082f6:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008302:	d007      	beq.n	8008314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800830c:	4a05      	ldr	r2, [pc, #20]	; (8008324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800830e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008312:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	40007000 	.word	0x40007000
 8008328:	20000064 	.word	0x20000064
 800832c:	431bde83 	.word	0x431bde83

08008330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f000 bc11 	b.w	8008b66 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008344:	4ba0      	ldr	r3, [pc, #640]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f003 030c 	and.w	r3, r3, #12
 800834c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800834e:	4b9e      	ldr	r3, [pc, #632]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 80e4 	beq.w	800852e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d007      	beq.n	800837c <HAL_RCC_OscConfig+0x4c>
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	2b0c      	cmp	r3, #12
 8008370:	f040 808b 	bne.w	800848a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2b01      	cmp	r3, #1
 8008378:	f040 8087 	bne.w	800848a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800837c:	4b92      	ldr	r3, [pc, #584]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <HAL_RCC_OscConfig+0x64>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e3e8      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a1a      	ldr	r2, [r3, #32]
 8008398:	4b8b      	ldr	r3, [pc, #556]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0308 	and.w	r3, r3, #8
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <HAL_RCC_OscConfig+0x7e>
 80083a4:	4b88      	ldr	r3, [pc, #544]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ac:	e005      	b.n	80083ba <HAL_RCC_OscConfig+0x8a>
 80083ae:	4b86      	ldr	r3, [pc, #536]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80083b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083b4:	091b      	lsrs	r3, r3, #4
 80083b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d223      	bcs.n	8008406 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fd76 	bl	8008eb4 <RCC_SetFlashLatencyFromMSIRange>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e3c9      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083d2:	4b7d      	ldr	r3, [pc, #500]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a7c      	ldr	r2, [pc, #496]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80083d8:	f043 0308 	orr.w	r3, r3, #8
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	4b7a      	ldr	r3, [pc, #488]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	4977      	ldr	r1, [pc, #476]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083f0:	4b75      	ldr	r3, [pc, #468]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	4972      	ldr	r1, [pc, #456]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008400:	4313      	orrs	r3, r2
 8008402:	604b      	str	r3, [r1, #4]
 8008404:	e025      	b.n	8008452 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008406:	4b70      	ldr	r3, [pc, #448]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a6f      	ldr	r2, [pc, #444]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 800840c:	f043 0308 	orr.w	r3, r3, #8
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	4b6d      	ldr	r3, [pc, #436]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	496a      	ldr	r1, [pc, #424]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008420:	4313      	orrs	r3, r2
 8008422:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008424:	4b68      	ldr	r3, [pc, #416]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	021b      	lsls	r3, r3, #8
 8008432:	4965      	ldr	r1, [pc, #404]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008434:	4313      	orrs	r3, r2
 8008436:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fd36 	bl	8008eb4 <RCC_SetFlashLatencyFromMSIRange>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e389      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008452:	f000 fca3 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
 8008456:	4602      	mov	r2, r0
 8008458:	4b5b      	ldr	r3, [pc, #364]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	091b      	lsrs	r3, r3, #4
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	495a      	ldr	r1, [pc, #360]	; (80085cc <HAL_RCC_OscConfig+0x29c>)
 8008464:	5ccb      	ldrb	r3, [r1, r3]
 8008466:	f003 031f 	and.w	r3, r3, #31
 800846a:	fa22 f303 	lsr.w	r3, r2, r3
 800846e:	4a58      	ldr	r2, [pc, #352]	; (80085d0 <HAL_RCC_OscConfig+0x2a0>)
 8008470:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008472:	4b58      	ldr	r3, [pc, #352]	; (80085d4 <HAL_RCC_OscConfig+0x2a4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f7fd fae2 	bl	8005a40 <HAL_InitTick>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d052      	beq.n	800852c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	e36d      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d032      	beq.n	80084f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008492:	4b4d      	ldr	r3, [pc, #308]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a4c      	ldr	r2, [pc, #304]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800849e:	f7fd fb1f 	bl	8005ae0 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80084a6:	f7fd fb1b 	bl	8005ae0 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e356      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80084b8:	4b43      	ldr	r3, [pc, #268]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f0      	beq.n	80084a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80084c4:	4b40      	ldr	r3, [pc, #256]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a3f      	ldr	r2, [pc, #252]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084ca:	f043 0308 	orr.w	r3, r3, #8
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	4b3d      	ldr	r3, [pc, #244]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	493a      	ldr	r1, [pc, #232]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084e2:	4b39      	ldr	r3, [pc, #228]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	021b      	lsls	r3, r3, #8
 80084f0:	4935      	ldr	r1, [pc, #212]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	604b      	str	r3, [r1, #4]
 80084f6:	e01a      	b.n	800852e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80084f8:	4b33      	ldr	r3, [pc, #204]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a32      	ldr	r2, [pc, #200]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80084fe:	f023 0301 	bic.w	r3, r3, #1
 8008502:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008504:	f7fd faec 	bl	8005ae0 <HAL_GetTick>
 8008508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800850a:	e008      	b.n	800851e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800850c:	f7fd fae8 	bl	8005ae0 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d901      	bls.n	800851e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e323      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800851e:	4b2a      	ldr	r3, [pc, #168]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1f0      	bne.n	800850c <HAL_RCC_OscConfig+0x1dc>
 800852a:	e000      	b.n	800852e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800852c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d073      	beq.n	8008622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b08      	cmp	r3, #8
 800853e:	d005      	beq.n	800854c <HAL_RCC_OscConfig+0x21c>
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	2b0c      	cmp	r3, #12
 8008544:	d10e      	bne.n	8008564 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b03      	cmp	r3, #3
 800854a:	d10b      	bne.n	8008564 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800854c:	4b1e      	ldr	r3, [pc, #120]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d063      	beq.n	8008620 <HAL_RCC_OscConfig+0x2f0>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d15f      	bne.n	8008620 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e300      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800856c:	d106      	bne.n	800857c <HAL_RCC_OscConfig+0x24c>
 800856e:	4b16      	ldr	r3, [pc, #88]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a15      	ldr	r2, [pc, #84]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	e01d      	b.n	80085b8 <HAL_RCC_OscConfig+0x288>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008584:	d10c      	bne.n	80085a0 <HAL_RCC_OscConfig+0x270>
 8008586:	4b10      	ldr	r3, [pc, #64]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a0f      	ldr	r2, [pc, #60]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 800858c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 8008598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	e00b      	b.n	80085b8 <HAL_RCC_OscConfig+0x288>
 80085a0:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a08      	ldr	r2, [pc, #32]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80085a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	4b06      	ldr	r3, [pc, #24]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a05      	ldr	r2, [pc, #20]	; (80085c8 <HAL_RCC_OscConfig+0x298>)
 80085b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01b      	beq.n	80085f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c0:	f7fd fa8e 	bl	8005ae0 <HAL_GetTick>
 80085c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085c6:	e010      	b.n	80085ea <HAL_RCC_OscConfig+0x2ba>
 80085c8:	40021000 	.word	0x40021000
 80085cc:	0800ba2c 	.word	0x0800ba2c
 80085d0:	20000064 	.word	0x20000064
 80085d4:	20000068 	.word	0x20000068
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085d8:	f7fd fa82 	bl	8005ae0 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b64      	cmp	r3, #100	; 0x64
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e2bd      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085ea:	4baf      	ldr	r3, [pc, #700]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f0      	beq.n	80085d8 <HAL_RCC_OscConfig+0x2a8>
 80085f6:	e014      	b.n	8008622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f8:	f7fd fa72 	bl	8005ae0 <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085fe:	e008      	b.n	8008612 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008600:	f7fd fa6e 	bl	8005ae0 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b64      	cmp	r3, #100	; 0x64
 800860c:	d901      	bls.n	8008612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e2a9      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008612:	4ba5      	ldr	r3, [pc, #660]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f0      	bne.n	8008600 <HAL_RCC_OscConfig+0x2d0>
 800861e:	e000      	b.n	8008622 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d060      	beq.n	80086f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2b04      	cmp	r3, #4
 8008632:	d005      	beq.n	8008640 <HAL_RCC_OscConfig+0x310>
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	2b0c      	cmp	r3, #12
 8008638:	d119      	bne.n	800866e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b02      	cmp	r3, #2
 800863e:	d116      	bne.n	800866e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008640:	4b99      	ldr	r3, [pc, #612]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <HAL_RCC_OscConfig+0x328>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e286      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008658:	4b93      	ldr	r3, [pc, #588]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	061b      	lsls	r3, r3, #24
 8008666:	4990      	ldr	r1, [pc, #576]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008668:	4313      	orrs	r3, r2
 800866a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800866c:	e040      	b.n	80086f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d023      	beq.n	80086be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008676:	4b8c      	ldr	r3, [pc, #560]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a8b      	ldr	r2, [pc, #556]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800867c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008682:	f7fd fa2d 	bl	8005ae0 <HAL_GetTick>
 8008686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008688:	e008      	b.n	800869c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800868a:	f7fd fa29 	bl	8005ae0 <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	2b02      	cmp	r3, #2
 8008696:	d901      	bls.n	800869c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	e264      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800869c:	4b82      	ldr	r3, [pc, #520]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0f0      	beq.n	800868a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086a8:	4b7f      	ldr	r3, [pc, #508]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	061b      	lsls	r3, r3, #24
 80086b6:	497c      	ldr	r1, [pc, #496]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	604b      	str	r3, [r1, #4]
 80086bc:	e018      	b.n	80086f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086be:	4b7a      	ldr	r3, [pc, #488]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a79      	ldr	r2, [pc, #484]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80086c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ca:	f7fd fa09 	bl	8005ae0 <HAL_GetTick>
 80086ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086d0:	e008      	b.n	80086e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086d2:	f7fd fa05 	bl	8005ae0 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e240      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086e4:	4b70      	ldr	r3, [pc, #448]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1f0      	bne.n	80086d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d03c      	beq.n	8008776 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01c      	beq.n	800873e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008704:	4b68      	ldr	r3, [pc, #416]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800870a:	4a67      	ldr	r2, [pc, #412]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800870c:	f043 0301 	orr.w	r3, r3, #1
 8008710:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008714:	f7fd f9e4 	bl	8005ae0 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800871c:	f7fd f9e0 	bl	8005ae0 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e21b      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800872e:	4b5e      	ldr	r3, [pc, #376]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0ef      	beq.n	800871c <HAL_RCC_OscConfig+0x3ec>
 800873c:	e01b      	b.n	8008776 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800873e:	4b5a      	ldr	r3, [pc, #360]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008744:	4a58      	ldr	r2, [pc, #352]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008746:	f023 0301 	bic.w	r3, r3, #1
 800874a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800874e:	f7fd f9c7 	bl	8005ae0 <HAL_GetTick>
 8008752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008754:	e008      	b.n	8008768 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008756:	f7fd f9c3 	bl	8005ae0 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d901      	bls.n	8008768 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e1fe      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008768:	4b4f      	ldr	r3, [pc, #316]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800876a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1ef      	bne.n	8008756 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 80a6 	beq.w	80088d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008784:	2300      	movs	r3, #0
 8008786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008788:	4b47      	ldr	r3, [pc, #284]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800878a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10d      	bne.n	80087b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008794:	4b44      	ldr	r3, [pc, #272]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008798:	4a43      	ldr	r2, [pc, #268]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800879a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800879e:	6593      	str	r3, [r2, #88]	; 0x58
 80087a0:	4b41      	ldr	r3, [pc, #260]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80087a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a8:	60bb      	str	r3, [r7, #8]
 80087aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087ac:	2301      	movs	r3, #1
 80087ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087b0:	4b3e      	ldr	r3, [pc, #248]	; (80088ac <HAL_RCC_OscConfig+0x57c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d118      	bne.n	80087ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087bc:	4b3b      	ldr	r3, [pc, #236]	; (80088ac <HAL_RCC_OscConfig+0x57c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a3a      	ldr	r2, [pc, #232]	; (80088ac <HAL_RCC_OscConfig+0x57c>)
 80087c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087c8:	f7fd f98a 	bl	8005ae0 <HAL_GetTick>
 80087cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087d0:	f7fd f986 	bl	8005ae0 <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e1c1      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087e2:	4b32      	ldr	r3, [pc, #200]	; (80088ac <HAL_RCC_OscConfig+0x57c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0f0      	beq.n	80087d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d108      	bne.n	8008808 <HAL_RCC_OscConfig+0x4d8>
 80087f6:	4b2c      	ldr	r3, [pc, #176]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80087f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087fc:	4a2a      	ldr	r2, [pc, #168]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008806:	e024      	b.n	8008852 <HAL_RCC_OscConfig+0x522>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	2b05      	cmp	r3, #5
 800880e:	d110      	bne.n	8008832 <HAL_RCC_OscConfig+0x502>
 8008810:	4b25      	ldr	r3, [pc, #148]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008816:	4a24      	ldr	r2, [pc, #144]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008818:	f043 0304 	orr.w	r3, r3, #4
 800881c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008820:	4b21      	ldr	r3, [pc, #132]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008826:	4a20      	ldr	r2, [pc, #128]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008828:	f043 0301 	orr.w	r3, r3, #1
 800882c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008830:	e00f      	b.n	8008852 <HAL_RCC_OscConfig+0x522>
 8008832:	4b1d      	ldr	r3, [pc, #116]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008838:	4a1b      	ldr	r2, [pc, #108]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800883a:	f023 0301 	bic.w	r3, r3, #1
 800883e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008842:	4b19      	ldr	r3, [pc, #100]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 8008844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008848:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800884a:	f023 0304 	bic.w	r3, r3, #4
 800884e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d016      	beq.n	8008888 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800885a:	f7fd f941 	bl	8005ae0 <HAL_GetTick>
 800885e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008860:	e00a      	b.n	8008878 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008862:	f7fd f93d 	bl	8005ae0 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008870:	4293      	cmp	r3, r2
 8008872:	d901      	bls.n	8008878 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e176      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008878:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <HAL_RCC_OscConfig+0x578>)
 800887a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887e:	f003 0302 	and.w	r3, r3, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0ed      	beq.n	8008862 <HAL_RCC_OscConfig+0x532>
 8008886:	e01a      	b.n	80088be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008888:	f7fd f92a 	bl	8005ae0 <HAL_GetTick>
 800888c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800888e:	e00f      	b.n	80088b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008890:	f7fd f926 	bl	8005ae0 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	f241 3288 	movw	r2, #5000	; 0x1388
 800889e:	4293      	cmp	r3, r2
 80088a0:	d906      	bls.n	80088b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e15f      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
 80088a6:	bf00      	nop
 80088a8:	40021000 	.word	0x40021000
 80088ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80088b0:	4baa      	ldr	r3, [pc, #680]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 80088b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e8      	bne.n	8008890 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088be:	7ffb      	ldrb	r3, [r7, #31]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d105      	bne.n	80088d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088c4:	4ba5      	ldr	r3, [pc, #660]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 80088c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c8:	4aa4      	ldr	r2, [pc, #656]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 80088ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0320 	and.w	r3, r3, #32
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d03c      	beq.n	8008956 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01c      	beq.n	800891e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088e4:	4b9d      	ldr	r3, [pc, #628]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 80088e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088ea:	4a9c      	ldr	r2, [pc, #624]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 80088ec:	f043 0301 	orr.w	r3, r3, #1
 80088f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f4:	f7fd f8f4 	bl	8005ae0 <HAL_GetTick>
 80088f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088fc:	f7fd f8f0 	bl	8005ae0 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e12b      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800890e:	4b93      	ldr	r3, [pc, #588]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d0ef      	beq.n	80088fc <HAL_RCC_OscConfig+0x5cc>
 800891c:	e01b      	b.n	8008956 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800891e:	4b8f      	ldr	r3, [pc, #572]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008924:	4a8d      	ldr	r2, [pc, #564]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008926:	f023 0301 	bic.w	r3, r3, #1
 800892a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800892e:	f7fd f8d7 	bl	8005ae0 <HAL_GetTick>
 8008932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008934:	e008      	b.n	8008948 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008936:	f7fd f8d3 	bl	8005ae0 <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e10e      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008948:	4b84      	ldr	r3, [pc, #528]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 800894a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1ef      	bne.n	8008936 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8102 	beq.w	8008b64 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	2b02      	cmp	r3, #2
 8008966:	f040 80c5 	bne.w	8008af4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800896a:	4b7c      	ldr	r3, [pc, #496]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f003 0203 	and.w	r2, r3, #3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897a:	429a      	cmp	r2, r3
 800897c:	d12c      	bne.n	80089d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008988:	3b01      	subs	r3, #1
 800898a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800898c:	429a      	cmp	r2, r3
 800898e:	d123      	bne.n	80089d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800899c:	429a      	cmp	r2, r3
 800899e:	d11b      	bne.n	80089d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d113      	bne.n	80089d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	3b01      	subs	r3, #1
 80089be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d109      	bne.n	80089d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	085b      	lsrs	r3, r3, #1
 80089d0:	3b01      	subs	r3, #1
 80089d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d067      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b0c      	cmp	r3, #12
 80089dc:	d062      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80089de:	4b5f      	ldr	r3, [pc, #380]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e0bb      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80089ee:	4b5b      	ldr	r3, [pc, #364]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a5a      	ldr	r2, [pc, #360]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 80089f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80089fa:	f7fd f871 	bl	8005ae0 <HAL_GetTick>
 80089fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a00:	e008      	b.n	8008a14 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a02:	f7fd f86d 	bl	8005ae0 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d901      	bls.n	8008a14 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e0a8      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a14:	4b51      	ldr	r3, [pc, #324]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f0      	bne.n	8008a02 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a20:	4b4e      	ldr	r3, [pc, #312]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	4b4e      	ldr	r3, [pc, #312]	; (8008b60 <HAL_RCC_OscConfig+0x830>)
 8008a26:	4013      	ands	r3, r2
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a30:	3a01      	subs	r2, #1
 8008a32:	0112      	lsls	r2, r2, #4
 8008a34:	4311      	orrs	r1, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a3a:	0212      	lsls	r2, r2, #8
 8008a3c:	4311      	orrs	r1, r2
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008a42:	0852      	lsrs	r2, r2, #1
 8008a44:	3a01      	subs	r2, #1
 8008a46:	0552      	lsls	r2, r2, #21
 8008a48:	4311      	orrs	r1, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008a4e:	0852      	lsrs	r2, r2, #1
 8008a50:	3a01      	subs	r2, #1
 8008a52:	0652      	lsls	r2, r2, #25
 8008a54:	4311      	orrs	r1, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a5a:	06d2      	lsls	r2, r2, #27
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	493f      	ldr	r1, [pc, #252]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008a64:	4b3d      	ldr	r3, [pc, #244]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a3c      	ldr	r2, [pc, #240]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a70:	4b3a      	ldr	r3, [pc, #232]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	4a39      	ldr	r2, [pc, #228]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a7c:	f7fd f830 	bl	8005ae0 <HAL_GetTick>
 8008a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a82:	e008      	b.n	8008a96 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a84:	f7fd f82c 	bl	8005ae0 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d901      	bls.n	8008a96 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e067      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a96:	4b31      	ldr	r3, [pc, #196]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0f0      	beq.n	8008a84 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008aa2:	e05f      	b.n	8008b64 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e05e      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aa8:	4b2c      	ldr	r3, [pc, #176]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d157      	bne.n	8008b64 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008ab4:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a28      	ldr	r2, [pc, #160]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ac0:	4b26      	ldr	r3, [pc, #152]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	4a25      	ldr	r2, [pc, #148]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008acc:	f7fd f808 	bl	8005ae0 <HAL_GetTick>
 8008ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ad2:	e008      	b.n	8008ae6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ad4:	f7fd f804 	bl	8005ae0 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d901      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e03f      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ae6:	4b1d      	ldr	r3, [pc, #116]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0f0      	beq.n	8008ad4 <HAL_RCC_OscConfig+0x7a4>
 8008af2:	e037      	b.n	8008b64 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	2b0c      	cmp	r3, #12
 8008af8:	d02d      	beq.n	8008b56 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008afa:	4b18      	ldr	r3, [pc, #96]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a17      	ldr	r2, [pc, #92]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b04:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d105      	bne.n	8008b1e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008b12:	4b12      	ldr	r3, [pc, #72]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	4a11      	ldr	r2, [pc, #68]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008b18:	f023 0303 	bic.w	r3, r3, #3
 8008b1c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	4a0e      	ldr	r2, [pc, #56]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008b24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2e:	f7fc ffd7 	bl	8005ae0 <HAL_GetTick>
 8008b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b34:	e008      	b.n	8008b48 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b36:	f7fc ffd3 	bl	8005ae0 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e00e      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b48:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <HAL_RCC_OscConfig+0x82c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f0      	bne.n	8008b36 <HAL_RCC_OscConfig+0x806>
 8008b54:	e006      	b.n	8008b64 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e005      	b.n	8008b66 <HAL_RCC_OscConfig+0x836>
 8008b5a:	bf00      	nop
 8008b5c:	40021000 	.word	0x40021000
 8008b60:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop

08008b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0c8      	b.n	8008d16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b84:	4b66      	ldr	r3, [pc, #408]	; (8008d20 <HAL_RCC_ClockConfig+0x1b0>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d910      	bls.n	8008bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b92:	4b63      	ldr	r3, [pc, #396]	; (8008d20 <HAL_RCC_ClockConfig+0x1b0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f023 0207 	bic.w	r2, r3, #7
 8008b9a:	4961      	ldr	r1, [pc, #388]	; (8008d20 <HAL_RCC_ClockConfig+0x1b0>)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ba2:	4b5f      	ldr	r3, [pc, #380]	; (8008d20 <HAL_RCC_ClockConfig+0x1b0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d001      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e0b0      	b.n	8008d16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d04c      	beq.n	8008c5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d107      	bne.n	8008bd8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bc8:	4b56      	ldr	r3, [pc, #344]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d121      	bne.n	8008c18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e09e      	b.n	8008d16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008be0:	4b50      	ldr	r3, [pc, #320]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d115      	bne.n	8008c18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e092      	b.n	8008d16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008bf8:	4b4a      	ldr	r3, [pc, #296]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e086      	b.n	8008d16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c08:	4b46      	ldr	r3, [pc, #280]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e07e      	b.n	8008d16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c18:	4b42      	ldr	r3, [pc, #264]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f023 0203 	bic.w	r2, r3, #3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	493f      	ldr	r1, [pc, #252]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c2a:	f7fc ff59 	bl	8005ae0 <HAL_GetTick>
 8008c2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c30:	e00a      	b.n	8008c48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c32:	f7fc ff55 	bl	8005ae0 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e066      	b.n	8008d16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c48:	4b36      	ldr	r3, [pc, #216]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f003 020c 	and.w	r2, r3, #12
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d1eb      	bne.n	8008c32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d008      	beq.n	8008c78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c66:	4b2f      	ldr	r3, [pc, #188]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	492c      	ldr	r1, [pc, #176]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c78:	4b29      	ldr	r3, [pc, #164]	; (8008d20 <HAL_RCC_ClockConfig+0x1b0>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d210      	bcs.n	8008ca8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c86:	4b26      	ldr	r3, [pc, #152]	; (8008d20 <HAL_RCC_ClockConfig+0x1b0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f023 0207 	bic.w	r2, r3, #7
 8008c8e:	4924      	ldr	r1, [pc, #144]	; (8008d20 <HAL_RCC_ClockConfig+0x1b0>)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c96:	4b22      	ldr	r3, [pc, #136]	; (8008d20 <HAL_RCC_ClockConfig+0x1b0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d001      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e036      	b.n	8008d16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d008      	beq.n	8008cc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cb4:	4b1b      	ldr	r3, [pc, #108]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	4918      	ldr	r1, [pc, #96]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0308 	and.w	r3, r3, #8
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d009      	beq.n	8008ce6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cd2:	4b14      	ldr	r3, [pc, #80]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	4910      	ldr	r1, [pc, #64]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008ce6:	f000 f859 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
 8008cea:	4602      	mov	r2, r0
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <HAL_RCC_ClockConfig+0x1b4>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	091b      	lsrs	r3, r3, #4
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	490c      	ldr	r1, [pc, #48]	; (8008d28 <HAL_RCC_ClockConfig+0x1b8>)
 8008cf8:	5ccb      	ldrb	r3, [r1, r3]
 8008cfa:	f003 031f 	and.w	r3, r3, #31
 8008cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008d02:	4a0a      	ldr	r2, [pc, #40]	; (8008d2c <HAL_RCC_ClockConfig+0x1bc>)
 8008d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008d06:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <HAL_RCC_ClockConfig+0x1c0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fc fe98 	bl	8005a40 <HAL_InitTick>
 8008d10:	4603      	mov	r3, r0
 8008d12:	72fb      	strb	r3, [r7, #11]

  return status;
 8008d14:	7afb      	ldrb	r3, [r7, #11]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	40022000 	.word	0x40022000
 8008d24:	40021000 	.word	0x40021000
 8008d28:	0800ba2c 	.word	0x0800ba2c
 8008d2c:	20000064 	.word	0x20000064
 8008d30:	20000068 	.word	0x20000068

08008d34 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08a      	sub	sp, #40	; 0x28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8008d40:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <HAL_RCC_MCOConfig+0x64>)
 8008d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d44:	4a14      	ldr	r2, [pc, #80]	; (8008d98 <HAL_RCC_MCOConfig+0x64>)
 8008d46:	f043 0301 	orr.w	r3, r3, #1
 8008d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d4c:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <HAL_RCC_MCOConfig+0x64>)
 8008d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8008d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d62:	2302      	movs	r3, #2
 8008d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008d6e:	f107 0314 	add.w	r3, r7, #20
 8008d72:	4619      	mov	r1, r3
 8008d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d78:	f7fe f9dc 	bl	8007134 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8008d7c:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <HAL_RCC_MCOConfig+0x64>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	4903      	ldr	r1, [pc, #12]	; (8008d98 <HAL_RCC_MCOConfig+0x64>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	608b      	str	r3, [r1, #8]
}
 8008d90:	bf00      	nop
 8008d92:	3728      	adds	r7, #40	; 0x28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40021000 	.word	0x40021000

08008d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b089      	sub	sp, #36	; 0x24
 8008da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	2300      	movs	r3, #0
 8008da8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008daa:	4b3e      	ldr	r3, [pc, #248]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f003 030c 	and.w	r3, r3, #12
 8008db2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008db4:	4b3b      	ldr	r3, [pc, #236]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d005      	beq.n	8008dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b0c      	cmp	r3, #12
 8008dc8:	d121      	bne.n	8008e0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d11e      	bne.n	8008e0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008dd0:	4b34      	ldr	r3, [pc, #208]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d107      	bne.n	8008dec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ddc:	4b31      	ldr	r3, [pc, #196]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008de2:	0a1b      	lsrs	r3, r3, #8
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	61fb      	str	r3, [r7, #28]
 8008dea:	e005      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008dec:	4b2d      	ldr	r3, [pc, #180]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	091b      	lsrs	r3, r3, #4
 8008df2:	f003 030f 	and.w	r3, r3, #15
 8008df6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008df8:	4a2b      	ldr	r2, [pc, #172]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10d      	bne.n	8008e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e0c:	e00a      	b.n	8008e24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d102      	bne.n	8008e1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e14:	4b25      	ldr	r3, [pc, #148]	; (8008eac <HAL_RCC_GetSysClockFreq+0x110>)
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	e004      	b.n	8008e24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	d101      	bne.n	8008e24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e20:	4b23      	ldr	r3, [pc, #140]	; (8008eb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b0c      	cmp	r3, #12
 8008e28:	d134      	bne.n	8008e94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d003      	beq.n	8008e42 <HAL_RCC_GetSysClockFreq+0xa6>
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d003      	beq.n	8008e48 <HAL_RCC_GetSysClockFreq+0xac>
 8008e40:	e005      	b.n	8008e4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008e42:	4b1a      	ldr	r3, [pc, #104]	; (8008eac <HAL_RCC_GetSysClockFreq+0x110>)
 8008e44:	617b      	str	r3, [r7, #20]
      break;
 8008e46:	e005      	b.n	8008e54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008e48:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e4a:	617b      	str	r3, [r7, #20]
      break;
 8008e4c:	e002      	b.n	8008e54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	617b      	str	r3, [r7, #20]
      break;
 8008e52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e54:	4b13      	ldr	r3, [pc, #76]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	091b      	lsrs	r3, r3, #4
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	3301      	adds	r3, #1
 8008e60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e62:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	0a1b      	lsrs	r3, r3, #8
 8008e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	fb02 f203 	mul.w	r2, r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	0e5b      	lsrs	r3, r3, #25
 8008e80:	f003 0303 	and.w	r3, r3, #3
 8008e84:	3301      	adds	r3, #1
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008e94:	69bb      	ldr	r3, [r7, #24]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3724      	adds	r7, #36	; 0x24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	40021000 	.word	0x40021000
 8008ea8:	0800ba3c 	.word	0x0800ba3c
 8008eac:	00f42400 	.word	0x00f42400
 8008eb0:	0124f800 	.word	0x0124f800

08008eb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ec0:	4b2a      	ldr	r3, [pc, #168]	; (8008f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d003      	beq.n	8008ed4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008ecc:	f7ff f9cc 	bl	8008268 <HAL_PWREx_GetVoltageRange>
 8008ed0:	6178      	str	r0, [r7, #20]
 8008ed2:	e014      	b.n	8008efe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ed4:	4b25      	ldr	r3, [pc, #148]	; (8008f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed8:	4a24      	ldr	r2, [pc, #144]	; (8008f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ede:	6593      	str	r3, [r2, #88]	; 0x58
 8008ee0:	4b22      	ldr	r3, [pc, #136]	; (8008f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008eec:	f7ff f9bc 	bl	8008268 <HAL_PWREx_GetVoltageRange>
 8008ef0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008ef2:	4b1e      	ldr	r3, [pc, #120]	; (8008f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef6:	4a1d      	ldr	r2, [pc, #116]	; (8008f6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008efc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f04:	d10b      	bne.n	8008f1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b80      	cmp	r3, #128	; 0x80
 8008f0a:	d919      	bls.n	8008f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2ba0      	cmp	r3, #160	; 0xa0
 8008f10:	d902      	bls.n	8008f18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f12:	2302      	movs	r3, #2
 8008f14:	613b      	str	r3, [r7, #16]
 8008f16:	e013      	b.n	8008f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f18:	2301      	movs	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	e010      	b.n	8008f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b80      	cmp	r3, #128	; 0x80
 8008f22:	d902      	bls.n	8008f2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008f24:	2303      	movs	r3, #3
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	e00a      	b.n	8008f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b80      	cmp	r3, #128	; 0x80
 8008f2e:	d102      	bne.n	8008f36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f30:	2302      	movs	r3, #2
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	e004      	b.n	8008f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b70      	cmp	r3, #112	; 0x70
 8008f3a:	d101      	bne.n	8008f40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008f40:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f023 0207 	bic.w	r2, r3, #7
 8008f48:	4909      	ldr	r1, [pc, #36]	; (8008f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d001      	beq.n	8008f62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40022000 	.word	0x40022000

08008f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f80:	2300      	movs	r3, #0
 8008f82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d031      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f98:	d01a      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008f9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f9e:	d814      	bhi.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008fa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fa8:	d10f      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008faa:	4b5d      	ldr	r3, [pc, #372]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	4a5c      	ldr	r2, [pc, #368]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fb4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008fb6:	e00c      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fa1e 	bl	8009400 <RCCEx_PLLSAI1_Config>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008fc8:	e003      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	74fb      	strb	r3, [r7, #19]
      break;
 8008fce:	e000      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fd2:	7cfb      	ldrb	r3, [r7, #19]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10b      	bne.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fd8:	4b51      	ldr	r3, [pc, #324]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	494e      	ldr	r1, [pc, #312]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008fee:	e001      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff0:	7cfb      	ldrb	r3, [r7, #19]
 8008ff2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 809e 	beq.w	800913e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009002:	2300      	movs	r3, #0
 8009004:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009006:	4b46      	ldr	r3, [pc, #280]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8009012:	2301      	movs	r3, #1
 8009014:	e000      	b.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009016:	2300      	movs	r3, #0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00d      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800901c:	4b40      	ldr	r3, [pc, #256]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800901e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009020:	4a3f      	ldr	r2, [pc, #252]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009026:	6593      	str	r3, [r2, #88]	; 0x58
 8009028:	4b3d      	ldr	r3, [pc, #244]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009030:	60bb      	str	r3, [r7, #8]
 8009032:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009034:	2301      	movs	r3, #1
 8009036:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009038:	4b3a      	ldr	r3, [pc, #232]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a39      	ldr	r2, [pc, #228]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800903e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009042:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009044:	f7fc fd4c 	bl	8005ae0 <HAL_GetTick>
 8009048:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800904a:	e009      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800904c:	f7fc fd48 	bl	8005ae0 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b02      	cmp	r3, #2
 8009058:	d902      	bls.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	74fb      	strb	r3, [r7, #19]
        break;
 800905e:	e005      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009060:	4b30      	ldr	r3, [pc, #192]	; (8009124 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0ef      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800906c:	7cfb      	ldrb	r3, [r7, #19]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d15a      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009072:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800907c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01e      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	429a      	cmp	r2, r3
 800908c:	d019      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800908e:	4b24      	ldr	r3, [pc, #144]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009098:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800909a:	4b21      	ldr	r3, [pc, #132]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800909c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a0:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80090a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090aa:	4b1d      	ldr	r3, [pc, #116]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80090ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b0:	4a1b      	ldr	r2, [pc, #108]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80090b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80090ba:	4a19      	ldr	r2, [pc, #100]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d016      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090cc:	f7fc fd08 	bl	8005ae0 <HAL_GetTick>
 80090d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090d2:	e00b      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090d4:	f7fc fd04 	bl	8005ae0 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d902      	bls.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	74fb      	strb	r3, [r7, #19]
            break;
 80090ea:	e006      	b.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090ec:	4b0c      	ldr	r3, [pc, #48]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80090ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f2:	f003 0302 	and.w	r3, r3, #2
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0ec      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80090fa:	7cfb      	ldrb	r3, [r7, #19]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10b      	bne.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009100:	4b07      	ldr	r3, [pc, #28]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910e:	4904      	ldr	r1, [pc, #16]	; (8009120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009110:	4313      	orrs	r3, r2
 8009112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009116:	e009      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009118:	7cfb      	ldrb	r3, [r7, #19]
 800911a:	74bb      	strb	r3, [r7, #18]
 800911c:	e006      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800911e:	bf00      	nop
 8009120:	40021000 	.word	0x40021000
 8009124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009128:	7cfb      	ldrb	r3, [r7, #19]
 800912a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800912c:	7c7b      	ldrb	r3, [r7, #17]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d105      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009132:	4bb2      	ldr	r3, [pc, #712]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009136:	4ab1      	ldr	r2, [pc, #708]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800913c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800914a:	4bac      	ldr	r3, [pc, #688]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800914c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009150:	f023 0203 	bic.w	r2, r3, #3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	49a8      	ldr	r1, [pc, #672]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800916c:	4ba3      	ldr	r3, [pc, #652]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009172:	f023 020c 	bic.w	r2, r3, #12
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	49a0      	ldr	r1, [pc, #640]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800918e:	4b9b      	ldr	r3, [pc, #620]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009194:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	4997      	ldr	r1, [pc, #604]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091b0:	4b92      	ldr	r3, [pc, #584]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091be:	498f      	ldr	r1, [pc, #572]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091d2:	4b8a      	ldr	r3, [pc, #552]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e0:	4986      	ldr	r1, [pc, #536]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00a      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091f4:	4b81      	ldr	r3, [pc, #516]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	497e      	ldr	r1, [pc, #504]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009204:	4313      	orrs	r3, r2
 8009206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009216:	4b79      	ldr	r3, [pc, #484]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	4975      	ldr	r1, [pc, #468]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009226:	4313      	orrs	r3, r2
 8009228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009238:	4b70      	ldr	r3, [pc, #448]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800923e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009246:	496d      	ldr	r1, [pc, #436]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009248:	4313      	orrs	r3, r2
 800924a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00a      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800925a:	4b68      	ldr	r3, [pc, #416]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800925c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	4964      	ldr	r1, [pc, #400]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d028      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800927c:	4b5f      	ldr	r3, [pc, #380]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800927e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009282:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800928a:	495c      	ldr	r1, [pc, #368]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800928c:	4313      	orrs	r3, r2
 800928e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800929a:	d106      	bne.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800929c:	4b57      	ldr	r3, [pc, #348]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	4a56      	ldr	r2, [pc, #344]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092a6:	60d3      	str	r3, [r2, #12]
 80092a8:	e011      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092b2:	d10c      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3304      	adds	r3, #4
 80092b8:	2101      	movs	r1, #1
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 f8a0 	bl	8009400 <RCCEx_PLLSAI1_Config>
 80092c0:	4603      	mov	r3, r0
 80092c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80092c4:	7cfb      	ldrb	r3, [r7, #19]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80092ca:	7cfb      	ldrb	r3, [r7, #19]
 80092cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d028      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80092da:	4b48      	ldr	r3, [pc, #288]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e8:	4944      	ldr	r1, [pc, #272]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092f8:	d106      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092fa:	4b40      	ldr	r3, [pc, #256]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	4a3f      	ldr	r2, [pc, #252]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009304:	60d3      	str	r3, [r2, #12]
 8009306:	e011      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009310:	d10c      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3304      	adds	r3, #4
 8009316:	2101      	movs	r1, #1
 8009318:	4618      	mov	r0, r3
 800931a:	f000 f871 	bl	8009400 <RCCEx_PLLSAI1_Config>
 800931e:	4603      	mov	r3, r0
 8009320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009322:	7cfb      	ldrb	r3, [r7, #19]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8009328:	7cfb      	ldrb	r3, [r7, #19]
 800932a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d028      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009338:	4b30      	ldr	r3, [pc, #192]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009346:	492d      	ldr	r1, [pc, #180]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009348:	4313      	orrs	r3, r2
 800934a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009356:	d106      	bne.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009358:	4b28      	ldr	r3, [pc, #160]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	4a27      	ldr	r2, [pc, #156]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800935e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009362:	60d3      	str	r3, [r2, #12]
 8009364:	e011      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800936e:	d10c      	bne.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3304      	adds	r3, #4
 8009374:	2101      	movs	r1, #1
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f842 	bl	8009400 <RCCEx_PLLSAI1_Config>
 800937c:	4603      	mov	r3, r0
 800937e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009380:	7cfb      	ldrb	r3, [r7, #19]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8009386:	7cfb      	ldrb	r3, [r7, #19]
 8009388:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01c      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009396:	4b19      	ldr	r3, [pc, #100]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	4915      	ldr	r1, [pc, #84]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093b4:	d10c      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3304      	adds	r3, #4
 80093ba:	2102      	movs	r1, #2
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 f81f 	bl	8009400 <RCCEx_PLLSAI1_Config>
 80093c2:	4603      	mov	r3, r0
 80093c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093c6:	7cfb      	ldrb	r3, [r7, #19]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80093cc:	7cfb      	ldrb	r3, [r7, #19]
 80093ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80093dc:	4b07      	ldr	r3, [pc, #28]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ea:	4904      	ldr	r1, [pc, #16]	; (80093fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80093f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	40021000 	.word	0x40021000

08009400 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800940e:	4b74      	ldr	r3, [pc, #464]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d018      	beq.n	800944c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800941a:	4b71      	ldr	r3, [pc, #452]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f003 0203 	and.w	r2, r3, #3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d10d      	bne.n	8009446 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
       ||
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009432:	4b6b      	ldr	r3, [pc, #428]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	091b      	lsrs	r3, r3, #4
 8009438:	f003 0307 	and.w	r3, r3, #7
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
       ||
 8009442:	429a      	cmp	r2, r3
 8009444:	d047      	beq.n	80094d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	73fb      	strb	r3, [r7, #15]
 800944a:	e044      	b.n	80094d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b03      	cmp	r3, #3
 8009452:	d018      	beq.n	8009486 <RCCEx_PLLSAI1_Config+0x86>
 8009454:	2b03      	cmp	r3, #3
 8009456:	d825      	bhi.n	80094a4 <RCCEx_PLLSAI1_Config+0xa4>
 8009458:	2b01      	cmp	r3, #1
 800945a:	d002      	beq.n	8009462 <RCCEx_PLLSAI1_Config+0x62>
 800945c:	2b02      	cmp	r3, #2
 800945e:	d009      	beq.n	8009474 <RCCEx_PLLSAI1_Config+0x74>
 8009460:	e020      	b.n	80094a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009462:	4b5f      	ldr	r3, [pc, #380]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b00      	cmp	r3, #0
 800946c:	d11d      	bne.n	80094aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009472:	e01a      	b.n	80094aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009474:	4b5a      	ldr	r3, [pc, #360]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800947c:	2b00      	cmp	r3, #0
 800947e:	d116      	bne.n	80094ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009484:	e013      	b.n	80094ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009486:	4b56      	ldr	r3, [pc, #344]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10f      	bne.n	80094b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009492:	4b53      	ldr	r3, [pc, #332]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d109      	bne.n	80094b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094a2:	e006      	b.n	80094b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]
      break;
 80094a8:	e004      	b.n	80094b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80094aa:	bf00      	nop
 80094ac:	e002      	b.n	80094b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80094ae:	bf00      	nop
 80094b0:	e000      	b.n	80094b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80094b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80094b4:	7bfb      	ldrb	r3, [r7, #15]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10d      	bne.n	80094d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80094ba:	4b49      	ldr	r3, [pc, #292]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6819      	ldr	r1, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	430b      	orrs	r3, r1
 80094d0:	4943      	ldr	r1, [pc, #268]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d17c      	bne.n	80095d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80094dc:	4b40      	ldr	r3, [pc, #256]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a3f      	ldr	r2, [pc, #252]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094e8:	f7fc fafa 	bl	8005ae0 <HAL_GetTick>
 80094ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80094ee:	e009      	b.n	8009504 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094f0:	f7fc faf6 	bl	8005ae0 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d902      	bls.n	8009504 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	73fb      	strb	r3, [r7, #15]
        break;
 8009502:	e005      	b.n	8009510 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009504:	4b36      	ldr	r3, [pc, #216]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1ef      	bne.n	80094f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d15f      	bne.n	80095d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d110      	bne.n	800953e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800951c:	4b30      	ldr	r3, [pc, #192]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009524:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	6892      	ldr	r2, [r2, #8]
 800952c:	0211      	lsls	r1, r2, #8
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	68d2      	ldr	r2, [r2, #12]
 8009532:	06d2      	lsls	r2, r2, #27
 8009534:	430a      	orrs	r2, r1
 8009536:	492a      	ldr	r1, [pc, #168]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009538:	4313      	orrs	r3, r2
 800953a:	610b      	str	r3, [r1, #16]
 800953c:	e027      	b.n	800958e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d112      	bne.n	800956a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009544:	4b26      	ldr	r3, [pc, #152]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800954c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	6892      	ldr	r2, [r2, #8]
 8009554:	0211      	lsls	r1, r2, #8
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	6912      	ldr	r2, [r2, #16]
 800955a:	0852      	lsrs	r2, r2, #1
 800955c:	3a01      	subs	r2, #1
 800955e:	0552      	lsls	r2, r2, #21
 8009560:	430a      	orrs	r2, r1
 8009562:	491f      	ldr	r1, [pc, #124]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009564:	4313      	orrs	r3, r2
 8009566:	610b      	str	r3, [r1, #16]
 8009568:	e011      	b.n	800958e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800956a:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009572:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6892      	ldr	r2, [r2, #8]
 800957a:	0211      	lsls	r1, r2, #8
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	6952      	ldr	r2, [r2, #20]
 8009580:	0852      	lsrs	r2, r2, #1
 8009582:	3a01      	subs	r2, #1
 8009584:	0652      	lsls	r2, r2, #25
 8009586:	430a      	orrs	r2, r1
 8009588:	4915      	ldr	r1, [pc, #84]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800958a:	4313      	orrs	r3, r2
 800958c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800958e:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a13      	ldr	r2, [pc, #76]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009598:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800959a:	f7fc faa1 	bl	8005ae0 <HAL_GetTick>
 800959e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80095a0:	e009      	b.n	80095b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80095a2:	f7fc fa9d 	bl	8005ae0 <HAL_GetTick>
 80095a6:	4602      	mov	r2, r0
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d902      	bls.n	80095b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	73fb      	strb	r3, [r7, #15]
          break;
 80095b4:	e005      	b.n	80095c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80095b6:	4b0a      	ldr	r3, [pc, #40]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d0ef      	beq.n	80095a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	4903      	ldr	r1, [pc, #12]	; (80095e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	40021000 	.word	0x40021000

080095e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e049      	b.n	800968a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7fc f8cc 	bl	80057a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2202      	movs	r2, #2
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f000 fc08 	bl	8009e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d001      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e03b      	b.n	8009724 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0201 	orr.w	r2, r2, #1
 80096c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a19      	ldr	r2, [pc, #100]	; (8009730 <HAL_TIM_Base_Start_IT+0x9c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d009      	beq.n	80096e2 <HAL_TIM_Base_Start_IT+0x4e>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096d6:	d004      	beq.n	80096e2 <HAL_TIM_Base_Start_IT+0x4e>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a15      	ldr	r2, [pc, #84]	; (8009734 <HAL_TIM_Base_Start_IT+0xa0>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d115      	bne.n	800970e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689a      	ldr	r2, [r3, #8]
 80096e8:	4b13      	ldr	r3, [pc, #76]	; (8009738 <HAL_TIM_Base_Start_IT+0xa4>)
 80096ea:	4013      	ands	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b06      	cmp	r3, #6
 80096f2:	d015      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x8c>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096fa:	d011      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0201 	orr.w	r2, r2, #1
 800970a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800970c:	e008      	b.n	8009720 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f042 0201 	orr.w	r2, r2, #1
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	e000      	b.n	8009722 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009720:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	40012c00 	.word	0x40012c00
 8009734:	40014000 	.word	0x40014000
 8009738:	00010007 	.word	0x00010007

0800973c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0201 	bic.w	r2, r2, #1
 8009752:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6a1a      	ldr	r2, [r3, #32]
 800975a:	f241 1311 	movw	r3, #4369	; 0x1111
 800975e:	4013      	ands	r3, r2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10f      	bne.n	8009784 <HAL_TIM_Base_Stop_IT+0x48>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6a1a      	ldr	r2, [r3, #32]
 800976a:	f240 4344 	movw	r3, #1092	; 0x444
 800976e:	4013      	ands	r3, r2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d107      	bne.n	8009784 <HAL_TIM_Base_Stop_IT+0x48>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 0201 	bic.w	r2, r2, #1
 8009782:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e049      	b.n	8009840 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d106      	bne.n	80097c6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7fb ffa9 	bl	8005718 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f000 fb2d 	bl	8009e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <HAL_TIM_IC_Start_IT+0x1a>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800985e:	b2db      	uxtb	r3, r3
 8009860:	e023      	b.n	80098aa <HAL_TIM_IC_Start_IT+0x62>
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b04      	cmp	r3, #4
 8009866:	d104      	bne.n	8009872 <HAL_TIM_IC_Start_IT+0x2a>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800986e:	b2db      	uxtb	r3, r3
 8009870:	e01b      	b.n	80098aa <HAL_TIM_IC_Start_IT+0x62>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b08      	cmp	r3, #8
 8009876:	d104      	bne.n	8009882 <HAL_TIM_IC_Start_IT+0x3a>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800987e:	b2db      	uxtb	r3, r3
 8009880:	e013      	b.n	80098aa <HAL_TIM_IC_Start_IT+0x62>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b0c      	cmp	r3, #12
 8009886:	d104      	bne.n	8009892 <HAL_TIM_IC_Start_IT+0x4a>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800988e:	b2db      	uxtb	r3, r3
 8009890:	e00b      	b.n	80098aa <HAL_TIM_IC_Start_IT+0x62>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b10      	cmp	r3, #16
 8009896:	d104      	bne.n	80098a2 <HAL_TIM_IC_Start_IT+0x5a>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	e003      	b.n	80098aa <HAL_TIM_IC_Start_IT+0x62>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d104      	bne.n	80098bc <HAL_TIM_IC_Start_IT+0x74>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	e013      	b.n	80098e4 <HAL_TIM_IC_Start_IT+0x9c>
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d104      	bne.n	80098cc <HAL_TIM_IC_Start_IT+0x84>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	e00b      	b.n	80098e4 <HAL_TIM_IC_Start_IT+0x9c>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b08      	cmp	r3, #8
 80098d0:	d104      	bne.n	80098dc <HAL_TIM_IC_Start_IT+0x94>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	e003      	b.n	80098e4 <HAL_TIM_IC_Start_IT+0x9c>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d102      	bne.n	80098f2 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d001      	beq.n	80098f6 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e0c4      	b.n	8009a80 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <HAL_TIM_IC_Start_IT+0xbe>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009904:	e023      	b.n	800994e <HAL_TIM_IC_Start_IT+0x106>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b04      	cmp	r3, #4
 800990a:	d104      	bne.n	8009916 <HAL_TIM_IC_Start_IT+0xce>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009914:	e01b      	b.n	800994e <HAL_TIM_IC_Start_IT+0x106>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b08      	cmp	r3, #8
 800991a:	d104      	bne.n	8009926 <HAL_TIM_IC_Start_IT+0xde>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009924:	e013      	b.n	800994e <HAL_TIM_IC_Start_IT+0x106>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b0c      	cmp	r3, #12
 800992a:	d104      	bne.n	8009936 <HAL_TIM_IC_Start_IT+0xee>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009934:	e00b      	b.n	800994e <HAL_TIM_IC_Start_IT+0x106>
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b10      	cmp	r3, #16
 800993a:	d104      	bne.n	8009946 <HAL_TIM_IC_Start_IT+0xfe>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2202      	movs	r2, #2
 8009940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009944:	e003      	b.n	800994e <HAL_TIM_IC_Start_IT+0x106>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2202      	movs	r2, #2
 800994a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <HAL_TIM_IC_Start_IT+0x116>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800995c:	e013      	b.n	8009986 <HAL_TIM_IC_Start_IT+0x13e>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b04      	cmp	r3, #4
 8009962:	d104      	bne.n	800996e <HAL_TIM_IC_Start_IT+0x126>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800996c:	e00b      	b.n	8009986 <HAL_TIM_IC_Start_IT+0x13e>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b08      	cmp	r3, #8
 8009972:	d104      	bne.n	800997e <HAL_TIM_IC_Start_IT+0x136>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2202      	movs	r2, #2
 8009978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800997c:	e003      	b.n	8009986 <HAL_TIM_IC_Start_IT+0x13e>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2202      	movs	r2, #2
 8009982:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b0c      	cmp	r3, #12
 800998a:	d841      	bhi.n	8009a10 <HAL_TIM_IC_Start_IT+0x1c8>
 800998c:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <HAL_TIM_IC_Start_IT+0x14c>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	080099c9 	.word	0x080099c9
 8009998:	08009a11 	.word	0x08009a11
 800999c:	08009a11 	.word	0x08009a11
 80099a0:	08009a11 	.word	0x08009a11
 80099a4:	080099db 	.word	0x080099db
 80099a8:	08009a11 	.word	0x08009a11
 80099ac:	08009a11 	.word	0x08009a11
 80099b0:	08009a11 	.word	0x08009a11
 80099b4:	080099ed 	.word	0x080099ed
 80099b8:	08009a11 	.word	0x08009a11
 80099bc:	08009a11 	.word	0x08009a11
 80099c0:	08009a11 	.word	0x08009a11
 80099c4:	080099ff 	.word	0x080099ff
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0202 	orr.w	r2, r2, #2
 80099d6:	60da      	str	r2, [r3, #12]
      break;
 80099d8:	e01b      	b.n	8009a12 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0204 	orr.w	r2, r2, #4
 80099e8:	60da      	str	r2, [r3, #12]
      break;
 80099ea:	e012      	b.n	8009a12 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68da      	ldr	r2, [r3, #12]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0208 	orr.w	r2, r2, #8
 80099fa:	60da      	str	r2, [r3, #12]
      break;
 80099fc:	e009      	b.n	8009a12 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f042 0210 	orr.w	r2, r2, #16
 8009a0c:	60da      	str	r2, [r3, #12]
      break;
 8009a0e:	e000      	b.n	8009a12 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8009a10:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2201      	movs	r2, #1
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 fb7c 	bl	800a118 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a18      	ldr	r2, [pc, #96]	; (8009a88 <HAL_TIM_IC_Start_IT+0x240>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d009      	beq.n	8009a3e <HAL_TIM_IC_Start_IT+0x1f6>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a32:	d004      	beq.n	8009a3e <HAL_TIM_IC_Start_IT+0x1f6>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a14      	ldr	r2, [pc, #80]	; (8009a8c <HAL_TIM_IC_Start_IT+0x244>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d115      	bne.n	8009a6a <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	4b12      	ldr	r3, [pc, #72]	; (8009a90 <HAL_TIM_IC_Start_IT+0x248>)
 8009a46:	4013      	ands	r3, r2
 8009a48:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b06      	cmp	r3, #6
 8009a4e:	d015      	beq.n	8009a7c <HAL_TIM_IC_Start_IT+0x234>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a56:	d011      	beq.n	8009a7c <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0201 	orr.w	r2, r2, #1
 8009a66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a68:	e008      	b.n	8009a7c <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f042 0201 	orr.w	r2, r2, #1
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	e000      	b.n	8009a7e <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40012c00 	.word	0x40012c00
 8009a8c:	40014000 	.word	0x40014000
 8009a90:	00010007 	.word	0x00010007

08009a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d122      	bne.n	8009af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d11b      	bne.n	8009af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f06f 0202 	mvn.w	r2, #2
 8009ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	f003 0303 	and.w	r3, r3, #3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7fa fd26 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 8009adc:	e005      	b.n	8009aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f98b 	bl	8009dfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f992 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	f003 0304 	and.w	r3, r3, #4
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d122      	bne.n	8009b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	d11b      	bne.n	8009b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f06f 0204 	mvn.w	r2, #4
 8009b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2202      	movs	r2, #2
 8009b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7fa fcfc 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 8009b30:	e005      	b.n	8009b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f961 	bl	8009dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f968 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	f003 0308 	and.w	r3, r3, #8
 8009b4e:	2b08      	cmp	r3, #8
 8009b50:	d122      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f003 0308 	and.w	r3, r3, #8
 8009b5c:	2b08      	cmp	r3, #8
 8009b5e:	d11b      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f06f 0208 	mvn.w	r2, #8
 8009b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2204      	movs	r2, #4
 8009b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	f003 0303 	and.w	r3, r3, #3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7fa fcd2 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 8009b84:	e005      	b.n	8009b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f937 	bl	8009dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f93e 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	f003 0310 	and.w	r3, r3, #16
 8009ba2:	2b10      	cmp	r3, #16
 8009ba4:	d122      	bne.n	8009bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f003 0310 	and.w	r3, r3, #16
 8009bb0:	2b10      	cmp	r3, #16
 8009bb2:	d11b      	bne.n	8009bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f06f 0210 	mvn.w	r2, #16
 8009bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fa fca8 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 8009bd8:	e005      	b.n	8009be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f90d 	bl	8009dfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f914 	bl	8009e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d10e      	bne.n	8009c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d107      	bne.n	8009c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f06f 0201 	mvn.w	r2, #1
 8009c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7fa fdf6 	bl	8004804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c22:	2b80      	cmp	r3, #128	; 0x80
 8009c24:	d10e      	bne.n	8009c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	d107      	bne.n	8009c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fb00 	bl	800a244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c52:	d10e      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5e:	2b80      	cmp	r3, #128	; 0x80
 8009c60:	d107      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 faf3 	bl	800a258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7c:	2b40      	cmp	r3, #64	; 0x40
 8009c7e:	d10e      	bne.n	8009c9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8a:	2b40      	cmp	r3, #64	; 0x40
 8009c8c:	d107      	bne.n	8009c9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f8c2 	bl	8009e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	f003 0320 	and.w	r3, r3, #32
 8009ca8:	2b20      	cmp	r3, #32
 8009caa:	d10e      	bne.n	8009cca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f003 0320 	and.w	r3, r3, #32
 8009cb6:	2b20      	cmp	r3, #32
 8009cb8:	d107      	bne.n	8009cca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f06f 0220 	mvn.w	r2, #32
 8009cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fab3 	bl	800a230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d101      	bne.n	8009cec <HAL_TIM_IC_ConfigChannel+0x1a>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	e082      	b.n	8009df2 <HAL_TIM_IC_ConfigChannel+0x120>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d11b      	bne.n	8009d32 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	6819      	ldr	r1, [r3, #0]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f000 f8f9 	bl	8009f00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	699a      	ldr	r2, [r3, #24]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 020c 	bic.w	r2, r2, #12
 8009d1c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6999      	ldr	r1, [r3, #24]
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	689a      	ldr	r2, [r3, #8]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	619a      	str	r2, [r3, #24]
 8009d30:	e05a      	b.n	8009de8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d11c      	bne.n	8009d72 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6818      	ldr	r0, [r3, #0]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6819      	ldr	r1, [r3, #0]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f000 f930 	bl	8009fac <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699a      	ldr	r2, [r3, #24]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009d5a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6999      	ldr	r1, [r3, #24]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	021a      	lsls	r2, r3, #8
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	619a      	str	r2, [r3, #24]
 8009d70:	e03a      	b.n	8009de8 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b08      	cmp	r3, #8
 8009d76:	d11b      	bne.n	8009db0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	6819      	ldr	r1, [r3, #0]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f000 f94d 	bl	800a026 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69da      	ldr	r2, [r3, #28]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 020c 	bic.w	r2, r2, #12
 8009d9a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	69d9      	ldr	r1, [r3, #28]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	689a      	ldr	r2, [r3, #8]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	430a      	orrs	r2, r1
 8009dac:	61da      	str	r2, [r3, #28]
 8009dae:	e01b      	b.n	8009de8 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6818      	ldr	r0, [r3, #0]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	6819      	ldr	r1, [r3, #0]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f000 f96d 	bl	800a09e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	69da      	ldr	r2, [r3, #28]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009dd2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69d9      	ldr	r1, [r3, #28]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	021a      	lsls	r2, r3, #8
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b083      	sub	sp, #12
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a2a      	ldr	r2, [pc, #168]	; (8009ef4 <TIM_Base_SetConfig+0xbc>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d003      	beq.n	8009e58 <TIM_Base_SetConfig+0x20>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e56:	d108      	bne.n	8009e6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a21      	ldr	r2, [pc, #132]	; (8009ef4 <TIM_Base_SetConfig+0xbc>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d00b      	beq.n	8009e8a <TIM_Base_SetConfig+0x52>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e78:	d007      	beq.n	8009e8a <TIM_Base_SetConfig+0x52>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a1e      	ldr	r2, [pc, #120]	; (8009ef8 <TIM_Base_SetConfig+0xc0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d003      	beq.n	8009e8a <TIM_Base_SetConfig+0x52>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a1d      	ldr	r2, [pc, #116]	; (8009efc <TIM_Base_SetConfig+0xc4>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d108      	bne.n	8009e9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a0c      	ldr	r2, [pc, #48]	; (8009ef4 <TIM_Base_SetConfig+0xbc>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d007      	beq.n	8009ed8 <TIM_Base_SetConfig+0xa0>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a0b      	ldr	r2, [pc, #44]	; (8009ef8 <TIM_Base_SetConfig+0xc0>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d003      	beq.n	8009ed8 <TIM_Base_SetConfig+0xa0>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a0a      	ldr	r2, [pc, #40]	; (8009efc <TIM_Base_SetConfig+0xc4>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d103      	bne.n	8009ee0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	691a      	ldr	r2, [r3, #16]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	615a      	str	r2, [r3, #20]
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	40012c00 	.word	0x40012c00
 8009ef8:	40014000 	.word	0x40014000
 8009efc:	40014400 	.word	0x40014400

08009f00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f023 0201 	bic.w	r2, r3, #1
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4a1e      	ldr	r2, [pc, #120]	; (8009fa4 <TIM_TI1_SetConfig+0xa4>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d007      	beq.n	8009f3e <TIM_TI1_SetConfig+0x3e>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f34:	d003      	beq.n	8009f3e <TIM_TI1_SetConfig+0x3e>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	4a1b      	ldr	r2, [pc, #108]	; (8009fa8 <TIM_TI1_SetConfig+0xa8>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d101      	bne.n	8009f42 <TIM_TI1_SetConfig+0x42>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e000      	b.n	8009f44 <TIM_TI1_SetConfig+0x44>
 8009f42:	2300      	movs	r3, #0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d008      	beq.n	8009f5a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f023 0303 	bic.w	r3, r3, #3
 8009f4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	e003      	b.n	8009f62 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f043 0301 	orr.w	r3, r3, #1
 8009f60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	011b      	lsls	r3, r3, #4
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f023 030a 	bic.w	r3, r3, #10
 8009f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	f003 030a 	and.w	r3, r3, #10
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	621a      	str	r2, [r3, #32]
}
 8009f96:	bf00      	nop
 8009f98:	371c      	adds	r7, #28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	40012c00 	.word	0x40012c00
 8009fa8:	40014000 	.word	0x40014000

08009fac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	f023 0210 	bic.w	r2, r3, #16
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
 8009fd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	021b      	lsls	r3, r3, #8
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	031b      	lsls	r3, r3, #12
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ffe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	011b      	lsls	r3, r3, #4
 800a004:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a008:	693a      	ldr	r2, [r7, #16]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	621a      	str	r2, [r3, #32]
}
 800a01a:	bf00      	nop
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a026:	b480      	push	{r7}
 800a028:	b087      	sub	sp, #28
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
 800a032:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f023 0303 	bic.w	r3, r3, #3
 800a052:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4313      	orrs	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a062:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a076:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	021b      	lsls	r3, r3, #8
 800a07c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	4313      	orrs	r3, r2
 800a084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	621a      	str	r2, [r3, #32]
}
 800a092:	bf00      	nop
 800a094:	371c      	adds	r7, #28
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b087      	sub	sp, #28
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	60f8      	str	r0, [r7, #12]
 800a0a6:	60b9      	str	r1, [r7, #8]
 800a0a8:	607a      	str	r2, [r7, #4]
 800a0aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	031b      	lsls	r3, r3, #12
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a0f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	031b      	lsls	r3, r3, #12
 800a0f6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	621a      	str	r2, [r3, #32]
}
 800a10c:	bf00      	nop
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f003 031f 	and.w	r3, r3, #31
 800a12a:	2201      	movs	r2, #1
 800a12c:	fa02 f303 	lsl.w	r3, r2, r3
 800a130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	43db      	mvns	r3, r3
 800a13a:	401a      	ands	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6a1a      	ldr	r2, [r3, #32]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f003 031f 	and.w	r3, r3, #31
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	fa01 f303 	lsl.w	r3, r1, r3
 800a150:	431a      	orrs	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
	...

0800a164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a178:	2302      	movs	r3, #2
 800a17a:	e04f      	b.n	800a21c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2202      	movs	r2, #2
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a21      	ldr	r2, [pc, #132]	; (800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d108      	bne.n	800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a14      	ldr	r2, [pc, #80]	; (800a228 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d009      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e4:	d004      	beq.n	800a1f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a10      	ldr	r2, [pc, #64]	; (800a22c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d10c      	bne.n	800a20a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	40012c00 	.word	0x40012c00
 800a22c:	40014000 	.word	0x40014000

0800a230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a26c:	b084      	sub	sp, #16
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	f107 0014 	add.w	r0, r7, #20
 800a27a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	b004      	add	sp, #16
 800a28c:	4770      	bx	lr

0800a28e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a28e:	b480      	push	{r7}
 800a290:	b085      	sub	sp, #20
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a296:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a29a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	43db      	mvns	r3, r3
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a2de:	b084      	sub	sp, #16
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	f107 0014 	add.w	r0, r7, #20
 800a2ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	b004      	add	sp, #16
 800a31e:	4770      	bx	lr

0800a320 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a32e:	b29b      	uxth	r3, r3
 800a330:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a334:	b29a      	uxth	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
	...

0800a34c <__libc_init_array>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	4d0d      	ldr	r5, [pc, #52]	; (800a384 <__libc_init_array+0x38>)
 800a350:	4c0d      	ldr	r4, [pc, #52]	; (800a388 <__libc_init_array+0x3c>)
 800a352:	1b64      	subs	r4, r4, r5
 800a354:	10a4      	asrs	r4, r4, #2
 800a356:	2600      	movs	r6, #0
 800a358:	42a6      	cmp	r6, r4
 800a35a:	d109      	bne.n	800a370 <__libc_init_array+0x24>
 800a35c:	4d0b      	ldr	r5, [pc, #44]	; (800a38c <__libc_init_array+0x40>)
 800a35e:	4c0c      	ldr	r4, [pc, #48]	; (800a390 <__libc_init_array+0x44>)
 800a360:	f000 f820 	bl	800a3a4 <_init>
 800a364:	1b64      	subs	r4, r4, r5
 800a366:	10a4      	asrs	r4, r4, #2
 800a368:	2600      	movs	r6, #0
 800a36a:	42a6      	cmp	r6, r4
 800a36c:	d105      	bne.n	800a37a <__libc_init_array+0x2e>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	f855 3b04 	ldr.w	r3, [r5], #4
 800a374:	4798      	blx	r3
 800a376:	3601      	adds	r6, #1
 800a378:	e7ee      	b.n	800a358 <__libc_init_array+0xc>
 800a37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a37e:	4798      	blx	r3
 800a380:	3601      	adds	r6, #1
 800a382:	e7f2      	b.n	800a36a <__libc_init_array+0x1e>
 800a384:	0800ba6c 	.word	0x0800ba6c
 800a388:	0800ba6c 	.word	0x0800ba6c
 800a38c:	0800ba6c 	.word	0x0800ba6c
 800a390:	0800ba74 	.word	0x0800ba74

0800a394 <memset>:
 800a394:	4402      	add	r2, r0
 800a396:	4603      	mov	r3, r0
 800a398:	4293      	cmp	r3, r2
 800a39a:	d100      	bne.n	800a39e <memset+0xa>
 800a39c:	4770      	bx	lr
 800a39e:	f803 1b01 	strb.w	r1, [r3], #1
 800a3a2:	e7f9      	b.n	800a398 <memset+0x4>

0800a3a4 <_init>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr

0800a3b0 <_fini>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	bf00      	nop
 800a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3b6:	bc08      	pop	{r3}
 800a3b8:	469e      	mov	lr, r3
 800a3ba:	4770      	bx	lr
