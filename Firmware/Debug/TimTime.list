
TimTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e8c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000165c  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009674  08009674  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08009674  08009674  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009674  08009674  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009678  08009678  00019678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800967c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  2000005c  080096d8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  080096d8  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f29d  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384f  00000000  00000000  0003f329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00042b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00005ac9  00000000  00000000  00044268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b295  00000000  00000000  00049d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e55c3  00000000  00000000  00064fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0014a589  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001538  00000000  00000000  0014a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000616c  00000000  00000000  0014bb18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008000 	.word	0x08008000

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	08008000 	.word	0x08008000

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <_Z13updateDisplayh>:

//#include "fonts.h"
const char* foo = "0123456789";
char tcDisplay[11] = {0};
void updateDisplay(uint8_t state)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d82b      	bhi.n	8000a20 <_Z13updateDisplayh+0x68>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <_Z13updateDisplayh+0x18>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009f1 	.word	0x080009f1
 80009d4:	080009f7 	.word	0x080009f7
 80009d8:	080009fd 	.word	0x080009fd
 80009dc:	08000a03 	.word	0x08000a03
 80009e0:	08000a09 	.word	0x08000a09
 80009e4:	08000a0f 	.word	0x08000a0f
 80009e8:	08000a15 	.word	0x08000a15
 80009ec:	08000a1b 	.word	0x08000a1b
	{
	case d_off:
		displayOff();
 80009f0:	f000 f81c 	bl	8000a2c <_Z10displayOffv>
		break;
 80009f4:	e015      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_home:
		displayMain();
 80009f6:	f000 f827 	bl	8000a48 <_Z11displayMainv>
		break;
 80009fa:	e012      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_menu:
		displayMenu();
 80009fc:	f000 f8d8 	bl	8000bb0 <_Z11displayMenuv>
		break;
 8000a00:	e00f      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_lock:
		displayLocked();
 8000a02:	f000 f859 	bl	8000ab8 <_Z13displayLockedv>
		break;
 8000a06:	e00c      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_power:
		displayPower();
 8000a08:	f000 f8b2 	bl	8000b70 <_Z12displayPowerv>
		break;
 8000a0c:	e009      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_rateWarn:
		displayConfirmationRateChange();
 8000a0e:	f000 fa67 	bl	8000ee0 <_Z29displayConfirmationRateChangev>
		break;
 8000a12:	e006      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_offsetWarn:
		displayConfirmationOffsetChange();
 8000a14:	f000 fae4 	bl	8000fe0 <_Z31displayConfirmationOffsetChangev>
		break;
 8000a18:	e003      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_rejamWarn:
		displayConfirmationRejam();
 8000a1a:	f000 fb39 	bl	8001090 <_Z24displayConfirmationRejamv>
		break;
 8000a1e:	e000      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	default:
		break;
 8000a20:	bf00      	nop
	}
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <_Z10displayOffv>:

void displayOff()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f002 fd41 	bl	80034b8 <ssd1306_Fill>
	ssd1306_UpdateScreen(dispI2C);
 8000a36:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <_Z10displayOffv+0x18>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fd60 	bl	8003500 <ssd1306_UpdateScreen>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000040 	.word	0x20000040

08000a48 <_Z11displayMainv>:

void displayMain()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	//tcbreakout()
	timecodeDisplay();
 8000a4c:	f000 fc1e 	bl	800128c <_Z15timecodeDisplayv>
	ssd1306_SetCursor(4, 24);
 8000a50:	2118      	movs	r1, #24
 8000a52:	2004      	movs	r0, #4
 8000a54:	f002 fe8c 	bl	8003770 <ssd1306_SetCursor>
	//TODO TC DISPLAY STRING
	ssd1306_WriteString(tcDisplay, Font_11x18, White);
 8000a58:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <_Z11displayMainv+0x58>)
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	ca06      	ldmia	r2, {r1, r2}
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <_Z11displayMainv+0x5c>)
 8000a60:	f002 fe60 	bl	8003724 <ssd1306_WriteString>

	ssd1306_SetCursor(4, 6);
 8000a64:	2106      	movs	r1, #6
 8000a66:	2004      	movs	r0, #4
 8000a68:	f002 fe82 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("23.98", Font_7x10, White);
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <_Z11displayMainv+0x60>)
 8000a6e:	2301      	movs	r3, #1
 8000a70:	ca06      	ldmia	r2, {r1, r2}
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <_Z11displayMainv+0x64>)
 8000a74:	f002 fe56 	bl	8003724 <ssd1306_WriteString>

	ssd1306_SetCursor(92, 52);
 8000a78:	2134      	movs	r1, #52	; 0x34
 8000a7a:	205c      	movs	r0, #92	; 0x5c
 8000a7c:	f002 fe78 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <_Z11displayMainv+0x60>)
 8000a82:	2301      	movs	r3, #1
 8000a84:	ca06      	ldmia	r2, {r1, r2}
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <_Z11displayMainv+0x68>)
 8000a88:	f002 fe4c 	bl	8003724 <ssd1306_WriteString>

	displayBattery();
 8000a8c:	f000 fb80 	bl	8001190 <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_Z11displayMainv+0x6c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 fd33 	bl	8003500 <ssd1306_UpdateScreen>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000078 	.word	0x20000078
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	08008024 	.word	0x08008024
 8000ab0:	0800802c 	.word	0x0800802c
 8000ab4:	20000040 	.word	0x20000040

08000ab8 <_Z13displayLockedv>:

void displayLocked()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	timecodeDisplay();
 8000abc:	f000 fbe6 	bl	800128c <_Z15timecodeDisplayv>
	ssd1306_Fill(Black);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f002 fcf9 	bl	80034b8 <ssd1306_Fill>
	ssd1306_SetCursor(44, 20);
 8000ac6:	2114      	movs	r1, #20
 8000ac8:	202c      	movs	r0, #44	; 0x2c
 8000aca:	f002 fe51 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Locked", Font_7x10, White);
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <_Z13displayLockedv+0x98>)
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	ca06      	ldmia	r2, {r1, r2}
 8000ad4:	481f      	ldr	r0, [pc, #124]	; (8000b54 <_Z13displayLockedv+0x9c>)
 8000ad6:	f002 fe25 	bl	8003724 <ssd1306_WriteString>
	if (buttonsHeld)	
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <_Z13displayLockedv+0xa0>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <_Z13displayLockedv+0x34>
	{
		ssd1306_SetCursor(60, 32);
 8000ae2:	2120      	movs	r1, #32
 8000ae4:	203c      	movs	r0, #60	; 0x3c
 8000ae6:	f002 fe43 	bl	8003770 <ssd1306_SetCursor>
 8000aea:	e013      	b.n	8000b14 <_Z13displayLockedv+0x5c>
		//lockDisplay = foo[lockCountdown];
		//ssd1306_WriteChar(lockDisplay, Font_7x10, White);	//TODO Lock Countdown
	}
	else
	{
		ssd1306_SetCursor(24, 30);
 8000aec:	211e      	movs	r1, #30
 8000aee:	2018      	movs	r0, #24
 8000af0:	f002 fe3e 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString("Hold < and >", Font_7x10, White);
 8000af4:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <_Z13displayLockedv+0x98>)
 8000af6:	2301      	movs	r3, #1
 8000af8:	ca06      	ldmia	r2, {r1, r2}
 8000afa:	4818      	ldr	r0, [pc, #96]	; (8000b5c <_Z13displayLockedv+0xa4>)
 8000afc:	f002 fe12 	bl	8003724 <ssd1306_WriteString>
		ssd1306_SetCursor(34, 40);
 8000b00:	2128      	movs	r1, #40	; 0x28
 8000b02:	2022      	movs	r0, #34	; 0x22
 8000b04:	f002 fe34 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString("to unlock", Font_7x10, White);
 8000b08:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <_Z13displayLockedv+0x98>)
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	ca06      	ldmia	r2, {r1, r2}
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <_Z13displayLockedv+0xa8>)
 8000b10:	f002 fe08 	bl	8003724 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(2, 6);
 8000b14:	2106      	movs	r1, #6
 8000b16:	2002      	movs	r0, #2
 8000b18:	f002 fe2a 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString(tcDisplay, Font_7x10, White);
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <_Z13displayLockedv+0x98>)
 8000b1e:	2301      	movs	r3, #1
 8000b20:	ca06      	ldmia	r2, {r1, r2}
 8000b22:	4810      	ldr	r0, [pc, #64]	; (8000b64 <_Z13displayLockedv+0xac>)
 8000b24:	f002 fdfe 	bl	8003724 <ssd1306_WriteString>

	ssd1306_SetCursor(90, 6);
 8000b28:	2106      	movs	r1, #6
 8000b2a:	205a      	movs	r0, #90	; 0x5a
 8000b2c:	f002 fe20 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("23.98", Font_7x10, White);
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <_Z13displayLockedv+0x98>)
 8000b32:	2301      	movs	r3, #1
 8000b34:	ca06      	ldmia	r2, {r1, r2}
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <_Z13displayLockedv+0xb0>)
 8000b38:	f002 fdf4 	bl	8003724 <ssd1306_WriteString>
	displayBattery();	
 8000b3c:	f000 fb28 	bl	8001190 <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <_Z13displayLockedv+0xb4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fcdb 	bl	8003500 <ssd1306_UpdateScreen>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000
 8000b54:	08008034 	.word	0x08008034
 8000b58:	200000a2 	.word	0x200000a2
 8000b5c:	0800803c 	.word	0x0800803c
 8000b60:	0800804c 	.word	0x0800804c
 8000b64:	20000078 	.word	0x20000078
 8000b68:	08008024 	.word	0x08008024
 8000b6c:	20000040 	.word	0x20000040

08000b70 <_Z12displayPowerv>:

void displayPower()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f002 fc9f 	bl	80034b8 <ssd1306_Fill>
	ssd1306_SetCursor(14, 10);
 8000b7a:	210a      	movs	r1, #10
 8000b7c:	200e      	movs	r0, #14
 8000b7e:	f002 fdf7 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Power Off", Font_11x18, White);
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <_Z12displayPowerv+0x34>)
 8000b84:	2301      	movs	r3, #1
 8000b86:	ca06      	ldmia	r2, {r1, r2}
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <_Z12displayPowerv+0x38>)
 8000b8a:	f002 fdcb 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(60, 36);
 8000b8e:	2124      	movs	r1, #36	; 0x24
 8000b90:	203c      	movs	r0, #60	; 0x3c
 8000b92:	f002 fded 	bl	8003770 <ssd1306_SetCursor>
	//powerDisplay = foo[powerCountdown];
	//ssd1306_WriteChar(powerDisplay, Font_11x18, White); //TODO Power countdown
	ssd1306_UpdateScreen(dispI2C);
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <_Z12displayPowerv+0x3c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 fcb0 	bl	8003500 <ssd1306_UpdateScreen>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	08008058 	.word	0x08008058
 8000bac:	20000040 	.word	0x20000040

08000bb0 <_Z11displayMenuv>:

void displayMenu()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f002 fc7e 	bl	80034b8 <ssd1306_Fill>
	//Frame rate
	//Auto power off
	//Exit
	ssd1306_SetCursor(50, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2032      	movs	r0, #50	; 0x32
 8000bc0:	f002 fdd6 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8000bc4:	4aac      	ldr	r2, [pc, #688]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	ca06      	ldmia	r2, {r1, r2}
 8000bca:	48ac      	ldr	r0, [pc, #688]	; (8000e7c <_Z11displayMenuv+0x2cc>)
 8000bcc:	f002 fdaa 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 12);
 8000bd0:	210c      	movs	r1, #12
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f002 fdcc 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Rate: ", Font_7x10, White);
 8000bd8:	4aa7      	ldr	r2, [pc, #668]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000bda:	2301      	movs	r3, #1
 8000bdc:	ca06      	ldmia	r2, {r1, r2}
 8000bde:	48a8      	ldr	r0, [pc, #672]	; (8000e80 <_Z11displayMenuv+0x2d0>)
 8000be0:	f002 fda0 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 22);
 8000be4:	2116      	movs	r1, #22
 8000be6:	200a      	movs	r0, #10
 8000be8:	f002 fdc2 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Offset: ", Font_7x10, White);
 8000bec:	4aa2      	ldr	r2, [pc, #648]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000bee:	2301      	movs	r3, #1
 8000bf0:	ca06      	ldmia	r2, {r1, r2}
 8000bf2:	48a4      	ldr	r0, [pc, #656]	; (8000e84 <_Z11displayMenuv+0x2d4>)
 8000bf4:	f002 fd96 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 32);
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f002 fdb8 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Re-jam", Font_7x10, White);
 8000c00:	4a9d      	ldr	r2, [pc, #628]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000c02:	2301      	movs	r3, #1
 8000c04:	ca06      	ldmia	r2, {r1, r2}
 8000c06:	48a0      	ldr	r0, [pc, #640]	; (8000e88 <_Z11displayMenuv+0x2d8>)
 8000c08:	f002 fd8c 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 42);
 8000c0c:	212a      	movs	r1, #42	; 0x2a
 8000c0e:	200a      	movs	r0, #10
 8000c10:	f002 fdae 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Auto-Off: ", Font_7x10, White);
 8000c14:	4a98      	ldr	r2, [pc, #608]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000c16:	2301      	movs	r3, #1
 8000c18:	ca06      	ldmia	r2, {r1, r2}
 8000c1a:	489c      	ldr	r0, [pc, #624]	; (8000e8c <_Z11displayMenuv+0x2dc>)
 8000c1c:	f002 fd82 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(50, 52);
 8000c20:	2134      	movs	r1, #52	; 0x34
 8000c22:	2032      	movs	r0, #50	; 0x32
 8000c24:	f002 fda4 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Exit", Font_7x10, White);
 8000c28:	4a93      	ldr	r2, [pc, #588]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	ca06      	ldmia	r2, {r1, r2}
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <_Z11displayMenuv+0x2e0>)
 8000c30:	f002 fd78 	bl	8003724 <ssd1306_WriteString>

	ssd1306_SetCursor(50, 12);
 8000c34:	210c      	movs	r1, #12
 8000c36:	2032      	movs	r0, #50	; 0x32
 8000c38:	f002 fd9a 	bl	8003770 <ssd1306_SetCursor>
	uint8_t dispRate;
	if (menuItemSelect){
 8000c3c:	4b95      	ldr	r3, [pc, #596]	; (8000e94 <_Z11displayMenuv+0x2e4>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <_Z11displayMenuv+0x9c>
		dispRate = rateAdjust;
 8000c44:	4b94      	ldr	r3, [pc, #592]	; (8000e98 <_Z11displayMenuv+0x2e8>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	e002      	b.n	8000c52 <_Z11displayMenuv+0xa2>
	} else {
		dispRate = frameRate;
 8000c4c:	4b93      	ldr	r3, [pc, #588]	; (8000e9c <_Z11displayMenuv+0x2ec>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	71fb      	strb	r3, [r7, #7]
	}
	switch (dispRate)
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b05      	cmp	r3, #5
 8000c56:	d839      	bhi.n	8000ccc <_Z11displayMenuv+0x11c>
 8000c58:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <_Z11displayMenuv+0xb0>)
 8000c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000c79 	.word	0x08000c79
 8000c64:	08000c87 	.word	0x08000c87
 8000c68:	08000c95 	.word	0x08000c95
 8000c6c:	08000ca3 	.word	0x08000ca3
 8000c70:	08000cb1 	.word	0x08000cb1
 8000c74:	08000cbf 	.word	0x08000cbf
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 8000c78:	4a7f      	ldr	r2, [pc, #508]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	ca06      	ldmia	r2, {r1, r2}
 8000c7e:	4888      	ldr	r0, [pc, #544]	; (8000ea0 <_Z11displayMenuv+0x2f0>)
 8000c80:	f002 fd50 	bl	8003724 <ssd1306_WriteString>
		break;
 8000c84:	e022      	b.n	8000ccc <_Z11displayMenuv+0x11c>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 8000c86:	4a7c      	ldr	r2, [pc, #496]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000c88:	2301      	movs	r3, #1
 8000c8a:	ca06      	ldmia	r2, {r1, r2}
 8000c8c:	4885      	ldr	r0, [pc, #532]	; (8000ea4 <_Z11displayMenuv+0x2f4>)
 8000c8e:	f002 fd49 	bl	8003724 <ssd1306_WriteString>
		break;
 8000c92:	e01b      	b.n	8000ccc <_Z11displayMenuv+0x11c>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 8000c94:	4a78      	ldr	r2, [pc, #480]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000c96:	2301      	movs	r3, #1
 8000c98:	ca06      	ldmia	r2, {r1, r2}
 8000c9a:	4883      	ldr	r0, [pc, #524]	; (8000ea8 <_Z11displayMenuv+0x2f8>)
 8000c9c:	f002 fd42 	bl	8003724 <ssd1306_WriteString>
		break;
 8000ca0:	e014      	b.n	8000ccc <_Z11displayMenuv+0x11c>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 8000ca2:	4a75      	ldr	r2, [pc, #468]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	ca06      	ldmia	r2, {r1, r2}
 8000ca8:	4880      	ldr	r0, [pc, #512]	; (8000eac <_Z11displayMenuv+0x2fc>)
 8000caa:	f002 fd3b 	bl	8003724 <ssd1306_WriteString>
		break;
 8000cae:	e00d      	b.n	8000ccc <_Z11displayMenuv+0x11c>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 8000cb0:	4a71      	ldr	r2, [pc, #452]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	ca06      	ldmia	r2, {r1, r2}
 8000cb6:	487e      	ldr	r0, [pc, #504]	; (8000eb0 <_Z11displayMenuv+0x300>)
 8000cb8:	f002 fd34 	bl	8003724 <ssd1306_WriteString>
		break;
 8000cbc:	e006      	b.n	8000ccc <_Z11displayMenuv+0x11c>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 8000cbe:	4a6e      	ldr	r2, [pc, #440]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	ca06      	ldmia	r2, {r1, r2}
 8000cc4:	487b      	ldr	r0, [pc, #492]	; (8000eb4 <_Z11displayMenuv+0x304>)
 8000cc6:	f002 fd2d 	bl	8003724 <ssd1306_WriteString>
		break;
 8000cca:	bf00      	nop
	}
	ssd1306_SetCursor(75, 22);
 8000ccc:	2116      	movs	r1, #22
 8000cce:	204b      	movs	r0, #75	; 0x4b
 8000cd0:	f002 fd4e 	bl	8003770 <ssd1306_SetCursor>
	//Insert offset

	ssd1306_SetCursor(75, 42);
 8000cd4:	212a      	movs	r1, #42	; 0x2a
 8000cd6:	204b      	movs	r0, #75	; 0x4b
 8000cd8:	f002 fd4a 	bl	8003770 <ssd1306_SetCursor>
	switch (autoOff)
 8000cdc:	4b76      	ldr	r3, [pc, #472]	; (8000eb8 <_Z11displayMenuv+0x308>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d830      	bhi.n	8000d46 <_Z11displayMenuv+0x196>
 8000ce4:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <_Z11displayMenuv+0x13c>)
 8000ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cea:	bf00      	nop
 8000cec:	08000d01 	.word	0x08000d01
 8000cf0:	08000d0f 	.word	0x08000d0f
 8000cf4:	08000d1d 	.word	0x08000d1d
 8000cf8:	08000d2b 	.word	0x08000d2b
 8000cfc:	08000d39 	.word	0x08000d39
	{
	case 0:
		ssd1306_WriteString("1 hr", Font_7x10, White);
 8000d00:	4a5d      	ldr	r2, [pc, #372]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000d02:	2301      	movs	r3, #1
 8000d04:	ca06      	ldmia	r2, {r1, r2}
 8000d06:	486d      	ldr	r0, [pc, #436]	; (8000ebc <_Z11displayMenuv+0x30c>)
 8000d08:	f002 fd0c 	bl	8003724 <ssd1306_WriteString>
		break;
 8000d0c:	e01b      	b.n	8000d46 <_Z11displayMenuv+0x196>
	case 1:
		ssd1306_WriteString("2 hr", Font_7x10, White);
 8000d0e:	4a5a      	ldr	r2, [pc, #360]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000d10:	2301      	movs	r3, #1
 8000d12:	ca06      	ldmia	r2, {r1, r2}
 8000d14:	486a      	ldr	r0, [pc, #424]	; (8000ec0 <_Z11displayMenuv+0x310>)
 8000d16:	f002 fd05 	bl	8003724 <ssd1306_WriteString>
		break;
 8000d1a:	e014      	b.n	8000d46 <_Z11displayMenuv+0x196>
	case 2:
		ssd1306_WriteString("4 hr", Font_7x10, White);
 8000d1c:	4a56      	ldr	r2, [pc, #344]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000d1e:	2301      	movs	r3, #1
 8000d20:	ca06      	ldmia	r2, {r1, r2}
 8000d22:	4868      	ldr	r0, [pc, #416]	; (8000ec4 <_Z11displayMenuv+0x314>)
 8000d24:	f002 fcfe 	bl	8003724 <ssd1306_WriteString>
		break;
 8000d28:	e00d      	b.n	8000d46 <_Z11displayMenuv+0x196>
	case 3:
		ssd1306_WriteString("8 hr", Font_7x10, White);
 8000d2a:	4a53      	ldr	r2, [pc, #332]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	ca06      	ldmia	r2, {r1, r2}
 8000d30:	4865      	ldr	r0, [pc, #404]	; (8000ec8 <_Z11displayMenuv+0x318>)
 8000d32:	f002 fcf7 	bl	8003724 <ssd1306_WriteString>
		break;
 8000d36:	e006      	b.n	8000d46 <_Z11displayMenuv+0x196>
	case 4:
		ssd1306_WriteString("12 hr", Font_7x10, White);
 8000d38:	4a4f      	ldr	r2, [pc, #316]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	ca06      	ldmia	r2, {r1, r2}
 8000d3e:	4863      	ldr	r0, [pc, #396]	; (8000ecc <_Z11displayMenuv+0x31c>)
 8000d40:	f002 fcf0 	bl	8003724 <ssd1306_WriteString>
		break;
 8000d44:	bf00      	nop
	}

	switch (menuItem)
 8000d46:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <_Z11displayMenuv+0x320>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	f200 808b 	bhi.w	8000e66 <_Z11displayMenuv+0x2b6>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <_Z11displayMenuv+0x1a8>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d6d 	.word	0x08000d6d
 8000d5c:	08000da1 	.word	0x08000da1
 8000d60:	08000dd5 	.word	0x08000dd5
 8000d64:	08000e09 	.word	0x08000e09
 8000d68:	08000e3d 	.word	0x08000e3d
	{
	case 0:
		if (menuItemSelect)
 8000d6c:	4b49      	ldr	r3, [pc, #292]	; (8000e94 <_Z11displayMenuv+0x2e4>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d00a      	beq.n	8000d8a <_Z11displayMenuv+0x1da>
		{
			ssd1306_SetCursor(120, 12);
 8000d74:	210c      	movs	r1, #12
 8000d76:	2078      	movs	r0, #120	; 0x78
 8000d78:	f002 fcfa 	bl	8003770 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8000d7c:	4a3e      	ldr	r2, [pc, #248]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000d7e:	2301      	movs	r3, #1
 8000d80:	ca06      	ldmia	r2, {r1, r2}
 8000d82:	4854      	ldr	r0, [pc, #336]	; (8000ed4 <_Z11displayMenuv+0x324>)
 8000d84:	f002 fcce 	bl	8003724 <ssd1306_WriteString>
		else
		{
			ssd1306_SetCursor(2, 12);
			ssd1306_WriteString(">", Font_7x10, White);
		}
		break;
 8000d88:	e06d      	b.n	8000e66 <_Z11displayMenuv+0x2b6>
			ssd1306_SetCursor(2, 12);
 8000d8a:	210c      	movs	r1, #12
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f002 fcef 	bl	8003770 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8000d92:	4a39      	ldr	r2, [pc, #228]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000d94:	2301      	movs	r3, #1
 8000d96:	ca06      	ldmia	r2, {r1, r2}
 8000d98:	484f      	ldr	r0, [pc, #316]	; (8000ed8 <_Z11displayMenuv+0x328>)
 8000d9a:	f002 fcc3 	bl	8003724 <ssd1306_WriteString>
		break;
 8000d9e:	e062      	b.n	8000e66 <_Z11displayMenuv+0x2b6>
	case 1:
		if (menuItemSelect)
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <_Z11displayMenuv+0x2e4>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00a      	beq.n	8000dbe <_Z11displayMenuv+0x20e>
		{
			ssd1306_SetCursor(120, 22);
 8000da8:	2116      	movs	r1, #22
 8000daa:	2078      	movs	r0, #120	; 0x78
 8000dac:	f002 fce0 	bl	8003770 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8000db0:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000db2:	2301      	movs	r3, #1
 8000db4:	ca06      	ldmia	r2, {r1, r2}
 8000db6:	4847      	ldr	r0, [pc, #284]	; (8000ed4 <_Z11displayMenuv+0x324>)
 8000db8:	f002 fcb4 	bl	8003724 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 22);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8000dbc:	e053      	b.n	8000e66 <_Z11displayMenuv+0x2b6>
			ssd1306_SetCursor(2, 22);
 8000dbe:	2116      	movs	r1, #22
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f002 fcd5 	bl	8003770 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8000dc6:	4a2c      	ldr	r2, [pc, #176]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000dc8:	2301      	movs	r3, #1
 8000dca:	ca06      	ldmia	r2, {r1, r2}
 8000dcc:	4842      	ldr	r0, [pc, #264]	; (8000ed8 <_Z11displayMenuv+0x328>)
 8000dce:	f002 fca9 	bl	8003724 <ssd1306_WriteString>
		break;
 8000dd2:	e048      	b.n	8000e66 <_Z11displayMenuv+0x2b6>
	case 2:
		if (menuItemSelect)
 8000dd4:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <_Z11displayMenuv+0x2e4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00a      	beq.n	8000df2 <_Z11displayMenuv+0x242>
		{
			ssd1306_SetCursor(120, 32);
 8000ddc:	2120      	movs	r1, #32
 8000dde:	2078      	movs	r0, #120	; 0x78
 8000de0:	f002 fcc6 	bl	8003770 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8000de4:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000de6:	2301      	movs	r3, #1
 8000de8:	ca06      	ldmia	r2, {r1, r2}
 8000dea:	483a      	ldr	r0, [pc, #232]	; (8000ed4 <_Z11displayMenuv+0x324>)
 8000dec:	f002 fc9a 	bl	8003724 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 32);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8000df0:	e039      	b.n	8000e66 <_Z11displayMenuv+0x2b6>
			ssd1306_SetCursor(2, 32);
 8000df2:	2120      	movs	r1, #32
 8000df4:	2002      	movs	r0, #2
 8000df6:	f002 fcbb 	bl	8003770 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	ca06      	ldmia	r2, {r1, r2}
 8000e00:	4835      	ldr	r0, [pc, #212]	; (8000ed8 <_Z11displayMenuv+0x328>)
 8000e02:	f002 fc8f 	bl	8003724 <ssd1306_WriteString>
		break;
 8000e06:	e02e      	b.n	8000e66 <_Z11displayMenuv+0x2b6>
	case 3:
		if (menuItemSelect)
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <_Z11displayMenuv+0x2e4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00a      	beq.n	8000e26 <_Z11displayMenuv+0x276>
		{
			ssd1306_SetCursor(120, 42);
 8000e10:	212a      	movs	r1, #42	; 0x2a
 8000e12:	2078      	movs	r0, #120	; 0x78
 8000e14:	f002 fcac 	bl	8003770 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	ca06      	ldmia	r2, {r1, r2}
 8000e1e:	482d      	ldr	r0, [pc, #180]	; (8000ed4 <_Z11displayMenuv+0x324>)
 8000e20:	f002 fc80 	bl	8003724 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 42);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8000e24:	e01f      	b.n	8000e66 <_Z11displayMenuv+0x2b6>
			ssd1306_SetCursor(2, 42);
 8000e26:	212a      	movs	r1, #42	; 0x2a
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f002 fca1 	bl	8003770 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000e30:	2301      	movs	r3, #1
 8000e32:	ca06      	ldmia	r2, {r1, r2}
 8000e34:	4828      	ldr	r0, [pc, #160]	; (8000ed8 <_Z11displayMenuv+0x328>)
 8000e36:	f002 fc75 	bl	8003724 <ssd1306_WriteString>
		break;
 8000e3a:	e014      	b.n	8000e66 <_Z11displayMenuv+0x2b6>
	case 4:
		ssd1306_SetCursor(41, 52);
 8000e3c:	2134      	movs	r1, #52	; 0x34
 8000e3e:	2029      	movs	r0, #41	; 0x29
 8000e40:	f002 fc96 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000e46:	2301      	movs	r3, #1
 8000e48:	ca06      	ldmia	r2, {r1, r2}
 8000e4a:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <_Z11displayMenuv+0x328>)
 8000e4c:	f002 fc6a 	bl	8003724 <ssd1306_WriteString>
		ssd1306_SetCursor(79, 52);
 8000e50:	2134      	movs	r1, #52	; 0x34
 8000e52:	204f      	movs	r0, #79	; 0x4f
 8000e54:	f002 fc8c 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <_Z11displayMenuv+0x2c8>)
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	ca06      	ldmia	r2, {r1, r2}
 8000e5e:	481d      	ldr	r0, [pc, #116]	; (8000ed4 <_Z11displayMenuv+0x324>)
 8000e60:	f002 fc60 	bl	8003724 <ssd1306_WriteString>
		break;
 8000e64:	bf00      	nop
	}

	ssd1306_UpdateScreen(dispI2C);
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <_Z11displayMenuv+0x32c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fb48 	bl	8003500 <ssd1306_UpdateScreen>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	0800802c 	.word	0x0800802c
 8000e80:	08008064 	.word	0x08008064
 8000e84:	0800806c 	.word	0x0800806c
 8000e88:	08008078 	.word	0x08008078
 8000e8c:	08008080 	.word	0x08008080
 8000e90:	0800808c 	.word	0x0800808c
 8000e94:	200000c6 	.word	0x200000c6
 8000e98:	200000c4 	.word	0x200000c4
 8000e9c:	2000008d 	.word	0x2000008d
 8000ea0:	08008024 	.word	0x08008024
 8000ea4:	08008094 	.word	0x08008094
 8000ea8:	08008098 	.word	0x08008098
 8000eac:	0800809c 	.word	0x0800809c
 8000eb0:	080080a4 	.word	0x080080a4
 8000eb4:	080080b0 	.word	0x080080b0
 8000eb8:	20000095 	.word	0x20000095
 8000ebc:	080080b4 	.word	0x080080b4
 8000ec0:	080080bc 	.word	0x080080bc
 8000ec4:	080080c4 	.word	0x080080c4
 8000ec8:	080080cc 	.word	0x080080cc
 8000ecc:	080080d4 	.word	0x080080d4
 8000ed0:	200000c7 	.word	0x200000c7
 8000ed4:	080080dc 	.word	0x080080dc
 8000ed8:	080080e0 	.word	0x080080e0
 8000edc:	20000040 	.word	0x20000040

08000ee0 <_Z29displayConfirmationRateChangev>:

void displayConfirmationRateChange()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f002 fae7 	bl	80034b8 <ssd1306_Fill>
	ssd1306_SetCursor(8, 4);
 8000eea:	2104      	movs	r1, #4
 8000eec:	2008      	movs	r0, #8
 8000eee:	f002 fc3f 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Changing the rate", Font_7x10, White);
 8000ef2:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	ca06      	ldmia	r2, {r1, r2}
 8000ef8:	4830      	ldr	r0, [pc, #192]	; (8000fbc <_Z29displayConfirmationRateChangev+0xdc>)
 8000efa:	f002 fc13 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 18);
 8000efe:	2112      	movs	r1, #18
 8000f00:	2010      	movs	r0, #16
 8000f02:	f002 fc35 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("will clear jam.", Font_7x10, White);
 8000f06:	4a2c      	ldr	r2, [pc, #176]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000f08:	2301      	movs	r3, #1
 8000f0a:	ca06      	ldmia	r2, {r1, r2}
 8000f0c:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <_Z29displayConfirmationRateChangev+0xe0>)
 8000f0e:	f002 fc09 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 32);
 8000f12:	2120      	movs	r1, #32
 8000f14:	2020      	movs	r0, #32
 8000f16:	f002 fc2b 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	ca06      	ldmia	r2, {r1, r2}
 8000f20:	4828      	ldr	r0, [pc, #160]	; (8000fc4 <_Z29displayConfirmationRateChangev+0xe4>)
 8000f22:	f002 fbff 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 8000f26:	2132      	movs	r1, #50	; 0x32
 8000f28:	201e      	movs	r0, #30
 8000f2a:	f002 fc21 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000f30:	2301      	movs	r3, #1
 8000f32:	ca06      	ldmia	r2, {r1, r2}
 8000f34:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <_Z29displayConfirmationRateChangev+0xe8>)
 8000f36:	f002 fbf5 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 8000f3a:	2132      	movs	r1, #50	; 0x32
 8000f3c:	2050      	movs	r0, #80	; 0x50
 8000f3e:	f002 fc17 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000f44:	2301      	movs	r3, #1
 8000f46:	ca06      	ldmia	r2, {r1, r2}
 8000f48:	4820      	ldr	r0, [pc, #128]	; (8000fcc <_Z29displayConfirmationRateChangev+0xec>)
 8000f4a:	f002 fbeb 	bl	8003724 <ssd1306_WriteString>
	if (highlightYes)
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <_Z29displayConfirmationRateChangev+0xf0>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d014      	beq.n	8000f80 <_Z29displayConfirmationRateChangev+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 8000f56:	2132      	movs	r1, #50	; 0x32
 8000f58:	2048      	movs	r0, #72	; 0x48
 8000f5a:	f002 fc09 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000f60:	2301      	movs	r3, #1
 8000f62:	ca06      	ldmia	r2, {r1, r2}
 8000f64:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <_Z29displayConfirmationRateChangev+0xf4>)
 8000f66:	f002 fbdd 	bl	8003724 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8000f6a:	2132      	movs	r1, #50	; 0x32
 8000f6c:	2066      	movs	r0, #102	; 0x66
 8000f6e:	f002 fbff 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000f74:	2301      	movs	r3, #1
 8000f76:	ca06      	ldmia	r2, {r1, r2}
 8000f78:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <_Z29displayConfirmationRateChangev+0xf8>)
 8000f7a:	f002 fbd3 	bl	8003724 <ssd1306_WriteString>
 8000f7e:	e013      	b.n	8000fa8 <_Z29displayConfirmationRateChangev+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 8000f80:	2132      	movs	r1, #50	; 0x32
 8000f82:	2016      	movs	r0, #22
 8000f84:	f002 fbf4 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8000f88:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	ca06      	ldmia	r2, {r1, r2}
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <_Z29displayConfirmationRateChangev+0xf4>)
 8000f90:	f002 fbc8 	bl	8003724 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 8000f94:	2132      	movs	r1, #50	; 0x32
 8000f96:	202d      	movs	r0, #45	; 0x2d
 8000f98:	f002 fbea 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <_Z29displayConfirmationRateChangev+0xd8>)
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	ca06      	ldmia	r2, {r1, r2}
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <_Z29displayConfirmationRateChangev+0xf8>)
 8000fa4:	f002 fbbe 	bl	8003724 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <_Z29displayConfirmationRateChangev+0xfc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 faa7 	bl	8003500 <ssd1306_UpdateScreen>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	080080e4 	.word	0x080080e4
 8000fc0:	080080f8 	.word	0x080080f8
 8000fc4:	08008108 	.word	0x08008108
 8000fc8:	08008114 	.word	0x08008114
 8000fcc:	08008118 	.word	0x08008118
 8000fd0:	200000c8 	.word	0x200000c8
 8000fd4:	080080e0 	.word	0x080080e0
 8000fd8:	080080dc 	.word	0x080080dc
 8000fdc:	20000040 	.word	0x20000040

08000fe0 <_Z31displayConfirmationOffsetChangev>:

void displayConfirmationOffsetChange()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f002 fa67 	bl	80034b8 <ssd1306_Fill>
	ssd1306_SetCursor(10, 10);
 8000fea:	210a      	movs	r1, #10
 8000fec:	200a      	movs	r0, #10
 8000fee:	f002 fbbf 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("The offset will", Font_7x10, White);
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <_Z31displayConfirmationOffsetChangev+0x90>)
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	ca06      	ldmia	r2, {r1, r2}
 8000ff8:	481e      	ldr	r0, [pc, #120]	; (8001074 <_Z31displayConfirmationOffsetChangev+0x94>)
 8000ffa:	f002 fb93 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(14, 22);
 8000ffe:	2116      	movs	r1, #22
 8001000:	200e      	movs	r0, #14
 8001002:	f002 fbb5 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("take effect on", Font_7x10, White);
 8001006:	4a1a      	ldr	r2, [pc, #104]	; (8001070 <_Z31displayConfirmationOffsetChangev+0x90>)
 8001008:	2301      	movs	r3, #1
 800100a:	ca06      	ldmia	r2, {r1, r2}
 800100c:	481a      	ldr	r0, [pc, #104]	; (8001078 <_Z31displayConfirmationOffsetChangev+0x98>)
 800100e:	f002 fb89 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(36, 34);
 8001012:	2122      	movs	r1, #34	; 0x22
 8001014:	2024      	movs	r0, #36	; 0x24
 8001016:	f002 fbab 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("next jam.", Font_7x10, White);
 800101a:	4a15      	ldr	r2, [pc, #84]	; (8001070 <_Z31displayConfirmationOffsetChangev+0x90>)
 800101c:	2301      	movs	r3, #1
 800101e:	ca06      	ldmia	r2, {r1, r2}
 8001020:	4816      	ldr	r0, [pc, #88]	; (800107c <_Z31displayConfirmationOffsetChangev+0x9c>)
 8001022:	f002 fb7f 	bl	8003724 <ssd1306_WriteString>
	//ssd1306_SetCursor(14, 34);
	//ssd1306_WriteString("Continue?", Font_7x10, White);
	//ssd1306_SetCursor(30, 48);
	//ssd1306_WriteString("NO", Font_11x18, White);
	ssd1306_SetCursor(52, 50);
 8001026:	2132      	movs	r1, #50	; 0x32
 8001028:	2034      	movs	r0, #52	; 0x34
 800102a:	f002 fba1 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <_Z31displayConfirmationOffsetChangev+0x90>)
 8001030:	2301      	movs	r3, #1
 8001032:	ca06      	ldmia	r2, {r1, r2}
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <_Z31displayConfirmationOffsetChangev+0xa0>)
 8001036:	f002 fb75 	bl	8003724 <ssd1306_WriteString>
		ssd1306_SetCursor(44, 50);
 800103a:	2132      	movs	r1, #50	; 0x32
 800103c:	202c      	movs	r0, #44	; 0x2c
 800103e:	f002 fb97 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <_Z31displayConfirmationOffsetChangev+0x90>)
 8001044:	2301      	movs	r3, #1
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	480e      	ldr	r0, [pc, #56]	; (8001084 <_Z31displayConfirmationOffsetChangev+0xa4>)
 800104a:	f002 fb6b 	bl	8003724 <ssd1306_WriteString>
		ssd1306_SetCursor(66, 50);
 800104e:	2132      	movs	r1, #50	; 0x32
 8001050:	2042      	movs	r0, #66	; 0x42
 8001052:	f002 fb8d 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <_Z31displayConfirmationOffsetChangev+0x90>)
 8001058:	2301      	movs	r3, #1
 800105a:	ca06      	ldmia	r2, {r1, r2}
 800105c:	480a      	ldr	r0, [pc, #40]	; (8001088 <_Z31displayConfirmationOffsetChangev+0xa8>)
 800105e:	f002 fb61 	bl	8003724 <ssd1306_WriteString>
	
	ssd1306_UpdateScreen(dispI2C);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <_Z31displayConfirmationOffsetChangev+0xac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f002 fa4a 	bl	8003500 <ssd1306_UpdateScreen>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	0800811c 	.word	0x0800811c
 8001078:	0800812c 	.word	0x0800812c
 800107c:	0800813c 	.word	0x0800813c
 8001080:	08008148 	.word	0x08008148
 8001084:	080080e0 	.word	0x080080e0
 8001088:	080080dc 	.word	0x080080dc
 800108c:	20000040 	.word	0x20000040

08001090 <_Z24displayConfirmationRejamv>:

void displayConfirmationRejam()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001094:	2000      	movs	r0, #0
 8001096:	f002 fa0f 	bl	80034b8 <ssd1306_Fill>
	ssd1306_SetCursor(12, 6);
 800109a:	2106      	movs	r1, #6
 800109c:	200c      	movs	r0, #12
 800109e:	f002 fb67 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("This will clear", Font_7x10, White);
 80010a2:	4a31      	ldr	r2, [pc, #196]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 80010a4:	2301      	movs	r3, #1
 80010a6:	ca06      	ldmia	r2, {r1, r2}
 80010a8:	4830      	ldr	r0, [pc, #192]	; (800116c <_Z24displayConfirmationRejamv+0xdc>)
 80010aa:	f002 fb3b 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(24, 18);
 80010ae:	2112      	movs	r1, #18
 80010b0:	2018      	movs	r0, #24
 80010b2:	f002 fb5d 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("current jam.", Font_7x10, White);
 80010b6:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 80010b8:	2301      	movs	r3, #1
 80010ba:	ca06      	ldmia	r2, {r1, r2}
 80010bc:	482c      	ldr	r0, [pc, #176]	; (8001170 <_Z24displayConfirmationRejamv+0xe0>)
 80010be:	f002 fb31 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(34, 32);
 80010c2:	2120      	movs	r1, #32
 80010c4:	2022      	movs	r0, #34	; 0x22
 80010c6:	f002 fb53 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 80010cc:	2301      	movs	r3, #1
 80010ce:	ca06      	ldmia	r2, {r1, r2}
 80010d0:	4828      	ldr	r0, [pc, #160]	; (8001174 <_Z24displayConfirmationRejamv+0xe4>)
 80010d2:	f002 fb27 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 80010d6:	2132      	movs	r1, #50	; 0x32
 80010d8:	201e      	movs	r0, #30
 80010da:	f002 fb49 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 80010de:	4a22      	ldr	r2, [pc, #136]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 80010e0:	2301      	movs	r3, #1
 80010e2:	ca06      	ldmia	r2, {r1, r2}
 80010e4:	4824      	ldr	r0, [pc, #144]	; (8001178 <_Z24displayConfirmationRejamv+0xe8>)
 80010e6:	f002 fb1d 	bl	8003724 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 80010ea:	2132      	movs	r1, #50	; 0x32
 80010ec:	2050      	movs	r0, #80	; 0x50
 80010ee:	f002 fb3f 	bl	8003770 <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 80010f4:	2301      	movs	r3, #1
 80010f6:	ca06      	ldmia	r2, {r1, r2}
 80010f8:	4820      	ldr	r0, [pc, #128]	; (800117c <_Z24displayConfirmationRejamv+0xec>)
 80010fa:	f002 fb13 	bl	8003724 <ssd1306_WriteString>
	if (highlightYes)
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <_Z24displayConfirmationRejamv+0xf0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d014      	beq.n	8001130 <_Z24displayConfirmationRejamv+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 8001106:	2132      	movs	r1, #50	; 0x32
 8001108:	2048      	movs	r0, #72	; 0x48
 800110a:	f002 fb31 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 8001110:	2301      	movs	r3, #1
 8001112:	ca06      	ldmia	r2, {r1, r2}
 8001114:	481b      	ldr	r0, [pc, #108]	; (8001184 <_Z24displayConfirmationRejamv+0xf4>)
 8001116:	f002 fb05 	bl	8003724 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 800111a:	2132      	movs	r1, #50	; 0x32
 800111c:	2066      	movs	r0, #102	; 0x66
 800111e:	f002 fb27 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 8001124:	2301      	movs	r3, #1
 8001126:	ca06      	ldmia	r2, {r1, r2}
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <_Z24displayConfirmationRejamv+0xf8>)
 800112a:	f002 fafb 	bl	8003724 <ssd1306_WriteString>
 800112e:	e013      	b.n	8001158 <_Z24displayConfirmationRejamv+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 8001130:	2132      	movs	r1, #50	; 0x32
 8001132:	2016      	movs	r0, #22
 8001134:	f002 fb1c 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 800113a:	2301      	movs	r3, #1
 800113c:	ca06      	ldmia	r2, {r1, r2}
 800113e:	4811      	ldr	r0, [pc, #68]	; (8001184 <_Z24displayConfirmationRejamv+0xf4>)
 8001140:	f002 faf0 	bl	8003724 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 8001144:	2132      	movs	r1, #50	; 0x32
 8001146:	202d      	movs	r0, #45	; 0x2d
 8001148:	f002 fb12 	bl	8003770 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <_Z24displayConfirmationRejamv+0xd8>)
 800114e:	2301      	movs	r3, #1
 8001150:	ca06      	ldmia	r2, {r1, r2}
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <_Z24displayConfirmationRejamv+0xf8>)
 8001154:	f002 fae6 	bl	8003724 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <_Z24displayConfirmationRejamv+0xfc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f002 f9cf 	bl	8003500 <ssd1306_UpdateScreen>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000000 	.word	0x20000000
 800116c:	0800814c 	.word	0x0800814c
 8001170:	0800815c 	.word	0x0800815c
 8001174:	08008108 	.word	0x08008108
 8001178:	08008114 	.word	0x08008114
 800117c:	08008118 	.word	0x08008118
 8001180:	200000c8 	.word	0x200000c8
 8001184:	080080e0 	.word	0x080080e0
 8001188:	080080dc 	.word	0x080080dc
 800118c:	20000040 	.word	0x20000040

08001190 <_Z14displayBatteryv>:

void displayBattery()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	char battDisp[4];
	//ssd1306_DrawBattery(battStatus); //TODO BATTERY
	ssd1306_SetCursor(34, 52);
 8001196:	2134      	movs	r1, #52	; 0x34
 8001198:	2022      	movs	r0, #34	; 0x22
 800119a:	f002 fae9 	bl	8003770 <ssd1306_SetCursor>
	int battPrint = int(batteryRemaining * 100.0);
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <_Z14displayBatteryv+0xe0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f976 	bl	8000494 <__aeabi_f2d>
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <_Z14displayBatteryv+0xe4>)
 80011ae:	f7ff f9c9 	bl	8000544 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fbd5 	bl	8000968 <__aeabi_d2iz>
 80011be:	4603      	mov	r3, r0
 80011c0:	607b      	str	r3, [r7, #4]
	if (battPrint == 100)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b64      	cmp	r3, #100	; 0x64
 80011c6:	d108      	bne.n	80011da <_Z14displayBatteryv+0x4a>
	{
		battDisp[0] = '1';
 80011c8:	2331      	movs	r3, #49	; 0x31
 80011ca:	703b      	strb	r3, [r7, #0]
		battDisp[1] = '0';
 80011cc:	2330      	movs	r3, #48	; 0x30
 80011ce:	707b      	strb	r3, [r7, #1]
		battDisp[2] = '0';
 80011d0:	2330      	movs	r3, #48	; 0x30
 80011d2:	70bb      	strb	r3, [r7, #2]
		battDisp[3] = '%';
 80011d4:	2325      	movs	r3, #37	; 0x25
 80011d6:	70fb      	strb	r3, [r7, #3]
 80011d8:	e03d      	b.n	8001256 <_Z14displayBatteryv+0xc6>
	}
	else
	{
		battDisp[0] = ' ';
 80011da:	2320      	movs	r3, #32
 80011dc:	703b      	strb	r3, [r7, #0]
		battDisp[1] = foo[battPrint / 10];
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <_Z14displayBatteryv+0xe8>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4925      	ldr	r1, [pc, #148]	; (800127c <_Z14displayBatteryv+0xec>)
 80011e6:	fb81 0103 	smull	r0, r1, r1, r3
 80011ea:	1089      	asrs	r1, r1, #2
 80011ec:	17db      	asrs	r3, r3, #31
 80011ee:	1acb      	subs	r3, r1, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	707b      	strb	r3, [r7, #1]
		battDisp[2] = foo[battPrint % 10];
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <_Z14displayBatteryv+0xe8>)
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <_Z14displayBatteryv+0xec>)
 80011fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001202:	1099      	asrs	r1, r3, #2
 8001204:	17d3      	asrs	r3, r2, #31
 8001206:	1ac9      	subs	r1, r1, r3
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	1ad1      	subs	r1, r2, r3
 8001212:	460b      	mov	r3, r1
 8001214:	4403      	add	r3, r0
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	70bb      	strb	r3, [r7, #2]
		if (!stat1 && stat2)
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <_Z14displayBatteryv+0xf0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	f083 0301 	eor.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <_Z14displayBatteryv+0xa6>
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <_Z14displayBatteryv+0xf4>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <_Z14displayBatteryv+0xa6>
			battDisp[3] = '^';
 8001230:	235e      	movs	r3, #94	; 0x5e
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	e00f      	b.n	8001256 <_Z14displayBatteryv+0xc6>
		else if (stat1 && !stat2)
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <_Z14displayBatteryv+0xf0>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <_Z14displayBatteryv+0xc2>
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <_Z14displayBatteryv+0xf4>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	f083 0301 	eor.w	r3, r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <_Z14displayBatteryv+0xc2>
			battDisp[3] = '!';
 800124c:	2321      	movs	r3, #33	; 0x21
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	e001      	b.n	8001256 <_Z14displayBatteryv+0xc6>
		else
			battDisp[3] = '%';
 8001252:	2325      	movs	r3, #37	; 0x25
 8001254:	70fb      	strb	r3, [r7, #3]
	}
	battDisp[4] = ' ';
 8001256:	2320      	movs	r3, #32
 8001258:	713b      	strb	r3, [r7, #4]
	ssd1306_WriteString(battDisp, Font_7x10, White);
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <_Z14displayBatteryv+0xf8>)
 800125c:	4638      	mov	r0, r7
 800125e:	2301      	movs	r3, #1
 8001260:	ca06      	ldmia	r2, {r1, r2}
 8001262:	f002 fa5f 	bl	8003724 <ssd1306_WriteString>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000098 	.word	0x20000098
 8001274:	40590000 	.word	0x40590000
 8001278:	20000010 	.word	0x20000010
 800127c:	66666667 	.word	0x66666667
 8001280:	200000a0 	.word	0x200000a0
 8001284:	200000a1 	.word	0x200000a1
 8001288:	20000000 	.word	0x20000000

0800128c <_Z15timecodeDisplayv>:
void timecodeDisplay()
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	tcDisplay[0] = foo[hr / 10];
 8001290:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <_Z15timecodeDisplayv+0x124>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a47      	ldr	r2, [pc, #284]	; (80013b4 <_Z15timecodeDisplayv+0x128>)
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	4947      	ldr	r1, [pc, #284]	; (80013b8 <_Z15timecodeDisplayv+0x12c>)
 800129a:	fba1 1202 	umull	r1, r2, r1, r2
 800129e:	08d2      	lsrs	r2, r2, #3
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	4413      	add	r3, r2
 80012a4:	781a      	ldrb	r2, [r3, #0]
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 80012a8:	701a      	strb	r2, [r3, #0]
	tcDisplay[1] = foo[hr % 10];
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <_Z15timecodeDisplayv+0x124>)
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <_Z15timecodeDisplayv+0x128>)
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <_Z15timecodeDisplayv+0x12c>)
 80012b4:	fba3 1302 	umull	r1, r3, r3, r2
 80012b8:	08d9      	lsrs	r1, r3, #3
 80012ba:	460b      	mov	r3, r1
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4403      	add	r3, r0
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 80012cc:	705a      	strb	r2, [r3, #1]
	tcDisplay[2] = ':';
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 80012d0:	223a      	movs	r2, #58	; 0x3a
 80012d2:	709a      	strb	r2, [r3, #2]
	tcDisplay[3] = foo[mn / 10];
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <_Z15timecodeDisplayv+0x124>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a39      	ldr	r2, [pc, #228]	; (80013c0 <_Z15timecodeDisplayv+0x134>)
 80012da:	7812      	ldrb	r2, [r2, #0]
 80012dc:	4936      	ldr	r1, [pc, #216]	; (80013b8 <_Z15timecodeDisplayv+0x12c>)
 80012de:	fba1 1202 	umull	r1, r2, r1, r2
 80012e2:	08d2      	lsrs	r2, r2, #3
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	4413      	add	r3, r2
 80012e8:	781a      	ldrb	r2, [r3, #0]
 80012ea:	4b34      	ldr	r3, [pc, #208]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 80012ec:	70da      	strb	r2, [r3, #3]
	tcDisplay[4] = foo[mn % 10];
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <_Z15timecodeDisplayv+0x124>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <_Z15timecodeDisplayv+0x134>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <_Z15timecodeDisplayv+0x12c>)
 80012f8:	fba3 1302 	umull	r1, r3, r3, r2
 80012fc:	08d9      	lsrs	r1, r3, #3
 80012fe:	460b      	mov	r3, r1
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4403      	add	r3, r0
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 8001310:	711a      	strb	r2, [r3, #4]
	tcDisplay[5] = ':';
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 8001314:	223a      	movs	r2, #58	; 0x3a
 8001316:	715a      	strb	r2, [r3, #5]
	tcDisplay[6] = foo[sc / 10];
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <_Z15timecodeDisplayv+0x124>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <_Z15timecodeDisplayv+0x138>)
 800131e:	7812      	ldrb	r2, [r2, #0]
 8001320:	4925      	ldr	r1, [pc, #148]	; (80013b8 <_Z15timecodeDisplayv+0x12c>)
 8001322:	fba1 1202 	umull	r1, r2, r1, r2
 8001326:	08d2      	lsrs	r2, r2, #3
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	4413      	add	r3, r2
 800132c:	781a      	ldrb	r2, [r3, #0]
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 8001330:	719a      	strb	r2, [r3, #6]
	tcDisplay[7] = foo[sc % 10];
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <_Z15timecodeDisplayv+0x124>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <_Z15timecodeDisplayv+0x138>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <_Z15timecodeDisplayv+0x12c>)
 800133c:	fba3 1302 	umull	r1, r3, r3, r2
 8001340:	08d9      	lsrs	r1, r3, #3
 8001342:	460b      	mov	r3, r1
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4403      	add	r3, r0
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 8001354:	71da      	strb	r2, [r3, #7]
	tcDisplay[8] = (frameRate == 4) ? ';' : ':';
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <_Z15timecodeDisplayv+0x13c>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b04      	cmp	r3, #4
 800135c:	d101      	bne.n	8001362 <_Z15timecodeDisplayv+0xd6>
 800135e:	223b      	movs	r2, #59	; 0x3b
 8001360:	e000      	b.n	8001364 <_Z15timecodeDisplayv+0xd8>
 8001362:	223a      	movs	r2, #58	; 0x3a
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 8001366:	721a      	strb	r2, [r3, #8]
	tcDisplay[9] = foo[fr / 10];
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_Z15timecodeDisplayv+0x124>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <_Z15timecodeDisplayv+0x140>)
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	4911      	ldr	r1, [pc, #68]	; (80013b8 <_Z15timecodeDisplayv+0x12c>)
 8001372:	fba1 1202 	umull	r1, r2, r1, r2
 8001376:	08d2      	lsrs	r2, r2, #3
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	4413      	add	r3, r2
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 8001380:	725a      	strb	r2, [r3, #9]
	tcDisplay[10] = foo[fr % 10];
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <_Z15timecodeDisplayv+0x124>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <_Z15timecodeDisplayv+0x140>)
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <_Z15timecodeDisplayv+0x12c>)
 800138c:	fba3 1302 	umull	r1, r3, r3, r2
 8001390:	08d9      	lsrs	r1, r3, #3
 8001392:	460b      	mov	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4403      	add	r3, r0
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <_Z15timecodeDisplayv+0x130>)
 80013a4:	729a      	strb	r2, [r3, #10]
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	20000010 	.word	0x20000010
 80013b4:	2000009c 	.word	0x2000009c
 80013b8:	cccccccd 	.word	0xcccccccd
 80013bc:	20000078 	.word	0x20000078
 80013c0:	2000009d 	.word	0x2000009d
 80013c4:	2000009e 	.word	0x2000009e
 80013c8:	2000008d 	.word	0x2000008d
 80013cc:	2000009f 	.word	0x2000009f

080013d0 <_Z11initDisplayv>:
void initDisplay()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	 if (ssd1306_Init(dispI2C) != 0) {
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <_Z11initDisplayv+0x28>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 ff4d 	bl	8003278 <ssd1306_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <_Z11initDisplayv+0x22>
     Error_Handler();
 80013ee:	f001 ff27 	bl	8003240 <Error_Handler>
   }
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000040 	.word	0x20000040

080013fc <_Z8menuLoopv>:
uint8_t offsetAdjust;
bool menuItemSelect = false;
uint8_t menuItem = 0;
bool highlightYes = false;
void menuLoop()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
    bool inMenu = true;
 8001402:	2301      	movs	r3, #1
 8001404:	71fb      	strb	r3, [r7, #7]
    rateAdjust = frameRate;
 8001406:	4b8e      	ldr	r3, [pc, #568]	; (8001640 <_Z8menuLoopv+0x244>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b8e      	ldr	r3, [pc, #568]	; (8001644 <_Z8menuLoopv+0x248>)
 800140c:	701a      	strb	r2, [r3, #0]
    offsetAdjust = intOffset;
 800140e:	4b8e      	ldr	r3, [pc, #568]	; (8001648 <_Z8menuLoopv+0x24c>)
 8001410:	781a      	ldrb	r2, [r3, #0]
 8001412:	4b8e      	ldr	r3, [pc, #568]	; (800164c <_Z8menuLoopv+0x250>)
 8001414:	701a      	strb	r2, [r3, #0]
	 * check if item is exit
	 * timeout for menu inactivity 10 seconds?
	 */
    

    displayTimeout = HAL_GetTick();
 8001416:	f002 fcc7 	bl	8003da8 <HAL_GetTick>
 800141a:	4603      	mov	r3, r0
 800141c:	4a8c      	ldr	r2, [pc, #560]	; (8001650 <_Z8menuLoopv+0x254>)
 800141e:	6013      	str	r3, [r2, #0]
    while (GPIOC->IDR & GPIO_PIN_13)
 8001420:	4b8c      	ldr	r3, [pc, #560]	; (8001654 <_Z8menuLoopv+0x258>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d000      	beq.n	8001438 <_Z8menuLoopv+0x3c>
 8001436:	e7f3      	b.n	8001420 <_Z8menuLoopv+0x24>
    {
        //While still holding down the menu button
    }
    while (inMenu)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 81e1 	beq.w	8001802 <_Z8menuLoopv+0x406>
    {
        updateDisplay(2);
 8001440:	2002      	movs	r0, #2
 8001442:	f7ff fab9 	bl	80009b8 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 10000)
 8001446:	f002 fcaf 	bl	8003da8 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	4b80      	ldr	r3, [pc, #512]	; (8001650 <_Z8menuLoopv+0x254>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f242 7210 	movw	r2, #10000	; 0x2710
 8001456:	4293      	cmp	r3, r2
 8001458:	bf8c      	ite	hi
 800145a:	2301      	movhi	r3, #1
 800145c:	2300      	movls	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <_Z8menuLoopv+0x6c>
        {
            inMenu = false;
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
        }
        if (GPIOB->IDR & GPIO_PIN_9)
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <_Z8menuLoopv+0x25c>)
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d073      	beq.n	8001566 <_Z8menuLoopv+0x16a>
        { //Plus button
            displayTimeout = HAL_GetTick();
 800147e:	f002 fc93 	bl	8003da8 <HAL_GetTick>
 8001482:	4603      	mov	r3, r0
 8001484:	4a72      	ldr	r2, [pc, #456]	; (8001650 <_Z8menuLoopv+0x254>)
 8001486:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001488:	f002 fc8e 	bl	8003da8 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	4b73      	ldr	r3, [pc, #460]	; (800165c <_Z8menuLoopv+0x260>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001498:	bf8c      	ite	hi
 800149a:	2301      	movhi	r3, #1
 800149c:	2300      	movls	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d060      	beq.n	8001566 <_Z8menuLoopv+0x16a>
            {
                if (menuItemSelect)
 80014a4:	4b6e      	ldr	r3, [pc, #440]	; (8001660 <_Z8menuLoopv+0x264>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d048      	beq.n	800153e <_Z8menuLoopv+0x142>
                { //Menu item selected, scrolling through values
                    switch (menuItem)
 80014ac:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <_Z8menuLoopv+0x268>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d853      	bhi.n	800155c <_Z8menuLoopv+0x160>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <_Z8menuLoopv+0xc0>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014eb 	.word	0x080014eb
 80014c4:	0800155d 	.word	0x0800155d
 80014c8:	08001521 	.word	0x08001521
                    {
                    case 0: //Rate
                        if (rateAdjust == 0)
 80014cc:	4b5d      	ldr	r3, [pc, #372]	; (8001644 <_Z8menuLoopv+0x248>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d103      	bne.n	80014dc <_Z8menuLoopv+0xe0>
                            rateAdjust = 5;
 80014d4:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <_Z8menuLoopv+0x248>)
 80014d6:	2205      	movs	r2, #5
 80014d8:	701a      	strb	r2, [r3, #0]
                        else
                            rateAdjust--;
                        break;
 80014da:	e03f      	b.n	800155c <_Z8menuLoopv+0x160>
                            rateAdjust--;
 80014dc:	4b59      	ldr	r3, [pc, #356]	; (8001644 <_Z8menuLoopv+0x248>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b57      	ldr	r3, [pc, #348]	; (8001644 <_Z8menuLoopv+0x248>)
 80014e6:	701a      	strb	r2, [r3, #0]
                        break;
 80014e8:	e038      	b.n	800155c <_Z8menuLoopv+0x160>
                    case 1: //Offset
                        offsetAdjust++;
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <_Z8menuLoopv+0x250>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b56      	ldr	r3, [pc, #344]	; (800164c <_Z8menuLoopv+0x250>)
 80014f4:	701a      	strb	r2, [r3, #0]
                        if (offsetAdjust > (frameRateDivisor[frameRate] * 2))
 80014f6:	4b55      	ldr	r3, [pc, #340]	; (800164c <_Z8menuLoopv+0x250>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <_Z8menuLoopv+0x244>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4b59      	ldr	r3, [pc, #356]	; (8001668 <_Z8menuLoopv+0x26c>)
 8001504:	5c5b      	ldrb	r3, [r3, r1]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	429a      	cmp	r2, r3
 800150a:	dd26      	ble.n	800155a <_Z8menuLoopv+0x15e>
                            offsetAdjust = (frameRateDivisor[frameRate] * 2);
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <_Z8menuLoopv+0x244>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b55      	ldr	r3, [pc, #340]	; (8001668 <_Z8menuLoopv+0x26c>)
 8001514:	5c9b      	ldrb	r3, [r3, r2]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b4c      	ldr	r3, [pc, #304]	; (800164c <_Z8menuLoopv+0x250>)
 800151c:	701a      	strb	r2, [r3, #0]
                        break;
 800151e:	e01c      	b.n	800155a <_Z8menuLoopv+0x15e>
                    case 2:
                        break;
                    case 3:
                        if (autoOff == 0)
 8001520:	4b52      	ldr	r3, [pc, #328]	; (800166c <_Z8menuLoopv+0x270>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <_Z8menuLoopv+0x134>
                            autoOff = 4;
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <_Z8menuLoopv+0x270>)
 800152a:	2204      	movs	r2, #4
 800152c:	701a      	strb	r2, [r3, #0]
                        else
                            autoOff--;
                        break;
 800152e:	e015      	b.n	800155c <_Z8menuLoopv+0x160>
                            autoOff--;
 8001530:	4b4e      	ldr	r3, [pc, #312]	; (800166c <_Z8menuLoopv+0x270>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3b01      	subs	r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b4c      	ldr	r3, [pc, #304]	; (800166c <_Z8menuLoopv+0x270>)
 800153a:	701a      	strb	r2, [r3, #0]
                        break;
 800153c:	e00e      	b.n	800155c <_Z8menuLoopv+0x160>
                        
                    }
                }
                else
                { //Scrolling through menu
                    menuItem++;
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <_Z8menuLoopv+0x268>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <_Z8menuLoopv+0x268>)
 8001548:	701a      	strb	r2, [r3, #0]
                    if (menuItem > 4)
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <_Z8menuLoopv+0x268>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b04      	cmp	r3, #4
 8001550:	d904      	bls.n	800155c <_Z8menuLoopv+0x160>
                        menuItem = 0;
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <_Z8menuLoopv+0x268>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e000      	b.n	800155c <_Z8menuLoopv+0x160>
                        break;
 800155a:	bf00      	nop
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 800155c:	f002 fc24 	bl	8003da8 <HAL_GetTick>
 8001560:	4603      	mov	r3, r0
 8001562:	4a3e      	ldr	r2, [pc, #248]	; (800165c <_Z8menuLoopv+0x260>)
 8001564:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <_Z8menuLoopv+0x25c>)
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf14      	ite	ne
 8001572:	2301      	movne	r3, #1
 8001574:	2300      	moveq	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d07f      	beq.n	800167c <_Z8menuLoopv+0x280>
        { //Minus button

            displayTimeout = HAL_GetTick();
 800157c:	f002 fc14 	bl	8003da8 <HAL_GetTick>
 8001580:	4603      	mov	r3, r0
 8001582:	4a33      	ldr	r2, [pc, #204]	; (8001650 <_Z8menuLoopv+0x254>)
 8001584:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001586:	f002 fc0f 	bl	8003da8 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <_Z8menuLoopv+0x260>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001596:	bf8c      	ite	hi
 8001598:	2301      	movhi	r3, #1
 800159a:	2300      	movls	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d06c      	beq.n	800167c <_Z8menuLoopv+0x280>
            {
                if (menuItemSelect)
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <_Z8menuLoopv+0x264>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d039      	beq.n	800161e <_Z8menuLoopv+0x222>
                { //Scrolling through option
                    switch (menuItem)
 80015aa:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <_Z8menuLoopv+0x268>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d85f      	bhi.n	8001672 <_Z8menuLoopv+0x276>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <_Z8menuLoopv+0x1bc>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015e5 	.word	0x080015e5
 80015c0:	08001673 	.word	0x08001673
 80015c4:	08001603 	.word	0x08001603
                    {
                    case 0:
                        rateAdjust++;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <_Z8menuLoopv+0x248>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <_Z8menuLoopv+0x248>)
 80015d2:	701a      	strb	r2, [r3, #0]
                        if (rateAdjust > 5)
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <_Z8menuLoopv+0x248>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d92f      	bls.n	800163c <_Z8menuLoopv+0x240>
                            rateAdjust = 0;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <_Z8menuLoopv+0x248>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
                        break;
 80015e2:	e02b      	b.n	800163c <_Z8menuLoopv+0x240>
                        
                    case 1:
                        if (offsetAdjust == 0)
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <_Z8menuLoopv+0x250>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d103      	bne.n	80015f4 <_Z8menuLoopv+0x1f8>
                            offsetAdjust = 0;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <_Z8menuLoopv+0x250>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
                        else
                            offsetAdjust--;
                        break;
 80015f2:	e03e      	b.n	8001672 <_Z8menuLoopv+0x276>
                            offsetAdjust--;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <_Z8menuLoopv+0x250>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <_Z8menuLoopv+0x250>)
 80015fe:	701a      	strb	r2, [r3, #0]
                        break;
 8001600:	e037      	b.n	8001672 <_Z8menuLoopv+0x276>
                        
                    case 2:
                        break;
                    case 3:
                        autoOff++;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <_Z8menuLoopv+0x270>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <_Z8menuLoopv+0x270>)
 800160c:	701a      	strb	r2, [r3, #0]
                        if (autoOff > 4)
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <_Z8menuLoopv+0x270>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b04      	cmp	r3, #4
 8001614:	d92c      	bls.n	8001670 <_Z8menuLoopv+0x274>
                            autoOff = 0;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <_Z8menuLoopv+0x270>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
                        break;
 800161c:	e028      	b.n	8001670 <_Z8menuLoopv+0x274>
                    }
                }
                else
                { //Scrolling through menu
                    if (menuItem == 0)
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_Z8menuLoopv+0x268>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d103      	bne.n	800162e <_Z8menuLoopv+0x232>
                        menuItem = 4;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <_Z8menuLoopv+0x268>)
 8001628:	2204      	movs	r2, #4
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e021      	b.n	8001672 <_Z8menuLoopv+0x276>
                    else
                        menuItem--;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <_Z8menuLoopv+0x268>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3b01      	subs	r3, #1
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <_Z8menuLoopv+0x268>)
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	e01a      	b.n	8001672 <_Z8menuLoopv+0x276>
                        break;
 800163c:	bf00      	nop
 800163e:	e018      	b.n	8001672 <_Z8menuLoopv+0x276>
 8001640:	2000008d 	.word	0x2000008d
 8001644:	200000c4 	.word	0x200000c4
 8001648:	20000094 	.word	0x20000094
 800164c:	200000c5 	.word	0x200000c5
 8001650:	200000bc 	.word	0x200000bc
 8001654:	48000800 	.word	0x48000800
 8001658:	48000400 	.word	0x48000400
 800165c:	200000c0 	.word	0x200000c0
 8001660:	200000c6 	.word	0x200000c6
 8001664:	200000c7 	.word	0x200000c7
 8001668:	2000002c 	.word	0x2000002c
 800166c:	20000095 	.word	0x20000095
                        break;
 8001670:	bf00      	nop
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8001672:	f002 fb99 	bl	8003da8 <HAL_GetTick>
 8001676:	4603      	mov	r3, r0
 8001678:	4a65      	ldr	r2, [pc, #404]	; (8001810 <_Z8menuLoopv+0x414>)
 800167a:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 800167c:	4b65      	ldr	r3, [pc, #404]	; (8001814 <_Z8menuLoopv+0x418>)
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	f43f aed2 	beq.w	8001438 <_Z8menuLoopv+0x3c>
        { //Menu button

            if (!(GPIOB->IDR & GPIO_PIN_8))
 8001694:	4b60      	ldr	r3, [pc, #384]	; (8001818 <_Z8menuLoopv+0x41c>)
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf0c      	ite	eq
 80016a0:	2301      	moveq	r3, #1
 80016a2:	2300      	movne	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f43f aec6 	beq.w	8001438 <_Z8menuLoopv+0x3c>
            {

                displayTimeout = HAL_GetTick();
 80016ac:	f002 fb7c 	bl	8003da8 <HAL_GetTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a5a      	ldr	r2, [pc, #360]	; (800181c <_Z8menuLoopv+0x420>)
 80016b4:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - buttonTime > 350) //Debounce
 80016b6:	f002 fb77 	bl	8003da8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b54      	ldr	r3, [pc, #336]	; (8001810 <_Z8menuLoopv+0x414>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80016c6:	bf8c      	ite	hi
 80016c8:	2301      	movhi	r3, #1
 80016ca:	2300      	movls	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f43f aeb2 	beq.w	8001438 <_Z8menuLoopv+0x3c>
                {
                    if (!menuItemSelect)
 80016d4:	4b52      	ldr	r3, [pc, #328]	; (8001820 <_Z8menuLoopv+0x424>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03c      	beq.n	800175c <_Z8menuLoopv+0x360>
                    { //if scrolling through menu items
                        switch (menuItem)
 80016e2:	4b50      	ldr	r3, [pc, #320]	; (8001824 <_Z8menuLoopv+0x428>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	f200 8085 	bhi.w	80017f6 <_Z8menuLoopv+0x3fa>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <_Z8menuLoopv+0x2f8>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001709 	.word	0x08001709
 80016f8:	08001711 	.word	0x08001711
 80016fc:	08001719 	.word	0x08001719
 8001700:	0800173f 	.word	0x0800173f
 8001704:	08001747 	.word	0x08001747
                        {
                        case 0: //Rate
                            menuItemSelect = true;
 8001708:	4b45      	ldr	r3, [pc, #276]	; (8001820 <_Z8menuLoopv+0x424>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
                            break;
 800170e:	e072      	b.n	80017f6 <_Z8menuLoopv+0x3fa>
                        case 1: //Offset
                            menuItemSelect = true;
 8001710:	4b43      	ldr	r3, [pc, #268]	; (8001820 <_Z8menuLoopv+0x424>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
                            //offsetAlert();
                            ///while (GPIOC->IDR & GPIO_PIN_13)
                            //{displayTimeout = HAL_GetTick();}
                            break;
 8001716:	e06e      	b.n	80017f6 <_Z8menuLoopv+0x3fa>
                        case 2: //Re-jam
                            reJamAlert();
 8001718:	f000 f9c4 	bl	8001aa4 <_Z10reJamAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 800171c:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <_Z8menuLoopv+0x418>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf14      	ite	ne
 8001728:	2301      	movne	r3, #1
 800172a:	2300      	moveq	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <_Z8menuLoopv+0x3f8>
                            {displayTimeout = HAL_GetTick();}
 8001732:	f002 fb39 	bl	8003da8 <HAL_GetTick>
 8001736:	4603      	mov	r3, r0
 8001738:	4a38      	ldr	r2, [pc, #224]	; (800181c <_Z8menuLoopv+0x420>)
 800173a:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 800173c:	e7ee      	b.n	800171c <_Z8menuLoopv+0x320>
                            break;
                        case 3: //Auto-Off
                            menuItemSelect = true;
 800173e:	4b38      	ldr	r3, [pc, #224]	; (8001820 <_Z8menuLoopv+0x424>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
                            break;
 8001744:	e057      	b.n	80017f6 <_Z8menuLoopv+0x3fa>
                        case 4: //Exit menu
                            buttonTime = HAL_GetTick();
 8001746:	f002 fb2f 	bl	8003da8 <HAL_GetTick>
 800174a:	4603      	mov	r3, r0
 800174c:	4a30      	ldr	r2, [pc, #192]	; (8001810 <_Z8menuLoopv+0x414>)
 800174e:	6013      	str	r3, [r2, #0]
                            //menuCount = HAL_GetTick();
                            //GPIOH->ODR |= GPIO_PIN_3; //Not sure what this does
                            //Write to EEPROM
                            inMenu = false;
 8001750:	2300      	movs	r3, #0
 8001752:	71fb      	strb	r3, [r7, #7]
                            uptimeMinutes = 0;
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <_Z8menuLoopv+0x42c>)
 8001756:	2200      	movs	r2, #0
 8001758:	801a      	strh	r2, [r3, #0]
                            break;
 800175a:	e04c      	b.n	80017f6 <_Z8menuLoopv+0x3fa>
                        }
                    }
                    else //Exit menu option
                    {
                        switch (menuItem)
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <_Z8menuLoopv+0x428>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d848      	bhi.n	80017f6 <_Z8menuLoopv+0x3fa>
 8001764:	a201      	add	r2, pc, #4	; (adr r2, 800176c <_Z8menuLoopv+0x370>)
 8001766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176a:	bf00      	nop
 800176c:	0800177d 	.word	0x0800177d
 8001770:	080017b3 	.word	0x080017b3
 8001774:	080017e1 	.word	0x080017e1
 8001778:	080017ed 	.word	0x080017ed
                        {
                        case 0: //Rate
                            menuItemSelect = false;
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <_Z8menuLoopv+0x424>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
                            rateAlert();
 8001782:	f000 f857 	bl	8001834 <_Z9rateAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <_Z8menuLoopv+0x418>)
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf14      	ite	ne
 8001792:	2301      	movne	r3, #1
 8001794:	2300      	moveq	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <_Z8menuLoopv+0x3ac>
                            {displayTimeout = HAL_GetTick();}
 800179c:	f002 fb04 	bl	8003da8 <HAL_GetTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <_Z8menuLoopv+0x420>)
 80017a4:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 80017a6:	e7ee      	b.n	8001786 <_Z8menuLoopv+0x38a>
                            rateAdjust = frameRate;
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <_Z8menuLoopv+0x430>)
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <_Z8menuLoopv+0x434>)
 80017ae:	701a      	strb	r2, [r3, #0]
                            break;
 80017b0:	e021      	b.n	80017f6 <_Z8menuLoopv+0x3fa>
                        case 1: //Offset
                            offsetAlert();
 80017b2:	f000 f909 	bl	80019c8 <_Z11offsetAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <_Z8menuLoopv+0x418>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <_Z8menuLoopv+0x3dc>
                            {displayTimeout = HAL_GetTick();}
 80017cc:	f002 faec 	bl	8003da8 <HAL_GetTick>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <_Z8menuLoopv+0x420>)
 80017d4:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 80017d6:	e7ee      	b.n	80017b6 <_Z8menuLoopv+0x3ba>
                            menuItemSelect = false;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_Z8menuLoopv+0x424>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
                            break;
 80017de:	e00a      	b.n	80017f6 <_Z8menuLoopv+0x3fa>
                        case 2: //Re-Jam
                            reJamAlert();
 80017e0:	f000 f960 	bl	8001aa4 <_Z10reJamAlertv>
                            menuItemSelect = false;
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <_Z8menuLoopv+0x424>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
                            break;
 80017ea:	e004      	b.n	80017f6 <_Z8menuLoopv+0x3fa>
                        case 3: //Auto-Off
                            menuItemSelect = false;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <_Z8menuLoopv+0x424>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
                            break;
 80017f2:	e000      	b.n	80017f6 <_Z8menuLoopv+0x3fa>
                            break;
 80017f4:	bf00      	nop
                        }
                    }
                    buttonTime = HAL_GetTick(); //Debounce timer
 80017f6:	f002 fad7 	bl	8003da8 <HAL_GetTick>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <_Z8menuLoopv+0x414>)
 80017fe:	6013      	str	r3, [r2, #0]
    while (inMenu)
 8001800:	e61a      	b.n	8001438 <_Z8menuLoopv+0x3c>
                }
            }
        }
    }
    updateDisplay(0x0);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff f8d8 	bl	80009b8 <_Z13updateDisplayh>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200000c0 	.word	0x200000c0
 8001814:	48000800 	.word	0x48000800
 8001818:	48000400 	.word	0x48000400
 800181c:	200000bc 	.word	0x200000bc
 8001820:	200000c6 	.word	0x200000c6
 8001824:	200000c7 	.word	0x200000c7
 8001828:	20000096 	.word	0x20000096
 800182c:	2000008d 	.word	0x2000008d
 8001830:	200000c4 	.word	0x200000c4

08001834 <_Z9rateAlertv>:
        break;
    }
}

void rateAlert()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
    bool inLoop = true;
 800183a:	2301      	movs	r3, #1
 800183c:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <_Z9rateAlertv+0x178>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x5);
 8001844:	2005      	movs	r0, #5
 8001846:	f7ff f8b7 	bl	80009b8 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 800184a:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <_Z9rateAlertv+0x17c>)
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d000      	beq.n	8001862 <_Z9rateAlertv+0x2e>
 8001860:	e7f3      	b.n	800184a <_Z9rateAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 809c 	beq.w	80019a2 <_Z9rateAlertv+0x16e>
    {
        updateDisplay(0x5);
 800186a:	2005      	movs	r0, #5
 800186c:	f7ff f8a4 	bl	80009b8 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8001870:	f002 fa9a 	bl	8003da8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <_Z9rateAlertv+0x180>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	bf8c      	ite	hi
 8001884:	2301      	movhi	r3, #1
 8001886:	2300      	movls	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <_Z9rateAlertv+0x64>
        {
            highlightYes = false;
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <_Z9rateAlertv+0x178>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8001894:	2300      	movs	r3, #0
 8001896:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 8001898:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <_Z9rateAlertv+0x184>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d01e      	beq.n	80018ec <_Z9rateAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 80018ae:	f002 fa7b 	bl	8003da8 <HAL_GetTick>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a3f      	ldr	r2, [pc, #252]	; (80019b4 <_Z9rateAlertv+0x180>)
 80018b6:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 80018b8:	f002 fa76 	bl	8003da8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <_Z9rateAlertv+0x188>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80018c8:	bf8c      	ite	hi
 80018ca:	2301      	movhi	r3, #1
 80018cc:	2300      	movls	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00b      	beq.n	80018ec <_Z9rateAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <_Z9rateAlertv+0x178>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	f083 0301 	eor.w	r3, r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b33      	ldr	r3, [pc, #204]	; (80019ac <_Z9rateAlertv+0x178>)
 80018e0:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 80018e2:	f002 fa61 	bl	8003da8 <HAL_GetTick>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a34      	ldr	r2, [pc, #208]	; (80019bc <_Z9rateAlertv+0x188>)
 80018ea:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <_Z9rateAlertv+0x184>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf14      	ite	ne
 80018f8:	2301      	movne	r3, #1
 80018fa:	2300      	moveq	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01e      	beq.n	8001940 <_Z9rateAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 8001902:	f002 fa51 	bl	8003da8 <HAL_GetTick>
 8001906:	4603      	mov	r3, r0
 8001908:	4a2a      	ldr	r2, [pc, #168]	; (80019b4 <_Z9rateAlertv+0x180>)
 800190a:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 800190c:	f002 fa4c 	bl	8003da8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <_Z9rateAlertv+0x188>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800191c:	bf8c      	ite	hi
 800191e:	2301      	movhi	r3, #1
 8001920:	2300      	movls	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00b      	beq.n	8001940 <_Z9rateAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <_Z9rateAlertv+0x178>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f083 0301 	eor.w	r3, r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <_Z9rateAlertv+0x178>)
 8001934:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001936:	f002 fa37 	bl	8003da8 <HAL_GetTick>
 800193a:	4603      	mov	r3, r0
 800193c:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <_Z9rateAlertv+0x188>)
 800193e:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <_Z9rateAlertv+0x17c>)
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d085      	beq.n	8001862 <_Z9rateAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8001956:	f002 fa27 	bl	8003da8 <HAL_GetTick>
 800195a:	4603      	mov	r3, r0
 800195c:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <_Z9rateAlertv+0x180>)
 800195e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001960:	f002 fa22 	bl	8003da8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <_Z9rateAlertv+0x188>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001970:	bf8c      	ite	hi
 8001972:	2301      	movhi	r3, #1
 8001974:	2300      	movls	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	f43f af72 	beq.w	8001862 <_Z9rateAlertv+0x2e>
            {
                if (highlightYes)
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <_Z9rateAlertv+0x178>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <_Z9rateAlertv+0x16a>
                {
                    frameRate = rateAdjust;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <_Z9rateAlertv+0x18c>)
 8001988:	781a      	ldrb	r2, [r3, #0]
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <_Z9rateAlertv+0x190>)
 800198c:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 800198e:	f000 f9e1 	bl	8001d54 <_Z13resetTimecodev>
                    highlightYes = false;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <_Z9rateAlertv+0x178>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
                    inLoop = false;
 8001998:	2300      	movs	r3, #0
 800199a:	71fb      	strb	r3, [r7, #7]
                    break;
 800199c:	e001      	b.n	80019a2 <_Z9rateAlertv+0x16e>
                }
                inLoop = false;
 800199e:	2300      	movs	r3, #0
 80019a0:	71fb      	strb	r3, [r7, #7]
                break;
                buttonTime = HAL_GetTick(); //Debounce timer
            }
        }
    }
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200000c8 	.word	0x200000c8
 80019b0:	48000800 	.word	0x48000800
 80019b4:	200000bc 	.word	0x200000bc
 80019b8:	48000400 	.word	0x48000400
 80019bc:	200000c0 	.word	0x200000c0
 80019c0:	200000c4 	.word	0x200000c4
 80019c4:	2000008d 	.word	0x2000008d

080019c8 <_Z11offsetAlertv>:

void offsetAlert()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
    bool inLoop = true;
 80019ce:	2301      	movs	r3, #1
 80019d0:	71fb      	strb	r3, [r7, #7]
    updateDisplay(0x6);
 80019d2:	2006      	movs	r0, #6
 80019d4:	f7fe fff0 	bl	80009b8 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <_Z11offsetAlertv+0xc4>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d000      	beq.n	80019f0 <_Z11offsetAlertv+0x28>
 80019ee:	e7f3      	b.n	80019d8 <_Z11offsetAlertv+0x10>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d046      	beq.n	8001a84 <_Z11offsetAlertv+0xbc>
    {
        updateDisplay(0x6);
 80019f6:	2006      	movs	r0, #6
 80019f8:	f7fe ffde 	bl	80009b8 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 8000)
 80019fc:	f002 f9d4 	bl	8003da8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <_Z11offsetAlertv+0xc8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001a0c:	bf8c      	ite	hi
 8001a0e:	2301      	movhi	r3, #1
 8001a10:	2300      	movls	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <_Z11offsetAlertv+0x5a>
        {
            highlightYes = false;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <_Z11offsetAlertv+0xcc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <_Z11offsetAlertv+0xc4>)
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf14      	ite	ne
 8001a2e:	2301      	movne	r3, #1
 8001a30:	2300      	moveq	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0db      	beq.n	80019f0 <_Z11offsetAlertv+0x28>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8001a38:	f002 f9b6 	bl	8003da8 <HAL_GetTick>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <_Z11offsetAlertv+0xc8>)
 8001a40:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001a42:	f002 f9b1 	bl	8003da8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_Z11offsetAlertv+0xd0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001a52:	bf8c      	ite	hi
 8001a54:	2301      	movhi	r3, #1
 8001a56:	2300      	movls	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0c8      	beq.n	80019f0 <_Z11offsetAlertv+0x28>
            {
                //Add/subtract offset to current frame?
                //Set offset for future jams?
                intOffset = offsetAdjust;
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <_Z11offsetAlertv+0xd4>)
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <_Z11offsetAlertv+0xd8>)
 8001a64:	701a      	strb	r2, [r3, #0]
                highlightYes = !highlightYes;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <_Z11offsetAlertv+0xcc>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_Z11offsetAlertv+0xcc>)
 8001a72:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001a74:	f002 f998 	bl	8003da8 <HAL_GetTick>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <_Z11offsetAlertv+0xd0>)
 8001a7c:	6013      	str	r3, [r2, #0]
                inLoop = false;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 8001a82:	e7b5      	b.n	80019f0 <_Z11offsetAlertv+0x28>
            }
        }
    }
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	200000bc 	.word	0x200000bc
 8001a94:	200000c8 	.word	0x200000c8
 8001a98:	200000c0 	.word	0x200000c0
 8001a9c:	200000c5 	.word	0x200000c5
 8001aa0:	20000094 	.word	0x20000094

08001aa4 <_Z10reJamAlertv>:

void reJamAlert()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 8001aae:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x7);
 8001ab4:	2007      	movs	r0, #7
 8001ab6:	f7fe ff7f 	bl	80009b8 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8001aba:	4b5c      	ldr	r3, [pc, #368]	; (8001c2c <_Z10reJamAlertv+0x188>)
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d000      	beq.n	8001ad2 <_Z10reJamAlertv+0x2e>
 8001ad0:	e7f3      	b.n	8001aba <_Z10reJamAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80a3 	beq.w	8001c20 <_Z10reJamAlertv+0x17c>
    {
        updateDisplay(0x7);
 8001ada:	2007      	movs	r0, #7
 8001adc:	f7fe ff6c 	bl	80009b8 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8001ae0:	f002 f962 	bl	8003da8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <_Z10reJamAlertv+0x18c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bf8c      	ite	hi
 8001af4:	2301      	movhi	r3, #1
 8001af6:	2300      	movls	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <_Z10reJamAlertv+0x64>
        {
            highlightYes = false;
 8001afe:	4b4a      	ldr	r3, [pc, #296]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8001b04:	2300      	movs	r3, #0
 8001b06:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 8001b08:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <_Z10reJamAlertv+0x190>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01e      	beq.n	8001b5c <_Z10reJamAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8001b1e:	f002 f943 	bl	8003da8 <HAL_GetTick>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4a42      	ldr	r2, [pc, #264]	; (8001c30 <_Z10reJamAlertv+0x18c>)
 8001b26:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001b28:	f002 f93e 	bl	8003da8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <_Z10reJamAlertv+0x194>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001b38:	bf8c      	ite	hi
 8001b3a:	2301      	movhi	r3, #1
 8001b3c:	2300      	movls	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <_Z10reJamAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 8001b44:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f083 0301 	eor.w	r3, r3, #1
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001b50:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001b52:	f002 f929 	bl	8003da8 <HAL_GetTick>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a37      	ldr	r2, [pc, #220]	; (8001c38 <_Z10reJamAlertv+0x194>)
 8001b5a:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <_Z10reJamAlertv+0x190>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01e      	beq.n	8001bb0 <_Z10reJamAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 8001b72:	f002 f919 	bl	8003da8 <HAL_GetTick>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a2d      	ldr	r2, [pc, #180]	; (8001c30 <_Z10reJamAlertv+0x18c>)
 8001b7a:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001b7c:	f002 f914 	bl	8003da8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <_Z10reJamAlertv+0x194>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001b8c:	bf8c      	ite	hi
 8001b8e:	2301      	movhi	r3, #1
 8001b90:	2300      	movls	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00b      	beq.n	8001bb0 <_Z10reJamAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001ba4:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001ba6:	f002 f8ff 	bl	8003da8 <HAL_GetTick>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <_Z10reJamAlertv+0x194>)
 8001bae:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <_Z10reJamAlertv+0x188>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d085      	beq.n	8001ad2 <_Z10reJamAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8001bc6:	f002 f8ef 	bl	8003da8 <HAL_GetTick>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <_Z10reJamAlertv+0x18c>)
 8001bce:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001bd0:	f002 f8ea 	bl	8003da8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <_Z10reJamAlertv+0x194>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001be0:	bf8c      	ite	hi
 8001be2:	2301      	movhi	r3, #1
 8001be4:	2300      	movls	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f43f af72 	beq.w	8001ad2 <_Z10reJamAlertv+0x2e>
            {
                if (highlightYes)
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00c      	beq.n	8001c10 <_Z10reJamAlertv+0x16c>
                {
                    frameRate = rateAdjust;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_Z10reJamAlertv+0x198>)
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_Z10reJamAlertv+0x19c>)
 8001bfc:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 8001bfe:	f000 f8a9 	bl	8001d54 <_Z13resetTimecodev>
                    highlightYes = !highlightYes;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	f083 0301 	eor.w	r3, r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <_Z10reJamAlertv+0x184>)
 8001c0e:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8001c10:	f002 f8ca 	bl	8003da8 <HAL_GetTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <_Z10reJamAlertv+0x194>)
 8001c18:	6013      	str	r3, [r2, #0]
                inLoop = false;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 8001c1e:	e758      	b.n	8001ad2 <_Z10reJamAlertv+0x2e>
            }
        }
    }
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200000c8 	.word	0x200000c8
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	200000bc 	.word	0x200000bc
 8001c34:	48000400 	.word	0x48000400
 8001c38:	200000c0 	.word	0x200000c0
 8001c3c:	200000c4 	.word	0x200000c4
 8001c40:	2000008d 	.word	0x2000008d

08001c44 <_Z12initTimecodev>:

/* Init Timecode
* Get the current frame count based on the data read in from the timer
*TODO: Add in the user variables
*/
bool initTimecode(){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
  int hr = int(tcIN[1] & 0x0F) + (int(tcIN[0] & 0x03)*10);
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <_Z12initTimecodev+0xf8>)
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f003 010f 	and.w	r1, r3, #15
 8001c54:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <_Z12initTimecodev+0xf8>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f003 0203 	and.w	r2, r3, #3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	60fb      	str	r3, [r7, #12]
  int mn = int(tcIN[3] & 0x0F) + (int(tcIN[2] & 0x07)*10);
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <_Z12initTimecodev+0xf8>)
 8001c6c:	78db      	ldrb	r3, [r3, #3]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f003 010f 	and.w	r1, r3, #15
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <_Z12initTimecodev+0xf8>)
 8001c76:	789b      	ldrb	r3, [r3, #2]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f003 0207 	and.w	r2, r3, #7
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	440b      	add	r3, r1
 8001c88:	60bb      	str	r3, [r7, #8]
  int sc = int(tcIN[5] & 0x0F) + (int(tcIN[4] & 0x07)*10);
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <_Z12initTimecodev+0xf8>)
 8001c8c:	795b      	ldrb	r3, [r3, #5]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f003 010f 	and.w	r1, r3, #15
 8001c94:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <_Z12initTimecodev+0xf8>)
 8001c96:	791b      	ldrb	r3, [r3, #4]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f003 0207 	and.w	r2, r3, #7
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	440b      	add	r3, r1
 8001ca8:	607b      	str	r3, [r7, #4]
  int fr = int(tcIN[7] & 0x0F) + (int(tcIN[6] & 0x03)*10);
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <_Z12initTimecodev+0xf8>)
 8001cac:	79db      	ldrb	r3, [r3, #7]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f003 010f 	and.w	r1, r3, #15
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <_Z12initTimecodev+0xf8>)
 8001cb6:	799b      	ldrb	r3, [r3, #6]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f003 0203 	and.w	r2, r3, #3
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	603b      	str	r3, [r7, #0]
  clockFrame = (hr * 60 * 60 * frameRateDivisor[frameRate]) + (mn * 60 * frameRateDivisor[frameRate]) + (sc * frameRateDivisor[frameRate]) + fr;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <_Z12initTimecodev+0xfc>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <_Z12initTimecodev+0x100>)
 8001cd2:	5c9b      	ldrb	r3, [r3, r2]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	fb03 f302 	mul.w	r3, r3, r2
 8001cdc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001ce0:	fb02 f103 	mul.w	r1, r2, r3
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <_Z12initTimecodev+0xfc>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <_Z12initTimecodev+0x100>)
 8001cec:	5c9b      	ldrb	r3, [r3, r2]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	fb03 f202 	mul.w	r2, r3, r2
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	18ca      	adds	r2, r1, r3
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <_Z12initTimecodev+0xfc>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <_Z12initTimecodev+0x100>)
 8001d08:	5c5b      	ldrb	r3, [r3, r1]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	fb03 f301 	mul.w	r3, r3, r1
 8001d12:	441a      	add	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <_Z12initTimecodev+0x104>)
 8001d1c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(countTIM);
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <_Z12initTimecodev+0x108>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f005 fae4 	bl	80072f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(outTIM);
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <_Z12initTimecodev+0x10c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 fadf 	bl	80072f0 <HAL_TIM_Base_Start_IT>
}
 8001d32:	bf00      	nop
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000084 	.word	0x20000084
 8001d40:	2000008d 	.word	0x2000008d
 8001d44:	2000002c 	.word	0x2000002c
 8001d48:	20000090 	.word	0x20000090
 8001d4c:	2000004c 	.word	0x2000004c
 8001d50:	20000048 	.word	0x20000048

08001d54 <_Z13resetTimecodev>:

/* Reset Timecode
* Simple function to reset all timers and variables back to
* pre-jam state
*/
bool resetTimecode(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    clockFrame = 0;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <_Z13resetTimecodev+0x38>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(countTIM);
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <_Z13resetTimecodev+0x3c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 fb18 	bl	8007398 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(outTIM);
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <_Z13resetTimecodev+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fb13 	bl	8007398 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_IC_Start_IT(inTIM, TIM_CHANNEL_3);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <_Z13resetTimecodev+0x44>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2108      	movs	r1, #8
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fb93 	bl	80074a4 <HAL_TIM_IC_Start_IT>
    tcJammed = false;
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_Z13resetTimecodev+0x48>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
    //timer2 input yes
    //timer6 output no
}
 8001d84:	bf00      	nop
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000090 	.word	0x20000090
 8001d90:	2000004c 	.word	0x2000004c
 8001d94:	20000048 	.word	0x20000048
 8001d98:	20000044 	.word	0x20000044
 8001d9c:	2000008c 	.word	0x2000008c

08001da0 <_Z9calibratev>:
* 
* For higher accuracy, the compensation runs at a factor of 10 times
* the frame rate divisor.
* IE 23.98 is 1001/24000, so it runs every 240,000 frames.
*/
void calibrate(){
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
  int32_t calibrationArray[6];
	calibrationArray[0] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8001da6:	f240 431c 	movw	r3, #1052	; 0x41c
 8001daa:	603b      	str	r3, [r7, #0]
	calibrationArray[1] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8001dac:	f240 431a 	movw	r3, #1050	; 0x41a
 8001db0:	607b      	str	r3, [r7, #4]
	calibrationArray[2] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8001db2:	f240 431a 	movw	r3, #1050	; 0x41a
 8001db6:	60bb      	str	r3, [r7, #8]
	calibrationArray[3] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8001db8:	f240 431c 	movw	r3, #1052	; 0x41c
 8001dbc:	60fb      	str	r3, [r7, #12]
  calibrationArray[4] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8001dbe:	f240 431c 	movw	r3, #1052	; 0x41c
 8001dc2:	613b      	str	r3, [r7, #16]
	calibrationArray[5] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8001dc4:	f240 431a 	movw	r3, #1050	; 0x41a
 8001dc8:	617b      	str	r3, [r7, #20]
}
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <_Z10frameCheckv>:
*
*
*/

void frameCheck()
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  switch(frameRate)
 8001ddc:	4b60      	ldr	r3, [pc, #384]	; (8001f60 <_Z10frameCheckv+0x188>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	f200 80b8 	bhi.w	8001f56 <_Z10frameCheckv+0x17e>
 8001de6:	a201      	add	r2, pc, #4	; (adr r2, 8001dec <_Z10frameCheckv+0x14>)
 8001de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dec:	08001e05 	.word	0x08001e05
 8001df0:	08001e23 	.word	0x08001e23
 8001df4:	08001e41 	.word	0x08001e41
 8001df8:	08001e5d 	.word	0x08001e5d
 8001dfc:	08001e79 	.word	0x08001e79
 8001e00:	08001f25 	.word	0x08001f25
  {
    case 0: //23.98
      if (clockFrame == 2073600)
 8001e04:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a57      	ldr	r2, [pc, #348]	; (8001f68 <_Z10frameCheckv+0x190>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8093 	beq.w	8001f40 <_Z10frameCheckv+0x168>
        clockFrame = 0;
 8001e1a:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
      break;
 8001e20:	e08e      	b.n	8001f40 <_Z10frameCheckv+0x168>
    case 1: //24
      if (clockFrame == 2073600)
 8001e22:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a50      	ldr	r2, [pc, #320]	; (8001f68 <_Z10frameCheckv+0x190>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8086 	beq.w	8001f44 <_Z10frameCheckv+0x16c>
        clockFrame = 0;
 8001e38:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
      break;
 8001e3e:	e081      	b.n	8001f44 <_Z10frameCheckv+0x16c>
    case 2: //25
      if (clockFrame == 2160000)
 8001e40:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <_Z10frameCheckv+0x194>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d079      	beq.n	8001f48 <_Z10frameCheckv+0x170>
        clockFrame = 0;
 8001e54:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
      break;
 8001e5a:	e075      	b.n	8001f48 <_Z10frameCheckv+0x170>
    case 3: //29.97
      if (clockFrame == 2592000)
 8001e5c:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a43      	ldr	r2, [pc, #268]	; (8001f70 <_Z10frameCheckv+0x198>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d06d      	beq.n	8001f4c <_Z10frameCheckv+0x174>
        clockFrame = 0;
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
      break;
 8001e76:	e069      	b.n	8001f4c <_Z10frameCheckv+0x174>
    case 4: //29.97 DF
      if (clockFrame == 2592000)
 8001e78:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a3c      	ldr	r2, [pc, #240]	; (8001f70 <_Z10frameCheckv+0x198>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <_Z10frameCheckv+0xba>
        clockFrame = 0;
 8001e8c:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
      if (clockFrame % 30 == 29 && (clockFrame / 30) % 60 == 59 && ((((clockFrame / 30) / 60) % 60)+1) % 10 != 0 )
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001e94:	6819      	ldr	r1, [r3, #0]
 8001e96:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <_Z10frameCheckv+0x19c>)
 8001e98:	fba3 2301 	umull	r2, r3, r3, r1
 8001e9c:	091a      	lsrs	r2, r3, #4
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	1aca      	subs	r2, r1, r3
 8001ea8:	2a1d      	cmp	r2, #29
 8001eaa:	d12d      	bne.n	8001f08 <_Z10frameCheckv+0x130>
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a30      	ldr	r2, [pc, #192]	; (8001f74 <_Z10frameCheckv+0x19c>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0919      	lsrs	r1, r3, #4
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <_Z10frameCheckv+0x19c>)
 8001eba:	fba3 2301 	umull	r2, r3, r3, r1
 8001ebe:	095a      	lsrs	r2, r3, #5
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	1aca      	subs	r2, r1, r3
 8001eca:	2a3b      	cmp	r2, #59	; 0x3b
 8001ecc:	d11c      	bne.n	8001f08 <_Z10frameCheckv+0x130>
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <_Z10frameCheckv+0x1a0>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	0a99      	lsrs	r1, r3, #10
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <_Z10frameCheckv+0x19c>)
 8001edc:	fba3 2301 	umull	r2, r3, r3, r1
 8001ee0:	095a      	lsrs	r2, r3, #5
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	1aca      	subs	r2, r1, r3
 8001eec:	1c51      	adds	r1, r2, #1
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <_Z10frameCheckv+0x1a4>)
 8001ef0:	fba3 2301 	umull	r2, r3, r3, r1
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	1aca      	subs	r2, r1, r3
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	d001      	beq.n	8001f08 <_Z10frameCheckv+0x130>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <_Z10frameCheckv+0x132>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <_Z10frameCheckv+0x178>
        {
          clockFrame++; 
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3301      	adds	r3, #1
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001f16:	6013      	str	r3, [r2, #0]
          clockFrame++;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001f20:	6013      	str	r3, [r2, #0]
        }
      break;
 8001f22:	e015      	b.n	8001f50 <_Z10frameCheckv+0x178>
    case 5: //30
      if (clockFrame == 2592000)
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <_Z10frameCheckv+0x198>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <_Z10frameCheckv+0x17c>
        clockFrame = 0;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <_Z10frameCheckv+0x18c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
      break;
 8001f3e:	e009      	b.n	8001f54 <_Z10frameCheckv+0x17c>
      break;
 8001f40:	bf00      	nop
 8001f42:	e008      	b.n	8001f56 <_Z10frameCheckv+0x17e>
      break;
 8001f44:	bf00      	nop
 8001f46:	e006      	b.n	8001f56 <_Z10frameCheckv+0x17e>
      break;
 8001f48:	bf00      	nop
 8001f4a:	e004      	b.n	8001f56 <_Z10frameCheckv+0x17e>
      break;
 8001f4c:	bf00      	nop
 8001f4e:	e002      	b.n	8001f56 <_Z10frameCheckv+0x17e>
      break;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <_Z10frameCheckv+0x17e>
      break;
 8001f54:	bf00      	nop
  }
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	2000008d 	.word	0x2000008d
 8001f64:	20000090 	.word	0x20000090
 8001f68:	001fa400 	.word	0x001fa400
 8001f6c:	0020f580 	.word	0x0020f580
 8001f70:	00278d00 	.word	0x00278d00
 8001f74:	88888889 	.word	0x88888889
 8001f78:	91a2b3c5 	.word	0x91a2b3c5
 8001f7c:	cccccccd 	.word	0xcccccccd

08001f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f86:	f001 fea6 	bl	8003cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8a:	f000 fabd 	bl	8002508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f8e:	f000 fddf 	bl	8002b50 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8001f92:	f000 fb57 	bl	8002644 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 8001f96:	f000 fbc3 	bl	8002720 <_ZL12MX_DAC1_Initv>
  MX_I2C1_Init();
 8001f9a:	f000 fbfd 	bl	8002798 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 8001f9e:	f000 fc49 	bl	8002834 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 8001fa2:	f000 fc99 	bl	80028d8 <_ZL12MX_TIM2_Initv>
  MX_TIM6_Init();
 8001fa6:	f000 fcf9 	bl	800299c <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8001faa:	f000 fd37 	bl	8002a1c <_ZL12MX_TIM7_Initv>
  MX_TIM16_Init();
 8001fae:	f000 fd75 	bl	8002a9c <_ZL13MX_TIM16_Initv>
  MX_USB_PCD_Init();
 8001fb2:	f000 fd9f 	bl	8002af4 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */
  DAC1->DHR12R2 = 2048; //Set analog out for TXCO VCO
 8001fb6:	4baf      	ldr	r3, [pc, #700]	; (8002274 <main+0x2f4>)
 8001fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fbc:	615a      	str	r2, [r3, #20]
calibrate();
 8001fbe:	f7ff feef 	bl	8001da0 <_Z9calibratev>
  GPIOB -> ODR |= GPIO_PIN_12;  //LED
 8001fc2:	4bad      	ldr	r3, [pc, #692]	; (8002278 <main+0x2f8>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4aac      	ldr	r2, [pc, #688]	; (8002278 <main+0x2f8>)
 8001fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fcc:	6153      	str	r3, [r2, #20]
  //HAL_Delay(1000);
  //GPIOB -> ODR |= GPIO_PIN_12;  //LED
 // HAL_Delay(1000);

  //GPIOA -> ODR |= GPIO_PIN_8; //Power enable
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001fce:	2108      	movs	r1, #8
 8001fd0:	48aa      	ldr	r0, [pc, #680]	; (800227c <main+0x2fc>)
 8001fd2:	f005 fa67 	bl	80074a4 <HAL_TIM_IC_Start_IT>
  //HAL_TIM_Base_Start(&htim7);
  //HAL_TIM_Base_Start_IT(&htim16);
  //HAL_TIM_Base_Start_IT(&htim6);
    tcWrite[8] = 0b11111100;  //Sync pattern
 8001fd6:	4baa      	ldr	r3, [pc, #680]	; (8002280 <main+0x300>)
 8001fd8:	22fc      	movs	r2, #252	; 0xfc
 8001fda:	721a      	strb	r2, [r3, #8]
  tcWrite[9] = 0b10111111;  //Sync pattern
 8001fdc:	4ba8      	ldr	r3, [pc, #672]	; (8002280 <main+0x300>)
 8001fde:	22bf      	movs	r2, #191	; 0xbf
 8001fe0:	725a      	strb	r2, [r3, #9]


initDisplay();
 8001fe2:	f7ff f9f5 	bl	80013d0 <_Z11initDisplayv>
 updateDisplay(0x1);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7fe fce6 	bl	80009b8 <_Z13updateDisplayh>
    * Only update display every 4th cycle?
    * Run tests on optimal update range
    * Timecode output is top priority
    *
    */
updateDisplay(0x1);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7fe fce3 	bl	80009b8 <_Z13updateDisplayh>
frameCheck();
 8001ff2:	f7ff fef1 	bl	8001dd8 <_Z10frameCheckv>
	  stat1 = GPIOA -> IDR & GPIO_PIN_9;
 8001ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b9e      	ldr	r3, [pc, #632]	; (8002284 <main+0x304>)
 800200c:	701a      	strb	r2, [r3, #0]
    stat2 = GPIOA -> IDR & GPIO_PIN_10;
 800200e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b99      	ldr	r3, [pc, #612]	; (8002288 <main+0x308>)
 8002024:	701a      	strb	r2, [r3, #0]
	    //PA4 STat2
	    //PA5 Stat1
    //if (clockFrame == 2073600) clockFrame = 0;
    clockFrameOutput = clockFrame + 1;
 8002026:	4b99      	ldr	r3, [pc, #612]	; (800228c <main+0x30c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a98      	ldr	r2, [pc, #608]	; (8002290 <main+0x310>)
 800202e:	6013      	str	r3, [r2, #0]
	    tcWrite[0] = ((clockFrameOutput % frameRateDivisor[frameRate]) % 10);
 8002030:	4b97      	ldr	r3, [pc, #604]	; (8002290 <main+0x310>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a97      	ldr	r2, [pc, #604]	; (8002294 <main+0x314>)
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	4611      	mov	r1, r2
 800203a:	4a97      	ldr	r2, [pc, #604]	; (8002298 <main+0x318>)
 800203c:	5c52      	ldrb	r2, [r2, r1]
 800203e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002042:	fb02 f201 	mul.w	r2, r2, r1
 8002046:	1a99      	subs	r1, r3, r2
 8002048:	4b94      	ldr	r3, [pc, #592]	; (800229c <main+0x31c>)
 800204a:	fba3 2301 	umull	r2, r3, r3, r1
 800204e:	08da      	lsrs	r2, r3, #3
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	1aca      	subs	r2, r1, r3
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	4b88      	ldr	r3, [pc, #544]	; (8002280 <main+0x300>)
 800205e:	701a      	strb	r2, [r3, #0]
	    tcWrite[0] |= (tcIN[7] & 0xF0);
 8002060:	4b8f      	ldr	r3, [pc, #572]	; (80022a0 <main+0x320>)
 8002062:	79db      	ldrb	r3, [r3, #7]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800206a:	4b85      	ldr	r3, [pc, #532]	; (8002280 <main+0x300>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b25a      	sxtb	r2, r3
 8002070:	b24b      	sxtb	r3, r1
 8002072:	4313      	orrs	r3, r2
 8002074:	b25b      	sxtb	r3, r3
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b81      	ldr	r3, [pc, #516]	; (8002280 <main+0x300>)
 800207a:	701a      	strb	r2, [r3, #0]

	    tcWrite[1] = (clockFrameOutput % frameRateDivisor[frameRate]) / 10;
 800207c:	4b84      	ldr	r3, [pc, #528]	; (8002290 <main+0x310>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a84      	ldr	r2, [pc, #528]	; (8002294 <main+0x314>)
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	4611      	mov	r1, r2
 8002086:	4a84      	ldr	r2, [pc, #528]	; (8002298 <main+0x318>)
 8002088:	5c52      	ldrb	r2, [r2, r1]
 800208a:	fbb3 f1f2 	udiv	r1, r3, r2
 800208e:	fb02 f201 	mul.w	r2, r2, r1
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	4a81      	ldr	r2, [pc, #516]	; (800229c <main+0x31c>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b78      	ldr	r3, [pc, #480]	; (8002280 <main+0x300>)
 80020a0:	705a      	strb	r2, [r3, #1]
	    tcWrite[1] |= (tcIN[6] & 0xF0);
 80020a2:	4b7f      	ldr	r3, [pc, #508]	; (80022a0 <main+0x320>)
 80020a4:	799b      	ldrb	r3, [r3, #6]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80020ac:	4b74      	ldr	r3, [pc, #464]	; (8002280 <main+0x300>)
 80020ae:	785b      	ldrb	r3, [r3, #1]
 80020b0:	b25a      	sxtb	r2, r3
 80020b2:	b24b      	sxtb	r3, r1
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b71      	ldr	r3, [pc, #452]	; (8002280 <main+0x300>)
 80020bc:	705a      	strb	r2, [r3, #1]

	    tcWrite[2] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) % 10;
 80020be:	4b74      	ldr	r3, [pc, #464]	; (8002290 <main+0x310>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a74      	ldr	r2, [pc, #464]	; (8002294 <main+0x314>)
 80020c4:	7812      	ldrb	r2, [r2, #0]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4a73      	ldr	r2, [pc, #460]	; (8002298 <main+0x318>)
 80020ca:	5c52      	ldrb	r2, [r2, r1]
 80020cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80020d0:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <main+0x324>)
 80020d2:	fba3 2301 	umull	r2, r3, r3, r1
 80020d6:	095a      	lsrs	r2, r3, #5
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	1aca      	subs	r2, r1, r3
 80020e2:	4b6e      	ldr	r3, [pc, #440]	; (800229c <main+0x31c>)
 80020e4:	fba3 1302 	umull	r1, r3, r3, r2
 80020e8:	08d9      	lsrs	r1, r3, #3
 80020ea:	460b      	mov	r3, r1
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	1ad1      	subs	r1, r2, r3
 80020f4:	b2ca      	uxtb	r2, r1
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <main+0x300>)
 80020f8:	709a      	strb	r2, [r3, #2]
	    tcWrite[2] |= (tcIN[5] & 0xF0);
 80020fa:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <main+0x320>)
 80020fc:	795b      	ldrb	r3, [r3, #5]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002104:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <main+0x300>)
 8002106:	789b      	ldrb	r3, [r3, #2]
 8002108:	b25a      	sxtb	r2, r3
 800210a:	b24b      	sxtb	r3, r1
 800210c:	4313      	orrs	r3, r2
 800210e:	b25b      	sxtb	r3, r3
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <main+0x300>)
 8002114:	709a      	strb	r2, [r3, #2]

	    tcWrite[3] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) / 10;
 8002116:	4b5e      	ldr	r3, [pc, #376]	; (8002290 <main+0x310>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a5e      	ldr	r2, [pc, #376]	; (8002294 <main+0x314>)
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	4611      	mov	r1, r2
 8002120:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <main+0x318>)
 8002122:	5c52      	ldrb	r2, [r2, r1]
 8002124:	fbb3 f1f2 	udiv	r1, r3, r2
 8002128:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <main+0x324>)
 800212a:	fba3 2301 	umull	r2, r3, r3, r1
 800212e:	095a      	lsrs	r2, r3, #5
 8002130:	4613      	mov	r3, r2
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	1aca      	subs	r2, r1, r3
 800213a:	4b58      	ldr	r3, [pc, #352]	; (800229c <main+0x31c>)
 800213c:	fba3 2302 	umull	r2, r3, r3, r2
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <main+0x300>)
 8002146:	70da      	strb	r2, [r3, #3]
	    tcWrite[3] |= (tcIN[4] & 0xF0);
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <main+0x320>)
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002152:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <main+0x300>)
 8002154:	78db      	ldrb	r3, [r3, #3]
 8002156:	b25a      	sxtb	r2, r3
 8002158:	b24b      	sxtb	r3, r1
 800215a:	4313      	orrs	r3, r2
 800215c:	b25b      	sxtb	r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b47      	ldr	r3, [pc, #284]	; (8002280 <main+0x300>)
 8002162:	70da      	strb	r2, [r3, #3]

	    tcWrite[4] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) % 10;
 8002164:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <main+0x310>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <main+0x314>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <main+0x318>)
 8002170:	5c5b      	ldrb	r3, [r3, r1]
 8002172:	4619      	mov	r1, r3
 8002174:	460b      	mov	r3, r1
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	1a5b      	subs	r3, r3, r1
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fbb2 f1f3 	udiv	r1, r2, r3
 8002180:	4b48      	ldr	r3, [pc, #288]	; (80022a4 <main+0x324>)
 8002182:	fba3 2301 	umull	r2, r3, r3, r1
 8002186:	095a      	lsrs	r2, r3, #5
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	1aca      	subs	r2, r1, r3
 8002192:	4b42      	ldr	r3, [pc, #264]	; (800229c <main+0x31c>)
 8002194:	fba3 1302 	umull	r1, r3, r3, r2
 8002198:	08d9      	lsrs	r1, r3, #3
 800219a:	460b      	mov	r3, r1
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	1ad1      	subs	r1, r2, r3
 80021a4:	b2ca      	uxtb	r2, r1
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <main+0x300>)
 80021a8:	711a      	strb	r2, [r3, #4]
	    tcWrite[4] |= (tcIN[3] & 0xF0);
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <main+0x320>)
 80021ac:	78db      	ldrb	r3, [r3, #3]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <main+0x300>)
 80021b6:	791b      	ldrb	r3, [r3, #4]
 80021b8:	b25a      	sxtb	r2, r3
 80021ba:	b24b      	sxtb	r3, r1
 80021bc:	4313      	orrs	r3, r2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <main+0x300>)
 80021c4:	711a      	strb	r2, [r3, #4]

	    tcWrite[5] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) / 10;
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <main+0x310>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <main+0x314>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <main+0x318>)
 80021d2:	5c5b      	ldrb	r3, [r3, r1]
 80021d4:	4619      	mov	r1, r3
 80021d6:	460b      	mov	r3, r1
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a5b      	subs	r3, r3, r1
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	fbb2 f1f3 	udiv	r1, r2, r3
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <main+0x324>)
 80021e4:	fba3 2301 	umull	r2, r3, r3, r1
 80021e8:	095a      	lsrs	r2, r3, #5
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	1aca      	subs	r2, r1, r3
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <main+0x31c>)
 80021f6:	fba3 2302 	umull	r2, r3, r3, r2
 80021fa:	08db      	lsrs	r3, r3, #3
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <main+0x300>)
 8002200:	715a      	strb	r2, [r3, #5]
	    tcWrite[5] |= (tcIN[2] & 0xF0);
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <main+0x320>)
 8002204:	789b      	ldrb	r3, [r3, #2]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800220c:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <main+0x300>)
 800220e:	795b      	ldrb	r3, [r3, #5]
 8002210:	b25a      	sxtb	r2, r3
 8002212:	b24b      	sxtb	r3, r1
 8002214:	4313      	orrs	r3, r2
 8002216:	b25b      	sxtb	r3, r3
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <main+0x300>)
 800221c:	715a      	strb	r2, [r3, #5]

	    tcWrite[6] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) % 10;
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <main+0x310>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <main+0x314>)
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	4611      	mov	r1, r2
 8002228:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <main+0x318>)
 800222a:	5c52      	ldrb	r2, [r2, r1]
 800222c:	4611      	mov	r1, r2
 800222e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002232:	fb02 f201 	mul.w	r2, r2, r1
 8002236:	fbb3 f1f2 	udiv	r1, r3, r2
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <main+0x31c>)
 800223c:	fba3 2301 	umull	r2, r3, r3, r1
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	1aca      	subs	r2, r1, r3
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <main+0x300>)
 8002250:	719a      	strb	r2, [r3, #6]
	    tcWrite[6] |= (tcIN[1] & 0xF0);
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <main+0x320>)
 8002254:	785b      	ldrb	r3, [r3, #1]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <main+0x300>)
 800225e:	799b      	ldrb	r3, [r3, #6]
 8002260:	b25a      	sxtb	r2, r3
 8002262:	b24b      	sxtb	r3, r1
 8002264:	4313      	orrs	r3, r2
 8002266:	b25b      	sxtb	r3, r3
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <main+0x300>)
 800226c:	719a      	strb	r2, [r3, #6]

	    tcWrite[7] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) / 10;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <main+0x310>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e019      	b.n	80022a8 <main+0x328>
 8002274:	40007400 	.word	0x40007400
 8002278:	48000400 	.word	0x48000400
 800227c:	200001dc 	.word	0x200001dc
 8002280:	20000614 	.word	0x20000614
 8002284:	200000a0 	.word	0x200000a0
 8002288:	200000a1 	.word	0x200000a1
 800228c:	20000090 	.word	0x20000090
 8002290:	20000600 	.word	0x20000600
 8002294:	2000008d 	.word	0x2000008d
 8002298:	2000002c 	.word	0x2000002c
 800229c:	cccccccd 	.word	0xcccccccd
 80022a0:	20000084 	.word	0x20000084
 80022a4:	88888889 	.word	0x88888889
 80022a8:	4a86      	ldr	r2, [pc, #536]	; (80024c4 <main+0x544>)
 80022aa:	7812      	ldrb	r2, [r2, #0]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4a86      	ldr	r2, [pc, #536]	; (80024c8 <main+0x548>)
 80022b0:	5c52      	ldrb	r2, [r2, r1]
 80022b2:	4611      	mov	r1, r2
 80022b4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022b8:	fb02 f201 	mul.w	r2, r2, r1
 80022bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c0:	4a82      	ldr	r2, [pc, #520]	; (80024cc <main+0x54c>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <main+0x550>)
 80022cc:	71da      	strb	r2, [r3, #7]
	    tcWrite[7] |= (tcIN[0] & 0xF0);
 80022ce:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <main+0x554>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80022d8:	4b7d      	ldr	r3, [pc, #500]	; (80024d0 <main+0x550>)
 80022da:	79db      	ldrb	r3, [r3, #7]
 80022dc:	b25a      	sxtb	r2, r3
 80022de:	b24b      	sxtb	r3, r1
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	4b7a      	ldr	r3, [pc, #488]	; (80024d0 <main+0x550>)
 80022e8:	71da      	strb	r2, [r3, #7]

	    hr = (clockFrameOutput / frameRateDivisor[frameRate]) / 3600;
 80022ea:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <main+0x558>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a75      	ldr	r2, [pc, #468]	; (80024c4 <main+0x544>)
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4a74      	ldr	r2, [pc, #464]	; (80024c8 <main+0x548>)
 80022f6:	5c52      	ldrb	r2, [r2, r1]
 80022f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80022fc:	4a77      	ldr	r2, [pc, #476]	; (80024dc <main+0x55c>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0adb      	lsrs	r3, r3, #11
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <main+0x560>)
 8002308:	701a      	strb	r2, [r3, #0]
		mn = ((clockFrameOutput / frameRateDivisor[frameRate]) / 60 ) % 60;
 800230a:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <main+0x558>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a6d      	ldr	r2, [pc, #436]	; (80024c4 <main+0x544>)
 8002310:	7812      	ldrb	r2, [r2, #0]
 8002312:	4611      	mov	r1, r2
 8002314:	4a6c      	ldr	r2, [pc, #432]	; (80024c8 <main+0x548>)
 8002316:	5c52      	ldrb	r2, [r2, r1]
 8002318:	fbb3 f3f2 	udiv	r3, r3, r2
 800231c:	4a71      	ldr	r2, [pc, #452]	; (80024e4 <main+0x564>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0959      	lsrs	r1, r3, #5
 8002324:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <main+0x564>)
 8002326:	fba3 2301 	umull	r2, r3, r3, r1
 800232a:	095a      	lsrs	r2, r3, #5
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	1aca      	subs	r2, r1, r3
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	4b6b      	ldr	r3, [pc, #428]	; (80024e8 <main+0x568>)
 800233a:	701a      	strb	r2, [r3, #0]
		sc = (clockFrameOutput / frameRateDivisor[frameRate]) % 60;
 800233c:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <main+0x558>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <main+0x544>)
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	4611      	mov	r1, r2
 8002346:	4a60      	ldr	r2, [pc, #384]	; (80024c8 <main+0x548>)
 8002348:	5c52      	ldrb	r2, [r2, r1]
 800234a:	fbb3 f1f2 	udiv	r1, r3, r2
 800234e:	4b65      	ldr	r3, [pc, #404]	; (80024e4 <main+0x564>)
 8002350:	fba3 2301 	umull	r2, r3, r3, r1
 8002354:	095a      	lsrs	r2, r3, #5
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	1aca      	subs	r2, r1, r3
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	4b62      	ldr	r3, [pc, #392]	; (80024ec <main+0x56c>)
 8002364:	701a      	strb	r2, [r3, #0]
		fr = clockFrameOutput % frameRateDivisor[frameRate];
 8002366:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <main+0x558>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <main+0x544>)
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	4611      	mov	r1, r2
 8002370:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <main+0x548>)
 8002372:	5c52      	ldrb	r2, [r2, r1]
 8002374:	fbb3 f1f2 	udiv	r1, r3, r2
 8002378:	fb02 f201 	mul.w	r2, r2, r1
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <main+0x570>)
 8002382:	701a      	strb	r2, [r3, #0]


	    	    int oneBits = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
	    for (int i=0; i<10; i++){
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b09      	cmp	r3, #9
 8002390:	dc1b      	bgt.n	80023ca <main+0x44a>
	    	for (int b=0; b<8; b++){
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b07      	cmp	r3, #7
 800239a:	dc12      	bgt.n	80023c2 <main+0x442>
	    		if (bitRead(tcWrite[i],b) == 1){
 800239c:	4a4c      	ldr	r2, [pc, #304]	; (80024d0 <main+0x550>)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	fa42 f303 	asr.w	r3, r2, r3
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <main+0x43a>
	    			oneBits++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
	    	for (int b=0; b<8; b++){
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3301      	adds	r3, #1
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	e7e9      	b.n	8002396 <main+0x416>
	    for (int i=0; i<10; i++){
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3301      	adds	r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	e7e0      	b.n	800238c <main+0x40c>
	    		}
	    	}
	    }
	    if (oneBits % 2 > 0){
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	bfb8      	it	lt
 80023d4:	425b      	neglt	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	dd07      	ble.n	80023ea <main+0x46a>
	    	((tcWrite[7]) |= (1UL << (3)));
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <main+0x550>)
 80023dc:	79db      	ldrb	r3, [r3, #7]
 80023de:	f043 0308 	orr.w	r3, r3, #8
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <main+0x550>)
 80023e6:	71da      	strb	r2, [r3, #7]
 80023e8:	e006      	b.n	80023f8 <main+0x478>
	    } else {
	    	((tcWrite[7]) &= ~(1UL << (3)));
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <main+0x550>)
 80023ec:	79db      	ldrb	r3, [r3, #7]
 80023ee:	f023 0308 	bic.w	r3, r3, #8
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <main+0x550>)
 80023f6:	71da      	strb	r2, [r3, #7]

	  setDigit(0,7,(clockFrame % frRDv[frameRate]) / 10,false);
	  setDigit(0,0,((clockFrame % frRDv[frameRate]) % 10),false);
	    }*/

	  if (clockFrame % frameRateDivisor[frameRate] == 0){
 80023f8:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <main+0x574>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <main+0x544>)
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	4611      	mov	r1, r2
 8002402:	4a31      	ldr	r2, [pc, #196]	; (80024c8 <main+0x548>)
 8002404:	5c52      	ldrb	r2, [r2, r1]
 8002406:	fbb3 f1f2 	udiv	r1, r3, r2
 800240a:	fb02 f201 	mul.w	r2, r2, r1
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <main+0x4ac>
		  (GPIOB->ODR) |= (1UL << (12));
 800241e:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <main+0x578>)
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4a35      	ldr	r2, [pc, #212]	; (80024f8 <main+0x578>)
 8002424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002428:	6153      	str	r3, [r2, #20]
 800242a:	e005      	b.n	8002438 <main+0x4b8>
	  } else {
			  (GPIOB->ODR) &= ~(1UL << (12));
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <main+0x578>)
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <main+0x578>)
 8002432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002436:	6153      	str	r3, [r2, #20]
	  }

//button handlers
if(GPIOC -> IDR & GPIO_PIN_13){	//Menu button
 8002438:	4b30      	ldr	r3, [pc, #192]	; (80024fc <main+0x57c>)
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f43f adce 	beq.w	8001fec <main+0x6c>
	    	uint32_t menuCount = HAL_GetTick();
 8002450:	f001 fcaa 	bl	8003da8 <HAL_GetTick>
 8002454:	6038      	str	r0, [r7, #0]
	    	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
	    	//if (!lock){
	    	while (GPIOC -> IDR & GPIO_PIN_13){
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <main+0x57c>)
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	f43f adbf 	beq.w	8001fec <main+0x6c>
	    		if (HAL_GetTick() - menuCount > 500){
 800246e:	f001 fc9b 	bl	8003da8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800247c:	bf8c      	ite	hi
 800247e:	2301      	movhi	r3, #1
 8002480:	2300      	movls	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d019      	beq.n	80024bc <main+0x53c>
	    			menuItem = 0;
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <main+0x580>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
	    			//inMenu = true;
	    			menuItemSelect = false;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <main+0x584>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
					//menuEnter = true;
					updateDisplay(d_menu);
 8002494:	2002      	movs	r0, #2
 8002496:	f7fe fa8f 	bl	80009b8 <_Z13updateDisplayh>
	    			menuLoop();
 800249a:	f7fe ffaf 	bl	80013fc <_Z8menuLoopv>
            while (GPIOC -> IDR & GPIO_PIN_13)
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <main+0x57c>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <main+0x53c>
              {updateDisplay(0x1);}//add in TC process?}
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe fa7f 	bl	80009b8 <_Z13updateDisplayh>
            while (GPIOC -> IDR & GPIO_PIN_13)
 80024ba:	e7f0      	b.n	800249e <main+0x51e>
					//menuEnter = false;

	    		}

	    			updateDisplay(0x01);
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fa7b 	bl	80009b8 <_Z13updateDisplayh>
	    	while (GPIOC -> IDR & GPIO_PIN_13){
 80024c2:	e7c8      	b.n	8002456 <main+0x4d6>
 80024c4:	2000008d 	.word	0x2000008d
 80024c8:	2000002c 	.word	0x2000002c
 80024cc:	cccccccd 	.word	0xcccccccd
 80024d0:	20000614 	.word	0x20000614
 80024d4:	20000084 	.word	0x20000084
 80024d8:	20000600 	.word	0x20000600
 80024dc:	91a2b3c5 	.word	0x91a2b3c5
 80024e0:	2000009c 	.word	0x2000009c
 80024e4:	88888889 	.word	0x88888889
 80024e8:	2000009d 	.word	0x2000009d
 80024ec:	2000009e 	.word	0x2000009e
 80024f0:	2000009f 	.word	0x2000009f
 80024f4:	20000090 	.word	0x20000090
 80024f8:	48000400 	.word	0x48000400
 80024fc:	48000800 	.word	0x48000800
 8002500:	200000c7 	.word	0x200000c7
 8002504:	200000c6 	.word	0x200000c6

08002508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0ae      	sub	sp, #184	; 0xb8
 800250c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800250e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002512:	2244      	movs	r2, #68	; 0x44
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f005 fd6a 	bl	8007ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800251c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800252c:	463b      	mov	r3, r7
 800252e:	2260      	movs	r2, #96	; 0x60
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f005 fd5c 	bl	8007ff0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002538:	2301      	movs	r3, #1
 800253a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800253c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002540:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002548:	2303      	movs	r3, #3
 800254a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 2;
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002554:	230a      	movs	r3, #10
 8002556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800255a:	2307      	movs	r3, #7
 800255c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002560:	2302      	movs	r3, #2
 8002562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002566:	2304      	movs	r3, #4
 8002568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800256c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002570:	4618      	mov	r0, r3
 8002572:	f003 fd0b 	bl	8005f8c <HAL_RCC_OscConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002586:	f000 fe5b 	bl	8003240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800258a:	230f      	movs	r3, #15
 800258c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800258e:	2303      	movs	r3, #3
 8002590:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800259a:	2300      	movs	r3, #0
 800259c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800259e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025a2:	2101      	movs	r1, #1
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 f911 	bl	80067cc <HAL_RCC_ClockConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80025ba:	f000 fe41 	bl	8003240 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80025be:	f246 03c0 	movw	r3, #24768	; 0x60c0
 80025c2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80025cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025d0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80025d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025d6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80025d8:	2303      	movs	r3, #3
 80025da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80025dc:	2302      	movs	r3, #2
 80025de:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 80025e0:	230a      	movs	r3, #10
 80025e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80025e4:	2307      	movs	r3, #7
 80025e6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80025f0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80025f4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f6:	463b      	mov	r3, r7
 80025f8:	4618      	mov	r0, r3
 80025fa:	f004 fae9 	bl	8006bd0 <HAL_RCCEx_PeriphCLKConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800260e:	f000 fe17 	bl	8003240 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002618:	2000      	movs	r0, #0
 800261a:	f004 f9b9 	bl	8006990 <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800261e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002622:	f003 fc5d 	bl	8005ee0 <HAL_PWREx_ControlVoltageScaling>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <SystemClock_Config+0x132>
  {
    Error_Handler();
 8002636:	f000 fe03 	bl	8003240 <Error_Handler>
  }
}
 800263a:	bf00      	nop
 800263c:	37b8      	adds	r7, #184	; 0xb8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800264a:	463b      	mov	r3, r7
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
 8002658:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 800265c:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <_ZL12MX_ADC1_Initv+0xd4>)
 800265e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002660:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002666:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800266c:	4b29      	ldr	r3, [pc, #164]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002672:	4b28      	ldr	r3, [pc, #160]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 800267a:	2204      	movs	r2, #4
 800267c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 8002680:	2200      	movs	r2, #0
 8002682:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 8002686:	2200      	movs	r2, #0
 8002688:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 800268c:	2201      	movs	r2, #1
 800268e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026ba:	4816      	ldr	r0, [pc, #88]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 80026bc:	f001 fd30 	bl	8004120 <HAL_ADC_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	bf14      	ite	ne
 80026c6:	2301      	movne	r3, #1
 80026c8:	2300      	moveq	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 80026d0:	f000 fdb6 	bl	8003240 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <_ZL12MX_ADC1_Initv+0xd8>)
 80026d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026d8:	2306      	movs	r3, #6
 80026da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026e0:	237f      	movs	r3, #127	; 0x7f
 80026e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026e4:	2304      	movs	r3, #4
 80026e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	4619      	mov	r1, r3
 80026f0:	4808      	ldr	r0, [pc, #32]	; (8002714 <_ZL12MX_ADC1_Initv+0xd0>)
 80026f2:	f001 fe5b 	bl	80043ac <HAL_ADC_ConfigChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf14      	ite	ne
 80026fc:	2301      	movne	r3, #1
 80026fe:	2300      	moveq	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8002706:	f000 fd9b 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200000cc 	.word	0x200000cc
 8002718:	50040000 	.word	0x50040000
 800271c:	21800100 	.word	0x21800100

08002720 <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2224      	movs	r2, #36	; 0x24
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f005 fc5f 	bl	8007ff0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <_ZL12MX_DAC1_Initv+0x70>)
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <_ZL12MX_DAC1_Initv+0x74>)
 8002736:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002738:	4815      	ldr	r0, [pc, #84]	; (8002790 <_ZL12MX_DAC1_Initv+0x70>)
 800273a:	f002 fb26 	bl	8004d8a <HAL_DAC_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 800274e:	f000 fd77 	bl	8003240 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2210      	movs	r2, #16
 800276a:	4619      	mov	r1, r3
 800276c:	4808      	ldr	r0, [pc, #32]	; (8002790 <_ZL12MX_DAC1_Initv+0x70>)
 800276e:	f002 fb92 	bl	8004e96 <HAL_DAC_ConfigChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 8002782:	f000 fd5d 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	3728      	adds	r7, #40	; 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000130 	.word	0x20000130
 8002794:	40007400 	.word	0x40007400

08002798 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800279c:	4b22      	ldr	r3, [pc, #136]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 800279e:	4a23      	ldr	r2, [pc, #140]	; (800282c <_ZL12MX_I2C1_Initv+0x94>)
 80027a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <_ZL12MX_I2C1_Initv+0x98>)
 80027a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027a8:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ae:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b4:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027d2:	4815      	ldr	r0, [pc, #84]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027d4:	f002 fe16 	bl	8005404 <HAL_I2C_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf14      	ite	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	2300      	moveq	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80027e8:	f000 fd2a 	bl	8003240 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027ec:	2100      	movs	r1, #0
 80027ee:	480e      	ldr	r0, [pc, #56]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 80027f0:	f003 f974 	bl	8005adc <HAL_I2CEx_ConfigAnalogFilter>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002804:	f000 fd1c 	bl	8003240 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002808:	2100      	movs	r1, #0
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <_ZL12MX_I2C1_Initv+0x90>)
 800280c:	f003 f9b1 	bl	8005b72 <HAL_I2CEx_ConfigDigitalFilter>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002820:	f000 fd0e 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000144 	.word	0x20000144
 800282c:	40005400 	.word	0x40005400
 8002830:	00506682 	.word	0x00506682

08002834 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 800283a:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <_ZL12MX_I2C2_Initv+0x9c>)
 800283c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010030D;
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 8002840:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <_ZL12MX_I2C2_Initv+0xa0>)
 8002842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 800284c:	2201      	movs	r2, #1
 800284e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002862:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 8002864:	2200      	movs	r2, #0
 8002866:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800286e:	4817      	ldr	r0, [pc, #92]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 8002870:	f002 fdc8 	bl	8005404 <HAL_I2C_Init>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8002884:	f000 fcdc 	bl	8003240 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002888:	2100      	movs	r1, #0
 800288a:	4810      	ldr	r0, [pc, #64]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 800288c:	f003 f926 	bl	8005adc <HAL_I2CEx_ConfigAnalogFilter>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf14      	ite	ne
 8002896:	2301      	movne	r3, #1
 8002898:	2300      	moveq	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 80028a0:	f000 fcce 	bl	8003240 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80028a4:	2100      	movs	r1, #0
 80028a6:	4809      	ldr	r0, [pc, #36]	; (80028cc <_ZL12MX_I2C2_Initv+0x98>)
 80028a8:	f003 f963 	bl	8005b72 <HAL_I2CEx_ConfigDigitalFilter>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 80028bc:	f000 fcc0 	bl	8003240 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 80028c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80028c4:	f003 f9a2 	bl	8005c0c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000190 	.word	0x20000190
 80028d0:	40005800 	.word	0x40005800
 80028d4:	0010030d 	.word	0x0010030d

080028d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 80028f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24-1;
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 8002900:	2217      	movs	r2, #23
 8002902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 800290c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002910:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002918:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800291e:	481e      	ldr	r0, [pc, #120]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 8002920:	f004 fd69 	bl	80073f6 <HAL_TIM_IC_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002934:	f000 fc84 	bl	8003240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4619      	mov	r1, r3
 8002946:	4814      	ldr	r0, [pc, #80]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 8002948:	f005 fa3a 	bl	8007dc0 <HAL_TIMEx_MasterConfigSynchronization>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800295c:	f000 fc70 	bl	8003240 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002960:	230a      	movs	r3, #10
 8002962:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002964:	2301      	movs	r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	2208      	movs	r2, #8
 8002974:	4619      	mov	r1, r3
 8002976:	4808      	ldr	r0, [pc, #32]	; (8002998 <_ZL12MX_TIM2_Initv+0xc0>)
 8002978:	f004 ffd9 	bl	800792e <HAL_TIM_IC_ConfigChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf14      	ite	ne
 8002982:	2301      	movne	r3, #1
 8002984:	2300      	moveq	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 800298c:	f000 fc58 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200001dc 	.word	0x200001dc

0800299c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <_ZL12MX_TIM6_Initv+0x78>)
 80029ae:	4a1a      	ldr	r2, [pc, #104]	; (8002a18 <_ZL12MX_TIM6_Initv+0x7c>)
 80029b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 80029b2:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <_ZL12MX_TIM6_Initv+0x78>)
 80029b4:	2217      	movs	r2, #23
 80029b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <_ZL12MX_TIM6_Initv+0x78>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <_ZL12MX_TIM6_Initv+0x78>)
 80029c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <_ZL12MX_TIM6_Initv+0x78>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029cc:	4811      	ldr	r0, [pc, #68]	; (8002a14 <_ZL12MX_TIM6_Initv+0x78>)
 80029ce:	f004 fc37 	bl	8007240 <HAL_TIM_Base_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf14      	ite	ne
 80029d8:	2301      	movne	r3, #1
 80029da:	2300      	moveq	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80029e2:	f000 fc2d 	bl	8003240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	4619      	mov	r1, r3
 80029f2:	4808      	ldr	r0, [pc, #32]	; (8002a14 <_ZL12MX_TIM6_Initv+0x78>)
 80029f4:	f005 f9e4 	bl	8007dc0 <HAL_TIMEx_MasterConfigSynchronization>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf14      	ite	ne
 80029fe:	2301      	movne	r3, #1
 8002a00:	2300      	moveq	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8002a08:	f000 fc1a 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000228 	.word	0x20000228
 8002a18:	40001000 	.word	0x40001000

08002a1c <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <_ZL12MX_TIM7_Initv+0x78>)
 8002a2e:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <_ZL12MX_TIM7_Initv+0x7c>)
 8002a30:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <_ZL12MX_TIM7_Initv+0x78>)
 8002a34:	2213      	movs	r2, #19
 8002a36:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <_ZL12MX_TIM7_Initv+0x78>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50049;
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_ZL12MX_TIM7_Initv+0x78>)
 8002a40:	f24c 3281 	movw	r2, #50049	; 0xc381
 8002a44:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <_ZL12MX_TIM7_Initv+0x78>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a4c:	4811      	ldr	r0, [pc, #68]	; (8002a94 <_ZL12MX_TIM7_Initv+0x78>)
 8002a4e:	f004 fbf7 	bl	8007240 <HAL_TIM_Base_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf14      	ite	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	2300      	moveq	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 8002a62:	f000 fbed 	bl	8003240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4808      	ldr	r0, [pc, #32]	; (8002a94 <_ZL12MX_TIM7_Initv+0x78>)
 8002a74:	f005 f9a4 	bl	8007dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8002a88:	f000 fbda 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000274 	.word	0x20000274
 8002a98:	40001400 	.word	0x40001400

08002a9c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <_ZL13MX_TIM16_Initv+0x50>)
 8002aa2:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <_ZL13MX_TIM16_Initv+0x54>)
 8002aa4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <_ZL13MX_TIM16_Initv+0x50>)
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <_ZL13MX_TIM16_Initv+0x50>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3128-1;
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <_ZL13MX_TIM16_Initv+0x50>)
 8002ab4:	f640 4237 	movw	r2, #3127	; 0xc37
 8002ab8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <_ZL13MX_TIM16_Initv+0x50>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <_ZL13MX_TIM16_Initv+0x50>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <_ZL13MX_TIM16_Initv+0x50>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002acc:	4807      	ldr	r0, [pc, #28]	; (8002aec <_ZL13MX_TIM16_Initv+0x50>)
 8002ace:	f004 fbb7 	bl	8007240 <HAL_TIM_Base_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8002ae2:	f000 fbad 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200002c0 	.word	0x200002c0
 8002af0:	40014400 	.word	0x40014400

08002af4 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <_ZL15MX_USB_PCD_Initv+0x58>)
 8002afc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002b00:	2208      	movs	r2, #8
 8002b02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002b28:	4807      	ldr	r0, [pc, #28]	; (8002b48 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002b2a:	f003 f88f 	bl	8005c4c <HAL_PCD_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8002b3e:	f000 fb7f 	bl	8003240 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2000030c 	.word	0x2000030c
 8002b4c:	40006800 	.word	0x40006800

08002b50 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	4a3a      	ldr	r2, [pc, #232]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b8a:	4b38      	ldr	r3, [pc, #224]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	4a2e      	ldr	r2, [pc, #184]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <_ZL12MX_GPIO_Initv+0x11c>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f241 0102 	movw	r1, #4098	; 0x1002
 8002bcc:	4828      	ldr	r0, [pc, #160]	; (8002c70 <_ZL12MX_GPIO_Initv+0x120>)
 8002bce:	f002 fc01 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	4823      	ldr	r0, [pc, #140]	; (8002c74 <_ZL12MX_GPIO_Initv+0x124>)
 8002be8:	f002 fa7a 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = TC_OUT_Pin|LED_STATUS_Pin;
 8002bec:	f241 0302 	movw	r3, #4098	; 0x1002
 8002bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4619      	mov	r1, r3
 8002c04:	481a      	ldr	r0, [pc, #104]	; (8002c70 <_ZL12MX_GPIO_Initv+0x120>)
 8002c06:	f002 fa6b 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC_Pin */
  GPIO_InitStruct.Pin = OSC_Pin;
 8002c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OSC_GPIO_Port, &GPIO_InitStruct);
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2a:	f002 fa59 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin;
 8002c2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c46:	f002 fa4b 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_B_Pin;
 8002c4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4804      	ldr	r0, [pc, #16]	; (8002c70 <_ZL12MX_GPIO_Initv+0x120>)
 8002c60:	f002 fa3e 	bl	80050e0 <HAL_GPIO_Init>

}
 8002c64:	bf00      	nop
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	48000400 	.word	0x48000400
 8002c74:	48000800 	.word	0x48000800

08002c78 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    //if ( GPIO_Pin == GPIO_PIN_8)
	if (htim->Instance == TIM2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	f040 80f4 	bne.w	8002e74 <HAL_TIM_IC_CaptureCallback+0x1fc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c8c:	b672      	cpsid	i
}
 8002c8e:	bf00      	nop
		__disable_irq();
/* 
    Credit for this loop to read out the timecode:
    https://forum.arduino.cc/t/smpte-jam-sync/529740/4
*/
    	edgeTimeDiff = __HAL_TIM_GetCounter(htim);          // Get time difference between this and last edge
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	4a7a      	ldr	r2, [pc, #488]	; (8002e80 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002c98:	6013      	str	r3, [r2, #0]

    	__HAL_TIM_SetCounter(htim,0);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
    	                                    // Store time of this edge



    	  if ((edgeTimeDiff < uMin1) or (edgeTimeDiff > uMax0)) { // Drop out now if edge time not withing bounds
 8002ca2:	4b77      	ldr	r3, [pc, #476]	; (8002e80 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b81      	cmp	r3, #129	; 0x81
 8002ca8:	d904      	bls.n	8002cb4 <HAL_TIM_IC_CaptureCallback+0x3c>
 8002caa:	4b75      	ldr	r3, [pc, #468]	; (8002e80 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
 8002cb2:	d301      	bcc.n	8002cb8 <HAL_TIM_IC_CaptureCallback+0x40>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_TIM_IC_CaptureCallback+0x42>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <HAL_TIM_IC_CaptureCallback+0x62>
    	    bitSet(tcFlags, tcFrameError);
 8002cbe:	4b71      	ldr	r3, [pc, #452]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4b6e      	ldr	r3, [pc, #440]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002ccc:	701a      	strb	r2, [r3, #0]
    	    jamCount = 0;
 8002cce:	4b6e      	ldr	r3, [pc, #440]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd4:	b662      	cpsie	i
}
 8002cd6:	bf00      	nop
    	    __enable_irq();
    	    //Offset++;
    	    return;
 8002cd8:	e0ce      	b.n	8002e78 <HAL_TIM_IC_CaptureCallback+0x200>
    	  }

    	  if (edgeTimeDiff > uMax1)                               // A zero bit arrived
 8002cda:	4b69      	ldr	r3, [pc, #420]	; (8002e80 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002ce2:	bf8c      	ite	hi
 8002ce4:	2301      	movhi	r3, #1
 8002ce6:	2300      	movls	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IC_CaptureCallback+0xb8>
    	  {
    	    if (bitRead(tcFlags, tcHalfOne) == 1){                // But we are expecting a 1 edge
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	111b      	asrs	r3, r3, #4
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_IC_CaptureCallback+0xae>
    	      bitClear(tcFlags, tcHalfOne);
 8002d08:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f023 0310 	bic.w	r3, r3, #16
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002d16:	701a      	strb	r2, [r3, #0]
    	      clearBuffer(tc, sizeof(tc)); //TODO WHAT DOES?
 8002d18:	210a      	movs	r1, #10
 8002d1a:	485c      	ldr	r0, [pc, #368]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x214>)
 8002d1c:	f000 f8be 	bl	8002e9c <_Z11clearBufferPhh>
  __ASM volatile ("cpsie i" : : : "memory");
 8002d20:	b662      	cpsie	i
}
 8002d22:	bf00      	nop
    	      __enable_irq();
    	      return;
 8002d24:	e0a8      	b.n	8002e78 <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // 0 bit
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 8002d26:	210a      	movs	r1, #10
 8002d28:	4858      	ldr	r0, [pc, #352]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x214>)
 8002d2a:	f000 f8d3 	bl	8002ed4 <_Z10shiftRightPhh>
 8002d2e:	e029      	b.n	8002d84 <HAL_TIM_IC_CaptureCallback+0x10c>
    	    // Shift replaces top bit with zero so nothing else to do
    	    //bitClear(tc[0], 7);                                   // Reset the 1 bit in the buffer
    	  }
    	  else                                                    // Not zero so must be a 1 bit
    	  { // 1 bit
    	    if (bitRead(tcFlags, tcHalfOne) == 0){                // First edge of a 1 bit
 8002d30:	4b54      	ldr	r3, [pc, #336]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf0c      	ite	eq
 8002d3e:	2301      	moveq	r3, #1
 8002d40:	2300      	movne	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_TIM_IC_CaptureCallback+0xe6>
    	      bitSet(tcFlags, tcHalfOne);                         // Flag we have the first half
 8002d48:	4b4e      	ldr	r3, [pc, #312]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	4b4b      	ldr	r3, [pc, #300]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002d56:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d58:	b662      	cpsie	i
}
 8002d5a:	bf00      	nop
    	      __enable_irq();
    	      return;
 8002d5c:	e08c      	b.n	8002e78 <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // Second edge of a 1 bit
    	    bitClear(tcFlags, tcHalfOne);                         // Clear half 1 flag
 8002d5e:	4b49      	ldr	r3, [pc, #292]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f023 0310 	bic.w	r3, r3, #16
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002d6c:	701a      	strb	r2, [r3, #0]
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 8002d6e:	210a      	movs	r1, #10
 8002d70:	4846      	ldr	r0, [pc, #280]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x214>)
 8002d72:	f000 f8af 	bl	8002ed4 <_Z10shiftRightPhh>
    	    bitSet(tc[0], 7);                                     // Set the 1 bit in the buffer
 8002d76:	4b45      	ldr	r3, [pc, #276]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x214>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	4b42      	ldr	r3, [pc, #264]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x214>)
 8002d82:	701a      	strb	r2, [r3, #0]
    	  }
    	  // Congratulations, we have managed to read a valid 0 or 1 bit into buffer
    	  if (uint16_t( (tc[0] << 8) | (tc[1] & 0xff) ) == sync){                        // Last 2 bytes read = sync?
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x214>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x214>)
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b21b      	sxth	r3, r3
 8002d96:	4a3e      	ldr	r2, [pc, #248]	; (8002e90 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d16b      	bne.n	8002e74 <HAL_TIM_IC_CaptureCallback+0x1fc>
    	    bitClear(tcFlags, tcFrameError);                      // Clear framing error
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f023 0302 	bic.w	r3, r3, #2
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002daa:	701a      	strb	r2, [r3, #0]
    	    bitClear(tcFlags, tcOverrun);                         // Clear overrun error
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002dba:	701a      	strb	r2, [r3, #0]
    	    if (bitRead(tcFlags, tcForceUpdate) == 1){
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	10db      	asrs	r3, r3, #3
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_TIM_IC_CaptureCallback+0x16e>
    	      bitClear(tcFlags, tcValid);                         // Signal last TC read
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002de4:	701a      	strb	r2, [r3, #0]
    	    }
    	    if (bitRead(tcFlags, tcValid) == 1){                  // Last TC not read
 8002de6:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_TIM_IC_CaptureCallback+0x196>
    	      bitSet(tcFlags, tcOverrun);                         // Flag overrun error
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002e0c:	701a      	strb	r2, [r3, #0]
    	     // __enable_irq();
    	     // return;                                             // Do nothing else
    	    }
    	    //if (jamEnable){
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b07      	cmp	r3, #7
 8002e16:	d80a      	bhi.n	8002e2e <HAL_TIM_IC_CaptureCallback+0x1b6>
    	    		tcIN[x] = tc[x + 2];
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	491b      	ldr	r1, [pc, #108]	; (8002e8c <HAL_TIM_IC_CaptureCallback+0x214>)
 8002e20:	5c89      	ldrb	r1, [r1, r2]
 8002e22:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002e24:	54d1      	strb	r1, [r2, r3]
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	e7f1      	b.n	8002e12 <HAL_TIM_IC_CaptureCallback+0x19a>
    	    	}
    	    //}
    	    bitSet(tcFlags, tcValid);                             // Signal valid TC
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002e3c:	701a      	strb	r2, [r3, #0]
    	    jamCount++;
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002e4a:	701a      	strb	r2, [r3, #0]
    	    if (jamCount > 23){
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b17      	cmp	r3, #23
 8002e54:	bf8c      	ite	hi
 8002e56:	2301      	movhi	r3, #1
 8002e58:	2300      	movls	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <HAL_TIM_IC_CaptureCallback+0x1f8>
    	    	//jamEnable = false;
    	    	jamCount = 0;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
    	    	tcJammed = true;
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
initTimecode();
 8002e6c:	f7fe feea 	bl	8001c44 <_Z12initTimecodev>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e70:	b662      	cpsie	i
}
 8002e72:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002e74:	b662      	cpsie	i
}
 8002e76:	bf00      	nop
    	    //}
    	  }

    }
	__enable_irq();
}
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000610 	.word	0x20000610
 8002e84:	2000060f 	.word	0x2000060f
 8002e88:	2000060e 	.word	0x2000060e
 8002e8c:	20000604 	.word	0x20000604
 8002e90:	ffffbffc 	.word	0xffffbffc
 8002e94:	20000084 	.word	0x20000084
 8002e98:	2000008c 	.word	0x2000008c

08002e9c <_Z11clearBufferPhh>:

void clearBuffer(uint8_t theArray[], uint8_t theArraySize){
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]
 8002eac:	7bfa      	ldrb	r2, [r7, #15]
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	da08      	bge.n	8002ec8 <_Z11clearBufferPhh+0x2c>
    theArray[x] = 0;
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
 8002ec6:	e7f1      	b.n	8002eac <_Z11clearBufferPhh+0x10>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <_Z10shiftRightPhh>:

void shiftRight(uint8_t theArray[], uint8_t theArraySize){
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  uint8_t x;
  for (x = theArraySize; x > 0; x--){
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d024      	beq.n	8002f34 <_Z10shiftRightPhh+0x60>
    uint8_t xBit = bitRead(theArray[x - 1], 0);
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	73bb      	strb	r3, [r7, #14]
    theArray[x] = theArray[x] >> 1;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	1059      	asrs	r1, r3, #1
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	b2ca      	uxtb	r2, r1
 8002f0c:	701a      	strb	r2, [r3, #0]
    theArray[x] = theArray[x] | (xBit << 7);
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b25a      	sxtb	r2, r3
 8002f18:	7bbb      	ldrb	r3, [r7, #14]
 8002f1a:	01db      	lsls	r3, r3, #7
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	b259      	sxtb	r1, r3
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	b2ca      	uxtb	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
  for (x = theArraySize; x > 0; x--){
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
 8002f32:	e7d7      	b.n	8002ee4 <_Z10shiftRightPhh+0x10>
  }
  theArray[x] = theArray[x] >> 1;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	1059      	asrs	r1, r3, #1
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	b2ca      	uxtb	r2, r1
 8002f46:	701a      	strb	r2, [r3, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
			  }
		  }
		ledCount++;
	}*/
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4aa0      	ldr	r2, [pc, #640]	; (80031e0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	f040 80bf 	bne.w	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
  {
	  switch (writeState){
 8002f66:	4b9f      	ldr	r3, [pc, #636]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b07      	cmp	r3, #7
 8002f6c:	f200 80ba 	bhi.w	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f99 	.word	0x08002f99
 8002f7c:	08003047 	.word	0x08003047
 8002f80:	08003081 	.word	0x08003081
 8002f84:	08003089 	.word	0x08003089
 8002f88:	08003091 	.word	0x08003091
 8002f8c:	08003099 	.word	0x08003099
 8002f90:	080030a1 	.word	0x080030a1
 8002f94:	080030db 	.word	0x080030db
	  case 0x00:

		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8002f98:	4b93      	ldr	r3, [pc, #588]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_TIM_PeriodElapsedCallback+0x6a>
			  (GPIOB->ODR) &= ~(1UL << (1));
 8002fb0:	4b8d      	ldr	r3, [pc, #564]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	4a8c      	ldr	r2, [pc, #560]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002fb6:	f023 0302 	bic.w	r3, r3, #2
 8002fba:	6153      	str	r3, [r2, #20]
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_PeriodElapsedCallback+0x76>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 8002fbe:	4b8a      	ldr	r3, [pc, #552]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4a89      	ldr	r2, [pc, #548]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6153      	str	r3, [r2, #20]
		  }

		  if (((tcWriteBuf[byteNumber] >> bitNumber) & 0x01) == 1){
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a88      	ldr	r2, [pc, #544]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002fd0:	5cd3      	ldrb	r3, [r2, r3]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b87      	ldr	r3, [pc, #540]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	fa42 f303 	asr.w	r3, r2, r3
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_TIM_PeriodElapsedCallback+0x98>
			  writeState = 0x01;
 8002fe4:	4b7f      	ldr	r3, [pc, #508]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e002      	b.n	8002ff2 <HAL_TIM_PeriodElapsedCallback+0x9e>
		  } else {
			  writeState = 0x02;
 8002fec:	4b7d      	ldr	r3, [pc, #500]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002fee:	2202      	movs	r2, #2
 8002ff0:	701a      	strb	r2, [r3, #0]
		  }
		  bitNumber++;
 8002ff2:	4b80      	ldr	r3, [pc, #512]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	4a7e      	ldr	r2, [pc, #504]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ffa:	6013      	str	r3, [r2, #0]
		  if (bitNumber == 8){
 8002ffc:	4b7d      	ldr	r3, [pc, #500]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d16e      	bne.n	80030e2 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  bitNumber = 0;
 8003004:	4b7b      	ldr	r3, [pc, #492]	; (80031f4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
			  byteNumber++;
 800300a:	4b78      	ldr	r3, [pc, #480]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	4a76      	ldr	r2, [pc, #472]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003012:	6013      	str	r3, [r2, #0]
			  if (byteNumber == 10){
 8003014:	4b75      	ldr	r3, [pc, #468]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b0a      	cmp	r3, #10
 800301a:	d162      	bne.n	80030e2 <HAL_TIM_PeriodElapsedCallback+0x18e>
				  byteNumber = 0;
 800301c:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x298>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

				  for (int i=0; i<10; i++){
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b09      	cmp	r3, #9
 800302a:	dc5a      	bgt.n	80030e2 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  tcWriteBuf[i] = tcWrite[i];
 800302c:	4a72      	ldr	r2, [pc, #456]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4413      	add	r3, r2
 8003032:	7819      	ldrb	r1, [r3, #0]
 8003034:	4a6e      	ldr	r2, [pc, #440]	; (80031f0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4413      	add	r3, r2
 800303a:	460a      	mov	r2, r1
 800303c:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<10; i++){
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3301      	adds	r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	e7ef      	b.n	8003026 <HAL_TIM_PeriodElapsedCallback+0xd2>
			  }
		  }
		  break;

	  case 0x01:
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8003046:	4b68      	ldr	r3, [pc, #416]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <HAL_TIM_PeriodElapsedCallback+0x118>
			  (GPIOB->ODR) &= ~(1UL << (1));
 800305e:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4a61      	ldr	r2, [pc, #388]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003064:	f023 0302 	bic.w	r3, r3, #2
 8003068:	6153      	str	r3, [r2, #20]
 800306a:	e005      	b.n	8003078 <HAL_TIM_PeriodElapsedCallback+0x124>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 800306c:	4b5e      	ldr	r3, [pc, #376]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	4a5d      	ldr	r2, [pc, #372]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003072:	f043 0302 	orr.w	r3, r3, #2
 8003076:	6153      	str	r3, [r2, #20]
		  }
		  writeState = 0x00;
 8003078:	4b5a      	ldr	r3, [pc, #360]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
		  break;
 800307e:	e031      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x02:
		  writeState = 0x00;
 8003080:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
		  break;
 8003086:	e02d      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x03:
		  writeState = 0x04;
 8003088:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800308a:	2204      	movs	r2, #4
 800308c:	701a      	strb	r2, [r3, #0]
		  break;
 800308e:	e029      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x04:
		  writeState = 0x01;
 8003090:	4b54      	ldr	r3, [pc, #336]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
		  break;
 8003096:	e025      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x05:
		  writeState = 0x06;
 8003098:	4b52      	ldr	r3, [pc, #328]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800309a:	2206      	movs	r2, #6
 800309c:	701a      	strb	r2, [r3, #0]

		  break;
 800309e:	e021      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x06:
		  writeState = 0x07;
 80030a0:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80030a2:	2207      	movs	r2, #7
 80030a4:	701a      	strb	r2, [r3, #0]
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 80030a6:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <HAL_TIM_PeriodElapsedCallback+0x178>
			  (GPIOB->ODR) &= ~(1UL << (1));
 80030be:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4a49      	ldr	r2, [pc, #292]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80030c4:	f023 0302 	bic.w	r3, r3, #2
 80030c8:	6153      	str	r3, [r2, #20]
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
		  }
		  break;
 80030ca:	e00b      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
			  (GPIOB->ODR) |= (1UL << (1));
 80030cc:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	4a45      	ldr	r2, [pc, #276]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	6153      	str	r3, [r2, #20]
		  break;
 80030d8:	e004      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x07:
		  writeState = 0x01;
 80030da:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
		  break;
 80030e0:	e000      	b.n	80030e4 <HAL_TIM_PeriodElapsedCallback+0x190>
		  break;
 80030e2:	bf00      	nop
	  }

  }
  if (htim == &htim7){  //Triggers once per frame
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a45      	ldr	r2, [pc, #276]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	f040 80a0 	bne.w	800322e <HAL_TIM_PeriodElapsedCallback+0x2da>
  __ASM volatile ("cpsid i" : : : "memory");
 80030ee:	b672      	cpsid	i
}
 80030f0:	bf00      	nop
	  __disable_irq();
	  clockFrame++;
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	4a41      	ldr	r2, [pc, #260]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80030fa:	6013      	str	r3, [r2, #0]
	  if (compensate){    //If coming back from compensation
 80030fc:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d017      	beq.n	8003136 <HAL_TIM_PeriodElapsedCallback+0x1e2>
		  //reset to proper ARR
		  __HAL_TIM_SET_AUTORELOAD(&htim7,frameRateARR[frameRate]);
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	4b3f      	ldr	r3, [pc, #252]	; (800320c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800310e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003112:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
 8003118:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003120:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003124:	461a      	mov	r2, r3
 8003126:	4b35      	ldr	r3, [pc, #212]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003128:	60da      	str	r2, [r3, #12]
		  //TIM7->ARR = 50049;
		  compensate = false;
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
		  compensationCounter = 0;
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003132:	2200      	movs	r2, #0
 8003134:	801a      	strh	r2, [r3, #0]
	  }
    //If it's time to compensate
	  if (compensationCounter == calibrationInterval[frameRate]){
 8003136:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	4b32      	ldr	r3, [pc, #200]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	4b33      	ldr	r3, [pc, #204]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003146:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800314a:	429a      	cmp	r2, r3
 800314c:	bf0c      	ite	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	2300      	movne	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d024      	beq.n	80031a2 <HAL_TIM_PeriodElapsedCallback+0x24e>
		  __HAL_TIM_SET_AUTORELOAD(&htim7, (frameRateARR[frameRate] + calibrationArray[frameRate]));
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003160:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003164:	461a      	mov	r2, r3
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800316e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003172:	441a      	add	r2, r3
 8003174:	4b21      	ldr	r3, [pc, #132]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
 800317a:	4b23      	ldr	r3, [pc, #140]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003182:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003186:	461a      	mov	r2, r3
 8003188:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003190:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003194:	4413      	add	r3, r2
 8003196:	461a      	mov	r2, r3
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800319a:	60da      	str	r2, [r3, #12]
		  compensate = true;
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]

	  }
compensationCounter++;
 80031a2:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80031ae:	801a      	strh	r2, [r3, #0]

    //Remove this blinky bit. Put in the main loop
	  if (clockFrame % frameRateDivisor[frameRate] == 0){
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	4611      	mov	r1, r2
 80031ba:	4a18      	ldr	r2, [pc, #96]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80031bc:	5c52      	ldrb	r2, [r2, r1]
 80031be:	fbb3 f1f2 	udiv	r1, r3, r2
 80031c2:	fb02 f201 	mul.w	r2, r2, r1
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d026      	beq.n	8003224 <HAL_TIM_PeriodElapsedCallback+0x2d0>
		  blink = true;
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	e025      	b.n	800322a <HAL_TIM_PeriodElapsedCallback+0x2d6>
 80031de:	bf00      	nop
 80031e0:	200002c0 	.word	0x200002c0
 80031e4:	2000062a 	.word	0x2000062a
 80031e8:	48000400 	.word	0x48000400
 80031ec:	2000062c 	.word	0x2000062c
 80031f0:	20000620 	.word	0x20000620
 80031f4:	20000630 	.word	0x20000630
 80031f8:	20000614 	.word	0x20000614
 80031fc:	20000274 	.word	0x20000274
 8003200:	20000090 	.word	0x20000090
 8003204:	20000638 	.word	0x20000638
 8003208:	2000008d 	.word	0x2000008d
 800320c:	20000034 	.word	0x20000034
 8003210:	20000636 	.word	0x20000636
 8003214:	20000014 	.word	0x20000014
 8003218:	200000a4 	.word	0x200000a4
 800321c:	2000002c 	.word	0x2000002c
 8003220:	20000634 	.word	0x20000634
	  } else {
			  blink = false;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800322a:	b662      	cpsie	i
}
 800322c:	bf00      	nop
	  }

	  __enable_irq();
  }
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000634 	.word	0x20000634

08003240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003244:	b672      	cpsid	i
}
 8003246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003248:	e7fe      	b.n	8003248 <Error_Handler+0x8>

0800324a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af04      	add	r7, sp, #16
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003256:	230a      	movs	r3, #10
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	2301      	movs	r3, #1
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	1cfb      	adds	r3, r7, #3
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2301      	movs	r3, #1
 8003264:	2200      	movs	r2, #0
 8003266:	2178      	movs	r1, #120	; 0x78
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f002 f95b 	bl	8005524 <HAL_I2C_Mem_Write>
 800326e:	4603      	mov	r3, r0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8003280:	2064      	movs	r0, #100	; 0x64
 8003282:	f000 fd9d 	bl	8003dc0 <HAL_Delay>
    int status = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800328a:	21ae      	movs	r1, #174	; 0xae
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ffdc 	bl	800324a <ssd1306_WriteCommand>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800329c:	2120      	movs	r1, #32
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffd3 	bl	800324a <ssd1306_WriteCommand>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80032ae:	2110      	movs	r1, #16
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ffca 	bl	800324a <ssd1306_WriteCommand>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80032c0:	21b0      	movs	r1, #176	; 0xb0
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffc1 	bl	800324a <ssd1306_WriteCommand>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80032d2:	21c8      	movs	r1, #200	; 0xc8
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ffb8 	bl	800324a <ssd1306_WriteCommand>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80032e4:	2100      	movs	r1, #0
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ffaf 	bl	800324a <ssd1306_WriteCommand>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80032f6:	2110      	movs	r1, #16
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ffa6 	bl	800324a <ssd1306_WriteCommand>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8003308:	2140      	movs	r1, #64	; 0x40
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff9d 	bl	800324a <ssd1306_WriteCommand>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800331a:	2181      	movs	r1, #129	; 0x81
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff94 	bl	800324a <ssd1306_WriteCommand>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800332c:	21ff      	movs	r1, #255	; 0xff
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ff8b 	bl	800324a <ssd1306_WriteCommand>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800333e:	21a1      	movs	r1, #161	; 0xa1
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff82 	bl	800324a <ssd1306_WriteCommand>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8003350:	21a6      	movs	r1, #166	; 0xa6
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ff79 	bl	800324a <ssd1306_WriteCommand>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8003362:	21a8      	movs	r1, #168	; 0xa8
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff70 	bl	800324a <ssd1306_WriteCommand>
 800336a:	4603      	mov	r3, r0
 800336c:	461a      	mov	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x3F);
 8003374:	213f      	movs	r1, #63	; 0x3f
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ff67 	bl	800324a <ssd1306_WriteCommand>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003386:	21a4      	movs	r1, #164	; 0xa4
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff5e 	bl	800324a <ssd1306_WriteCommand>
 800338e:	4603      	mov	r3, r0
 8003390:	461a      	mov	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4413      	add	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8003398:	21d3      	movs	r1, #211	; 0xd3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff55 	bl	800324a <ssd1306_WriteCommand>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80033aa:	2100      	movs	r1, #0
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff4c 	bl	800324a <ssd1306_WriteCommand>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80033bc:	21d5      	movs	r1, #213	; 0xd5
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ff43 	bl	800324a <ssd1306_WriteCommand>
 80033c4:	4603      	mov	r3, r0
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80033ce:	21f0      	movs	r1, #240	; 0xf0
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff3a 	bl	800324a <ssd1306_WriteCommand>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80033e0:	21d9      	movs	r1, #217	; 0xd9
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ff31 	bl	800324a <ssd1306_WriteCommand>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80033f2:	2122      	movs	r1, #34	; 0x22
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff28 	bl	800324a <ssd1306_WriteCommand>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4413      	add	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8003404:	21da      	movs	r1, #218	; 0xda
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ff1f 	bl	800324a <ssd1306_WriteCommand>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x12);
 8003416:	2112      	movs	r1, #18
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff16 	bl	800324a <ssd1306_WriteCommand>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4413      	add	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8003428:	21db      	movs	r1, #219	; 0xdb
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff0d 	bl	800324a <ssd1306_WriteCommand>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 800343a:	2120      	movs	r1, #32
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff04 	bl	800324a <ssd1306_WriteCommand>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 800344c:	218d      	movs	r1, #141	; 0x8d
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fefb 	bl	800324a <ssd1306_WriteCommand>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800345e:	2114      	movs	r1, #20
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fef2 	bl	800324a <ssd1306_WriteCommand>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4413      	add	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8003470:	21af      	movs	r1, #175	; 0xaf
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff fee9 	bl	800324a <ssd1306_WriteCommand>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <ssd1306_Init+0x214>
        return 1;
 8003488:	2301      	movs	r3, #1
 800348a:	e00f      	b.n	80034ac <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800348c:	2000      	movs	r0, #0
 800348e:	f000 f813 	bl	80034b8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f834 	bl	8003500 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <ssd1306_Init+0x23c>)
 800349a:	2200      	movs	r2, #0
 800349c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <ssd1306_Init+0x23c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <ssd1306_Init+0x23c>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	715a      	strb	r2, [r3, #5]

    return 0;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000a3c 	.word	0x20000a3c

080034b8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e00d      	b.n	80034e4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <ssd1306_Fill+0x1a>
 80034ce:	2100      	movs	r1, #0
 80034d0:	e000      	b.n	80034d4 <ssd1306_Fill+0x1c>
 80034d2:	21ff      	movs	r1, #255	; 0xff
 80034d4:	4a09      	ldr	r2, [pc, #36]	; (80034fc <ssd1306_Fill+0x44>)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4413      	add	r3, r2
 80034da:	460a      	mov	r2, r1
 80034dc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ea:	d3ed      	bcc.n	80034c8 <ssd1306_Fill+0x10>
    }
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2000063c 	.word	0x2000063c

08003500 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af04      	add	r7, sp, #16
 8003506:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e020      	b.n	8003550 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	3b50      	subs	r3, #80	; 0x50
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fe97 	bl	800324a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 800351c:	2100      	movs	r1, #0
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fe93 	bl	800324a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8003524:	2110      	movs	r1, #16
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fe8f 	bl	800324a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	01db      	lsls	r3, r3, #7
 8003530:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <ssd1306_UpdateScreen+0x60>)
 8003532:	4413      	add	r3, r2
 8003534:	2264      	movs	r2, #100	; 0x64
 8003536:	9202      	str	r2, [sp, #8]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	9201      	str	r2, [sp, #4]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	2301      	movs	r3, #1
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	2178      	movs	r1, #120	; 0x78
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f001 ffed 	bl	8005524 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	3301      	adds	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b07      	cmp	r3, #7
 8003554:	d9db      	bls.n	800350e <ssd1306_UpdateScreen+0xe>
    }
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	2000063c 	.word	0x2000063c

08003564 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
 800356e:	460b      	mov	r3, r1
 8003570:	71bb      	strb	r3, [r7, #6]
 8003572:	4613      	mov	r3, r2
 8003574:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	db48      	blt.n	8003610 <ssd1306_DrawPixel+0xac>
 800357e:	79bb      	ldrb	r3, [r7, #6]
 8003580:	2b3f      	cmp	r3, #63	; 0x3f
 8003582:	d845      	bhi.n	8003610 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <ssd1306_DrawPixel+0xb8>)
 8003586:	791b      	ldrb	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800358c:	797b      	ldrb	r3, [r7, #5]
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800359a:	797b      	ldrb	r3, [r7, #5]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d11a      	bne.n	80035d6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80035a0:	79fa      	ldrb	r2, [r7, #7]
 80035a2:	79bb      	ldrb	r3, [r7, #6]
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	b2d8      	uxtb	r0, r3
 80035a8:	4603      	mov	r3, r0
 80035aa:	01db      	lsls	r3, r3, #7
 80035ac:	4413      	add	r3, r2
 80035ae:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <ssd1306_DrawPixel+0xbc>)
 80035b0:	5cd3      	ldrb	r3, [r2, r3]
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	79bb      	ldrb	r3, [r7, #6]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b259      	sxtb	r1, r3
 80035c6:	79fa      	ldrb	r2, [r7, #7]
 80035c8:	4603      	mov	r3, r0
 80035ca:	01db      	lsls	r3, r3, #7
 80035cc:	4413      	add	r3, r2
 80035ce:	b2c9      	uxtb	r1, r1
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <ssd1306_DrawPixel+0xbc>)
 80035d2:	54d1      	strb	r1, [r2, r3]
 80035d4:	e01d      	b.n	8003612 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80035d6:	79fa      	ldrb	r2, [r7, #7]
 80035d8:	79bb      	ldrb	r3, [r7, #6]
 80035da:	08db      	lsrs	r3, r3, #3
 80035dc:	b2d8      	uxtb	r0, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	01db      	lsls	r3, r3, #7
 80035e2:	4413      	add	r3, r2
 80035e4:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <ssd1306_DrawPixel+0xbc>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	b25a      	sxtb	r2, r3
 80035ea:	79bb      	ldrb	r3, [r7, #6]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	4013      	ands	r3, r2
 80035fe:	b259      	sxtb	r1, r3
 8003600:	79fa      	ldrb	r2, [r7, #7]
 8003602:	4603      	mov	r3, r0
 8003604:	01db      	lsls	r3, r3, #7
 8003606:	4413      	add	r3, r2
 8003608:	b2c9      	uxtb	r1, r1
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <ssd1306_DrawPixel+0xbc>)
 800360c:	54d1      	strb	r1, [r2, r3]
 800360e:	e000      	b.n	8003612 <ssd1306_DrawPixel+0xae>
        return;
 8003610:	bf00      	nop
    }
}
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000a3c 	.word	0x20000a3c
 8003620:	2000063c 	.word	0x2000063c

08003624 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	4604      	mov	r4, r0
 800362c:	1d38      	adds	r0, r7, #4
 800362e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003632:	461a      	mov	r2, r3
 8003634:	4623      	mov	r3, r4
 8003636:	73fb      	strb	r3, [r7, #15]
 8003638:	4613      	mov	r3, r2
 800363a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800363c:	4b38      	ldr	r3, [pc, #224]	; (8003720 <ssd1306_WriteChar+0xfc>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	793b      	ldrb	r3, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	2b7f      	cmp	r3, #127	; 0x7f
 8003648:	dc06      	bgt.n	8003658 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800364a:	4b35      	ldr	r3, [pc, #212]	; (8003720 <ssd1306_WriteChar+0xfc>)
 800364c:	885b      	ldrh	r3, [r3, #2]
 800364e:	461a      	mov	r2, r3
 8003650:	797b      	ldrb	r3, [r7, #5]
 8003652:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003654:	2b3f      	cmp	r3, #63	; 0x3f
 8003656:	dd01      	ble.n	800365c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8003658:	2300      	movs	r3, #0
 800365a:	e05d      	b.n	8003718 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	e04c      	b.n	80036fc <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	3b20      	subs	r3, #32
 8003668:	7979      	ldrb	r1, [r7, #5]
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4619      	mov	r1, r3
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	440b      	add	r3, r1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	e034      	b.n	80036ec <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <ssd1306_WriteChar+0xfc>)
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	4413      	add	r3, r2
 800369e:	b2d8      	uxtb	r0, r3
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <ssd1306_WriteChar+0xfc>)
 80036a2:	885b      	ldrh	r3, [r3, #2]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	7bba      	ldrb	r2, [r7, #14]
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7ff ff57 	bl	8003564 <ssd1306_DrawPixel>
 80036b6:	e016      	b.n	80036e6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <ssd1306_WriteChar+0xfc>)
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	b2d8      	uxtb	r0, r3
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <ssd1306_WriteChar+0xfc>)
 80036c8:	885b      	ldrh	r3, [r3, #2]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	b2d9      	uxtb	r1, r3
 80036d4:	7bbb      	ldrb	r3, [r7, #14]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf0c      	ite	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	2300      	movne	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	f7ff ff3f 	bl	8003564 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	793b      	ldrb	r3, [r7, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d3c5      	bcc.n	8003682 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3301      	adds	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	797b      	ldrb	r3, [r7, #5]
 80036fe:	461a      	mov	r2, r3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	4293      	cmp	r3, r2
 8003704:	d3ad      	bcc.n	8003662 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <ssd1306_WriteChar+0xfc>)
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	793b      	ldrb	r3, [r7, #4]
 800370c:	b29b      	uxth	r3, r3
 800370e:	4413      	add	r3, r2
 8003710:	b29a      	uxth	r2, r3
 8003712:	4b03      	ldr	r3, [pc, #12]	; (8003720 <ssd1306_WriteChar+0xfc>)
 8003714:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3724      	adds	r7, #36	; 0x24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}
 8003720:	20000a3c 	.word	0x20000a3c

08003724 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	1d38      	adds	r0, r7, #4
 800372e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003732:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8003734:	e012      	b.n	800375c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	7818      	ldrb	r0, [r3, #0]
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	1d3a      	adds	r2, r7, #4
 800373e:	ca06      	ldmia	r2, {r1, r2}
 8003740:	f7ff ff70 	bl	8003624 <ssd1306_WriteChar>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d002      	beq.n	8003756 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	e008      	b.n	8003768 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3301      	adds	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
    while (*str)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e8      	bne.n	8003736 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	781b      	ldrb	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	460a      	mov	r2, r1
 800377a:	71fb      	strb	r3, [r7, #7]
 800377c:	4613      	mov	r3, r2
 800377e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <ssd1306_SetCursor+0x2c>)
 8003786:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003788:	79bb      	ldrb	r3, [r7, #6]
 800378a:	b29a      	uxth	r2, r3
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <ssd1306_SetCursor+0x2c>)
 800378e:	805a      	strh	r2, [r3, #2]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	20000a3c 	.word	0x20000a3c

080037a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_MspInit+0x4c>)
 80037a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <HAL_MspInit+0x4c>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6613      	str	r3, [r2, #96]	; 0x60
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <HAL_MspInit+0x4c>)
 80037b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_MspInit+0x4c>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <HAL_MspInit+0x4c>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6593      	str	r3, [r2, #88]	; 0x58
 80037ca:	4b08      	ldr	r3, [pc, #32]	; (80037ec <HAL_MspInit+0x4c>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2101      	movs	r1, #1
 80037da:	f06f 0003 	mvn.w	r0, #3
 80037de:	f001 fa9e 	bl	8004d1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000

080037f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <HAL_ADC_MspInit+0x74>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d124      	bne.n	800385c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_ADC_MspInit+0x78>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <HAL_ADC_MspInit+0x78>)
 8003818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800381c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_ADC_MspInit+0x78>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <HAL_ADC_MspInit+0x78>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <HAL_ADC_MspInit+0x78>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <HAL_ADC_MspInit+0x78>)
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATT_CHECK_Pin;
 8003842:	2308      	movs	r3, #8
 8003844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003846:	230b      	movs	r3, #11
 8003848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_CHECK_GPIO_Port, &GPIO_InitStruct);
 800384e:	f107 0314 	add.w	r3, r7, #20
 8003852:	4619      	mov	r1, r3
 8003854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003858:	f001 fc42 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	50040000 	.word	0x50040000
 8003868:	40021000 	.word	0x40021000

0800386c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_DAC_MspInit+0x84>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d12c      	bne.n	80038e8 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800388e:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_DAC_MspInit+0x88>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_DAC_MspInit+0x88>)
 8003894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003898:	6593      	str	r3, [r2, #88]	; 0x58
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_DAC_MspInit+0x88>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_DAC_MspInit+0x88>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <HAL_DAC_MspInit+0x88>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_DAC_MspInit+0x88>)
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = TCVC_Pin;
 80038be:	2320      	movs	r3, #32
 80038c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038c2:	2303      	movs	r3, #3
 80038c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TCVC_GPIO_Port, &GPIO_InitStruct);
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4619      	mov	r1, r3
 80038d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d4:	f001 fc04 	bl	80050e0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 80038d8:	2200      	movs	r2, #0
 80038da:	2108      	movs	r1, #8
 80038dc:	2036      	movs	r0, #54	; 0x36
 80038de:	f001 fa1e 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038e2:	2036      	movs	r0, #54	; 0x36
 80038e4:	f001 fa37 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80038e8:	bf00      	nop
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40007400 	.word	0x40007400
 80038f4:	40021000 	.word	0x40021000

080038f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	; 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 031c 	add.w	r3, r7, #28
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <HAL_I2C_MspInit+0xd8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d128      	bne.n	800396c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391a:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 8003920:	f043 0302 	orr.w	r3, r3, #2
 8003924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003926:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEM_SCL_Pin|MEM_SDA_Pin;
 8003932:	23c0      	movs	r3, #192	; 0xc0
 8003934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003936:	2312      	movs	r3, #18
 8003938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800393a:	2301      	movs	r3, #1
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393e:	2303      	movs	r3, #3
 8003940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003942:	2304      	movs	r3, #4
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003946:	f107 031c 	add.w	r3, r7, #28
 800394a:	4619      	mov	r1, r3
 800394c:	4822      	ldr	r0, [pc, #136]	; (80039d8 <HAL_I2C_MspInit+0xe0>)
 800394e:	f001 fbc7 	bl	80050e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 8003958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800395c:	6593      	str	r3, [r2, #88]	; 0x58
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800396a:	e02d      	b.n	80039c8 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <HAL_I2C_MspInit+0xe4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d128      	bne.n	80039c8 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MON_SCL_Pin|MON_SDA_Pin;
 800398e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003994:	2312      	movs	r3, #18
 8003996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003998:	2301      	movs	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80039a0:	2304      	movs	r3, #4
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a4:	f107 031c 	add.w	r3, r7, #28
 80039a8:	4619      	mov	r1, r3
 80039aa:	480b      	ldr	r0, [pc, #44]	; (80039d8 <HAL_I2C_MspInit+0xe0>)
 80039ac:	f001 fb98 	bl	80050e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 80039b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039ba:	6593      	str	r3, [r2, #88]	; 0x58
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_I2C_MspInit+0xdc>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3730      	adds	r7, #48	; 0x30
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40005400 	.word	0x40005400
 80039d4:	40021000 	.word	0x40021000
 80039d8:	48000400 	.word	0x48000400
 80039dc:	40005800 	.word	0x40005800

080039e0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d130      	bne.n	8003a64 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_TIM_IC_MspInit+0x8c>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <HAL_TIM_IC_MspInit+0x8c>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_TIM_IC_MspInit+0x8c>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_TIM_IC_MspInit+0x8c>)
 8003a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1e:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_TIM_IC_MspInit+0x8c>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_TIM_IC_MspInit+0x8c>)
 8003a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TC_IN_Pin;
 8003a32:	2304      	movs	r3, #4
 8003a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a42:	2301      	movs	r3, #1
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_IN_GPIO_Port, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a50:	f001 fb46 	bl	80050e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2102      	movs	r1, #2
 8003a58:	201c      	movs	r0, #28
 8003a5a:	f001 f960 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a5e:	201c      	movs	r0, #28
 8003a60:	f001 f979 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a64:	bf00      	nop
 8003a66:	3728      	adds	r7, #40	; 0x28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <HAL_TIM_Base_MspInit+0xac>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d114      	bne.n	8003aac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a82:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003a88:	f043 0310 	orr.w	r3, r3, #16
 8003a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a8e:	4b24      	ldr	r3, [pc, #144]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2108      	movs	r1, #8
 8003a9e:	2036      	movs	r0, #54	; 0x36
 8003aa0:	f001 f93d 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003aa4:	2036      	movs	r0, #54	; 0x36
 8003aa6:	f001 f956 	bl	8004d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003aaa:	e032      	b.n	8003b12 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <HAL_TIM_Base_MspInit+0xb4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d114      	bne.n	8003ae0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003abc:	f043 0320 	orr.w	r3, r3, #32
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac2:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	2037      	movs	r0, #55	; 0x37
 8003ad4:	f001 f923 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ad8:	2037      	movs	r0, #55	; 0x37
 8003ada:	f001 f93c 	bl	8004d56 <HAL_NVIC_EnableIRQ>
}
 8003ade:	e018      	b.n	8003b12 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_TIM_Base_MspInit+0xb8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d113      	bne.n	8003b12 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	6613      	str	r3, [r2, #96]	; 0x60
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_TIM_Base_MspInit+0xb0>)
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 7, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2107      	movs	r1, #7
 8003b06:	2019      	movs	r0, #25
 8003b08:	f001 f909 	bl	8004d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003b0c:	2019      	movs	r0, #25
 8003b0e:	f001 f922 	bl	8004d56 <HAL_NVIC_EnableIRQ>
}
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40001000 	.word	0x40001000
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40001400 	.word	0x40001400
 8003b28:	40014400 	.word	0x40014400

08003b2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <HAL_PCD_MspInit+0x38>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d10b      	bne.n	8003b56 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_PCD_MspInit+0x3c>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <HAL_PCD_MspInit+0x3c>)
 8003b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b48:	6593      	str	r3, [r2, #88]	; 0x58
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_PCD_MspInit+0x3c>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40006800 	.word	0x40006800
 8003b68:	40021000 	.word	0x40021000

08003b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <NMI_Handler+0x4>

08003b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b76:	e7fe      	b.n	8003b76 <HardFault_Handler+0x4>

08003b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <MemManage_Handler+0x4>

08003b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <BusFault_Handler+0x4>

08003b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <UsageFault_Handler+0x4>

08003b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bb8:	f000 f8e2 	bl	8003d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bbc:	bf00      	nop
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003bc6:	f003 fd93 	bl	80076f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200002c0 	.word	0x200002c0

08003bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <TIM2_IRQHandler+0x10>)
 8003bda:	f003 fd89 	bl	80076f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200001dc 	.word	0x200001dc

08003be8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bec:	4803      	ldr	r0, [pc, #12]	; (8003bfc <TIM6_DAC_IRQHandler+0x14>)
 8003bee:	f003 fd7f 	bl	80076f0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003bf2:	4803      	ldr	r0, [pc, #12]	; (8003c00 <TIM6_DAC_IRQHandler+0x18>)
 8003bf4:	f001 f8eb 	bl	8004dce <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000228 	.word	0x20000228
 8003c00:	20000130 	.word	0x20000130

08003c04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <TIM7_IRQHandler+0x10>)
 8003c0a:	f003 fd71 	bl	80076f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000274 	.word	0x20000274

08003c18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <SystemInit+0x64>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <SystemInit+0x64>)
 8003c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <SystemInit+0x68>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <SystemInit+0x68>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <SystemInit+0x68>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <SystemInit+0x68>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <SystemInit+0x68>)
 8003c44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003c48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <SystemInit+0x68>)
 8003c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <SystemInit+0x68>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <SystemInit+0x68>)
 8003c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <SystemInit+0x68>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <SystemInit+0x64>)
 8003c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000ed00 	.word	0xe000ed00
 8003c80:	40021000 	.word	0x40021000

08003c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c88:	f7ff ffc6 	bl	8003c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003c8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003c8e:	e003      	b.n	8003c98 <LoopCopyDataInit>

08003c90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003c92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003c94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003c96:	3104      	adds	r1, #4

08003c98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003c98:	480a      	ldr	r0, [pc, #40]	; (8003cc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003c9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003c9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ca0:	d3f6      	bcc.n	8003c90 <CopyDataInit>
	ldr	r2, =_sbss
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ca4:	e002      	b.n	8003cac <LoopFillZerobss>

08003ca6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ca6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ca8:	f842 3b04 	str.w	r3, [r2], #4

08003cac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003cac:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <LoopForever+0x16>)
	cmp	r2, r3
 8003cae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003cb0:	d3f9      	bcc.n	8003ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cb2:	f004 f979 	bl	8007fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cb6:	f7fe f963 	bl	8001f80 <main>

08003cba <LoopForever>:

LoopForever:
    b LoopForever
 8003cba:	e7fe      	b.n	8003cba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003cbc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003cc0:	0800967c 	.word	0x0800967c
	ldr	r0, =_sdata
 8003cc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003cc8:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8003ccc:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8003cd0:	20000a48 	.word	0x20000a48

08003cd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cd4:	e7fe      	b.n	8003cd4 <ADC1_IRQHandler>

08003cd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	f001 f811 	bl	8004d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f000 f80e 	bl	8003d08 <HAL_InitTick>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	71fb      	strb	r3, [r7, #7]
 8003cf6:	e001      	b.n	8003cfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cf8:	f7ff fd52 	bl	80037a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d14:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_InitTick+0x6c>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d023      	beq.n	8003d64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <HAL_InitTick+0x70>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <HAL_InitTick+0x6c>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	4619      	mov	r1, r3
 8003d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 f81d 	bl	8004d72 <HAL_SYSTICK_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b0f      	cmp	r3, #15
 8003d42:	d809      	bhi.n	8003d58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d44:	2200      	movs	r2, #0
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d4c:	f000 ffe7 	bl	8004d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d50:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <HAL_InitTick+0x74>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e007      	b.n	8003d68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	e004      	b.n	8003d68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
 8003d62:	e001      	b.n	8003d68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000058 	.word	0x20000058
 8003d78:	20000050 	.word	0x20000050
 8003d7c:	20000054 	.word	0x20000054

08003d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x20>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <HAL_IncTick+0x24>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <HAL_IncTick+0x24>)
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000058 	.word	0x20000058
 8003da4:	20000a44 	.word	0x20000a44

08003da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  return uwTick;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <HAL_GetTick+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000a44 	.word	0x20000a44

08003dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc8:	f7ff ffee 	bl	8003da8 <HAL_GetTick>
 8003dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd8:	d005      	beq.n	8003de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_Delay+0x44>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003de6:	bf00      	nop
 8003de8:	f7ff ffde 	bl	8003da8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d8f7      	bhi.n	8003de8 <HAL_Delay+0x28>
  {
  }
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000058 	.word	0x20000058

08003e08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	609a      	str	r2, [r3, #8]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	609a      	str	r2, [r3, #8]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3360      	adds	r3, #96	; 0x60
 8003e82:	461a      	mov	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <LL_ADC_SetOffset+0x44>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	03fff000 	.word	0x03fff000

08003eb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3360      	adds	r3, #96	; 0x60
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3360      	adds	r3, #96	; 0x60
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b087      	sub	sp, #28
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3330      	adds	r3, #48	; 0x30
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	4413      	add	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	211f      	movs	r1, #31
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	401a      	ands	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0e9b      	lsrs	r3, r3, #26
 8003f52:	f003 011f 	and.w	r1, r3, #31
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	431a      	orrs	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b087      	sub	sp, #28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3314      	adds	r3, #20
 8003f82:	461a      	mov	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	0e5b      	lsrs	r3, r3, #25
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	4413      	add	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	0d1b      	lsrs	r3, r3, #20
 8003f9a:	f003 031f 	and.w	r3, r3, #31
 8003f9e:	2107      	movs	r1, #7
 8003fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	0d1b      	lsrs	r3, r3, #20
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f003 0318 	and.w	r3, r3, #24
 8003fea:	4908      	ldr	r1, [pc, #32]	; (800400c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fec:	40d9      	lsrs	r1, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	400b      	ands	r3, r1
 8003ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	0007ffff 	.word	0x0007ffff

08004010 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6093      	str	r3, [r2, #8]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004048:	d101      	bne.n	800404e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800406c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004098:	d101      	bne.n	800409e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <LL_ADC_IsEnabled+0x18>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <LL_ADC_IsEnabled+0x1a>
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d101      	bne.n	80040ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d101      	bne.n	8004110 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800412c:	2300      	movs	r3, #0
 800412e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e12a      	b.n	8004390 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fb51 	bl	80037f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff ff67 	bl	8004034 <LL_ADC_IsDeepPowerDownEnabled>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff4d 	bl	8004010 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ff82 	bl	8004084 <LL_ADC_IsInternalRegulatorEnabled>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d113      	bne.n	80041ae <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ff66 	bl	800405c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004190:	4b81      	ldr	r3, [pc, #516]	; (8004398 <HAL_ADC_Init+0x278>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	4a81      	ldr	r2, [pc, #516]	; (800439c <HAL_ADC_Init+0x27c>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	099b      	lsrs	r3, r3, #6
 800419e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041a0:	e002      	b.n	80041a8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f9      	bne.n	80041a2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ff66 	bl	8004084 <LL_ADC_IsInternalRegulatorEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10d      	bne.n	80041da <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0210 	orr.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ff77 	bl	80040d2 <LL_ADC_REG_IsConversionOngoing>
 80041e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 80c5 	bne.w	800437e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 80c1 	bne.w	800437e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004204:	f043 0202 	orr.w	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ff4b 	bl	80040ac <LL_ADC_IsEnabled>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800421c:	4860      	ldr	r0, [pc, #384]	; (80043a0 <HAL_ADC_Init+0x280>)
 800421e:	f7ff ff45 	bl	80040ac <LL_ADC_IsEnabled>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4619      	mov	r1, r3
 800422e:	485d      	ldr	r0, [pc, #372]	; (80043a4 <HAL_ADC_Init+0x284>)
 8004230:	f7ff fdea 	bl	8003e08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	7e5b      	ldrb	r3, [r3, #25]
 8004238:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800423e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004244:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800424a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004252:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d106      	bne.n	8004270 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	3b01      	subs	r3, #1
 8004268:	045b      	lsls	r3, r3, #17
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	4b45      	ldr	r3, [pc, #276]	; (80043a8 <HAL_ADC_Init+0x288>)
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	69b9      	ldr	r1, [r7, #24]
 800429c:	430b      	orrs	r3, r1
 800429e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff14 	bl	80040d2 <LL_ADC_REG_IsConversionOngoing>
 80042aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff21 	bl	80040f8 <LL_ADC_INJ_IsConversionOngoing>
 80042b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d13d      	bne.n	800433a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d13a      	bne.n	800433a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042e0:	f023 0302 	bic.w	r3, r3, #2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	430b      	orrs	r3, r1
 80042ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d118      	bne.n	800432a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004302:	f023 0304 	bic.w	r3, r3, #4
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004314:	4311      	orrs	r1, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800431a:	430a      	orrs	r2, r1
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	611a      	str	r2, [r3, #16]
 8004328:	e007      	b.n	800433a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d10c      	bne.n	800435c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	f023 010f 	bic.w	r1, r3, #15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
 800435a:	e007      	b.n	800436c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 020f 	bic.w	r2, r2, #15
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f023 0303 	bic.w	r3, r3, #3
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
 800437c:	e007      	b.n	800438e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f043 0210 	orr.w	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800438e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000050 	.word	0x20000050
 800439c:	053e2d63 	.word	0x053e2d63
 80043a0:	50040000 	.word	0x50040000
 80043a4:	50040300 	.word	0x50040300
 80043a8:	fff0c007 	.word	0xfff0c007

080043ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b0b6      	sub	sp, #216	; 0xd8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043bc:	2300      	movs	r3, #0
 80043be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x22>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e3b8      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x794>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fe79 	bl	80040d2 <LL_ADC_REG_IsConversionOngoing>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f040 839d 	bne.w	8004b22 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d824      	bhi.n	800443a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	3b02      	subs	r3, #2
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d81b      	bhi.n	8004432 <HAL_ADC_ConfigChannel+0x86>
 80043fa:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <HAL_ADC_ConfigChannel+0x54>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004411 	.word	0x08004411
 8004404:	08004419 	.word	0x08004419
 8004408:	08004421 	.word	0x08004421
 800440c:	08004429 	.word	0x08004429
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	220c      	movs	r2, #12
 8004414:	605a      	str	r2, [r3, #4]
          break;
 8004416:	e011      	b.n	800443c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2212      	movs	r2, #18
 800441c:	605a      	str	r2, [r3, #4]
          break;
 800441e:	e00d      	b.n	800443c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2218      	movs	r2, #24
 8004424:	605a      	str	r2, [r3, #4]
          break;
 8004426:	e009      	b.n	800443c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800442e:	605a      	str	r2, [r3, #4]
          break;
 8004430:	e004      	b.n	800443c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2206      	movs	r2, #6
 8004436:	605a      	str	r2, [r3, #4]
          break;
 8004438:	e000      	b.n	800443c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800443a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6859      	ldr	r1, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	f7ff fd66 	bl	8003f1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fe3d 	bl	80040d2 <LL_ADC_REG_IsConversionOngoing>
 8004458:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fe49 	bl	80040f8 <LL_ADC_INJ_IsConversionOngoing>
 8004466:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800446a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 81a6 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 81a1 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	461a      	mov	r2, r3
 800448c:	f7ff fd71 	bl	8003f72 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	08db      	lsrs	r3, r3, #3
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d00a      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6919      	ldr	r1, [r3, #16]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044c2:	f7ff fcd5 	bl	8003e70 <LL_ADC_SetOffset>
 80044c6:	e17b      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fcf2 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x148>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fce7 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	f003 021f 	and.w	r2, r3, #31
 80044f2:	e01e      	b.n	8004532 <HAL_ADC_ConfigChannel+0x186>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fcdc 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004500:	4603      	mov	r3, r0
 8004502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800451a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e004      	b.n	8004530 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453a:	2b00      	cmp	r3, #0
 800453c:	d105      	bne.n	800454a <HAL_ADC_ConfigChannel+0x19e>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	0e9b      	lsrs	r3, r3, #26
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	e018      	b.n	800457c <HAL_ADC_ConfigChannel+0x1d0>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800455e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800456e:	2320      	movs	r3, #32
 8004570:	e004      	b.n	800457c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800457c:	429a      	cmp	r2, r3
 800457e:	d106      	bne.n	800458e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2200      	movs	r2, #0
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fcab 	bl	8003ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fc8f 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 800459a:	4603      	mov	r3, r0
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x20e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fc84 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 80045b0:	4603      	mov	r3, r0
 80045b2:	0e9b      	lsrs	r3, r3, #26
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	e01e      	b.n	80045f8 <HAL_ADC_ConfigChannel+0x24c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2101      	movs	r1, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fc79 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80045d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80045e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e004      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80045ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045f0:	fab3 f383 	clz	r3, r3
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x264>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	e018      	b.n	8004642 <HAL_ADC_ConfigChannel+0x296>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004624:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800462c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004634:	2320      	movs	r3, #32
 8004636:	e004      	b.n	8004642 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800463c:	fab3 f383 	clz	r3, r3
 8004640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004642:	429a      	cmp	r2, r3
 8004644:	d106      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	2101      	movs	r1, #1
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fc48 	bl	8003ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2102      	movs	r1, #2
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fc2c 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x2d4>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2102      	movs	r1, #2
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fc21 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004676:	4603      	mov	r3, r0
 8004678:	0e9b      	lsrs	r3, r3, #26
 800467a:	f003 021f 	and.w	r2, r3, #31
 800467e:	e01e      	b.n	80046be <HAL_ADC_ConfigChannel+0x312>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fc16 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 800468c:	4603      	mov	r3, r0
 800468e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800469e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80046a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80046ae:	2320      	movs	r3, #32
 80046b0:	e004      	b.n	80046bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80046b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x32a>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	0e9b      	lsrs	r3, r3, #26
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	e016      	b.n	8004704 <HAL_ADC_ConfigChannel+0x358>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80046e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80046ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80046f6:	2320      	movs	r3, #32
 80046f8:	e004      	b.n	8004704 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80046fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004704:	429a      	cmp	r2, r3
 8004706:	d106      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fbe7 	bl	8003ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2103      	movs	r1, #3
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fbcb 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004722:	4603      	mov	r3, r0
 8004724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x396>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2103      	movs	r1, #3
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fbc0 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	0e9b      	lsrs	r3, r3, #26
 800473c:	f003 021f 	and.w	r2, r3, #31
 8004740:	e017      	b.n	8004772 <HAL_ADC_ConfigChannel+0x3c6>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2103      	movs	r1, #3
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fbb5 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800475a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800475c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800475e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e003      	b.n	8004770 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_ADC_ConfigChannel+0x3de>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	0e9b      	lsrs	r3, r3, #26
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	e011      	b.n	80047ae <HAL_ADC_ConfigChannel+0x402>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800479a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80047a2:	2320      	movs	r3, #32
 80047a4:	e003      	b.n	80047ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80047a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d106      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	2103      	movs	r1, #3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fb92 	bl	8003ee4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fc71 	bl	80040ac <LL_ADC_IsEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 813f 	bne.w	8004a50 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7ff fbf2 	bl	8003fc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a8e      	ldr	r2, [pc, #568]	; (8004a24 <HAL_ADC_ConfigChannel+0x678>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	f040 8130 	bne.w	8004a50 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x46c>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0e9b      	lsrs	r3, r3, #26
 8004806:	3301      	adds	r3, #1
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2b09      	cmp	r3, #9
 800480e:	bf94      	ite	ls
 8004810:	2301      	movls	r3, #1
 8004812:	2300      	movhi	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e019      	b.n	800484c <HAL_ADC_ConfigChannel+0x4a0>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004820:	fa93 f3a3 	rbit	r3, r3
 8004824:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800482a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004830:	2320      	movs	r3, #32
 8004832:	e003      	b.n	800483c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004836:	fab3 f383 	clz	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	3301      	adds	r3, #1
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2b09      	cmp	r3, #9
 8004844:	bf94      	ite	ls
 8004846:	2301      	movls	r3, #1
 8004848:	2300      	movhi	r3, #0
 800484a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800484c:	2b00      	cmp	r3, #0
 800484e:	d079      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <HAL_ADC_ConfigChannel+0x4c0>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	3301      	adds	r3, #1
 8004864:	069b      	lsls	r3, r3, #26
 8004866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800486a:	e015      	b.n	8004898 <HAL_ADC_ConfigChannel+0x4ec>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	fa93 f3a3 	rbit	r3, r3
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800487e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004884:	2320      	movs	r3, #32
 8004886:	e003      	b.n	8004890 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488a:	fab3 f383 	clz	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	3301      	adds	r3, #1
 8004892:	069b      	lsls	r3, r3, #26
 8004894:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_ADC_ConfigChannel+0x50c>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	0e9b      	lsrs	r3, r3, #26
 80048aa:	3301      	adds	r3, #1
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	2101      	movs	r1, #1
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	e017      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x53c>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80048c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80048d0:	2320      	movs	r3, #32
 80048d2:	e003      	b.n	80048dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80048d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2101      	movs	r1, #1
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	ea42 0103 	orr.w	r1, r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <HAL_ADC_ConfigChannel+0x562>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	0e9b      	lsrs	r3, r3, #26
 80048fe:	3301      	adds	r3, #1
 8004900:	f003 021f 	and.w	r2, r3, #31
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	051b      	lsls	r3, r3, #20
 800490c:	e018      	b.n	8004940 <HAL_ADC_ConfigChannel+0x594>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004926:	2320      	movs	r3, #32
 8004928:	e003      	b.n	8004932 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	3301      	adds	r3, #1
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4613      	mov	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4413      	add	r3, r2
 800493e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004940:	430b      	orrs	r3, r1
 8004942:	e080      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x5b4>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	3301      	adds	r3, #1
 8004958:	069b      	lsls	r3, r3, #26
 800495a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800495e:	e015      	b.n	800498c <HAL_ADC_ConfigChannel+0x5e0>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004978:	2320      	movs	r3, #32
 800497a:	e003      	b.n	8004984 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	3301      	adds	r3, #1
 8004986:	069b      	lsls	r3, r3, #26
 8004988:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004994:	2b00      	cmp	r3, #0
 8004996:	d109      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x600>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	0e9b      	lsrs	r3, r3, #26
 800499e:	3301      	adds	r3, #1
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	e017      	b.n	80049dc <HAL_ADC_ConfigChannel+0x630>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	61fb      	str	r3, [r7, #28]
  return result;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80049c4:	2320      	movs	r3, #32
 80049c6:	e003      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	3301      	adds	r3, #1
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	ea42 0103 	orr.w	r1, r2, r3
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x65c>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0e9b      	lsrs	r3, r3, #26
 80049f2:	3301      	adds	r3, #1
 80049f4:	f003 021f 	and.w	r2, r3, #31
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	3b1e      	subs	r3, #30
 8004a00:	051b      	lsls	r3, r3, #20
 8004a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a06:	e01d      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x698>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	fa93 f3a3 	rbit	r3, r3
 8004a14:	613b      	str	r3, [r7, #16]
  return result;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d103      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004a20:	2320      	movs	r3, #32
 8004a22:	e005      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x684>
 8004a24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	3301      	adds	r3, #1
 8004a32:	f003 021f 	and.w	r2, r3, #31
 8004a36:	4613      	mov	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3b1e      	subs	r3, #30
 8004a3e:	051b      	lsls	r3, r3, #20
 8004a40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a44:	430b      	orrs	r3, r1
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	6892      	ldr	r2, [r2, #8]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	f7ff fa91 	bl	8003f72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b3c      	ldr	r3, [pc, #240]	; (8004b48 <HAL_ADC_ConfigChannel+0x79c>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d06b      	beq.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a5c:	483b      	ldr	r0, [pc, #236]	; (8004b4c <HAL_ADC_ConfigChannel+0x7a0>)
 8004a5e:	f7ff f9f9 	bl	8003e54 <LL_ADC_GetCommonPathInternalCh>
 8004a62:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a39      	ldr	r2, [pc, #228]	; (8004b50 <HAL_ADC_ConfigChannel+0x7a4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d126      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d120      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a34      	ldr	r2, [pc, #208]	; (8004b54 <HAL_ADC_ConfigChannel+0x7a8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d156      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a8e:	4619      	mov	r1, r3
 8004a90:	482e      	ldr	r0, [pc, #184]	; (8004b4c <HAL_ADC_ConfigChannel+0x7a0>)
 8004a92:	f7ff f9cc 	bl	8003e2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004a96:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <HAL_ADC_ConfigChannel+0x7ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <HAL_ADC_ConfigChannel+0x7b0>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	099a      	lsrs	r2, r3, #6
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004aae:	e002      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1f9      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004abc:	e03a      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <HAL_ADC_ConfigChannel+0x7b4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d113      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x744>
 8004ac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10d      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_ADC_ConfigChannel+0x7a8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d12a      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4818      	ldr	r0, [pc, #96]	; (8004b4c <HAL_ADC_ConfigChannel+0x7a0>)
 8004aea:	f7ff f9a0 	bl	8003e2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004aee:	e021      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <HAL_ADC_ConfigChannel+0x7b8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d11c      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d116      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <HAL_ADC_ConfigChannel+0x7a8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d111      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b18:	4619      	mov	r1, r3
 8004b1a:	480c      	ldr	r0, [pc, #48]	; (8004b4c <HAL_ADC_ConfigChannel+0x7a0>)
 8004b1c:	f7ff f987 	bl	8003e2e <LL_ADC_SetCommonPathInternalCh>
 8004b20:	e008      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	37d8      	adds	r7, #216	; 0xd8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	80080000 	.word	0x80080000
 8004b4c:	50040300 	.word	0x50040300
 8004b50:	c7520000 	.word	0xc7520000
 8004b54:	50040000 	.word	0x50040000
 8004b58:	20000050 	.word	0x20000050
 8004b5c:	053e2d63 	.word	0x053e2d63
 8004b60:	cb840000 	.word	0xcb840000
 8004b64:	80000001 	.word	0x80000001

08004b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b84:	4013      	ands	r3, r2
 8004b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <__NVIC_SetPriorityGrouping+0x44>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60d3      	str	r3, [r2, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0307 	and.w	r3, r3, #7
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	db0b      	blt.n	8004bf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	4907      	ldr	r1, [pc, #28]	; (8004c04 <__NVIC_EnableIRQ+0x38>)
 8004be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	2001      	movs	r0, #1
 8004bee:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	e000e100 	.word	0xe000e100

08004c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db0a      	blt.n	8004c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	490c      	ldr	r1, [pc, #48]	; (8004c54 <__NVIC_SetPriority+0x4c>)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	0112      	lsls	r2, r2, #4
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c30:	e00a      	b.n	8004c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4908      	ldr	r1, [pc, #32]	; (8004c58 <__NVIC_SetPriority+0x50>)
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	440b      	add	r3, r1
 8004c46:	761a      	strb	r2, [r3, #24]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000e100 	.word	0xe000e100
 8004c58:	e000ed00 	.word	0xe000ed00

08004c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf28      	it	cs
 8004c7a:	2304      	movcs	r3, #4
 8004c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3304      	adds	r3, #4
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d902      	bls.n	8004c8c <NVIC_EncodePriority+0x30>
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3b03      	subs	r3, #3
 8004c8a:	e000      	b.n	8004c8e <NVIC_EncodePriority+0x32>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	43d9      	mvns	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	4313      	orrs	r3, r2
         );
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3724      	adds	r7, #36	; 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd4:	d301      	bcc.n	8004cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e00f      	b.n	8004cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <SysTick_Config+0x40>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce2:	210f      	movs	r1, #15
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce8:	f7ff ff8e 	bl	8004c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <SysTick_Config+0x40>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf2:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <SysTick_Config+0x40>)
 8004cf4:	2207      	movs	r2, #7
 8004cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	e000e010 	.word	0xe000e010

08004d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff29 	bl	8004b68 <__NVIC_SetPriorityGrouping>
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d30:	f7ff ff3e 	bl	8004bb0 <__NVIC_GetPriorityGrouping>
 8004d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	6978      	ldr	r0, [r7, #20]
 8004d3c:	f7ff ff8e 	bl	8004c5c <NVIC_EncodePriority>
 8004d40:	4602      	mov	r2, r0
 8004d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff5d 	bl	8004c08 <__NVIC_SetPriority>
}
 8004d4e:	bf00      	nop
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff31 	bl	8004bcc <__NVIC_EnableIRQ>
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ffa2 	bl	8004cc4 <SysTick_Config>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e014      	b.n	8004dc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	791b      	ldrb	r3, [r3, #4]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fe fd5d 	bl	800386c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de4:	d120      	bne.n	8004e28 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df4:	d118      	bne.n	8004e28 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e20:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f82d 	bl	8004e82 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e36:	d120      	bne.n	8004e7a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e46:	d118      	bne.n	8004e7a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f043 0202 	orr.w	r2, r3, #2
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e72:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f928 	bl	80050ca <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b088      	sub	sp, #32
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	795b      	ldrb	r3, [r3, #5]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_DAC_ConfigChannel+0x1c>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e107      	b.n	80050c2 <HAL_DAC_ConfigChannel+0x22c>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d174      	bne.n	8004fb0 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ec6:	f7fe ff6f 	bl	8003da8 <HAL_GetTick>
 8004eca:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d134      	bne.n	8004f3c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ed2:	e011      	b.n	8004ef8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ed4:	f7fe ff68 	bl	8003da8 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d90a      	bls.n	8004ef8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f043 0208 	orr.w	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0e4      	b.n	80050c2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004f06:	2001      	movs	r0, #1
 8004f08:	f7fe ff5a 	bl	8003dc0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	6992      	ldr	r2, [r2, #24]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
 8004f16:	e01e      	b.n	8004f56 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f18:	f7fe ff46 	bl	8003da8 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d90a      	bls.n	8004f3c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f043 0208 	orr.w	r2, r3, #8
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2203      	movs	r2, #3
 8004f36:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0c2      	b.n	80050c2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	dbe8      	blt.n	8004f18 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004f46:	2001      	movs	r0, #1
 8004f48:	f7fe ff3a 	bl	8003dc0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	6992      	ldr	r2, [r2, #24]
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004f66:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	ea02 0103 	and.w	r1, r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	21ff      	movs	r1, #255	; 0xff
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	ea02 0103 	and.w	r1, r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d11d      	bne.n	8004ff4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	221f      	movs	r2, #31
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2207      	movs	r2, #7
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	431a      	orrs	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43da      	mvns	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	400a      	ands	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	f640 72fc 	movw	r2, #4092	; 0xffc
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	22c0      	movs	r2, #192	; 0xc0
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43da      	mvns	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	400a      	ands	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ee:	e154      	b.n	800539a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	2101      	movs	r1, #1
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	fa01 f303 	lsl.w	r3, r1, r3
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8146 	beq.w	8005394 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d00b      	beq.n	8005128 <HAL_GPIO_Init+0x48>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d007      	beq.n	8005128 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800511c:	2b11      	cmp	r3, #17
 800511e:	d003      	beq.n	8005128 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b12      	cmp	r3, #18
 8005126:	d130      	bne.n	800518a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	2203      	movs	r2, #3
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4013      	ands	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800515e:	2201      	movs	r2, #1
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	43db      	mvns	r3, r3
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4013      	ands	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	091b      	lsrs	r3, r3, #4
 8005174:	f003 0201 	and.w	r2, r3, #1
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	2203      	movs	r2, #3
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4013      	ands	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_Init+0xea>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b12      	cmp	r3, #18
 80051c8:	d123      	bne.n	8005212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3208      	adds	r2, #8
 80051d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	220f      	movs	r2, #15
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4013      	ands	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	08da      	lsrs	r2, r3, #3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3208      	adds	r2, #8
 800520c:	6939      	ldr	r1, [r7, #16]
 800520e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	2203      	movs	r2, #3
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43db      	mvns	r3, r3
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4013      	ands	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0203 	and.w	r2, r3, #3
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80a0 	beq.w	8005394 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005254:	4b58      	ldr	r3, [pc, #352]	; (80053b8 <HAL_GPIO_Init+0x2d8>)
 8005256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005258:	4a57      	ldr	r2, [pc, #348]	; (80053b8 <HAL_GPIO_Init+0x2d8>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	6613      	str	r3, [r2, #96]	; 0x60
 8005260:	4b55      	ldr	r3, [pc, #340]	; (80053b8 <HAL_GPIO_Init+0x2d8>)
 8005262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800526c:	4a53      	ldr	r2, [pc, #332]	; (80053bc <HAL_GPIO_Init+0x2dc>)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	3302      	adds	r3, #2
 8005274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	220f      	movs	r2, #15
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4013      	ands	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005296:	d019      	beq.n	80052cc <HAL_GPIO_Init+0x1ec>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a49      	ldr	r2, [pc, #292]	; (80053c0 <HAL_GPIO_Init+0x2e0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d013      	beq.n	80052c8 <HAL_GPIO_Init+0x1e8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a48      	ldr	r2, [pc, #288]	; (80053c4 <HAL_GPIO_Init+0x2e4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00d      	beq.n	80052c4 <HAL_GPIO_Init+0x1e4>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a47      	ldr	r2, [pc, #284]	; (80053c8 <HAL_GPIO_Init+0x2e8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <HAL_GPIO_Init+0x1e0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a46      	ldr	r2, [pc, #280]	; (80053cc <HAL_GPIO_Init+0x2ec>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d101      	bne.n	80052bc <HAL_GPIO_Init+0x1dc>
 80052b8:	2304      	movs	r3, #4
 80052ba:	e008      	b.n	80052ce <HAL_GPIO_Init+0x1ee>
 80052bc:	2307      	movs	r3, #7
 80052be:	e006      	b.n	80052ce <HAL_GPIO_Init+0x1ee>
 80052c0:	2303      	movs	r3, #3
 80052c2:	e004      	b.n	80052ce <HAL_GPIO_Init+0x1ee>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e002      	b.n	80052ce <HAL_GPIO_Init+0x1ee>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <HAL_GPIO_Init+0x1ee>
 80052cc:	2300      	movs	r3, #0
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	f002 0203 	and.w	r2, r2, #3
 80052d4:	0092      	lsls	r2, r2, #2
 80052d6:	4093      	lsls	r3, r2
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052de:	4937      	ldr	r1, [pc, #220]	; (80053bc <HAL_GPIO_Init+0x2dc>)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	089b      	lsrs	r3, r3, #2
 80052e4:	3302      	adds	r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052ec:	4b38      	ldr	r3, [pc, #224]	; (80053d0 <HAL_GPIO_Init+0x2f0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	43db      	mvns	r3, r3
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4013      	ands	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005310:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <HAL_GPIO_Init+0x2f0>)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005316:	4b2e      	ldr	r3, [pc, #184]	; (80053d0 <HAL_GPIO_Init+0x2f0>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	43db      	mvns	r3, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800533a:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <HAL_GPIO_Init+0x2f0>)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005340:	4b23      	ldr	r3, [pc, #140]	; (80053d0 <HAL_GPIO_Init+0x2f0>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	43db      	mvns	r3, r3
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005364:	4a1a      	ldr	r2, [pc, #104]	; (80053d0 <HAL_GPIO_Init+0x2f0>)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_GPIO_Init+0x2f0>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	43db      	mvns	r3, r3
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4013      	ands	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800538e:	4a10      	ldr	r2, [pc, #64]	; (80053d0 <HAL_GPIO_Init+0x2f0>)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3301      	adds	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	fa22 f303 	lsr.w	r3, r2, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f47f aea3 	bne.w	80050f0 <HAL_GPIO_Init+0x10>
  }
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	40021000 	.word	0x40021000
 80053bc:	40010000 	.word	0x40010000
 80053c0:	48000400 	.word	0x48000400
 80053c4:	48000800 	.word	0x48000800
 80053c8:	48000c00 	.word	0x48000c00
 80053cc:	48001000 	.word	0x48001000
 80053d0:	40010400 	.word	0x40010400

080053d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	807b      	strh	r3, [r7, #2]
 80053e0:	4613      	mov	r3, r2
 80053e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053e4:	787b      	ldrb	r3, [r7, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053f0:	e002      	b.n	80053f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e081      	b.n	800551a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fe fa64 	bl	80038f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e006      	b.n	800548c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800548a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d104      	bne.n	800549e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800549c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	ea42 0103 	orr.w	r1, r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69d9      	ldr	r1, [r3, #28]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	461a      	mov	r2, r3
 8005532:	4603      	mov	r3, r0
 8005534:	817b      	strh	r3, [r7, #10]
 8005536:	460b      	mov	r3, r1
 8005538:	813b      	strh	r3, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	f040 80f9 	bne.w	800573e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_I2C_Mem_Write+0x34>
 8005552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0ed      	b.n	8005740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_I2C_Mem_Write+0x4e>
 800556e:	2302      	movs	r3, #2
 8005570:	e0e6      	b.n	8005740 <HAL_I2C_Mem_Write+0x21c>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800557a:	f7fe fc15 	bl	8003da8 <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	2319      	movs	r3, #25
 8005586:	2201      	movs	r2, #1
 8005588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f955 	bl	800583c <I2C_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0d1      	b.n	8005740 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2221      	movs	r2, #33	; 0x21
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2240      	movs	r2, #64	; 0x40
 80055a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055c4:	88f8      	ldrh	r0, [r7, #6]
 80055c6:	893a      	ldrh	r2, [r7, #8]
 80055c8:	8979      	ldrh	r1, [r7, #10]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4603      	mov	r3, r0
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f8b9 	bl	800574c <I2C_RequestMemoryWrite>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0a9      	b.n	8005740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2bff      	cmp	r3, #255	; 0xff
 80055f4:	d90e      	bls.n	8005614 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	22ff      	movs	r2, #255	; 0xff
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005600:	b2da      	uxtb	r2, r3
 8005602:	8979      	ldrh	r1, [r7, #10]
 8005604:	2300      	movs	r3, #0
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fa37 	bl	8005a80 <I2C_TransferConfig>
 8005612:	e00f      	b.n	8005634 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	b2da      	uxtb	r2, r3
 8005624:	8979      	ldrh	r1, [r7, #10]
 8005626:	2300      	movs	r3, #0
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fa26 	bl	8005a80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f93f 	bl	80058bc <I2C_WaitOnTXISFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e07b      	b.n	8005740 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d034      	beq.n	80056ec <HAL_I2C_Mem_Write+0x1c8>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d130      	bne.n	80056ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	2200      	movs	r2, #0
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f8d1 	bl	800583c <I2C_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e04d      	b.n	8005740 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2bff      	cmp	r3, #255	; 0xff
 80056ac:	d90e      	bls.n	80056cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	22ff      	movs	r2, #255	; 0xff
 80056b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	8979      	ldrh	r1, [r7, #10]
 80056bc:	2300      	movs	r3, #0
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f9db 	bl	8005a80 <I2C_TransferConfig>
 80056ca:	e00f      	b.n	80056ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	8979      	ldrh	r1, [r7, #10]
 80056de:	2300      	movs	r3, #0
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f9ca 	bl	8005a80 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d19e      	bne.n	8005634 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f91e 	bl	800593c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e01a      	b.n	8005740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2220      	movs	r2, #32
 8005710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6859      	ldr	r1, [r3, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <HAL_I2C_Mem_Write+0x224>)
 800571e:	400b      	ands	r3, r1
 8005720:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e000      	b.n	8005740 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	fe00e800 	.word	0xfe00e800

0800574c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4603      	mov	r3, r0
 800575c:	817b      	strh	r3, [r7, #10]
 800575e:	460b      	mov	r3, r1
 8005760:	813b      	strh	r3, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	8979      	ldrh	r1, [r7, #10]
 800576c:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <I2C_RequestMemoryWrite+0xa4>)
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f983 	bl	8005a80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	69b9      	ldr	r1, [r7, #24]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f89c 	bl	80058bc <I2C_WaitOnTXISFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e02c      	b.n	80057e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d105      	bne.n	80057a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005794:	893b      	ldrh	r3, [r7, #8]
 8005796:	b2da      	uxtb	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	629a      	str	r2, [r3, #40]	; 0x28
 800579e:	e015      	b.n	80057cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057a0:	893b      	ldrh	r3, [r7, #8]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f882 	bl	80058bc <I2C_WaitOnTXISFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e012      	b.n	80057e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057c2:	893b      	ldrh	r3, [r7, #8]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2200      	movs	r2, #0
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f830 	bl	800583c <I2C_WaitOnFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	80002000 	.word	0x80002000

080057f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d103      	bne.n	8005812 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b01      	cmp	r3, #1
 800581e:	d007      	beq.n	8005830 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	619a      	str	r2, [r3, #24]
  }
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800584c:	e022      	b.n	8005894 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005854:	d01e      	beq.n	8005894 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005856:	f7fe faa7 	bl	8003da8 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d113      	bne.n	8005894 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005870:	f043 0220 	orr.w	r2, r3, #32
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e00f      	b.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4013      	ands	r3, r2
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d0cd      	beq.n	800584e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058c8:	e02c      	b.n	8005924 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f870 	bl	80059b4 <I2C_IsAcknowledgeFailed>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e02a      	b.n	8005934 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e4:	d01e      	beq.n	8005924 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e6:	f7fe fa5f 	bl	8003da8 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d302      	bcc.n	80058fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d113      	bne.n	8005924 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e007      	b.n	8005934 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b02      	cmp	r3, #2
 8005930:	d1cb      	bne.n	80058ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005948:	e028      	b.n	800599c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f830 	bl	80059b4 <I2C_IsAcknowledgeFailed>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e026      	b.n	80059ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595e:	f7fe fa23 	bl	8003da8 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d113      	bne.n	800599c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e007      	b.n	80059ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d1cf      	bne.n	800594a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d151      	bne.n	8005a72 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ce:	e022      	b.n	8005a16 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059d6:	d01e      	beq.n	8005a16 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d8:	f7fe f9e6 	bl	8003da8 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d302      	bcc.n	80059ee <I2C_IsAcknowledgeFailed+0x3a>
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d113      	bne.n	8005a16 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e02e      	b.n	8005a74 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d1d5      	bne.n	80059d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2210      	movs	r2, #16
 8005a2a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2220      	movs	r2, #32
 8005a32:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f7ff fedd 	bl	80057f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6859      	ldr	r1, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4b0d      	ldr	r3, [pc, #52]	; (8005a7c <I2C_IsAcknowledgeFailed+0xc8>)
 8005a46:	400b      	ands	r3, r1
 8005a48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f043 0204 	orr.w	r2, r3, #4
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	fe00e800 	.word	0xfe00e800

08005a80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	817b      	strh	r3, [r7, #10]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	0d5b      	lsrs	r3, r3, #21
 8005a9c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <I2C_TransferConfig+0x58>)
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	ea02 0103 	and.w	r1, r2, r3
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ab0:	7a7b      	ldrb	r3, [r7, #9]
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	03ff63ff 	.word	0x03ff63ff

08005adc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d138      	bne.n	8005b64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e032      	b.n	8005b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	; 0x24
 8005b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0201 	bic.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6819      	ldr	r1, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e000      	b.n	8005b66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
  }
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	d139      	bne.n	8005bfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e033      	b.n	8005bfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2224      	movs	r2, #36	; 0x24
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e000      	b.n	8005bfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
  }
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8005c20:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	4905      	ldr	r1, [pc, #20]	; (8005c48 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]
}
 8005c38:	bf00      	nop
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40021000 	.word	0x40021000
 8005c48:	40010000 	.word	0x40010000

08005c4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4e:	b08b      	sub	sp, #44	; 0x2c
 8005c50:	af06      	add	r7, sp, #24
 8005c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e104      	b.n	8005e68 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fd ff5a 	bl	8003b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f002 f930 	bl	8007eea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	687e      	ldr	r6, [r7, #4]
 8005c92:	466d      	mov	r5, sp
 8005c94:	f106 0410 	add.w	r4, r6, #16
 8005c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	1d33      	adds	r3, r6, #4
 8005ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ca4:	6838      	ldr	r0, [r7, #0]
 8005ca6:	f002 f90f 	bl	8007ec8 <USB_CoreInit>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0d5      	b.n	8005e68 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f002 f92c 	bl	8007f20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
 8005ccc:	e04c      	b.n	8005d68 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	440b      	add	r3, r1
 8005cde:	3301      	adds	r3, #1
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	440b      	add	r3, r1
 8005cf4:	7bfa      	ldrb	r2, [r7, #15]
 8005cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005cf8:	7bfa      	ldrb	r2, [r7, #15]
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	b298      	uxth	r0, r3
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	440b      	add	r3, r1
 8005d0a:	3336      	adds	r3, #54	; 0x36
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	440b      	add	r3, r1
 8005d20:	3303      	adds	r3, #3
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d26:	7bfa      	ldrb	r2, [r7, #15]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	440b      	add	r3, r1
 8005d34:	3338      	adds	r3, #56	; 0x38
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d3a:	7bfa      	ldrb	r2, [r7, #15]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	440b      	add	r3, r1
 8005d48:	333c      	adds	r3, #60	; 0x3c
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d4e:	7bfa      	ldrb	r2, [r7, #15]
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3340      	adds	r3, #64	; 0x40
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	3301      	adds	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
 8005d68:	7bfa      	ldrb	r2, [r7, #15]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d3ad      	bcc.n	8005cce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]
 8005d76:	e044      	b.n	8005e02 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d78:	7bfa      	ldrb	r2, [r7, #15]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	440b      	add	r3, r1
 8005d86:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d8e:	7bfa      	ldrb	r2, [r7, #15]
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	440b      	add	r3, r1
 8005d9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005da0:	7bfa      	ldrb	r2, [r7, #15]
 8005da2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005da4:	7bfa      	ldrb	r2, [r7, #15]
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	440b      	add	r3, r1
 8005db2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005dba:	7bfa      	ldrb	r2, [r7, #15]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	440b      	add	r3, r1
 8005dc8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005dd0:	7bfa      	ldrb	r2, [r7, #15]
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	440b      	add	r3, r1
 8005dde:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005de6:	7bfa      	ldrb	r2, [r7, #15]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	440b      	add	r3, r1
 8005df4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d3b5      	bcc.n	8005d78 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	687e      	ldr	r6, [r7, #4]
 8005e14:	466d      	mov	r5, sp
 8005e16:	f106 0410 	add.w	r4, r6, #16
 8005e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	1d33      	adds	r3, r6, #4
 8005e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e26:	6838      	ldr	r0, [r7, #0]
 8005e28:	f002 f887 	bl	8007f3a <USB_DevInit>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e014      	b.n	8005e68 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d102      	bne.n	8005e5c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f80a 	bl	8005e70 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f002 f88b 	bl	8007f7c <USB_DevDisconnect>

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <HAL_PWREx_GetVoltageRange+0x18>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40007000 	.word	0x40007000

08005ee0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eee:	d130      	bne.n	8005f52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef0:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efc:	d038      	beq.n	8005f70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005efe:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f06:	4a1e      	ldr	r2, [pc, #120]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2232      	movs	r2, #50	; 0x32
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
 8005f18:	4a1b      	ldr	r2, [pc, #108]	; (8005f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	0c9b      	lsrs	r3, r3, #18
 8005f20:	3301      	adds	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f24:	e002      	b.n	8005f2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f2c:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f38:	d102      	bne.n	8005f40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1f2      	bne.n	8005f26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4c:	d110      	bne.n	8005f70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e00f      	b.n	8005f72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5e:	d007      	beq.n	8005f70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f68:	4a05      	ldr	r2, [pc, #20]	; (8005f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40007000 	.word	0x40007000
 8005f84:	20000050 	.word	0x20000050
 8005f88:	431bde83 	.word	0x431bde83

08005f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f000 bc11 	b.w	80067c2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fa0:	4ba0      	ldr	r3, [pc, #640]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 030c 	and.w	r3, r3, #12
 8005fa8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005faa:	4b9e      	ldr	r3, [pc, #632]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80e4 	beq.w	800618a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x4c>
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	2b0c      	cmp	r3, #12
 8005fcc:	f040 808b 	bne.w	80060e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	f040 8087 	bne.w	80060e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fd8:	4b92      	ldr	r3, [pc, #584]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x64>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e3e8      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1a      	ldr	r2, [r3, #32]
 8005ff4:	4b8b      	ldr	r3, [pc, #556]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_RCC_OscConfig+0x7e>
 8006000:	4b88      	ldr	r3, [pc, #544]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006008:	e005      	b.n	8006016 <HAL_RCC_OscConfig+0x8a>
 800600a:	4b86      	ldr	r3, [pc, #536]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800600c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006016:	4293      	cmp	r3, r2
 8006018:	d223      	bcs.n	8006062 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fd76 	bl	8006b10 <RCC_SetFlashLatencyFromMSIRange>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e3c9      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800602e:	4b7d      	ldr	r3, [pc, #500]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a7c      	ldr	r2, [pc, #496]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006034:	f043 0308 	orr.w	r3, r3, #8
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	4b7a      	ldr	r3, [pc, #488]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	4977      	ldr	r1, [pc, #476]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006048:	4313      	orrs	r3, r2
 800604a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800604c:	4b75      	ldr	r3, [pc, #468]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	4972      	ldr	r1, [pc, #456]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800605c:	4313      	orrs	r3, r2
 800605e:	604b      	str	r3, [r1, #4]
 8006060:	e025      	b.n	80060ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006062:	4b70      	ldr	r3, [pc, #448]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6f      	ldr	r2, [pc, #444]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006068:	f043 0308 	orr.w	r3, r3, #8
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b6d      	ldr	r3, [pc, #436]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	496a      	ldr	r1, [pc, #424]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800607c:	4313      	orrs	r3, r2
 800607e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006080:	4b68      	ldr	r3, [pc, #416]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	4965      	ldr	r1, [pc, #404]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006090:	4313      	orrs	r3, r2
 8006092:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fd36 	bl	8006b10 <RCC_SetFlashLatencyFromMSIRange>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e389      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060ae:	f000 fca3 	bl	80069f8 <HAL_RCC_GetSysClockFreq>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b5b      	ldr	r3, [pc, #364]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	495a      	ldr	r1, [pc, #360]	; (8006228 <HAL_RCC_OscConfig+0x29c>)
 80060c0:	5ccb      	ldrb	r3, [r1, r3]
 80060c2:	f003 031f 	and.w	r3, r3, #31
 80060c6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ca:	4a58      	ldr	r2, [pc, #352]	; (800622c <HAL_RCC_OscConfig+0x2a0>)
 80060cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80060ce:	4b58      	ldr	r3, [pc, #352]	; (8006230 <HAL_RCC_OscConfig+0x2a4>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fd fe18 	bl	8003d08 <HAL_InitTick>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d052      	beq.n	8006188 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	e36d      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d032      	beq.n	8006154 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060ee:	4b4d      	ldr	r3, [pc, #308]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a4c      	ldr	r2, [pc, #304]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80060f4:	f043 0301 	orr.w	r3, r3, #1
 80060f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060fa:	f7fd fe55 	bl	8003da8 <HAL_GetTick>
 80060fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006100:	e008      	b.n	8006114 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006102:	f7fd fe51 	bl	8003da8 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e356      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006114:	4b43      	ldr	r3, [pc, #268]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0f0      	beq.n	8006102 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006120:	4b40      	ldr	r3, [pc, #256]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3f      	ldr	r2, [pc, #252]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006126:	f043 0308 	orr.w	r3, r3, #8
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	493a      	ldr	r1, [pc, #232]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800613a:	4313      	orrs	r3, r2
 800613c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800613e:	4b39      	ldr	r3, [pc, #228]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	4935      	ldr	r1, [pc, #212]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800614e:	4313      	orrs	r3, r2
 8006150:	604b      	str	r3, [r1, #4]
 8006152:	e01a      	b.n	800618a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006154:	4b33      	ldr	r3, [pc, #204]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a32      	ldr	r2, [pc, #200]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800615a:	f023 0301 	bic.w	r3, r3, #1
 800615e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006160:	f7fd fe22 	bl	8003da8 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006168:	f7fd fe1e 	bl	8003da8 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e323      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800617a:	4b2a      	ldr	r3, [pc, #168]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x1dc>
 8006186:	e000      	b.n	800618a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006188:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d073      	beq.n	800627e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d005      	beq.n	80061a8 <HAL_RCC_OscConfig+0x21c>
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	2b0c      	cmp	r3, #12
 80061a0:	d10e      	bne.n	80061c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d10b      	bne.n	80061c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d063      	beq.n	800627c <HAL_RCC_OscConfig+0x2f0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d15f      	bne.n	800627c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e300      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d106      	bne.n	80061d8 <HAL_RCC_OscConfig+0x24c>
 80061ca:	4b16      	ldr	r3, [pc, #88]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a15      	ldr	r2, [pc, #84]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80061d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e01d      	b.n	8006214 <HAL_RCC_OscConfig+0x288>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x270>
 80061e2:	4b10      	ldr	r3, [pc, #64]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a0f      	ldr	r2, [pc, #60]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80061e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0c      	ldr	r2, [pc, #48]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e00b      	b.n	8006214 <HAL_RCC_OscConfig+0x288>
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a08      	ldr	r2, [pc, #32]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 8006202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a05      	ldr	r2, [pc, #20]	; (8006224 <HAL_RCC_OscConfig+0x298>)
 800620e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01b      	beq.n	8006254 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fd fdc4 	bl	8003da8 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006222:	e010      	b.n	8006246 <HAL_RCC_OscConfig+0x2ba>
 8006224:	40021000 	.word	0x40021000
 8006228:	08009634 	.word	0x08009634
 800622c:	20000050 	.word	0x20000050
 8006230:	20000054 	.word	0x20000054
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006234:	f7fd fdb8 	bl	8003da8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b64      	cmp	r3, #100	; 0x64
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e2bd      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006246:	4baf      	ldr	r3, [pc, #700]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x2a8>
 8006252:	e014      	b.n	800627e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fd fda8 	bl	8003da8 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800625c:	f7fd fda4 	bl	8003da8 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e2a9      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800626e:	4ba5      	ldr	r3, [pc, #660]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x2d0>
 800627a:	e000      	b.n	800627e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800627c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d060      	beq.n	800634c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b04      	cmp	r3, #4
 800628e:	d005      	beq.n	800629c <HAL_RCC_OscConfig+0x310>
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b0c      	cmp	r3, #12
 8006294:	d119      	bne.n	80062ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d116      	bne.n	80062ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800629c:	4b99      	ldr	r3, [pc, #612]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_RCC_OscConfig+0x328>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e286      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b4:	4b93      	ldr	r3, [pc, #588]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	061b      	lsls	r3, r3, #24
 80062c2:	4990      	ldr	r1, [pc, #576]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062c8:	e040      	b.n	800634c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d023      	beq.n	800631a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d2:	4b8c      	ldr	r3, [pc, #560]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a8b      	ldr	r2, [pc, #556]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80062d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062de:	f7fd fd63 	bl	8003da8 <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e6:	f7fd fd5f 	bl	8003da8 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e264      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062f8:	4b82      	ldr	r3, [pc, #520]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0f0      	beq.n	80062e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006304:	4b7f      	ldr	r3, [pc, #508]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	061b      	lsls	r3, r3, #24
 8006312:	497c      	ldr	r1, [pc, #496]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006314:	4313      	orrs	r3, r2
 8006316:	604b      	str	r3, [r1, #4]
 8006318:	e018      	b.n	800634c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800631a:	4b7a      	ldr	r3, [pc, #488]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a79      	ldr	r2, [pc, #484]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006326:	f7fd fd3f 	bl	8003da8 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800632e:	f7fd fd3b 	bl	8003da8 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e240      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006340:	4b70      	ldr	r3, [pc, #448]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f0      	bne.n	800632e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d03c      	beq.n	80063d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01c      	beq.n	800639a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006360:	4b68      	ldr	r3, [pc, #416]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006366:	4a67      	ldr	r2, [pc, #412]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006370:	f7fd fd1a 	bl	8003da8 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006378:	f7fd fd16 	bl	8003da8 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e21b      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800638a:	4b5e      	ldr	r3, [pc, #376]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 800638c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0ef      	beq.n	8006378 <HAL_RCC_OscConfig+0x3ec>
 8006398:	e01b      	b.n	80063d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800639a:	4b5a      	ldr	r3, [pc, #360]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 800639c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063a0:	4a58      	ldr	r2, [pc, #352]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063aa:	f7fd fcfd 	bl	8003da8 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b2:	f7fd fcf9 	bl	8003da8 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e1fe      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063c4:	4b4f      	ldr	r3, [pc, #316]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80063c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1ef      	bne.n	80063b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80a6 	beq.w	800652c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e0:	2300      	movs	r3, #0
 80063e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80063e4:	4b47      	ldr	r3, [pc, #284]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10d      	bne.n	800640c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f0:	4b44      	ldr	r3, [pc, #272]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	4a43      	ldr	r2, [pc, #268]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80063f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fa:	6593      	str	r3, [r2, #88]	; 0x58
 80063fc:	4b41      	ldr	r3, [pc, #260]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006408:	2301      	movs	r3, #1
 800640a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800640c:	4b3e      	ldr	r3, [pc, #248]	; (8006508 <HAL_RCC_OscConfig+0x57c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d118      	bne.n	800644a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006418:	4b3b      	ldr	r3, [pc, #236]	; (8006508 <HAL_RCC_OscConfig+0x57c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a3a      	ldr	r2, [pc, #232]	; (8006508 <HAL_RCC_OscConfig+0x57c>)
 800641e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006422:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006424:	f7fd fcc0 	bl	8003da8 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800642c:	f7fd fcbc 	bl	8003da8 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e1c1      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800643e:	4b32      	ldr	r3, [pc, #200]	; (8006508 <HAL_RCC_OscConfig+0x57c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d108      	bne.n	8006464 <HAL_RCC_OscConfig+0x4d8>
 8006452:	4b2c      	ldr	r3, [pc, #176]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	4a2a      	ldr	r2, [pc, #168]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006462:	e024      	b.n	80064ae <HAL_RCC_OscConfig+0x522>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2b05      	cmp	r3, #5
 800646a:	d110      	bne.n	800648e <HAL_RCC_OscConfig+0x502>
 800646c:	4b25      	ldr	r3, [pc, #148]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 800646e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006472:	4a24      	ldr	r2, [pc, #144]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006474:	f043 0304 	orr.w	r3, r3, #4
 8006478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800647c:	4b21      	ldr	r3, [pc, #132]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	4a20      	ldr	r2, [pc, #128]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800648c:	e00f      	b.n	80064ae <HAL_RCC_OscConfig+0x522>
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006494:	4a1b      	ldr	r2, [pc, #108]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 8006496:	f023 0301 	bic.w	r3, r3, #1
 800649a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800649e:	4b19      	ldr	r3, [pc, #100]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80064a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a4:	4a17      	ldr	r2, [pc, #92]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80064a6:	f023 0304 	bic.w	r3, r3, #4
 80064aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b6:	f7fd fc77 	bl	8003da8 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064bc:	e00a      	b.n	80064d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064be:	f7fd fc73 	bl	8003da8 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e176      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_RCC_OscConfig+0x578>)
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0ed      	beq.n	80064be <HAL_RCC_OscConfig+0x532>
 80064e2:	e01a      	b.n	800651a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e4:	f7fd fc60 	bl	8003da8 <HAL_GetTick>
 80064e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80064ea:	e00f      	b.n	800650c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ec:	f7fd fc5c 	bl	8003da8 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d906      	bls.n	800650c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e15f      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
 8006502:	bf00      	nop
 8006504:	40021000 	.word	0x40021000
 8006508:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800650c:	4baa      	ldr	r3, [pc, #680]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e8      	bne.n	80064ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800651a:	7ffb      	ldrb	r3, [r7, #31]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d105      	bne.n	800652c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006520:	4ba5      	ldr	r3, [pc, #660]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006524:	4aa4      	ldr	r2, [pc, #656]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800652a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d03c      	beq.n	80065b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01c      	beq.n	800657a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006540:	4b9d      	ldr	r3, [pc, #628]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006546:	4a9c      	ldr	r2, [pc, #624]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006548:	f043 0301 	orr.w	r3, r3, #1
 800654c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006550:	f7fd fc2a 	bl	8003da8 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006558:	f7fd fc26 	bl	8003da8 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e12b      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800656a:	4b93      	ldr	r3, [pc, #588]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800656c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0ef      	beq.n	8006558 <HAL_RCC_OscConfig+0x5cc>
 8006578:	e01b      	b.n	80065b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800657a:	4b8f      	ldr	r3, [pc, #572]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800657c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006580:	4a8d      	ldr	r2, [pc, #564]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658a:	f7fd fc0d 	bl	8003da8 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006592:	f7fd fc09 	bl	8003da8 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e10e      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065a4:	4b84      	ldr	r3, [pc, #528]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80065a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1ef      	bne.n	8006592 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8102 	beq.w	80067c0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	f040 80c5 	bne.w	8006750 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80065c6:	4b7c      	ldr	r3, [pc, #496]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f003 0203 	and.w	r2, r3, #3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d12c      	bne.n	8006634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	3b01      	subs	r3, #1
 80065e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d123      	bne.n	8006634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d11b      	bne.n	8006634 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006606:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006608:	429a      	cmp	r2, r3
 800660a:	d113      	bne.n	8006634 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	3b01      	subs	r3, #1
 800661a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800661c:	429a      	cmp	r2, r3
 800661e:	d109      	bne.n	8006634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	085b      	lsrs	r3, r3, #1
 800662c:	3b01      	subs	r3, #1
 800662e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006630:	429a      	cmp	r2, r3
 8006632:	d067      	beq.n	8006704 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b0c      	cmp	r3, #12
 8006638:	d062      	beq.n	8006700 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800663a:	4b5f      	ldr	r3, [pc, #380]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e0bb      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800664a:	4b5b      	ldr	r3, [pc, #364]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a5a      	ldr	r2, [pc, #360]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006650:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006654:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006656:	f7fd fba7 	bl	8003da8 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800665e:	f7fd fba3 	bl	8003da8 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e0a8      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006670:	4b51      	ldr	r3, [pc, #324]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f0      	bne.n	800665e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800667c:	4b4e      	ldr	r3, [pc, #312]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	4b4e      	ldr	r3, [pc, #312]	; (80067bc <HAL_RCC_OscConfig+0x830>)
 8006682:	4013      	ands	r3, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800668c:	3a01      	subs	r2, #1
 800668e:	0112      	lsls	r2, r2, #4
 8006690:	4311      	orrs	r1, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006696:	0212      	lsls	r2, r2, #8
 8006698:	4311      	orrs	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800669e:	0852      	lsrs	r2, r2, #1
 80066a0:	3a01      	subs	r2, #1
 80066a2:	0552      	lsls	r2, r2, #21
 80066a4:	4311      	orrs	r1, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066aa:	0852      	lsrs	r2, r2, #1
 80066ac:	3a01      	subs	r2, #1
 80066ae:	0652      	lsls	r2, r2, #25
 80066b0:	4311      	orrs	r1, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066b6:	06d2      	lsls	r2, r2, #27
 80066b8:	430a      	orrs	r2, r1
 80066ba:	493f      	ldr	r1, [pc, #252]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80066c0:	4b3d      	ldr	r3, [pc, #244]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a3c      	ldr	r2, [pc, #240]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80066c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066cc:	4b3a      	ldr	r3, [pc, #232]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4a39      	ldr	r2, [pc, #228]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80066d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066d8:	f7fd fb66 	bl	8003da8 <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e0:	f7fd fb62 	bl	8003da8 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e067      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066f2:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066fe:	e05f      	b.n	80067c0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e05e      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006704:	4b2c      	ldr	r3, [pc, #176]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d157      	bne.n	80067c0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006710:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a28      	ldr	r2, [pc, #160]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800671a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800671c:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4a25      	ldr	r2, [pc, #148]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006726:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006728:	f7fd fb3e 	bl	8003da8 <HAL_GetTick>
 800672c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006730:	f7fd fb3a 	bl	8003da8 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e03f      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006742:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f0      	beq.n	8006730 <HAL_RCC_OscConfig+0x7a4>
 800674e:	e037      	b.n	80067c0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b0c      	cmp	r3, #12
 8006754:	d02d      	beq.n	80067b2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006756:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800675c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006760:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d105      	bne.n	800677a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	4a11      	ldr	r2, [pc, #68]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	4a0e      	ldr	r2, [pc, #56]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 8006780:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006788:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fd fb0d 	bl	8003da8 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006792:	f7fd fb09 	bl	8003da8 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e00e      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <HAL_RCC_OscConfig+0x82c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f0      	bne.n	8006792 <HAL_RCC_OscConfig+0x806>
 80067b0:	e006      	b.n	80067c0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e005      	b.n	80067c2 <HAL_RCC_OscConfig+0x836>
 80067b6:	bf00      	nop
 80067b8:	40021000 	.word	0x40021000
 80067bc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop

080067cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e0c8      	b.n	8006972 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067e0:	4b66      	ldr	r3, [pc, #408]	; (800697c <HAL_RCC_ClockConfig+0x1b0>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d910      	bls.n	8006810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b63      	ldr	r3, [pc, #396]	; (800697c <HAL_RCC_ClockConfig+0x1b0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 0207 	bic.w	r2, r3, #7
 80067f6:	4961      	ldr	r1, [pc, #388]	; (800697c <HAL_RCC_ClockConfig+0x1b0>)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fe:	4b5f      	ldr	r3, [pc, #380]	; (800697c <HAL_RCC_ClockConfig+0x1b0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d001      	beq.n	8006810 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0b0      	b.n	8006972 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d04c      	beq.n	80068b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b03      	cmp	r3, #3
 8006822:	d107      	bne.n	8006834 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006824:	4b56      	ldr	r3, [pc, #344]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d121      	bne.n	8006874 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e09e      	b.n	8006972 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b02      	cmp	r3, #2
 800683a:	d107      	bne.n	800684c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800683c:	4b50      	ldr	r3, [pc, #320]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d115      	bne.n	8006874 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e092      	b.n	8006972 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d107      	bne.n	8006864 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006854:	4b4a      	ldr	r3, [pc, #296]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e086      	b.n	8006972 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006864:	4b46      	ldr	r3, [pc, #280]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e07e      	b.n	8006972 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006874:	4b42      	ldr	r3, [pc, #264]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f023 0203 	bic.w	r2, r3, #3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	493f      	ldr	r1, [pc, #252]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 8006882:	4313      	orrs	r3, r2
 8006884:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006886:	f7fd fa8f 	bl	8003da8 <HAL_GetTick>
 800688a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688c:	e00a      	b.n	80068a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800688e:	f7fd fa8b 	bl	8003da8 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f241 3288 	movw	r2, #5000	; 0x1388
 800689c:	4293      	cmp	r3, r2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e066      	b.n	8006972 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a4:	4b36      	ldr	r3, [pc, #216]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 020c 	and.w	r2, r3, #12
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d1eb      	bne.n	800688e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c2:	4b2f      	ldr	r3, [pc, #188]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	492c      	ldr	r1, [pc, #176]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068d4:	4b29      	ldr	r3, [pc, #164]	; (800697c <HAL_RCC_ClockConfig+0x1b0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d210      	bcs.n	8006904 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e2:	4b26      	ldr	r3, [pc, #152]	; (800697c <HAL_RCC_ClockConfig+0x1b0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 0207 	bic.w	r2, r3, #7
 80068ea:	4924      	ldr	r1, [pc, #144]	; (800697c <HAL_RCC_ClockConfig+0x1b0>)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b22      	ldr	r3, [pc, #136]	; (800697c <HAL_RCC_ClockConfig+0x1b0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e036      	b.n	8006972 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006910:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4918      	ldr	r1, [pc, #96]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 800691e:	4313      	orrs	r3, r2
 8006920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0308 	and.w	r3, r3, #8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4910      	ldr	r1, [pc, #64]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 800693e:	4313      	orrs	r3, r2
 8006940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006942:	f000 f859 	bl	80069f8 <HAL_RCC_GetSysClockFreq>
 8006946:	4602      	mov	r2, r0
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <HAL_RCC_ClockConfig+0x1b4>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	490c      	ldr	r1, [pc, #48]	; (8006984 <HAL_RCC_ClockConfig+0x1b8>)
 8006954:	5ccb      	ldrb	r3, [r1, r3]
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	fa22 f303 	lsr.w	r3, r2, r3
 800695e:	4a0a      	ldr	r2, [pc, #40]	; (8006988 <HAL_RCC_ClockConfig+0x1bc>)
 8006960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006962:	4b0a      	ldr	r3, [pc, #40]	; (800698c <HAL_RCC_ClockConfig+0x1c0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f7fd f9ce 	bl	8003d08 <HAL_InitTick>
 800696c:	4603      	mov	r3, r0
 800696e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006970:	7afb      	ldrb	r3, [r7, #11]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40022000 	.word	0x40022000
 8006980:	40021000 	.word	0x40021000
 8006984:	08009634 	.word	0x08009634
 8006988:	20000050 	.word	0x20000050
 800698c:	20000054 	.word	0x20000054

08006990 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 800699c:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <HAL_RCC_MCOConfig+0x64>)
 800699e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a0:	4a14      	ldr	r2, [pc, #80]	; (80069f4 <HAL_RCC_MCOConfig+0x64>)
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069a8:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <HAL_RCC_MCOConfig+0x64>)
 80069aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 80069b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ba:	2302      	movs	r3, #2
 80069bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069be:	2302      	movs	r3, #2
 80069c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80069ca:	f107 0314 	add.w	r3, r7, #20
 80069ce:	4619      	mov	r1, r3
 80069d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069d4:	f7fe fb84 	bl	80050e0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <HAL_RCC_MCOConfig+0x64>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	430b      	orrs	r3, r1
 80069e6:	4903      	ldr	r1, [pc, #12]	; (80069f4 <HAL_RCC_MCOConfig+0x64>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	608b      	str	r3, [r1, #8]
}
 80069ec:	bf00      	nop
 80069ee:	3728      	adds	r7, #40	; 0x28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40021000 	.word	0x40021000

080069f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b089      	sub	sp, #36	; 0x24
 80069fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	2300      	movs	r3, #0
 8006a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a06:	4b3e      	ldr	r3, [pc, #248]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a10:	4b3b      	ldr	r3, [pc, #236]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_RCC_GetSysClockFreq+0x34>
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b0c      	cmp	r3, #12
 8006a24:	d121      	bne.n	8006a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d11e      	bne.n	8006a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a2c:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d107      	bne.n	8006a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a38:	4b31      	ldr	r3, [pc, #196]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	e005      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a48:	4b2d      	ldr	r3, [pc, #180]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	091b      	lsrs	r3, r3, #4
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a54:	4a2b      	ldr	r2, [pc, #172]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10d      	bne.n	8006a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a68:	e00a      	b.n	8006a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d102      	bne.n	8006a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a70:	4b25      	ldr	r3, [pc, #148]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e004      	b.n	8006a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a7c:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8006a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2b0c      	cmp	r3, #12
 8006a84:	d134      	bne.n	8006af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a86:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d003      	beq.n	8006a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d003      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8006a9c:	e005      	b.n	8006aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006a9e:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8006aa0:	617b      	str	r3, [r7, #20]
      break;
 8006aa2:	e005      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006aa4:	4b19      	ldr	r3, [pc, #100]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8006aa6:	617b      	str	r3, [r7, #20]
      break;
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	617b      	str	r3, [r7, #20]
      break;
 8006aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ab0:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	3301      	adds	r3, #1
 8006abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006abe:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	fb02 f203 	mul.w	r2, r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	0e5b      	lsrs	r3, r3, #25
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006af0:	69bb      	ldr	r3, [r7, #24]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3724      	adds	r7, #36	; 0x24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40021000 	.word	0x40021000
 8006b04:	08009644 	.word	0x08009644
 8006b08:	00f42400 	.word	0x00f42400
 8006b0c:	0124f800 	.word	0x0124f800

08006b10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b18:	2300      	movs	r3, #0
 8006b1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b1c:	4b2a      	ldr	r3, [pc, #168]	; (8006bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b28:	f7ff f9cc 	bl	8005ec4 <HAL_PWREx_GetVoltageRange>
 8006b2c:	6178      	str	r0, [r7, #20]
 8006b2e:	e014      	b.n	8006b5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b30:	4b25      	ldr	r3, [pc, #148]	; (8006bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b34:	4a24      	ldr	r2, [pc, #144]	; (8006bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b3c:	4b22      	ldr	r3, [pc, #136]	; (8006bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b48:	f7ff f9bc 	bl	8005ec4 <HAL_PWREx_GetVoltageRange>
 8006b4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b52:	4a1d      	ldr	r2, [pc, #116]	; (8006bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b60:	d10b      	bne.n	8006b7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b80      	cmp	r3, #128	; 0x80
 8006b66:	d919      	bls.n	8006b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2ba0      	cmp	r3, #160	; 0xa0
 8006b6c:	d902      	bls.n	8006b74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b6e:	2302      	movs	r3, #2
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	e013      	b.n	8006b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b74:	2301      	movs	r3, #1
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	e010      	b.n	8006b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d902      	bls.n	8006b86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b80:	2303      	movs	r3, #3
 8006b82:	613b      	str	r3, [r7, #16]
 8006b84:	e00a      	b.n	8006b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b80      	cmp	r3, #128	; 0x80
 8006b8a:	d102      	bne.n	8006b92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	e004      	b.n	8006b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b70      	cmp	r3, #112	; 0x70
 8006b96:	d101      	bne.n	8006b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b98:	2301      	movs	r3, #1
 8006b9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f023 0207 	bic.w	r2, r3, #7
 8006ba4:	4909      	ldr	r1, [pc, #36]	; (8006bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006bac:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d001      	beq.n	8006bbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	40022000 	.word	0x40022000

08006bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bd8:	2300      	movs	r3, #0
 8006bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bdc:	2300      	movs	r3, #0
 8006bde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d031      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bf4:	d01a      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006bf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bfa:	d814      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d009      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c04:	d10f      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006c06:	4b5d      	ldr	r3, [pc, #372]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	4a5c      	ldr	r2, [pc, #368]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c12:	e00c      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fa1e 	bl	800705c <RCCEx_PLLSAI1_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c24:	e003      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	74fb      	strb	r3, [r7, #19]
      break;
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c2e:	7cfb      	ldrb	r3, [r7, #19]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10b      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c34:	4b51      	ldr	r3, [pc, #324]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c42:	494e      	ldr	r1, [pc, #312]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c4a:	e001      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4c:	7cfb      	ldrb	r3, [r7, #19]
 8006c4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 809e 	beq.w	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c62:	4b46      	ldr	r3, [pc, #280]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00d      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c78:	4b40      	ldr	r3, [pc, #256]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7c:	4a3f      	ldr	r2, [pc, #252]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c82:	6593      	str	r3, [r2, #88]	; 0x58
 8006c84:	4b3d      	ldr	r3, [pc, #244]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c90:	2301      	movs	r3, #1
 8006c92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c94:	4b3a      	ldr	r3, [pc, #232]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a39      	ldr	r2, [pc, #228]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ca0:	f7fd f882 	bl	8003da8 <HAL_GetTick>
 8006ca4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ca6:	e009      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca8:	f7fd f87e 	bl	8003da8 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d902      	bls.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	74fb      	strb	r3, [r7, #19]
        break;
 8006cba:	e005      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006cbc:	4b30      	ldr	r3, [pc, #192]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0ef      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006cc8:	7cfb      	ldrb	r3, [r7, #19]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d15a      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cce:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01e      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d019      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cea:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cf6:	4b21      	ldr	r3, [pc, #132]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d06:	4b1d      	ldr	r3, [pc, #116]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0c:	4a1b      	ldr	r2, [pc, #108]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d16:	4a19      	ldr	r2, [pc, #100]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d016      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fd f83e 	bl	8003da8 <HAL_GetTick>
 8006d2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d2e:	e00b      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d30:	f7fd f83a 	bl	8003da8 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d902      	bls.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	74fb      	strb	r3, [r7, #19]
            break;
 8006d46:	e006      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0ec      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006d56:	7cfb      	ldrb	r3, [r7, #19]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6a:	4904      	ldr	r1, [pc, #16]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d72:	e009      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d74:	7cfb      	ldrb	r3, [r7, #19]
 8006d76:	74bb      	strb	r3, [r7, #18]
 8006d78:	e006      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006d7a:	bf00      	nop
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d84:	7cfb      	ldrb	r3, [r7, #19]
 8006d86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d88:	7c7b      	ldrb	r3, [r7, #17]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d105      	bne.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d8e:	4bb2      	ldr	r3, [pc, #712]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d92:	4ab1      	ldr	r2, [pc, #708]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006da6:	4bac      	ldr	r3, [pc, #688]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dac:	f023 0203 	bic.w	r2, r3, #3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	49a8      	ldr	r1, [pc, #672]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006dc8:	4ba3      	ldr	r3, [pc, #652]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dce:	f023 020c 	bic.w	r2, r3, #12
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	49a0      	ldr	r1, [pc, #640]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dea:	4b9b      	ldr	r3, [pc, #620]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	4997      	ldr	r1, [pc, #604]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e0c:	4b92      	ldr	r3, [pc, #584]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	498f      	ldr	r1, [pc, #572]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e2e:	4b8a      	ldr	r3, [pc, #552]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3c:	4986      	ldr	r1, [pc, #536]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e50:	4b81      	ldr	r3, [pc, #516]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	497e      	ldr	r1, [pc, #504]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e72:	4b79      	ldr	r3, [pc, #484]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	4975      	ldr	r1, [pc, #468]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e94:	4b70      	ldr	r3, [pc, #448]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea2:	496d      	ldr	r1, [pc, #436]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eb6:	4b68      	ldr	r3, [pc, #416]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	4964      	ldr	r1, [pc, #400]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d028      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ed8:	4b5f      	ldr	r3, [pc, #380]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ede:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee6:	495c      	ldr	r1, [pc, #368]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef6:	d106      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ef8:	4b57      	ldr	r3, [pc, #348]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4a56      	ldr	r2, [pc, #344]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f02:	60d3      	str	r3, [r2, #12]
 8006f04:	e011      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f0e:	d10c      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3304      	adds	r3, #4
 8006f14:	2101      	movs	r1, #1
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 f8a0 	bl	800705c <RCCEx_PLLSAI1_Config>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f20:	7cfb      	ldrb	r3, [r7, #19]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8006f26:	7cfb      	ldrb	r3, [r7, #19]
 8006f28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d028      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f36:	4b48      	ldr	r3, [pc, #288]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f44:	4944      	ldr	r1, [pc, #272]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f54:	d106      	bne.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f56:	4b40      	ldr	r3, [pc, #256]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	4a3f      	ldr	r2, [pc, #252]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f60:	60d3      	str	r3, [r2, #12]
 8006f62:	e011      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3304      	adds	r3, #4
 8006f72:	2101      	movs	r1, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 f871 	bl	800705c <RCCEx_PLLSAI1_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f7e:	7cfb      	ldrb	r3, [r7, #19]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006f84:	7cfb      	ldrb	r3, [r7, #19]
 8006f86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d028      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f94:	4b30      	ldr	r3, [pc, #192]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa2:	492d      	ldr	r1, [pc, #180]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb4:	4b28      	ldr	r3, [pc, #160]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	4a27      	ldr	r2, [pc, #156]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fbe:	60d3      	str	r3, [r2, #12]
 8006fc0:	e011      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fca:	d10c      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 f842 	bl	800705c <RCCEx_PLLSAI1_Config>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fdc:	7cfb      	ldrb	r3, [r7, #19]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8006fe2:	7cfb      	ldrb	r3, [r7, #19]
 8006fe4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01c      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ff2:	4b19      	ldr	r3, [pc, #100]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	4915      	ldr	r1, [pc, #84]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007010:	d10c      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	2102      	movs	r1, #2
 8007018:	4618      	mov	r0, r3
 800701a:	f000 f81f 	bl	800705c <RCCEx_PLLSAI1_Config>
 800701e:	4603      	mov	r3, r0
 8007020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007022:	7cfb      	ldrb	r3, [r7, #19]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8007028:	7cfb      	ldrb	r3, [r7, #19]
 800702a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007046:	4904      	ldr	r1, [pc, #16]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007048:	4313      	orrs	r3, r2
 800704a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800704e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40021000 	.word	0x40021000

0800705c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800706a:	4b74      	ldr	r3, [pc, #464]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d018      	beq.n	80070a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007076:	4b71      	ldr	r3, [pc, #452]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f003 0203 	and.w	r2, r3, #3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d10d      	bne.n	80070a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
       ||
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800708e:	4b6b      	ldr	r3, [pc, #428]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	091b      	lsrs	r3, r3, #4
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
       ||
 800709e:	429a      	cmp	r2, r3
 80070a0:	d047      	beq.n	8007132 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	73fb      	strb	r3, [r7, #15]
 80070a6:	e044      	b.n	8007132 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d018      	beq.n	80070e2 <RCCEx_PLLSAI1_Config+0x86>
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d825      	bhi.n	8007100 <RCCEx_PLLSAI1_Config+0xa4>
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d002      	beq.n	80070be <RCCEx_PLLSAI1_Config+0x62>
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d009      	beq.n	80070d0 <RCCEx_PLLSAI1_Config+0x74>
 80070bc:	e020      	b.n	8007100 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070be:	4b5f      	ldr	r3, [pc, #380]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d11d      	bne.n	8007106 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070ce:	e01a      	b.n	8007106 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070d0:	4b5a      	ldr	r3, [pc, #360]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d116      	bne.n	800710a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070e0:	e013      	b.n	800710a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80070e2:	4b56      	ldr	r3, [pc, #344]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10f      	bne.n	800710e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80070ee:	4b53      	ldr	r3, [pc, #332]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070fe:	e006      	b.n	800710e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
      break;
 8007104:	e004      	b.n	8007110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007106:	bf00      	nop
 8007108:	e002      	b.n	8007110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800710a:	bf00      	nop
 800710c:	e000      	b.n	8007110 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800710e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10d      	bne.n	8007132 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007116:	4b49      	ldr	r3, [pc, #292]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	3b01      	subs	r3, #1
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	430b      	orrs	r3, r1
 800712c:	4943      	ldr	r1, [pc, #268]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 800712e:	4313      	orrs	r3, r2
 8007130:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d17c      	bne.n	8007232 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007138:	4b40      	ldr	r3, [pc, #256]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3f      	ldr	r2, [pc, #252]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 800713e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007144:	f7fc fe30 	bl	8003da8 <HAL_GetTick>
 8007148:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800714a:	e009      	b.n	8007160 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800714c:	f7fc fe2c 	bl	8003da8 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d902      	bls.n	8007160 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	73fb      	strb	r3, [r7, #15]
        break;
 800715e:	e005      	b.n	800716c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007160:	4b36      	ldr	r3, [pc, #216]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1ef      	bne.n	800714c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d15f      	bne.n	8007232 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d110      	bne.n	800719a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007178:	4b30      	ldr	r3, [pc, #192]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	6892      	ldr	r2, [r2, #8]
 8007188:	0211      	lsls	r1, r2, #8
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68d2      	ldr	r2, [r2, #12]
 800718e:	06d2      	lsls	r2, r2, #27
 8007190:	430a      	orrs	r2, r1
 8007192:	492a      	ldr	r1, [pc, #168]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007194:	4313      	orrs	r3, r2
 8007196:	610b      	str	r3, [r1, #16]
 8007198:	e027      	b.n	80071ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d112      	bne.n	80071c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071a0:	4b26      	ldr	r3, [pc, #152]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80071a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6892      	ldr	r2, [r2, #8]
 80071b0:	0211      	lsls	r1, r2, #8
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6912      	ldr	r2, [r2, #16]
 80071b6:	0852      	lsrs	r2, r2, #1
 80071b8:	3a01      	subs	r2, #1
 80071ba:	0552      	lsls	r2, r2, #21
 80071bc:	430a      	orrs	r2, r1
 80071be:	491f      	ldr	r1, [pc, #124]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	610b      	str	r3, [r1, #16]
 80071c4:	e011      	b.n	80071ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071c6:	4b1d      	ldr	r3, [pc, #116]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80071ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6892      	ldr	r2, [r2, #8]
 80071d6:	0211      	lsls	r1, r2, #8
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6952      	ldr	r2, [r2, #20]
 80071dc:	0852      	lsrs	r2, r2, #1
 80071de:	3a01      	subs	r2, #1
 80071e0:	0652      	lsls	r2, r2, #25
 80071e2:	430a      	orrs	r2, r1
 80071e4:	4915      	ldr	r1, [pc, #84]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80071ea:	4b14      	ldr	r3, [pc, #80]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a13      	ldr	r2, [pc, #76]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 80071f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f6:	f7fc fdd7 	bl	8003da8 <HAL_GetTick>
 80071fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071fc:	e009      	b.n	8007212 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071fe:	f7fc fdd3 	bl	8003da8 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d902      	bls.n	8007212 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	73fb      	strb	r3, [r7, #15]
          break;
 8007210:	e005      	b.n	800721e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007212:	4b0a      	ldr	r3, [pc, #40]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0ef      	beq.n	80071fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	4903      	ldr	r1, [pc, #12]	; (800723c <RCCEx_PLLSAI1_Config+0x1e0>)
 800722e:	4313      	orrs	r3, r2
 8007230:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	40021000 	.word	0x40021000

08007240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e049      	b.n	80072e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fc fc02 	bl	8003a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f000 fc08 	bl	8007a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b01      	cmp	r3, #1
 8007302:	d001      	beq.n	8007308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e03b      	b.n	8007380 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0201 	orr.w	r2, r2, #1
 800731e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a19      	ldr	r2, [pc, #100]	; (800738c <HAL_TIM_Base_Start_IT+0x9c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d009      	beq.n	800733e <HAL_TIM_Base_Start_IT+0x4e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d004      	beq.n	800733e <HAL_TIM_Base_Start_IT+0x4e>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a15      	ldr	r2, [pc, #84]	; (8007390 <HAL_TIM_Base_Start_IT+0xa0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d115      	bne.n	800736a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	4b13      	ldr	r3, [pc, #76]	; (8007394 <HAL_TIM_Base_Start_IT+0xa4>)
 8007346:	4013      	ands	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b06      	cmp	r3, #6
 800734e:	d015      	beq.n	800737c <HAL_TIM_Base_Start_IT+0x8c>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007356:	d011      	beq.n	800737c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007368:	e008      	b.n	800737c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e000      	b.n	800737e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40014000 	.word	0x40014000
 8007394:	00010007 	.word	0x00010007

08007398 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0201 	bic.w	r2, r2, #1
 80073ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10f      	bne.n	80073e0 <HAL_TIM_Base_Stop_IT+0x48>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6a1a      	ldr	r2, [r3, #32]
 80073c6:	f240 4344 	movw	r3, #1092	; 0x444
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d107      	bne.n	80073e0 <HAL_TIM_Base_Stop_IT+0x48>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e049      	b.n	800749c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7fc fadf 	bl	80039e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f000 fb2d 	bl	8007a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_TIM_IC_Start_IT+0x1a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	e023      	b.n	8007506 <HAL_TIM_IC_Start_IT+0x62>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d104      	bne.n	80074ce <HAL_TIM_IC_Start_IT+0x2a>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	e01b      	b.n	8007506 <HAL_TIM_IC_Start_IT+0x62>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d104      	bne.n	80074de <HAL_TIM_IC_Start_IT+0x3a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	e013      	b.n	8007506 <HAL_TIM_IC_Start_IT+0x62>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	d104      	bne.n	80074ee <HAL_TIM_IC_Start_IT+0x4a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	e00b      	b.n	8007506 <HAL_TIM_IC_Start_IT+0x62>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_IC_Start_IT+0x5a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	e003      	b.n	8007506 <HAL_TIM_IC_Start_IT+0x62>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007504:	b2db      	uxtb	r3, r3
 8007506:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <HAL_TIM_IC_Start_IT+0x74>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007514:	b2db      	uxtb	r3, r3
 8007516:	e013      	b.n	8007540 <HAL_TIM_IC_Start_IT+0x9c>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b04      	cmp	r3, #4
 800751c:	d104      	bne.n	8007528 <HAL_TIM_IC_Start_IT+0x84>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007524:	b2db      	uxtb	r3, r3
 8007526:	e00b      	b.n	8007540 <HAL_TIM_IC_Start_IT+0x9c>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b08      	cmp	r3, #8
 800752c:	d104      	bne.n	8007538 <HAL_TIM_IC_Start_IT+0x94>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007534:	b2db      	uxtb	r3, r3
 8007536:	e003      	b.n	8007540 <HAL_TIM_IC_Start_IT+0x9c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800753e:	b2db      	uxtb	r3, r3
 8007540:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d102      	bne.n	800754e <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d001      	beq.n	8007552 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e0c4      	b.n	80076dc <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <HAL_TIM_IC_Start_IT+0xbe>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007560:	e023      	b.n	80075aa <HAL_TIM_IC_Start_IT+0x106>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b04      	cmp	r3, #4
 8007566:	d104      	bne.n	8007572 <HAL_TIM_IC_Start_IT+0xce>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007570:	e01b      	b.n	80075aa <HAL_TIM_IC_Start_IT+0x106>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b08      	cmp	r3, #8
 8007576:	d104      	bne.n	8007582 <HAL_TIM_IC_Start_IT+0xde>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007580:	e013      	b.n	80075aa <HAL_TIM_IC_Start_IT+0x106>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b0c      	cmp	r3, #12
 8007586:	d104      	bne.n	8007592 <HAL_TIM_IC_Start_IT+0xee>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007590:	e00b      	b.n	80075aa <HAL_TIM_IC_Start_IT+0x106>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b10      	cmp	r3, #16
 8007596:	d104      	bne.n	80075a2 <HAL_TIM_IC_Start_IT+0xfe>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075a0:	e003      	b.n	80075aa <HAL_TIM_IC_Start_IT+0x106>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_IC_Start_IT+0x116>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b8:	e013      	b.n	80075e2 <HAL_TIM_IC_Start_IT+0x13e>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d104      	bne.n	80075ca <HAL_TIM_IC_Start_IT+0x126>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c8:	e00b      	b.n	80075e2 <HAL_TIM_IC_Start_IT+0x13e>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d104      	bne.n	80075da <HAL_TIM_IC_Start_IT+0x136>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075d8:	e003      	b.n	80075e2 <HAL_TIM_IC_Start_IT+0x13e>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2202      	movs	r2, #2
 80075de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b0c      	cmp	r3, #12
 80075e6:	d841      	bhi.n	800766c <HAL_TIM_IC_Start_IT+0x1c8>
 80075e8:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <HAL_TIM_IC_Start_IT+0x14c>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007625 	.word	0x08007625
 80075f4:	0800766d 	.word	0x0800766d
 80075f8:	0800766d 	.word	0x0800766d
 80075fc:	0800766d 	.word	0x0800766d
 8007600:	08007637 	.word	0x08007637
 8007604:	0800766d 	.word	0x0800766d
 8007608:	0800766d 	.word	0x0800766d
 800760c:	0800766d 	.word	0x0800766d
 8007610:	08007649 	.word	0x08007649
 8007614:	0800766d 	.word	0x0800766d
 8007618:	0800766d 	.word	0x0800766d
 800761c:	0800766d 	.word	0x0800766d
 8007620:	0800765b 	.word	0x0800765b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0202 	orr.w	r2, r2, #2
 8007632:	60da      	str	r2, [r3, #12]
      break;
 8007634:	e01b      	b.n	800766e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0204 	orr.w	r2, r2, #4
 8007644:	60da      	str	r2, [r3, #12]
      break;
 8007646:	e012      	b.n	800766e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0208 	orr.w	r2, r2, #8
 8007656:	60da      	str	r2, [r3, #12]
      break;
 8007658:	e009      	b.n	800766e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0210 	orr.w	r2, r2, #16
 8007668:	60da      	str	r2, [r3, #12]
      break;
 800766a:	e000      	b.n	800766e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800766c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2201      	movs	r2, #1
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fb7c 	bl	8007d74 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <HAL_TIM_IC_Start_IT+0x240>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_TIM_IC_Start_IT+0x1f6>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768e:	d004      	beq.n	800769a <HAL_TIM_IC_Start_IT+0x1f6>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <HAL_TIM_IC_Start_IT+0x244>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d115      	bne.n	80076c6 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	4b12      	ldr	r3, [pc, #72]	; (80076ec <HAL_TIM_IC_Start_IT+0x248>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	d015      	beq.n	80076d8 <HAL_TIM_IC_Start_IT+0x234>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b2:	d011      	beq.n	80076d8 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c4:	e008      	b.n	80076d8 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	e000      	b.n	80076da <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40014000 	.word	0x40014000
 80076ec:	00010007 	.word	0x00010007

080076f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b02      	cmp	r3, #2
 8007704:	d122      	bne.n	800774c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b02      	cmp	r3, #2
 8007712:	d11b      	bne.n	800774c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f06f 0202 	mvn.w	r2, #2
 800771c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fb faa0 	bl	8002c78 <HAL_TIM_IC_CaptureCallback>
 8007738:	e005      	b.n	8007746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f98b 	bl	8007a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f992 	bl	8007a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b04      	cmp	r3, #4
 8007758:	d122      	bne.n	80077a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b04      	cmp	r3, #4
 8007766:	d11b      	bne.n	80077a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0204 	mvn.w	r2, #4
 8007770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fb fa76 	bl	8002c78 <HAL_TIM_IC_CaptureCallback>
 800778c:	e005      	b.n	800779a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f961 	bl	8007a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f968 	bl	8007a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d122      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d11b      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f06f 0208 	mvn.w	r2, #8
 80077c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2204      	movs	r2, #4
 80077ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fb fa4c 	bl	8002c78 <HAL_TIM_IC_CaptureCallback>
 80077e0:	e005      	b.n	80077ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f937 	bl	8007a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f93e 	bl	8007a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	2b10      	cmp	r3, #16
 8007800:	d122      	bne.n	8007848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b10      	cmp	r3, #16
 800780e:	d11b      	bne.n	8007848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0210 	mvn.w	r2, #16
 8007818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2208      	movs	r2, #8
 800781e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fb fa22 	bl	8002c78 <HAL_TIM_IC_CaptureCallback>
 8007834:	e005      	b.n	8007842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f90d 	bl	8007a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f914 	bl	8007a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b01      	cmp	r3, #1
 8007854:	d10e      	bne.n	8007874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b01      	cmp	r3, #1
 8007862:	d107      	bne.n	8007874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f06f 0201 	mvn.w	r2, #1
 800786c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fb fb70 	bl	8002f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d10e      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788c:	2b80      	cmp	r3, #128	; 0x80
 800788e:	d107      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fb00 	bl	8007ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ae:	d10e      	bne.n	80078ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ba:	2b80      	cmp	r3, #128	; 0x80
 80078bc:	d107      	bne.n	80078ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 faf3 	bl	8007eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	d10e      	bne.n	80078fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d107      	bne.n	80078fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f8c2 	bl	8007a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b20      	cmp	r3, #32
 8007906:	d10e      	bne.n	8007926 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b20      	cmp	r3, #32
 8007914:	d107      	bne.n	8007926 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f06f 0220 	mvn.w	r2, #32
 800791e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fab3 	bl	8007e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007944:	2302      	movs	r3, #2
 8007946:	e082      	b.n	8007a4e <HAL_TIM_IC_ConfigChannel+0x120>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d11b      	bne.n	800798e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6819      	ldr	r1, [r3, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f000 f8f9 	bl	8007b5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699a      	ldr	r2, [r3, #24]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 020c 	bic.w	r2, r2, #12
 8007978:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6999      	ldr	r1, [r3, #24]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	619a      	str	r2, [r3, #24]
 800798c:	e05a      	b.n	8007a44 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b04      	cmp	r3, #4
 8007992:	d11c      	bne.n	80079ce <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	6819      	ldr	r1, [r3, #0]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f000 f930 	bl	8007c08 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6999      	ldr	r1, [r3, #24]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	021a      	lsls	r2, r3, #8
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	619a      	str	r2, [r3, #24]
 80079cc:	e03a      	b.n	8007a44 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d11b      	bne.n	8007a0c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	6819      	ldr	r1, [r3, #0]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f000 f94d 	bl	8007c82 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69da      	ldr	r2, [r3, #28]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 020c 	bic.w	r2, r2, #12
 80079f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	69d9      	ldr	r1, [r3, #28]
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	61da      	str	r2, [r3, #28]
 8007a0a:	e01b      	b.n	8007a44 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f000 f96d 	bl	8007cfa <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	69da      	ldr	r2, [r3, #28]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a2e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69d9      	ldr	r1, [r3, #28]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	021a      	lsls	r2, r3, #8
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a2a      	ldr	r2, [pc, #168]	; (8007b50 <TIM_Base_SetConfig+0xbc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d003      	beq.n	8007ab4 <TIM_Base_SetConfig+0x20>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab2:	d108      	bne.n	8007ac6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a21      	ldr	r2, [pc, #132]	; (8007b50 <TIM_Base_SetConfig+0xbc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <TIM_Base_SetConfig+0x52>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad4:	d007      	beq.n	8007ae6 <TIM_Base_SetConfig+0x52>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <TIM_Base_SetConfig+0xc0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_Base_SetConfig+0x52>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1d      	ldr	r2, [pc, #116]	; (8007b58 <TIM_Base_SetConfig+0xc4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d108      	bne.n	8007af8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a0c      	ldr	r2, [pc, #48]	; (8007b50 <TIM_Base_SetConfig+0xbc>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d007      	beq.n	8007b34 <TIM_Base_SetConfig+0xa0>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a0b      	ldr	r2, [pc, #44]	; (8007b54 <TIM_Base_SetConfig+0xc0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_Base_SetConfig+0xa0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a0a      	ldr	r2, [pc, #40]	; (8007b58 <TIM_Base_SetConfig+0xc4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d103      	bne.n	8007b3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	615a      	str	r2, [r3, #20]
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40012c00 	.word	0x40012c00
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400

08007b5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f023 0201 	bic.w	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4a1e      	ldr	r2, [pc, #120]	; (8007c00 <TIM_TI1_SetConfig+0xa4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <TIM_TI1_SetConfig+0x3e>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b90:	d003      	beq.n	8007b9a <TIM_TI1_SetConfig+0x3e>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4a1b      	ldr	r2, [pc, #108]	; (8007c04 <TIM_TI1_SetConfig+0xa8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d101      	bne.n	8007b9e <TIM_TI1_SetConfig+0x42>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <TIM_TI1_SetConfig+0x44>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e003      	b.n	8007bbe <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f043 0301 	orr.w	r3, r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f023 030a 	bic.w	r3, r3, #10
 8007bd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f003 030a 	and.w	r3, r3, #10
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	621a      	str	r2, [r3, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40014000 	.word	0x40014000

08007c08 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f023 0210 	bic.w	r2, r3, #16
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	031b      	lsls	r3, r3, #12
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b087      	sub	sp, #28
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	021b      	lsls	r3, r3, #8
 8007cd8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b087      	sub	sp, #28
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	031b      	lsls	r3, r3, #12
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	031b      	lsls	r3, r3, #12
 8007d52:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	621a      	str	r2, [r3, #32]
}
 8007d68:	bf00      	nop
 8007d6a:	371c      	adds	r7, #28
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	2201      	movs	r2, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	43db      	mvns	r3, r3
 8007d96:	401a      	ands	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f003 031f 	and.w	r3, r3, #31
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	621a      	str	r2, [r3, #32]
}
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d101      	bne.n	8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	e04f      	b.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2202      	movs	r2, #2
 8007de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a21      	ldr	r2, [pc, #132]	; (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d108      	bne.n	8007e14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a14      	ldr	r2, [pc, #80]	; (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d009      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e40:	d004      	beq.n	8007e4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a10      	ldr	r2, [pc, #64]	; (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d10c      	bne.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40014000 	.word	0x40014000

08007e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ec8:	b084      	sub	sp, #16
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	f107 0014 	add.w	r0, r7, #20
 8007ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	b004      	add	sp, #16
 8007ee8:	4770      	bx	lr

08007eea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ef2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007ef6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	43db      	mvns	r3, r3
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4013      	ands	r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	f107 0014 	add.w	r0, r7, #20
 8007f48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	b004      	add	sp, #16
 8007f7a:	4770      	bx	lr

08007f7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4d0d      	ldr	r5, [pc, #52]	; (8007fe0 <__libc_init_array+0x38>)
 8007fac:	4c0d      	ldr	r4, [pc, #52]	; (8007fe4 <__libc_init_array+0x3c>)
 8007fae:	1b64      	subs	r4, r4, r5
 8007fb0:	10a4      	asrs	r4, r4, #2
 8007fb2:	2600      	movs	r6, #0
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	4d0b      	ldr	r5, [pc, #44]	; (8007fe8 <__libc_init_array+0x40>)
 8007fba:	4c0c      	ldr	r4, [pc, #48]	; (8007fec <__libc_init_array+0x44>)
 8007fbc:	f000 f820 	bl	8008000 <_init>
 8007fc0:	1b64      	subs	r4, r4, r5
 8007fc2:	10a4      	asrs	r4, r4, #2
 8007fc4:	2600      	movs	r6, #0
 8007fc6:	42a6      	cmp	r6, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd0:	4798      	blx	r3
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fda:	4798      	blx	r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	08009674 	.word	0x08009674
 8007fe4:	08009674 	.word	0x08009674
 8007fe8:	08009674 	.word	0x08009674
 8007fec:	08009678 	.word	0x08009678

08007ff0 <memset>:
 8007ff0:	4402      	add	r2, r0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d100      	bne.n	8007ffa <memset+0xa>
 8007ff8:	4770      	bx	lr
 8007ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffe:	e7f9      	b.n	8007ff4 <memset+0x4>

08008000 <_init>:
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	bf00      	nop
 8008004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008006:	bc08      	pop	{r3}
 8008008:	469e      	mov	lr, r3
 800800a:	4770      	bx	lr

0800800c <_fini>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr
