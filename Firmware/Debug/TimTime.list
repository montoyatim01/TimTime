
TimTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000817c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001674  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800997c  0800997c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800997c  0800997c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800997c  0800997c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009980  08009980  00019980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  20000060  080099e4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a4c  080099e4  00020a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f318  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384f  00000000  00000000  0003f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00042bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00005ac9  00000000  00000000  000442e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b3bb  00000000  00000000  00049db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e55cd  00000000  00000000  0006516c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0014a739  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001538  00000000  00000000  0014a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006174  00000000  00000000  0014bcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000060 	.word	0x20000060
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080082f0 	.word	0x080082f0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000064 	.word	0x20000064
 80001c8:	080082f0 	.word	0x080082f0

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <_Z13updateDisplayh>:

//#include "fonts.h"
const char* foo = "0123456789";
char tcDisplay[11] = {0};
void updateDisplay(uint8_t state)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d82b      	bhi.n	8000a20 <_Z13updateDisplayh+0x68>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <_Z13updateDisplayh+0x18>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009f1 	.word	0x080009f1
 80009d4:	080009f7 	.word	0x080009f7
 80009d8:	080009fd 	.word	0x080009fd
 80009dc:	08000a03 	.word	0x08000a03
 80009e0:	08000a09 	.word	0x08000a09
 80009e4:	08000a0f 	.word	0x08000a0f
 80009e8:	08000a15 	.word	0x08000a15
 80009ec:	08000a1b 	.word	0x08000a1b
	{
	case d_off:
		displayOff();
 80009f0:	f000 f81c 	bl	8000a2c <_Z10displayOffv>
		break;
 80009f4:	e015      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_home:
		displayMain();
 80009f6:	f000 f827 	bl	8000a48 <_Z11displayMainv>
		break;
 80009fa:	e012      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_menu:
		displayMenu();
 80009fc:	f000 f9b2 	bl	8000d64 <_Z11displayMenuv>
		break;
 8000a00:	e00f      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_lock:
		displayLocked();
 8000a02:	f000 f933 	bl	8000c6c <_Z13displayLockedv>
		break;
 8000a06:	e00c      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_power:
		displayPower();
 8000a08:	f000 f98c 	bl	8000d24 <_Z12displayPowerv>
		break;
 8000a0c:	e009      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_rateWarn:
		displayConfirmationRateChange();
 8000a0e:	f000 fbb5 	bl	800117c <_Z29displayConfirmationRateChangev>
		break;
 8000a12:	e006      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_offsetWarn:
		displayConfirmationOffsetChange();
 8000a14:	f000 fc32 	bl	800127c <_Z31displayConfirmationOffsetChangev>
		break;
 8000a18:	e003      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	case d_rejamWarn:
		displayConfirmationRejam();
 8000a1a:	f000 fc87 	bl	800132c <_Z24displayConfirmationRejamv>
		break;
 8000a1e:	e000      	b.n	8000a22 <_Z13updateDisplayh+0x6a>
	default:
		break;
 8000a20:	bf00      	nop
	}
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <_Z10displayOffv>:

void displayOff()
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f002 feb9 	bl	80037a8 <ssd1306_Fill>
	ssd1306_UpdateScreen(dispI2C);
 8000a36:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <_Z10displayOffv+0x18>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fed8 	bl	80037f0 <ssd1306_UpdateScreen>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000044 	.word	0x20000044

08000a48 <_Z11displayMainv>:

void displayMain()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
	//tcbreakout()
	char offsetStr[3];
	timecodeDisplay();
 8000a4e:	f000 fd6b 	bl	8001528 <_Z15timecodeDisplayv>
	ssd1306_SetCursor(4, 24);
 8000a52:	2118      	movs	r1, #24
 8000a54:	2004      	movs	r0, #4
 8000a56:	f003 f803 	bl	8003a60 <ssd1306_SetCursor>
	//TODO TC DISPLAY STRING
	ssd1306_WriteString(tcDisplay, Font_11x18, White);
 8000a5a:	4a71      	ldr	r2, [pc, #452]	; (8000c20 <_Z11displayMainv+0x1d8>)
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	ca06      	ldmia	r2, {r1, r2}
 8000a60:	4870      	ldr	r0, [pc, #448]	; (8000c24 <_Z11displayMainv+0x1dc>)
 8000a62:	f002 ffd7 	bl	8003a14 <ssd1306_WriteString>

	ssd1306_SetCursor(8, 0);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2008      	movs	r0, #8
 8000a6a:	f002 fff9 	bl	8003a60 <ssd1306_SetCursor>
	switch (frameRate)
 8000a6e:	4b6e      	ldr	r3, [pc, #440]	; (8000c28 <_Z11displayMainv+0x1e0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b05      	cmp	r3, #5
 8000a74:	d838      	bhi.n	8000ae8 <_Z11displayMainv+0xa0>
 8000a76:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <_Z11displayMainv+0x34>)
 8000a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7c:	08000a95 	.word	0x08000a95
 8000a80:	08000aa3 	.word	0x08000aa3
 8000a84:	08000ab1 	.word	0x08000ab1
 8000a88:	08000abf 	.word	0x08000abf
 8000a8c:	08000acd 	.word	0x08000acd
 8000a90:	08000adb 	.word	0x08000adb
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 8000a94:	4a65      	ldr	r2, [pc, #404]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000a96:	2301      	movs	r3, #1
 8000a98:	ca06      	ldmia	r2, {r1, r2}
 8000a9a:	4865      	ldr	r0, [pc, #404]	; (8000c30 <_Z11displayMainv+0x1e8>)
 8000a9c:	f002 ffba 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000aa0:	e022      	b.n	8000ae8 <_Z11displayMainv+0xa0>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 8000aa2:	4a62      	ldr	r2, [pc, #392]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	ca06      	ldmia	r2, {r1, r2}
 8000aa8:	4862      	ldr	r0, [pc, #392]	; (8000c34 <_Z11displayMainv+0x1ec>)
 8000aaa:	f002 ffb3 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000aae:	e01b      	b.n	8000ae8 <_Z11displayMainv+0xa0>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 8000ab0:	4a5e      	ldr	r2, [pc, #376]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	ca06      	ldmia	r2, {r1, r2}
 8000ab6:	4860      	ldr	r0, [pc, #384]	; (8000c38 <_Z11displayMainv+0x1f0>)
 8000ab8:	f002 ffac 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000abc:	e014      	b.n	8000ae8 <_Z11displayMainv+0xa0>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 8000abe:	4a5b      	ldr	r2, [pc, #364]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	ca06      	ldmia	r2, {r1, r2}
 8000ac4:	485d      	ldr	r0, [pc, #372]	; (8000c3c <_Z11displayMainv+0x1f4>)
 8000ac6:	f002 ffa5 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000aca:	e00d      	b.n	8000ae8 <_Z11displayMainv+0xa0>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 8000acc:	4a57      	ldr	r2, [pc, #348]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000ace:	2301      	movs	r3, #1
 8000ad0:	ca06      	ldmia	r2, {r1, r2}
 8000ad2:	485b      	ldr	r0, [pc, #364]	; (8000c40 <_Z11displayMainv+0x1f8>)
 8000ad4:	f002 ff9e 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000ad8:	e006      	b.n	8000ae8 <_Z11displayMainv+0xa0>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 8000ada:	4a54      	ldr	r2, [pc, #336]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000adc:	2301      	movs	r3, #1
 8000ade:	ca06      	ldmia	r2, {r1, r2}
 8000ae0:	4858      	ldr	r0, [pc, #352]	; (8000c44 <_Z11displayMainv+0x1fc>)
 8000ae2:	f002 ff97 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000ae6:	bf00      	nop
	}

	ssd1306_SetCursor(92, 52);
 8000ae8:	2134      	movs	r1, #52	; 0x34
 8000aea:	205c      	movs	r0, #92	; 0x5c
 8000aec:	f002 ffb8 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8000af0:	4a4e      	ldr	r2, [pc, #312]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000af2:	2301      	movs	r3, #1
 8000af4:	ca06      	ldmia	r2, {r1, r2}
 8000af6:	4854      	ldr	r0, [pc, #336]	; (8000c48 <_Z11displayMainv+0x200>)
 8000af8:	f002 ff8c 	bl	8003a14 <ssd1306_WriteString>

	
	if (tcJammed)
 8000afc:	4b53      	ldr	r3, [pc, #332]	; (8000c4c <_Z11displayMainv+0x204>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00a      	beq.n	8000b1c <_Z11displayMainv+0xd4>
	{
		ssd1306_SetCursor(84, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2054      	movs	r0, #84	; 0x54
 8000b0a:	f002 ffa9 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("Jammed", Font_7x10, White);
 8000b0e:	4a47      	ldr	r2, [pc, #284]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000b10:	2301      	movs	r3, #1
 8000b12:	ca06      	ldmia	r2, {r1, r2}
 8000b14:	484e      	ldr	r0, [pc, #312]	; (8000c50 <_Z11displayMainv+0x208>)
 8000b16:	f002 ff7d 	bl	8003a14 <ssd1306_WriteString>
 8000b1a:	e009      	b.n	8000b30 <_Z11displayMainv+0xe8>
	}
	else
	{
		ssd1306_SetCursor(90, 0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	205a      	movs	r0, #90	; 0x5a
 8000b20:	f002 ff9e 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("Ready", Font_7x10, White);
 8000b24:	4a41      	ldr	r2, [pc, #260]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000b26:	2301      	movs	r3, #1
 8000b28:	ca06      	ldmia	r2, {r1, r2}
 8000b2a:	484a      	ldr	r0, [pc, #296]	; (8000c54 <_Z11displayMainv+0x20c>)
 8000b2c:	f002 ff72 	bl	8003a14 <ssd1306_WriteString>
	}
	if (intOffset != 30)
 8000b30:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <_Z11displayMainv+0x210>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b1e      	cmp	r3, #30
 8000b36:	d067      	beq.n	8000c08 <_Z11displayMainv+0x1c0>
	{
		ssd1306_SetCursor(30, 12);
 8000b38:	210c      	movs	r1, #12
 8000b3a:	201e      	movs	r0, #30
 8000b3c:	f002 ff90 	bl	8003a60 <ssd1306_SetCursor>
		if (intOffset > 30)
 8000b40:	4b45      	ldr	r3, [pc, #276]	; (8000c58 <_Z11displayMainv+0x210>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b1e      	cmp	r3, #30
 8000b46:	d925      	bls.n	8000b94 <_Z11displayMainv+0x14c>
		{
			offsetStr[0] = '+';
 8000b48:	232b      	movs	r3, #43	; 0x2b
 8000b4a:	713b      	strb	r3, [r7, #4]
			offsetStr[1] = foo[(intOffset-30)/10];
 8000b4c:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <_Z11displayMainv+0x214>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <_Z11displayMainv+0x210>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	3b1e      	subs	r3, #30
 8000b56:	4942      	ldr	r1, [pc, #264]	; (8000c60 <_Z11displayMainv+0x218>)
 8000b58:	fb81 0103 	smull	r0, r1, r1, r3
 8000b5c:	1089      	asrs	r1, r1, #2
 8000b5e:	17db      	asrs	r3, r3, #31
 8000b60:	1acb      	subs	r3, r1, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	717b      	strb	r3, [r7, #5]
			offsetStr[2] = foo[(intOffset-30)%10];
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <_Z11displayMainv+0x214>)
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <_Z11displayMainv+0x210>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	f1a3 021e 	sub.w	r2, r3, #30
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <_Z11displayMainv+0x218>)
 8000b76:	fb83 1302 	smull	r1, r3, r3, r2
 8000b7a:	1099      	asrs	r1, r3, #2
 8000b7c:	17d3      	asrs	r3, r2, #31
 8000b7e:	1ac9      	subs	r1, r1, r3
 8000b80:	460b      	mov	r3, r1
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	1ad1      	subs	r1, r2, r3
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	4403      	add	r3, r0
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	71bb      	strb	r3, [r7, #6]
 8000b92:	e029      	b.n	8000be8 <_Z11displayMainv+0x1a0>
		}
		else if (intOffset < 30)
 8000b94:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <_Z11displayMainv+0x210>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b1d      	cmp	r3, #29
 8000b9a:	d825      	bhi.n	8000be8 <_Z11displayMainv+0x1a0>
		{
			offsetStr[0] = '-';		
 8000b9c:	232d      	movs	r3, #45	; 0x2d
 8000b9e:	713b      	strb	r3, [r7, #4]
			offsetStr[1] = foo[(30-intOffset)/10];
 8000ba0:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <_Z11displayMainv+0x214>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <_Z11displayMainv+0x210>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f1c3 031e 	rsb	r3, r3, #30
 8000bac:	492c      	ldr	r1, [pc, #176]	; (8000c60 <_Z11displayMainv+0x218>)
 8000bae:	fb81 0103 	smull	r0, r1, r1, r3
 8000bb2:	1089      	asrs	r1, r1, #2
 8000bb4:	17db      	asrs	r3, r3, #31
 8000bb6:	1acb      	subs	r3, r1, r3
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	717b      	strb	r3, [r7, #5]
			offsetStr[2] = foo[(30-intOffset)%10];
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <_Z11displayMainv+0x214>)
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <_Z11displayMainv+0x210>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	f1c3 021e 	rsb	r2, r3, #30
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <_Z11displayMainv+0x218>)
 8000bcc:	fb83 1302 	smull	r1, r3, r3, r2
 8000bd0:	1099      	asrs	r1, r3, #2
 8000bd2:	17d3      	asrs	r3, r2, #31
 8000bd4:	1ac9      	subs	r1, r1, r3
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	1ad1      	subs	r1, r2, r3
 8000be0:	460b      	mov	r3, r1
 8000be2:	4403      	add	r3, r0
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	71bb      	strb	r3, [r7, #6]
		}
		ssd1306_WriteString(offsetStr, Font_7x10, White);
 8000be8:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000bea:	1d38      	adds	r0, r7, #4
 8000bec:	2301      	movs	r3, #1
 8000bee:	ca06      	ldmia	r2, {r1, r2}
 8000bf0:	f002 ff10 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(48, 12);
 8000bf4:	210c      	movs	r1, #12
 8000bf6:	2030      	movs	r0, #48	; 0x30
 8000bf8:	f002 ff32 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString(" Offset", Font_7x10, White);
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <_Z11displayMainv+0x1e4>)
 8000bfe:	2301      	movs	r3, #1
 8000c00:	ca06      	ldmia	r2, {r1, r2}
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <_Z11displayMainv+0x21c>)
 8000c04:	f002 ff06 	bl	8003a14 <ssd1306_WriteString>
	}
	displayBattery();
 8000c08:	f000 fc10 	bl	800142c <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <_Z11displayMainv+0x220>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 fded 	bl	80037f0 <ssd1306_UpdateScreen>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	2000007c 	.word	0x2000007c
 8000c28:	20000091 	.word	0x20000091
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	08008314 	.word	0x08008314
 8000c34:	0800831c 	.word	0x0800831c
 8000c38:	08008320 	.word	0x08008320
 8000c3c:	08008324 	.word	0x08008324
 8000c40:	0800832c 	.word	0x0800832c
 8000c44:	08008338 	.word	0x08008338
 8000c48:	0800833c 	.word	0x0800833c
 8000c4c:	20000090 	.word	0x20000090
 8000c50:	08008344 	.word	0x08008344
 8000c54:	0800834c 	.word	0x0800834c
 8000c58:	20000014 	.word	0x20000014
 8000c5c:	20000010 	.word	0x20000010
 8000c60:	66666667 	.word	0x66666667
 8000c64:	08008354 	.word	0x08008354
 8000c68:	20000044 	.word	0x20000044

08000c6c <_Z13displayLockedv>:

void displayLocked()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	timecodeDisplay();
 8000c70:	f000 fc5a 	bl	8001528 <_Z15timecodeDisplayv>
	ssd1306_Fill(Black);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f002 fd97 	bl	80037a8 <ssd1306_Fill>
	ssd1306_SetCursor(44, 20);
 8000c7a:	2114      	movs	r1, #20
 8000c7c:	202c      	movs	r0, #44	; 0x2c
 8000c7e:	f002 feef 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Locked", Font_7x10, White);
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <_Z13displayLockedv+0x98>)
 8000c84:	2301      	movs	r3, #1
 8000c86:	ca06      	ldmia	r2, {r1, r2}
 8000c88:	481f      	ldr	r0, [pc, #124]	; (8000d08 <_Z13displayLockedv+0x9c>)
 8000c8a:	f002 fec3 	bl	8003a14 <ssd1306_WriteString>
	if (buttonsHeld)	
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <_Z13displayLockedv+0xa0>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <_Z13displayLockedv+0x34>
	{
		ssd1306_SetCursor(60, 32);
 8000c96:	2120      	movs	r1, #32
 8000c98:	203c      	movs	r0, #60	; 0x3c
 8000c9a:	f002 fee1 	bl	8003a60 <ssd1306_SetCursor>
 8000c9e:	e013      	b.n	8000cc8 <_Z13displayLockedv+0x5c>
		//lockDisplay = foo[lockCountdown];
		//ssd1306_WriteChar(lockDisplay, Font_7x10, White);	//TODO Lock Countdown
	}
	else
	{
		ssd1306_SetCursor(24, 30);
 8000ca0:	211e      	movs	r1, #30
 8000ca2:	2018      	movs	r0, #24
 8000ca4:	f002 fedc 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("Hold < and >", Font_7x10, White);
 8000ca8:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <_Z13displayLockedv+0x98>)
 8000caa:	2301      	movs	r3, #1
 8000cac:	ca06      	ldmia	r2, {r1, r2}
 8000cae:	4818      	ldr	r0, [pc, #96]	; (8000d10 <_Z13displayLockedv+0xa4>)
 8000cb0:	f002 feb0 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(34, 40);
 8000cb4:	2128      	movs	r1, #40	; 0x28
 8000cb6:	2022      	movs	r0, #34	; 0x22
 8000cb8:	f002 fed2 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("to unlock", Font_7x10, White);
 8000cbc:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <_Z13displayLockedv+0x98>)
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	ca06      	ldmia	r2, {r1, r2}
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <_Z13displayLockedv+0xa8>)
 8000cc4:	f002 fea6 	bl	8003a14 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(2, 6);
 8000cc8:	2106      	movs	r1, #6
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f002 fec8 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString(tcDisplay, Font_7x10, White);
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <_Z13displayLockedv+0x98>)
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	ca06      	ldmia	r2, {r1, r2}
 8000cd6:	4810      	ldr	r0, [pc, #64]	; (8000d18 <_Z13displayLockedv+0xac>)
 8000cd8:	f002 fe9c 	bl	8003a14 <ssd1306_WriteString>

	ssd1306_SetCursor(90, 6);
 8000cdc:	2106      	movs	r1, #6
 8000cde:	205a      	movs	r0, #90	; 0x5a
 8000ce0:	f002 febe 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("23.98", Font_7x10, White);
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <_Z13displayLockedv+0x98>)
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	ca06      	ldmia	r2, {r1, r2}
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <_Z13displayLockedv+0xb0>)
 8000cec:	f002 fe92 	bl	8003a14 <ssd1306_WriteString>
	displayBattery();	
 8000cf0:	f000 fb9c 	bl	800142c <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <_Z13displayLockedv+0xb4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 fd79 	bl	80037f0 <ssd1306_UpdateScreen>
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000000 	.word	0x20000000
 8000d08:	0800835c 	.word	0x0800835c
 8000d0c:	200000a6 	.word	0x200000a6
 8000d10:	08008364 	.word	0x08008364
 8000d14:	08008374 	.word	0x08008374
 8000d18:	2000007c 	.word	0x2000007c
 8000d1c:	08008314 	.word	0x08008314
 8000d20:	20000044 	.word	0x20000044

08000d24 <_Z12displayPowerv>:

void displayPower()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f002 fd3d 	bl	80037a8 <ssd1306_Fill>
	ssd1306_SetCursor(14, 10);
 8000d2e:	210a      	movs	r1, #10
 8000d30:	200e      	movs	r0, #14
 8000d32:	f002 fe95 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Power Off", Font_11x18, White);
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <_Z12displayPowerv+0x34>)
 8000d38:	2301      	movs	r3, #1
 8000d3a:	ca06      	ldmia	r2, {r1, r2}
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <_Z12displayPowerv+0x38>)
 8000d3e:	f002 fe69 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(60, 36);
 8000d42:	2124      	movs	r1, #36	; 0x24
 8000d44:	203c      	movs	r0, #60	; 0x3c
 8000d46:	f002 fe8b 	bl	8003a60 <ssd1306_SetCursor>
	//powerDisplay = foo[powerCountdown];
	//ssd1306_WriteChar(powerDisplay, Font_11x18, White); //TODO Power countdown
	ssd1306_UpdateScreen(dispI2C);
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <_Z12displayPowerv+0x3c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 fd4e 	bl	80037f0 <ssd1306_UpdateScreen>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	08008380 	.word	0x08008380
 8000d60:	20000044 	.word	0x20000044

08000d64 <_Z11displayMenuv>:

void displayMenu()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f002 fd1c 	bl	80037a8 <ssd1306_Fill>
	//Frame rate
	//Auto power off
	//Exit
	ssd1306_SetCursor(50, 0);
 8000d70:	2100      	movs	r1, #0
 8000d72:	2032      	movs	r0, #50	; 0x32
 8000d74:	f002 fe74 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8000d78:	4ab5      	ldr	r2, [pc, #724]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	ca06      	ldmia	r2, {r1, r2}
 8000d7e:	48b5      	ldr	r0, [pc, #724]	; (8001054 <_Z11displayMenuv+0x2f0>)
 8000d80:	f002 fe48 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 12);
 8000d84:	210c      	movs	r1, #12
 8000d86:	200a      	movs	r0, #10
 8000d88:	f002 fe6a 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Rate: ", Font_7x10, White);
 8000d8c:	4ab0      	ldr	r2, [pc, #704]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000d8e:	2301      	movs	r3, #1
 8000d90:	ca06      	ldmia	r2, {r1, r2}
 8000d92:	48b1      	ldr	r0, [pc, #708]	; (8001058 <_Z11displayMenuv+0x2f4>)
 8000d94:	f002 fe3e 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 22);
 8000d98:	2116      	movs	r1, #22
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f002 fe60 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Offset: ", Font_7x10, White);
 8000da0:	4aab      	ldr	r2, [pc, #684]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000da2:	2301      	movs	r3, #1
 8000da4:	ca06      	ldmia	r2, {r1, r2}
 8000da6:	48ad      	ldr	r0, [pc, #692]	; (800105c <_Z11displayMenuv+0x2f8>)
 8000da8:	f002 fe34 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 32);
 8000dac:	2120      	movs	r1, #32
 8000dae:	200a      	movs	r0, #10
 8000db0:	f002 fe56 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Re-jam", Font_7x10, White);
 8000db4:	4aa6      	ldr	r2, [pc, #664]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000db6:	2301      	movs	r3, #1
 8000db8:	ca06      	ldmia	r2, {r1, r2}
 8000dba:	48a9      	ldr	r0, [pc, #676]	; (8001060 <_Z11displayMenuv+0x2fc>)
 8000dbc:	f002 fe2a 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 42);
 8000dc0:	212a      	movs	r1, #42	; 0x2a
 8000dc2:	200a      	movs	r0, #10
 8000dc4:	f002 fe4c 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Auto-Off: ", Font_7x10, White);
 8000dc8:	4aa1      	ldr	r2, [pc, #644]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000dca:	2301      	movs	r3, #1
 8000dcc:	ca06      	ldmia	r2, {r1, r2}
 8000dce:	48a5      	ldr	r0, [pc, #660]	; (8001064 <_Z11displayMenuv+0x300>)
 8000dd0:	f002 fe20 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(50, 52);
 8000dd4:	2134      	movs	r1, #52	; 0x34
 8000dd6:	2032      	movs	r0, #50	; 0x32
 8000dd8:	f002 fe42 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Exit", Font_7x10, White);
 8000ddc:	4a9c      	ldr	r2, [pc, #624]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000dde:	2301      	movs	r3, #1
 8000de0:	ca06      	ldmia	r2, {r1, r2}
 8000de2:	48a1      	ldr	r0, [pc, #644]	; (8001068 <_Z11displayMenuv+0x304>)
 8000de4:	f002 fe16 	bl	8003a14 <ssd1306_WriteString>

	ssd1306_SetCursor(50, 12);
 8000de8:	210c      	movs	r1, #12
 8000dea:	2032      	movs	r0, #50	; 0x32
 8000dec:	f002 fe38 	bl	8003a60 <ssd1306_SetCursor>
	uint8_t dispRate;
	uint8_t dispOffset;
	char offsetStr[3];
	if (menuItemSelect){
 8000df0:	4b9e      	ldr	r3, [pc, #632]	; (800106c <_Z11displayMenuv+0x308>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <_Z11displayMenuv+0xa2>
		dispRate = rateAdjust;
 8000df8:	4b9d      	ldr	r3, [pc, #628]	; (8001070 <_Z11displayMenuv+0x30c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	71fb      	strb	r3, [r7, #7]
		dispOffset = offsetAdjust;
 8000dfe:	4b9d      	ldr	r3, [pc, #628]	; (8001074 <_Z11displayMenuv+0x310>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	71bb      	strb	r3, [r7, #6]
 8000e04:	e005      	b.n	8000e12 <_Z11displayMenuv+0xae>
	} else {
		dispRate = frameRate;
 8000e06:	4b9c      	ldr	r3, [pc, #624]	; (8001078 <_Z11displayMenuv+0x314>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
		dispOffset = intOffset;
 8000e0c:	4b9b      	ldr	r3, [pc, #620]	; (800107c <_Z11displayMenuv+0x318>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	71bb      	strb	r3, [r7, #6]
	}
	switch (dispRate)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b05      	cmp	r3, #5
 8000e16:	d839      	bhi.n	8000e8c <_Z11displayMenuv+0x128>
 8000e18:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <_Z11displayMenuv+0xbc>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000e39 	.word	0x08000e39
 8000e24:	08000e47 	.word	0x08000e47
 8000e28:	08000e55 	.word	0x08000e55
 8000e2c:	08000e63 	.word	0x08000e63
 8000e30:	08000e71 	.word	0x08000e71
 8000e34:	08000e7f 	.word	0x08000e7f
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 8000e38:	4a85      	ldr	r2, [pc, #532]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	ca06      	ldmia	r2, {r1, r2}
 8000e3e:	4890      	ldr	r0, [pc, #576]	; (8001080 <_Z11displayMenuv+0x31c>)
 8000e40:	f002 fde8 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000e44:	e022      	b.n	8000e8c <_Z11displayMenuv+0x128>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 8000e46:	4a82      	ldr	r2, [pc, #520]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000e48:	2301      	movs	r3, #1
 8000e4a:	ca06      	ldmia	r2, {r1, r2}
 8000e4c:	488d      	ldr	r0, [pc, #564]	; (8001084 <_Z11displayMenuv+0x320>)
 8000e4e:	f002 fde1 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000e52:	e01b      	b.n	8000e8c <_Z11displayMenuv+0x128>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 8000e54:	4a7e      	ldr	r2, [pc, #504]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000e56:	2301      	movs	r3, #1
 8000e58:	ca06      	ldmia	r2, {r1, r2}
 8000e5a:	488b      	ldr	r0, [pc, #556]	; (8001088 <_Z11displayMenuv+0x324>)
 8000e5c:	f002 fdda 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000e60:	e014      	b.n	8000e8c <_Z11displayMenuv+0x128>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 8000e62:	4a7b      	ldr	r2, [pc, #492]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000e64:	2301      	movs	r3, #1
 8000e66:	ca06      	ldmia	r2, {r1, r2}
 8000e68:	4888      	ldr	r0, [pc, #544]	; (800108c <_Z11displayMenuv+0x328>)
 8000e6a:	f002 fdd3 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000e6e:	e00d      	b.n	8000e8c <_Z11displayMenuv+0x128>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 8000e70:	4a77      	ldr	r2, [pc, #476]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000e72:	2301      	movs	r3, #1
 8000e74:	ca06      	ldmia	r2, {r1, r2}
 8000e76:	4886      	ldr	r0, [pc, #536]	; (8001090 <_Z11displayMenuv+0x32c>)
 8000e78:	f002 fdcc 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000e7c:	e006      	b.n	8000e8c <_Z11displayMenuv+0x128>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 8000e7e:	4a74      	ldr	r2, [pc, #464]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000e80:	2301      	movs	r3, #1
 8000e82:	ca06      	ldmia	r2, {r1, r2}
 8000e84:	4883      	ldr	r0, [pc, #524]	; (8001094 <_Z11displayMenuv+0x330>)
 8000e86:	f002 fdc5 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000e8a:	bf00      	nop
	}
	ssd1306_SetCursor(58, 22);
 8000e8c:	2116      	movs	r1, #22
 8000e8e:	203a      	movs	r0, #58	; 0x3a
 8000e90:	f002 fde6 	bl	8003a60 <ssd1306_SetCursor>
	//Insert offset
	if (dispOffset == 30)
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	2b1e      	cmp	r3, #30
 8000e98:	d106      	bne.n	8000ea8 <_Z11displayMenuv+0x144>
	{
		offsetStr[0] = ' ';
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = '0';
 8000e9e:	2330      	movs	r3, #48	; 0x30
 8000ea0:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = '0';
 8000ea2:	2330      	movs	r3, #48	; 0x30
 8000ea4:	70bb      	strb	r3, [r7, #2]
 8000ea6:	e04d      	b.n	8000f44 <_Z11displayMenuv+0x1e0>
	}
	else if (dispOffset > 30)
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	2b1e      	cmp	r3, #30
 8000eac:	d923      	bls.n	8000ef6 <_Z11displayMenuv+0x192>
	{
		offsetStr[0] = '+';
 8000eae:	232b      	movs	r3, #43	; 0x2b
 8000eb0:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = foo[(dispOffset-30)/10];
 8000eb2:	4b79      	ldr	r3, [pc, #484]	; (8001098 <_Z11displayMenuv+0x334>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	79bb      	ldrb	r3, [r7, #6]
 8000eb8:	3b1e      	subs	r3, #30
 8000eba:	4978      	ldr	r1, [pc, #480]	; (800109c <_Z11displayMenuv+0x338>)
 8000ebc:	fb81 0103 	smull	r0, r1, r1, r3
 8000ec0:	1089      	asrs	r1, r1, #2
 8000ec2:	17db      	asrs	r3, r3, #31
 8000ec4:	1acb      	subs	r3, r1, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = foo[(dispOffset-30)%10];
 8000ecc:	4b72      	ldr	r3, [pc, #456]	; (8001098 <_Z11displayMenuv+0x334>)
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	f1a3 021e 	sub.w	r2, r3, #30
 8000ed6:	4b71      	ldr	r3, [pc, #452]	; (800109c <_Z11displayMenuv+0x338>)
 8000ed8:	fb83 1302 	smull	r1, r3, r3, r2
 8000edc:	1099      	asrs	r1, r3, #2
 8000ede:	17d3      	asrs	r3, r2, #31
 8000ee0:	1ac9      	subs	r1, r1, r3
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	1ad1      	subs	r1, r2, r3
 8000eec:	460b      	mov	r3, r1
 8000eee:	4403      	add	r3, r0
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	70bb      	strb	r3, [r7, #2]
 8000ef4:	e026      	b.n	8000f44 <_Z11displayMenuv+0x1e0>
	}
	else if (dispOffset < 30)
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	2b1d      	cmp	r3, #29
 8000efa:	d823      	bhi.n	8000f44 <_Z11displayMenuv+0x1e0>
	{
		offsetStr[0] = '-';		
 8000efc:	232d      	movs	r3, #45	; 0x2d
 8000efe:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = foo[(30-dispOffset)/10];
 8000f00:	4b65      	ldr	r3, [pc, #404]	; (8001098 <_Z11displayMenuv+0x334>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	f1c3 031e 	rsb	r3, r3, #30
 8000f0a:	4964      	ldr	r1, [pc, #400]	; (800109c <_Z11displayMenuv+0x338>)
 8000f0c:	fb81 0103 	smull	r0, r1, r1, r3
 8000f10:	1089      	asrs	r1, r1, #2
 8000f12:	17db      	asrs	r3, r3, #31
 8000f14:	1acb      	subs	r3, r1, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = foo[(30-dispOffset)%10];
 8000f1c:	4b5e      	ldr	r3, [pc, #376]	; (8001098 <_Z11displayMenuv+0x334>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	f1c3 021e 	rsb	r2, r3, #30
 8000f26:	4b5d      	ldr	r3, [pc, #372]	; (800109c <_Z11displayMenuv+0x338>)
 8000f28:	fb83 1302 	smull	r1, r3, r3, r2
 8000f2c:	1099      	asrs	r1, r3, #2
 8000f2e:	17d3      	asrs	r3, r2, #31
 8000f30:	1ac9      	subs	r1, r1, r3
 8000f32:	460b      	mov	r3, r1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	1ad1      	subs	r1, r2, r3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4403      	add	r3, r0
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	70bb      	strb	r3, [r7, #2]
	}
	
	ssd1306_WriteString(offsetStr, Font_7x10, White); 
 8000f44:	4a42      	ldr	r2, [pc, #264]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000f46:	4638      	mov	r0, r7
 8000f48:	2301      	movs	r3, #1
 8000f4a:	ca06      	ldmia	r2, {r1, r2}
 8000f4c:	f002 fd62 	bl	8003a14 <ssd1306_WriteString>

	ssd1306_SetCursor(75, 42);
 8000f50:	212a      	movs	r1, #42	; 0x2a
 8000f52:	204b      	movs	r0, #75	; 0x4b
 8000f54:	f002 fd84 	bl	8003a60 <ssd1306_SetCursor>
	switch (autoOff)
 8000f58:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <_Z11displayMenuv+0x33c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d830      	bhi.n	8000fc2 <_Z11displayMenuv+0x25e>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <_Z11displayMenuv+0x204>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f7d 	.word	0x08000f7d
 8000f6c:	08000f8b 	.word	0x08000f8b
 8000f70:	08000f99 	.word	0x08000f99
 8000f74:	08000fa7 	.word	0x08000fa7
 8000f78:	08000fb5 	.word	0x08000fb5
	{
	case 0:
		ssd1306_WriteString("1 hr", Font_7x10, White);
 8000f7c:	4a34      	ldr	r2, [pc, #208]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000f7e:	2301      	movs	r3, #1
 8000f80:	ca06      	ldmia	r2, {r1, r2}
 8000f82:	4848      	ldr	r0, [pc, #288]	; (80010a4 <_Z11displayMenuv+0x340>)
 8000f84:	f002 fd46 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000f88:	e01b      	b.n	8000fc2 <_Z11displayMenuv+0x25e>
	case 1:
		ssd1306_WriteString("2 hr", Font_7x10, White);
 8000f8a:	4a31      	ldr	r2, [pc, #196]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	ca06      	ldmia	r2, {r1, r2}
 8000f90:	4845      	ldr	r0, [pc, #276]	; (80010a8 <_Z11displayMenuv+0x344>)
 8000f92:	f002 fd3f 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000f96:	e014      	b.n	8000fc2 <_Z11displayMenuv+0x25e>
	case 2:
		ssd1306_WriteString("4 hr", Font_7x10, White);
 8000f98:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	ca06      	ldmia	r2, {r1, r2}
 8000f9e:	4843      	ldr	r0, [pc, #268]	; (80010ac <_Z11displayMenuv+0x348>)
 8000fa0:	f002 fd38 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000fa4:	e00d      	b.n	8000fc2 <_Z11displayMenuv+0x25e>
	case 3:
		ssd1306_WriteString("8 hr", Font_7x10, White);
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000fa8:	2301      	movs	r3, #1
 8000faa:	ca06      	ldmia	r2, {r1, r2}
 8000fac:	4840      	ldr	r0, [pc, #256]	; (80010b0 <_Z11displayMenuv+0x34c>)
 8000fae:	f002 fd31 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000fb2:	e006      	b.n	8000fc2 <_Z11displayMenuv+0x25e>
	case 4:
		ssd1306_WriteString("12 hr", Font_7x10, White);
 8000fb4:	4a26      	ldr	r2, [pc, #152]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	ca06      	ldmia	r2, {r1, r2}
 8000fba:	483e      	ldr	r0, [pc, #248]	; (80010b4 <_Z11displayMenuv+0x350>)
 8000fbc:	f002 fd2a 	bl	8003a14 <ssd1306_WriteString>
		break;
 8000fc0:	bf00      	nop
	}

	switch (menuItem)
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <_Z11displayMenuv+0x354>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	f200 80c5 	bhi.w	8001156 <_Z11displayMenuv+0x3f2>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <_Z11displayMenuv+0x270>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	08000fe9 	.word	0x08000fe9
 8000fd8:	0800101d 	.word	0x0800101d
 8000fdc:	080010c5 	.word	0x080010c5
 8000fe0:	080010f9 	.word	0x080010f9
 8000fe4:	0800112d 	.word	0x0800112d
	{
	case 0:
		if (menuItemSelect)
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <_Z11displayMenuv+0x308>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00a      	beq.n	8001006 <_Z11displayMenuv+0x2a2>
		{
			ssd1306_SetCursor(120, 12);
 8000ff0:	210c      	movs	r1, #12
 8000ff2:	2078      	movs	r0, #120	; 0x78
 8000ff4:	f002 fd34 	bl	8003a60 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	ca06      	ldmia	r2, {r1, r2}
 8000ffe:	482f      	ldr	r0, [pc, #188]	; (80010bc <_Z11displayMenuv+0x358>)
 8001000:	f002 fd08 	bl	8003a14 <ssd1306_WriteString>
		else
		{
			ssd1306_SetCursor(2, 12);
			ssd1306_WriteString(">", Font_7x10, White);
		}
		break;
 8001004:	e0a7      	b.n	8001156 <_Z11displayMenuv+0x3f2>
			ssd1306_SetCursor(2, 12);
 8001006:	210c      	movs	r1, #12
 8001008:	2002      	movs	r0, #2
 800100a:	f002 fd29 	bl	8003a60 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8001010:	2301      	movs	r3, #1
 8001012:	ca06      	ldmia	r2, {r1, r2}
 8001014:	482a      	ldr	r0, [pc, #168]	; (80010c0 <_Z11displayMenuv+0x35c>)
 8001016:	f002 fcfd 	bl	8003a14 <ssd1306_WriteString>
		break;
 800101a:	e09c      	b.n	8001156 <_Z11displayMenuv+0x3f2>
	case 1:
		if (menuItemSelect)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <_Z11displayMenuv+0x308>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00a      	beq.n	800103a <_Z11displayMenuv+0x2d6>
		{
			ssd1306_SetCursor(120, 22);
 8001024:	2116      	movs	r1, #22
 8001026:	2078      	movs	r0, #120	; 0x78
 8001028:	f002 fd1a 	bl	8003a60 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 800102c:	4a08      	ldr	r2, [pc, #32]	; (8001050 <_Z11displayMenuv+0x2ec>)
 800102e:	2301      	movs	r3, #1
 8001030:	ca06      	ldmia	r2, {r1, r2}
 8001032:	4822      	ldr	r0, [pc, #136]	; (80010bc <_Z11displayMenuv+0x358>)
 8001034:	f002 fcee 	bl	8003a14 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 22);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8001038:	e08d      	b.n	8001156 <_Z11displayMenuv+0x3f2>
			ssd1306_SetCursor(2, 22);
 800103a:	2116      	movs	r1, #22
 800103c:	2002      	movs	r0, #2
 800103e:	f002 fd0f 	bl	8003a60 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001042:	4a03      	ldr	r2, [pc, #12]	; (8001050 <_Z11displayMenuv+0x2ec>)
 8001044:	2301      	movs	r3, #1
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	481d      	ldr	r0, [pc, #116]	; (80010c0 <_Z11displayMenuv+0x35c>)
 800104a:	f002 fce3 	bl	8003a14 <ssd1306_WriteString>
		break;
 800104e:	e082      	b.n	8001156 <_Z11displayMenuv+0x3f2>
 8001050:	20000000 	.word	0x20000000
 8001054:	0800833c 	.word	0x0800833c
 8001058:	0800838c 	.word	0x0800838c
 800105c:	08008394 	.word	0x08008394
 8001060:	080083a0 	.word	0x080083a0
 8001064:	080083a8 	.word	0x080083a8
 8001068:	080083b4 	.word	0x080083b4
 800106c:	200000ca 	.word	0x200000ca
 8001070:	200000c8 	.word	0x200000c8
 8001074:	200000c9 	.word	0x200000c9
 8001078:	20000091 	.word	0x20000091
 800107c:	20000014 	.word	0x20000014
 8001080:	08008314 	.word	0x08008314
 8001084:	0800831c 	.word	0x0800831c
 8001088:	08008320 	.word	0x08008320
 800108c:	08008324 	.word	0x08008324
 8001090:	0800832c 	.word	0x0800832c
 8001094:	08008338 	.word	0x08008338
 8001098:	20000010 	.word	0x20000010
 800109c:	66666667 	.word	0x66666667
 80010a0:	20000098 	.word	0x20000098
 80010a4:	080083bc 	.word	0x080083bc
 80010a8:	080083c4 	.word	0x080083c4
 80010ac:	080083cc 	.word	0x080083cc
 80010b0:	080083d4 	.word	0x080083d4
 80010b4:	080083dc 	.word	0x080083dc
 80010b8:	200000cb 	.word	0x200000cb
 80010bc:	080083e4 	.word	0x080083e4
 80010c0:	080083e8 	.word	0x080083e8
	case 2:
		if (menuItemSelect)
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <_Z11displayMenuv+0x404>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00a      	beq.n	80010e2 <_Z11displayMenuv+0x37e>
		{
			ssd1306_SetCursor(120, 32);
 80010cc:	2120      	movs	r1, #32
 80010ce:	2078      	movs	r0, #120	; 0x78
 80010d0:	f002 fcc6 	bl	8003a60 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 80010d4:	4a25      	ldr	r2, [pc, #148]	; (800116c <_Z11displayMenuv+0x408>)
 80010d6:	2301      	movs	r3, #1
 80010d8:	ca06      	ldmia	r2, {r1, r2}
 80010da:	4825      	ldr	r0, [pc, #148]	; (8001170 <_Z11displayMenuv+0x40c>)
 80010dc:	f002 fc9a 	bl	8003a14 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 32);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 80010e0:	e039      	b.n	8001156 <_Z11displayMenuv+0x3f2>
			ssd1306_SetCursor(2, 32);
 80010e2:	2120      	movs	r1, #32
 80010e4:	2002      	movs	r0, #2
 80010e6:	f002 fcbb 	bl	8003a60 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 80010ea:	4a20      	ldr	r2, [pc, #128]	; (800116c <_Z11displayMenuv+0x408>)
 80010ec:	2301      	movs	r3, #1
 80010ee:	ca06      	ldmia	r2, {r1, r2}
 80010f0:	4820      	ldr	r0, [pc, #128]	; (8001174 <_Z11displayMenuv+0x410>)
 80010f2:	f002 fc8f 	bl	8003a14 <ssd1306_WriteString>
		break;
 80010f6:	e02e      	b.n	8001156 <_Z11displayMenuv+0x3f2>
	case 3:
		if (menuItemSelect)
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <_Z11displayMenuv+0x404>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00a      	beq.n	8001116 <_Z11displayMenuv+0x3b2>
		{
			ssd1306_SetCursor(120, 42);
 8001100:	212a      	movs	r1, #42	; 0x2a
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f002 fcac 	bl	8003a60 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <_Z11displayMenuv+0x408>)
 800110a:	2301      	movs	r3, #1
 800110c:	ca06      	ldmia	r2, {r1, r2}
 800110e:	4818      	ldr	r0, [pc, #96]	; (8001170 <_Z11displayMenuv+0x40c>)
 8001110:	f002 fc80 	bl	8003a14 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 42);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 8001114:	e01f      	b.n	8001156 <_Z11displayMenuv+0x3f2>
			ssd1306_SetCursor(2, 42);
 8001116:	212a      	movs	r1, #42	; 0x2a
 8001118:	2002      	movs	r0, #2
 800111a:	f002 fca1 	bl	8003a60 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <_Z11displayMenuv+0x408>)
 8001120:	2301      	movs	r3, #1
 8001122:	ca06      	ldmia	r2, {r1, r2}
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <_Z11displayMenuv+0x410>)
 8001126:	f002 fc75 	bl	8003a14 <ssd1306_WriteString>
		break;
 800112a:	e014      	b.n	8001156 <_Z11displayMenuv+0x3f2>
	case 4:
		ssd1306_SetCursor(41, 52);
 800112c:	2134      	movs	r1, #52	; 0x34
 800112e:	2029      	movs	r0, #41	; 0x29
 8001130:	f002 fc96 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <_Z11displayMenuv+0x408>)
 8001136:	2301      	movs	r3, #1
 8001138:	ca06      	ldmia	r2, {r1, r2}
 800113a:	480e      	ldr	r0, [pc, #56]	; (8001174 <_Z11displayMenuv+0x410>)
 800113c:	f002 fc6a 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(79, 52);
 8001140:	2134      	movs	r1, #52	; 0x34
 8001142:	204f      	movs	r0, #79	; 0x4f
 8001144:	f002 fc8c 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001148:	4a08      	ldr	r2, [pc, #32]	; (800116c <_Z11displayMenuv+0x408>)
 800114a:	2301      	movs	r3, #1
 800114c:	ca06      	ldmia	r2, {r1, r2}
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <_Z11displayMenuv+0x40c>)
 8001150:	f002 fc60 	bl	8003a14 <ssd1306_WriteString>
		break;
 8001154:	bf00      	nop
	}

	ssd1306_UpdateScreen(dispI2C);
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_Z11displayMenuv+0x414>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fb48 	bl	80037f0 <ssd1306_UpdateScreen>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000ca 	.word	0x200000ca
 800116c:	20000000 	.word	0x20000000
 8001170:	080083e4 	.word	0x080083e4
 8001174:	080083e8 	.word	0x080083e8
 8001178:	20000044 	.word	0x20000044

0800117c <_Z29displayConfirmationRateChangev>:

void displayConfirmationRateChange()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001180:	2000      	movs	r0, #0
 8001182:	f002 fb11 	bl	80037a8 <ssd1306_Fill>
	ssd1306_SetCursor(8, 4);
 8001186:	2104      	movs	r1, #4
 8001188:	2008      	movs	r0, #8
 800118a:	f002 fc69 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Changing the rate", Font_7x10, White);
 800118e:	4a31      	ldr	r2, [pc, #196]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 8001190:	2301      	movs	r3, #1
 8001192:	ca06      	ldmia	r2, {r1, r2}
 8001194:	4830      	ldr	r0, [pc, #192]	; (8001258 <_Z29displayConfirmationRateChangev+0xdc>)
 8001196:	f002 fc3d 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 18);
 800119a:	2112      	movs	r1, #18
 800119c:	2010      	movs	r0, #16
 800119e:	f002 fc5f 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("will clear jam.", Font_7x10, White);
 80011a2:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 80011a4:	2301      	movs	r3, #1
 80011a6:	ca06      	ldmia	r2, {r1, r2}
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <_Z29displayConfirmationRateChangev+0xe0>)
 80011aa:	f002 fc33 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 32);
 80011ae:	2120      	movs	r1, #32
 80011b0:	2020      	movs	r0, #32
 80011b2:	f002 fc55 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 80011b6:	4a27      	ldr	r2, [pc, #156]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 80011b8:	2301      	movs	r3, #1
 80011ba:	ca06      	ldmia	r2, {r1, r2}
 80011bc:	4828      	ldr	r0, [pc, #160]	; (8001260 <_Z29displayConfirmationRateChangev+0xe4>)
 80011be:	f002 fc29 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 80011c2:	2132      	movs	r1, #50	; 0x32
 80011c4:	201e      	movs	r0, #30
 80011c6:	f002 fc4b 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 80011ca:	4a22      	ldr	r2, [pc, #136]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 80011cc:	2301      	movs	r3, #1
 80011ce:	ca06      	ldmia	r2, {r1, r2}
 80011d0:	4824      	ldr	r0, [pc, #144]	; (8001264 <_Z29displayConfirmationRateChangev+0xe8>)
 80011d2:	f002 fc1f 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 80011d6:	2132      	movs	r1, #50	; 0x32
 80011d8:	2050      	movs	r0, #80	; 0x50
 80011da:	f002 fc41 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 80011e0:	2301      	movs	r3, #1
 80011e2:	ca06      	ldmia	r2, {r1, r2}
 80011e4:	4820      	ldr	r0, [pc, #128]	; (8001268 <_Z29displayConfirmationRateChangev+0xec>)
 80011e6:	f002 fc15 	bl	8003a14 <ssd1306_WriteString>
	if (highlightYes)
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <_Z29displayConfirmationRateChangev+0xf0>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d014      	beq.n	800121c <_Z29displayConfirmationRateChangev+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 80011f2:	2132      	movs	r1, #50	; 0x32
 80011f4:	2048      	movs	r0, #72	; 0x48
 80011f6:	f002 fc33 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80011fa:	4a16      	ldr	r2, [pc, #88]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 80011fc:	2301      	movs	r3, #1
 80011fe:	ca06      	ldmia	r2, {r1, r2}
 8001200:	481b      	ldr	r0, [pc, #108]	; (8001270 <_Z29displayConfirmationRateChangev+0xf4>)
 8001202:	f002 fc07 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8001206:	2132      	movs	r1, #50	; 0x32
 8001208:	2066      	movs	r0, #102	; 0x66
 800120a:	f002 fc29 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 8001210:	2301      	movs	r3, #1
 8001212:	ca06      	ldmia	r2, {r1, r2}
 8001214:	4817      	ldr	r0, [pc, #92]	; (8001274 <_Z29displayConfirmationRateChangev+0xf8>)
 8001216:	f002 fbfd 	bl	8003a14 <ssd1306_WriteString>
 800121a:	e013      	b.n	8001244 <_Z29displayConfirmationRateChangev+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 800121c:	2132      	movs	r1, #50	; 0x32
 800121e:	2016      	movs	r0, #22
 8001220:	f002 fc1e 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 8001226:	2301      	movs	r3, #1
 8001228:	ca06      	ldmia	r2, {r1, r2}
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <_Z29displayConfirmationRateChangev+0xf4>)
 800122c:	f002 fbf2 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 8001230:	2132      	movs	r1, #50	; 0x32
 8001232:	202d      	movs	r0, #45	; 0x2d
 8001234:	f002 fc14 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <_Z29displayConfirmationRateChangev+0xd8>)
 800123a:	2301      	movs	r3, #1
 800123c:	ca06      	ldmia	r2, {r1, r2}
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <_Z29displayConfirmationRateChangev+0xf8>)
 8001240:	f002 fbe8 	bl	8003a14 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <_Z29displayConfirmationRateChangev+0xfc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fad1 	bl	80037f0 <ssd1306_UpdateScreen>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	080083ec 	.word	0x080083ec
 800125c:	08008400 	.word	0x08008400
 8001260:	08008410 	.word	0x08008410
 8001264:	0800841c 	.word	0x0800841c
 8001268:	08008420 	.word	0x08008420
 800126c:	200000cc 	.word	0x200000cc
 8001270:	080083e8 	.word	0x080083e8
 8001274:	080083e4 	.word	0x080083e4
 8001278:	20000044 	.word	0x20000044

0800127c <_Z31displayConfirmationOffsetChangev>:

void displayConfirmationOffsetChange()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001280:	2000      	movs	r0, #0
 8001282:	f002 fa91 	bl	80037a8 <ssd1306_Fill>
	ssd1306_SetCursor(10, 10);
 8001286:	210a      	movs	r1, #10
 8001288:	200a      	movs	r0, #10
 800128a:	f002 fbe9 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("The offset will", Font_7x10, White);
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <_Z31displayConfirmationOffsetChangev+0x90>)
 8001290:	2301      	movs	r3, #1
 8001292:	ca06      	ldmia	r2, {r1, r2}
 8001294:	481e      	ldr	r0, [pc, #120]	; (8001310 <_Z31displayConfirmationOffsetChangev+0x94>)
 8001296:	f002 fbbd 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(14, 22);
 800129a:	2116      	movs	r1, #22
 800129c:	200e      	movs	r0, #14
 800129e:	f002 fbdf 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("take effect on", Font_7x10, White);
 80012a2:	4a1a      	ldr	r2, [pc, #104]	; (800130c <_Z31displayConfirmationOffsetChangev+0x90>)
 80012a4:	2301      	movs	r3, #1
 80012a6:	ca06      	ldmia	r2, {r1, r2}
 80012a8:	481a      	ldr	r0, [pc, #104]	; (8001314 <_Z31displayConfirmationOffsetChangev+0x98>)
 80012aa:	f002 fbb3 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(36, 34);
 80012ae:	2122      	movs	r1, #34	; 0x22
 80012b0:	2024      	movs	r0, #36	; 0x24
 80012b2:	f002 fbd5 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("next jam.", Font_7x10, White);
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <_Z31displayConfirmationOffsetChangev+0x90>)
 80012b8:	2301      	movs	r3, #1
 80012ba:	ca06      	ldmia	r2, {r1, r2}
 80012bc:	4816      	ldr	r0, [pc, #88]	; (8001318 <_Z31displayConfirmationOffsetChangev+0x9c>)
 80012be:	f002 fba9 	bl	8003a14 <ssd1306_WriteString>
	//ssd1306_SetCursor(14, 34);
	//ssd1306_WriteString("Continue?", Font_7x10, White);
	//ssd1306_SetCursor(30, 48);
	//ssd1306_WriteString("NO", Font_11x18, White);
	ssd1306_SetCursor(52, 50);
 80012c2:	2132      	movs	r1, #50	; 0x32
 80012c4:	2034      	movs	r0, #52	; 0x34
 80012c6:	f002 fbcb 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <_Z31displayConfirmationOffsetChangev+0x90>)
 80012cc:	2301      	movs	r3, #1
 80012ce:	ca06      	ldmia	r2, {r1, r2}
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <_Z31displayConfirmationOffsetChangev+0xa0>)
 80012d2:	f002 fb9f 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(44, 50);
 80012d6:	2132      	movs	r1, #50	; 0x32
 80012d8:	202c      	movs	r0, #44	; 0x2c
 80012da:	f002 fbc1 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <_Z31displayConfirmationOffsetChangev+0x90>)
 80012e0:	2301      	movs	r3, #1
 80012e2:	ca06      	ldmia	r2, {r1, r2}
 80012e4:	480e      	ldr	r0, [pc, #56]	; (8001320 <_Z31displayConfirmationOffsetChangev+0xa4>)
 80012e6:	f002 fb95 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(66, 50);
 80012ea:	2132      	movs	r1, #50	; 0x32
 80012ec:	2042      	movs	r0, #66	; 0x42
 80012ee:	f002 fbb7 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 80012f2:	4a06      	ldr	r2, [pc, #24]	; (800130c <_Z31displayConfirmationOffsetChangev+0x90>)
 80012f4:	2301      	movs	r3, #1
 80012f6:	ca06      	ldmia	r2, {r1, r2}
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <_Z31displayConfirmationOffsetChangev+0xa8>)
 80012fa:	f002 fb8b 	bl	8003a14 <ssd1306_WriteString>
	
	ssd1306_UpdateScreen(dispI2C);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <_Z31displayConfirmationOffsetChangev+0xac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fa74 	bl	80037f0 <ssd1306_UpdateScreen>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	08008424 	.word	0x08008424
 8001314:	08008434 	.word	0x08008434
 8001318:	08008444 	.word	0x08008444
 800131c:	08008450 	.word	0x08008450
 8001320:	080083e8 	.word	0x080083e8
 8001324:	080083e4 	.word	0x080083e4
 8001328:	20000044 	.word	0x20000044

0800132c <_Z24displayConfirmationRejamv>:

void displayConfirmationRejam()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001330:	2000      	movs	r0, #0
 8001332:	f002 fa39 	bl	80037a8 <ssd1306_Fill>
	ssd1306_SetCursor(12, 6);
 8001336:	2106      	movs	r1, #6
 8001338:	200c      	movs	r0, #12
 800133a:	f002 fb91 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("This will clear", Font_7x10, White);
 800133e:	4a31      	ldr	r2, [pc, #196]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 8001340:	2301      	movs	r3, #1
 8001342:	ca06      	ldmia	r2, {r1, r2}
 8001344:	4830      	ldr	r0, [pc, #192]	; (8001408 <_Z24displayConfirmationRejamv+0xdc>)
 8001346:	f002 fb65 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(24, 18);
 800134a:	2112      	movs	r1, #18
 800134c:	2018      	movs	r0, #24
 800134e:	f002 fb87 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("current jam.", Font_7x10, White);
 8001352:	4a2c      	ldr	r2, [pc, #176]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 8001354:	2301      	movs	r3, #1
 8001356:	ca06      	ldmia	r2, {r1, r2}
 8001358:	482c      	ldr	r0, [pc, #176]	; (800140c <_Z24displayConfirmationRejamv+0xe0>)
 800135a:	f002 fb5b 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(34, 32);
 800135e:	2120      	movs	r1, #32
 8001360:	2022      	movs	r0, #34	; 0x22
 8001362:	f002 fb7d 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 8001366:	4a27      	ldr	r2, [pc, #156]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 8001368:	2301      	movs	r3, #1
 800136a:	ca06      	ldmia	r2, {r1, r2}
 800136c:	4828      	ldr	r0, [pc, #160]	; (8001410 <_Z24displayConfirmationRejamv+0xe4>)
 800136e:	f002 fb51 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 8001372:	2132      	movs	r1, #50	; 0x32
 8001374:	201e      	movs	r0, #30
 8001376:	f002 fb73 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 800137a:	4a22      	ldr	r2, [pc, #136]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 800137c:	2301      	movs	r3, #1
 800137e:	ca06      	ldmia	r2, {r1, r2}
 8001380:	4824      	ldr	r0, [pc, #144]	; (8001414 <_Z24displayConfirmationRejamv+0xe8>)
 8001382:	f002 fb47 	bl	8003a14 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 8001386:	2132      	movs	r1, #50	; 0x32
 8001388:	2050      	movs	r0, #80	; 0x50
 800138a:	f002 fb69 	bl	8003a60 <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 800138e:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 8001390:	2301      	movs	r3, #1
 8001392:	ca06      	ldmia	r2, {r1, r2}
 8001394:	4820      	ldr	r0, [pc, #128]	; (8001418 <_Z24displayConfirmationRejamv+0xec>)
 8001396:	f002 fb3d 	bl	8003a14 <ssd1306_WriteString>
	if (highlightYes)
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <_Z24displayConfirmationRejamv+0xf0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d014      	beq.n	80013cc <_Z24displayConfirmationRejamv+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 80013a2:	2132      	movs	r1, #50	; 0x32
 80013a4:	2048      	movs	r0, #72	; 0x48
 80013a6:	f002 fb5b 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 80013ac:	2301      	movs	r3, #1
 80013ae:	ca06      	ldmia	r2, {r1, r2}
 80013b0:	481b      	ldr	r0, [pc, #108]	; (8001420 <_Z24displayConfirmationRejamv+0xf4>)
 80013b2:	f002 fb2f 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 80013b6:	2132      	movs	r1, #50	; 0x32
 80013b8:	2066      	movs	r0, #102	; 0x66
 80013ba:	f002 fb51 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 80013c0:	2301      	movs	r3, #1
 80013c2:	ca06      	ldmia	r2, {r1, r2}
 80013c4:	4817      	ldr	r0, [pc, #92]	; (8001424 <_Z24displayConfirmationRejamv+0xf8>)
 80013c6:	f002 fb25 	bl	8003a14 <ssd1306_WriteString>
 80013ca:	e013      	b.n	80013f4 <_Z24displayConfirmationRejamv+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 80013cc:	2132      	movs	r1, #50	; 0x32
 80013ce:	2016      	movs	r0, #22
 80013d0:	f002 fb46 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 80013d6:	2301      	movs	r3, #1
 80013d8:	ca06      	ldmia	r2, {r1, r2}
 80013da:	4811      	ldr	r0, [pc, #68]	; (8001420 <_Z24displayConfirmationRejamv+0xf4>)
 80013dc:	f002 fb1a 	bl	8003a14 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 80013e0:	2132      	movs	r1, #50	; 0x32
 80013e2:	202d      	movs	r0, #45	; 0x2d
 80013e4:	f002 fb3c 	bl	8003a60 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <_Z24displayConfirmationRejamv+0xd8>)
 80013ea:	2301      	movs	r3, #1
 80013ec:	ca06      	ldmia	r2, {r1, r2}
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <_Z24displayConfirmationRejamv+0xf8>)
 80013f0:	f002 fb10 	bl	8003a14 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <_Z24displayConfirmationRejamv+0xfc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 f9f9 	bl	80037f0 <ssd1306_UpdateScreen>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000000 	.word	0x20000000
 8001408:	08008454 	.word	0x08008454
 800140c:	08008464 	.word	0x08008464
 8001410:	08008410 	.word	0x08008410
 8001414:	0800841c 	.word	0x0800841c
 8001418:	08008420 	.word	0x08008420
 800141c:	200000cc 	.word	0x200000cc
 8001420:	080083e8 	.word	0x080083e8
 8001424:	080083e4 	.word	0x080083e4
 8001428:	20000044 	.word	0x20000044

0800142c <_Z14displayBatteryv>:

void displayBattery()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
	char battDisp[4];
	//ssd1306_DrawBattery(battStatus); //TODO BATTERY
	ssd1306_SetCursor(34, 52);
 8001432:	2134      	movs	r1, #52	; 0x34
 8001434:	2022      	movs	r0, #34	; 0x22
 8001436:	f002 fb13 	bl	8003a60 <ssd1306_SetCursor>
	int battPrint = int(batteryRemaining * 100.0);
 800143a:	4b34      	ldr	r3, [pc, #208]	; (800150c <_Z14displayBatteryv+0xe0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f828 	bl	8000494 <__aeabi_f2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <_Z14displayBatteryv+0xe4>)
 800144a:	f7ff f87b 	bl	8000544 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fa87 	bl	8000968 <__aeabi_d2iz>
 800145a:	4603      	mov	r3, r0
 800145c:	607b      	str	r3, [r7, #4]
	if (battPrint == 100)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d108      	bne.n	8001476 <_Z14displayBatteryv+0x4a>
	{
		battDisp[0] = '1';
 8001464:	2331      	movs	r3, #49	; 0x31
 8001466:	703b      	strb	r3, [r7, #0]
		battDisp[1] = '0';
 8001468:	2330      	movs	r3, #48	; 0x30
 800146a:	707b      	strb	r3, [r7, #1]
		battDisp[2] = '0';
 800146c:	2330      	movs	r3, #48	; 0x30
 800146e:	70bb      	strb	r3, [r7, #2]
		battDisp[3] = '%';
 8001470:	2325      	movs	r3, #37	; 0x25
 8001472:	70fb      	strb	r3, [r7, #3]
 8001474:	e03d      	b.n	80014f2 <_Z14displayBatteryv+0xc6>
	}
	else
	{
		battDisp[0] = ' ';
 8001476:	2320      	movs	r3, #32
 8001478:	703b      	strb	r3, [r7, #0]
		battDisp[1] = foo[battPrint / 10];
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <_Z14displayBatteryv+0xe8>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4925      	ldr	r1, [pc, #148]	; (8001518 <_Z14displayBatteryv+0xec>)
 8001482:	fb81 0103 	smull	r0, r1, r1, r3
 8001486:	1089      	asrs	r1, r1, #2
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1acb      	subs	r3, r1, r3
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	707b      	strb	r3, [r7, #1]
		battDisp[2] = foo[battPrint % 10];
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <_Z14displayBatteryv+0xe8>)
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <_Z14displayBatteryv+0xec>)
 800149a:	fb83 1302 	smull	r1, r3, r3, r2
 800149e:	1099      	asrs	r1, r3, #2
 80014a0:	17d3      	asrs	r3, r2, #31
 80014a2:	1ac9      	subs	r1, r1, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	1ad1      	subs	r1, r2, r3
 80014ae:	460b      	mov	r3, r1
 80014b0:	4403      	add	r3, r0
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	70bb      	strb	r3, [r7, #2]
		if (!stat1 && stat2)
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <_Z14displayBatteryv+0xf0>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	f083 0301 	eor.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <_Z14displayBatteryv+0xa6>
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <_Z14displayBatteryv+0xf4>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <_Z14displayBatteryv+0xa6>
			battDisp[3] = '^';
 80014cc:	235e      	movs	r3, #94	; 0x5e
 80014ce:	70fb      	strb	r3, [r7, #3]
 80014d0:	e00f      	b.n	80014f2 <_Z14displayBatteryv+0xc6>
		else if (stat1 && !stat2)
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <_Z14displayBatteryv+0xf0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <_Z14displayBatteryv+0xc2>
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <_Z14displayBatteryv+0xf4>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f083 0301 	eor.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <_Z14displayBatteryv+0xc2>
			battDisp[3] = '!';
 80014e8:	2321      	movs	r3, #33	; 0x21
 80014ea:	70fb      	strb	r3, [r7, #3]
 80014ec:	e001      	b.n	80014f2 <_Z14displayBatteryv+0xc6>
		else
			battDisp[3] = '%';
 80014ee:	2325      	movs	r3, #37	; 0x25
 80014f0:	70fb      	strb	r3, [r7, #3]
	}
	battDisp[4] = ' ';
 80014f2:	2320      	movs	r3, #32
 80014f4:	713b      	strb	r3, [r7, #4]
	ssd1306_WriteString(battDisp, Font_7x10, White);
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <_Z14displayBatteryv+0xf8>)
 80014f8:	4638      	mov	r0, r7
 80014fa:	2301      	movs	r3, #1
 80014fc:	ca06      	ldmia	r2, {r1, r2}
 80014fe:	f002 fa89 	bl	8003a14 <ssd1306_WriteString>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000009c 	.word	0x2000009c
 8001510:	40590000 	.word	0x40590000
 8001514:	20000010 	.word	0x20000010
 8001518:	66666667 	.word	0x66666667
 800151c:	200000a4 	.word	0x200000a4
 8001520:	200000a5 	.word	0x200000a5
 8001524:	20000000 	.word	0x20000000

08001528 <_Z15timecodeDisplayv>:
void timecodeDisplay()
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	tcDisplay[0] = foo[hr / 10];
 800152c:	4b47      	ldr	r3, [pc, #284]	; (800164c <_Z15timecodeDisplayv+0x124>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a47      	ldr	r2, [pc, #284]	; (8001650 <_Z15timecodeDisplayv+0x128>)
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	4947      	ldr	r1, [pc, #284]	; (8001654 <_Z15timecodeDisplayv+0x12c>)
 8001536:	fba1 1202 	umull	r1, r2, r1, r2
 800153a:	08d2      	lsrs	r2, r2, #3
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	4413      	add	r3, r2
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 8001544:	701a      	strb	r2, [r3, #0]
	tcDisplay[1] = foo[hr % 10];
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <_Z15timecodeDisplayv+0x124>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <_Z15timecodeDisplayv+0x128>)
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <_Z15timecodeDisplayv+0x12c>)
 8001550:	fba3 1302 	umull	r1, r3, r3, r2
 8001554:	08d9      	lsrs	r1, r3, #3
 8001556:	460b      	mov	r3, r1
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4403      	add	r3, r0
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 8001568:	705a      	strb	r2, [r3, #1]
	tcDisplay[2] = ':';
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 800156c:	223a      	movs	r2, #58	; 0x3a
 800156e:	709a      	strb	r2, [r3, #2]
	tcDisplay[3] = foo[mn / 10];
 8001570:	4b36      	ldr	r3, [pc, #216]	; (800164c <_Z15timecodeDisplayv+0x124>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a39      	ldr	r2, [pc, #228]	; (800165c <_Z15timecodeDisplayv+0x134>)
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	4936      	ldr	r1, [pc, #216]	; (8001654 <_Z15timecodeDisplayv+0x12c>)
 800157a:	fba1 1202 	umull	r1, r2, r1, r2
 800157e:	08d2      	lsrs	r2, r2, #3
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	4413      	add	r3, r2
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 8001588:	70da      	strb	r2, [r3, #3]
	tcDisplay[4] = foo[mn % 10];
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <_Z15timecodeDisplayv+0x124>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	4b33      	ldr	r3, [pc, #204]	; (800165c <_Z15timecodeDisplayv+0x134>)
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <_Z15timecodeDisplayv+0x12c>)
 8001594:	fba3 1302 	umull	r1, r3, r3, r2
 8001598:	08d9      	lsrs	r1, r3, #3
 800159a:	460b      	mov	r3, r1
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4403      	add	r3, r0
 80015a8:	781a      	ldrb	r2, [r3, #0]
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 80015ac:	711a      	strb	r2, [r3, #4]
	tcDisplay[5] = ':';
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 80015b0:	223a      	movs	r2, #58	; 0x3a
 80015b2:	715a      	strb	r2, [r3, #5]
	tcDisplay[6] = foo[sc / 10];
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <_Z15timecodeDisplayv+0x124>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <_Z15timecodeDisplayv+0x138>)
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	4925      	ldr	r1, [pc, #148]	; (8001654 <_Z15timecodeDisplayv+0x12c>)
 80015be:	fba1 1202 	umull	r1, r2, r1, r2
 80015c2:	08d2      	lsrs	r2, r2, #3
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	4413      	add	r3, r2
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 80015cc:	719a      	strb	r2, [r3, #6]
	tcDisplay[7] = foo[sc % 10];
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <_Z15timecodeDisplayv+0x124>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <_Z15timecodeDisplayv+0x138>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <_Z15timecodeDisplayv+0x12c>)
 80015d8:	fba3 1302 	umull	r1, r3, r3, r2
 80015dc:	08d9      	lsrs	r1, r3, #3
 80015de:	460b      	mov	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4403      	add	r3, r0
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 80015f0:	71da      	strb	r2, [r3, #7]
	tcDisplay[8] = (frameRate == 4) ? ';' : ':';
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <_Z15timecodeDisplayv+0x13c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d101      	bne.n	80015fe <_Z15timecodeDisplayv+0xd6>
 80015fa:	223b      	movs	r2, #59	; 0x3b
 80015fc:	e000      	b.n	8001600 <_Z15timecodeDisplayv+0xd8>
 80015fe:	223a      	movs	r2, #58	; 0x3a
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 8001602:	721a      	strb	r2, [r3, #8]
	tcDisplay[9] = foo[fr / 10];
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <_Z15timecodeDisplayv+0x124>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <_Z15timecodeDisplayv+0x140>)
 800160a:	7812      	ldrb	r2, [r2, #0]
 800160c:	4911      	ldr	r1, [pc, #68]	; (8001654 <_Z15timecodeDisplayv+0x12c>)
 800160e:	fba1 1202 	umull	r1, r2, r1, r2
 8001612:	08d2      	lsrs	r2, r2, #3
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	4413      	add	r3, r2
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 800161c:	725a      	strb	r2, [r3, #9]
	tcDisplay[10] = foo[fr % 10];
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <_Z15timecodeDisplayv+0x124>)
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_Z15timecodeDisplayv+0x140>)
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <_Z15timecodeDisplayv+0x12c>)
 8001628:	fba3 1302 	umull	r1, r3, r3, r2
 800162c:	08d9      	lsrs	r1, r3, #3
 800162e:	460b      	mov	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4403      	add	r3, r0
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <_Z15timecodeDisplayv+0x130>)
 8001640:	729a      	strb	r2, [r3, #10]
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	20000010 	.word	0x20000010
 8001650:	200000a0 	.word	0x200000a0
 8001654:	cccccccd 	.word	0xcccccccd
 8001658:	2000007c 	.word	0x2000007c
 800165c:	200000a1 	.word	0x200000a1
 8001660:	200000a2 	.word	0x200000a2
 8001664:	20000091 	.word	0x20000091
 8001668:	200000a3 	.word	0x200000a3

0800166c <_Z11initDisplayv>:
void initDisplay()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	 if (ssd1306_Init(dispI2C) != 0) {
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <_Z11initDisplayv+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f001 ff77 	bl	8003568 <ssd1306_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_Z11initDisplayv+0x22>
     Error_Handler();
 800168a:	f001 ff51 	bl	8003530 <Error_Handler>
   }
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000044 	.word	0x20000044

08001698 <_Z8menuLoopv>:
uint8_t offsetAdjust;
bool menuItemSelect = false;
uint8_t menuItem = 0;
bool highlightYes = false;
void menuLoop()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
    bool inMenu = true;
 800169e:	2301      	movs	r3, #1
 80016a0:	71fb      	strb	r3, [r7, #7]
    rateAdjust = frameRate;
 80016a2:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <_Z8menuLoopv+0x22c>)
 80016a4:	781a      	ldrb	r2, [r3, #0]
 80016a6:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <_Z8menuLoopv+0x230>)
 80016a8:	701a      	strb	r2, [r3, #0]
    offsetAdjust = intOffset;
 80016aa:	4b88      	ldr	r3, [pc, #544]	; (80018cc <_Z8menuLoopv+0x234>)
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <_Z8menuLoopv+0x238>)
 80016b0:	701a      	strb	r2, [r3, #0]
	 * check if item is exit
	 * timeout for menu inactivity 10 seconds?
	 */
    

    displayTimeout = HAL_GetTick();
 80016b2:	f002 fcf1 	bl	8004098 <HAL_GetTick>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a86      	ldr	r2, [pc, #536]	; (80018d4 <_Z8menuLoopv+0x23c>)
 80016ba:	6013      	str	r3, [r2, #0]
    while (GPIOC->IDR & GPIO_PIN_13)
 80016bc:	4b86      	ldr	r3, [pc, #536]	; (80018d8 <_Z8menuLoopv+0x240>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf14      	ite	ne
 80016c8:	2301      	movne	r3, #1
 80016ca:	2300      	moveq	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d000      	beq.n	80016d4 <_Z8menuLoopv+0x3c>
 80016d2:	e7f3      	b.n	80016bc <_Z8menuLoopv+0x24>
    {
        //While still holding down the menu button
    }
    while (inMenu)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 81d3 	beq.w	8001a82 <_Z8menuLoopv+0x3ea>
    {
        updateDisplay(2);
 80016dc:	2002      	movs	r0, #2
 80016de:	f7ff f96b 	bl	80009b8 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 10000)
 80016e2:	f002 fcd9 	bl	8004098 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b7a      	ldr	r3, [pc, #488]	; (80018d4 <_Z8menuLoopv+0x23c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80016f2:	4293      	cmp	r3, r2
 80016f4:	bf8c      	ite	hi
 80016f6:	2301      	movhi	r3, #1
 80016f8:	2300      	movls	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <_Z8menuLoopv+0x6c>
        {
            inMenu = false;
 8001700:	2300      	movs	r3, #0
 8001702:	71fb      	strb	r3, [r7, #7]
        }
        if (GPIOB->IDR & GPIO_PIN_9)
 8001704:	4b75      	ldr	r3, [pc, #468]	; (80018dc <_Z8menuLoopv+0x244>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d065      	beq.n	80017e6 <_Z8menuLoopv+0x14e>
        { //Plus button
            displayTimeout = HAL_GetTick();
 800171a:	f002 fcbd 	bl	8004098 <HAL_GetTick>
 800171e:	4603      	mov	r3, r0
 8001720:	4a6c      	ldr	r2, [pc, #432]	; (80018d4 <_Z8menuLoopv+0x23c>)
 8001722:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001724:	f002 fcb8 	bl	8004098 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	4b6d      	ldr	r3, [pc, #436]	; (80018e0 <_Z8menuLoopv+0x248>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001734:	bf8c      	ite	hi
 8001736:	2301      	movhi	r3, #1
 8001738:	2300      	movls	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d052      	beq.n	80017e6 <_Z8menuLoopv+0x14e>
            {
                if (menuItemSelect)
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <_Z8menuLoopv+0x24c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d03c      	beq.n	80017c2 <_Z8menuLoopv+0x12a>
                { //Menu item selected, scrolling through values
                    switch (menuItem)
 8001748:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <_Z8menuLoopv+0x250>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d845      	bhi.n	80017dc <_Z8menuLoopv+0x144>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <_Z8menuLoopv+0xc0>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	08001769 	.word	0x08001769
 800175c:	08001787 	.word	0x08001787
 8001760:	080017dd 	.word	0x080017dd
 8001764:	080017a5 	.word	0x080017a5
                    {
                    case 0: //Rate
                        if (rateAdjust == 0)
 8001768:	4b57      	ldr	r3, [pc, #348]	; (80018c8 <_Z8menuLoopv+0x230>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <_Z8menuLoopv+0xe0>
                            rateAdjust = 5;
 8001770:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <_Z8menuLoopv+0x230>)
 8001772:	2205      	movs	r2, #5
 8001774:	701a      	strb	r2, [r3, #0]
                        else
                            rateAdjust--;
                        break;
 8001776:	e031      	b.n	80017dc <_Z8menuLoopv+0x144>
                            rateAdjust--;
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <_Z8menuLoopv+0x230>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <_Z8menuLoopv+0x230>)
 8001782:	701a      	strb	r2, [r3, #0]
                        break;
 8001784:	e02a      	b.n	80017dc <_Z8menuLoopv+0x144>
                    case 1: //Offset
                        if (offsetAdjust == 0)
 8001786:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <_Z8menuLoopv+0x238>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <_Z8menuLoopv+0xfe>
                            offsetAdjust = 0;
 800178e:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <_Z8menuLoopv+0x238>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
                        else
                            offsetAdjust--;
                        break;
 8001794:	e022      	b.n	80017dc <_Z8menuLoopv+0x144>
                            offsetAdjust--;
 8001796:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <_Z8menuLoopv+0x238>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	3b01      	subs	r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <_Z8menuLoopv+0x238>)
 80017a0:	701a      	strb	r2, [r3, #0]
                        break;
 80017a2:	e01b      	b.n	80017dc <_Z8menuLoopv+0x144>
                    case 2:
                        break;
                    case 3:
                        if (autoOff == 0)
 80017a4:	4b51      	ldr	r3, [pc, #324]	; (80018ec <_Z8menuLoopv+0x254>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <_Z8menuLoopv+0x11c>
                            autoOff = 4;
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <_Z8menuLoopv+0x254>)
 80017ae:	2204      	movs	r2, #4
 80017b0:	701a      	strb	r2, [r3, #0]
                        else
                            autoOff--;
                        break;
 80017b2:	e013      	b.n	80017dc <_Z8menuLoopv+0x144>
                            autoOff--;
 80017b4:	4b4d      	ldr	r3, [pc, #308]	; (80018ec <_Z8menuLoopv+0x254>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <_Z8menuLoopv+0x254>)
 80017be:	701a      	strb	r2, [r3, #0]
                        break;
 80017c0:	e00c      	b.n	80017dc <_Z8menuLoopv+0x144>
                        
                    }
                }
                else
                { //Scrolling through menu
                    menuItem++;
 80017c2:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <_Z8menuLoopv+0x250>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <_Z8menuLoopv+0x250>)
 80017cc:	701a      	strb	r2, [r3, #0]
                    if (menuItem > 4)
 80017ce:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <_Z8menuLoopv+0x250>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d902      	bls.n	80017dc <_Z8menuLoopv+0x144>
                        menuItem = 0;
 80017d6:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <_Z8menuLoopv+0x250>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 80017dc:	f002 fc5c 	bl	8004098 <HAL_GetTick>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a3f      	ldr	r2, [pc, #252]	; (80018e0 <_Z8menuLoopv+0x248>)
 80017e4:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <_Z8menuLoopv+0x244>)
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d07f      	beq.n	80018fc <_Z8menuLoopv+0x264>
        { //Minus button

            displayTimeout = HAL_GetTick();
 80017fc:	f002 fc4c 	bl	8004098 <HAL_GetTick>
 8001800:	4603      	mov	r3, r0
 8001802:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <_Z8menuLoopv+0x23c>)
 8001804:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001806:	f002 fc47 	bl	8004098 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <_Z8menuLoopv+0x248>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001816:	bf8c      	ite	hi
 8001818:	2301      	movhi	r3, #1
 800181a:	2300      	movls	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d06c      	beq.n	80018fc <_Z8menuLoopv+0x264>
            {
                if (menuItemSelect)
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <_Z8menuLoopv+0x24c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d038      	beq.n	800189c <_Z8menuLoopv+0x204>
                { //Scrolling through option
                    switch (menuItem)
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <_Z8menuLoopv+0x250>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d85f      	bhi.n	80018f2 <_Z8menuLoopv+0x25a>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <_Z8menuLoopv+0x1a0>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	08001849 	.word	0x08001849
 800183c:	08001865 	.word	0x08001865
 8001840:	080018f3 	.word	0x080018f3
 8001844:	08001881 	.word	0x08001881
                    {
                    case 0:
                        rateAdjust++;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <_Z8menuLoopv+0x230>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <_Z8menuLoopv+0x230>)
 8001852:	701a      	strb	r2, [r3, #0]
                        if (rateAdjust > 5)
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <_Z8menuLoopv+0x230>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b05      	cmp	r3, #5
 800185a:	d92e      	bls.n	80018ba <_Z8menuLoopv+0x222>
                            rateAdjust = 0;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <_Z8menuLoopv+0x230>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
                        break;
 8001862:	e02a      	b.n	80018ba <_Z8menuLoopv+0x222>
                        
                    case 1:
                        offsetAdjust++;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <_Z8menuLoopv+0x238>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <_Z8menuLoopv+0x238>)
 800186e:	701a      	strb	r2, [r3, #0]
                        if (offsetAdjust > 60)
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <_Z8menuLoopv+0x238>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b3c      	cmp	r3, #60	; 0x3c
 8001876:	d922      	bls.n	80018be <_Z8menuLoopv+0x226>
                            offsetAdjust = 60;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_Z8menuLoopv+0x238>)
 800187a:	223c      	movs	r2, #60	; 0x3c
 800187c:	701a      	strb	r2, [r3, #0]
                        break;
 800187e:	e01e      	b.n	80018be <_Z8menuLoopv+0x226>
                    case 2:
                        break;
                    case 3:
                        autoOff++;
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <_Z8menuLoopv+0x254>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <_Z8menuLoopv+0x254>)
 800188a:	701a      	strb	r2, [r3, #0]
                        if (autoOff > 4)
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <_Z8menuLoopv+0x254>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b04      	cmp	r3, #4
 8001892:	d92d      	bls.n	80018f0 <_Z8menuLoopv+0x258>
                            autoOff = 0;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_Z8menuLoopv+0x254>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
                        break;
 800189a:	e029      	b.n	80018f0 <_Z8menuLoopv+0x258>
                    }
                }
                else
                { //Scrolling through menu
                    if (menuItem == 0)
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <_Z8menuLoopv+0x250>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d103      	bne.n	80018ac <_Z8menuLoopv+0x214>
                        menuItem = 4;
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <_Z8menuLoopv+0x250>)
 80018a6:	2204      	movs	r2, #4
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e022      	b.n	80018f2 <_Z8menuLoopv+0x25a>
                    else
                        menuItem--;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <_Z8menuLoopv+0x250>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <_Z8menuLoopv+0x250>)
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	e01b      	b.n	80018f2 <_Z8menuLoopv+0x25a>
                        break;
 80018ba:	bf00      	nop
 80018bc:	e019      	b.n	80018f2 <_Z8menuLoopv+0x25a>
                        break;
 80018be:	bf00      	nop
 80018c0:	e017      	b.n	80018f2 <_Z8menuLoopv+0x25a>
 80018c2:	bf00      	nop
 80018c4:	20000091 	.word	0x20000091
 80018c8:	200000c8 	.word	0x200000c8
 80018cc:	20000014 	.word	0x20000014
 80018d0:	200000c9 	.word	0x200000c9
 80018d4:	200000c0 	.word	0x200000c0
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000400 	.word	0x48000400
 80018e0:	200000c4 	.word	0x200000c4
 80018e4:	200000ca 	.word	0x200000ca
 80018e8:	200000cb 	.word	0x200000cb
 80018ec:	20000098 	.word	0x20000098
                        break;
 80018f0:	bf00      	nop
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 80018f2:	f002 fbd1 	bl	8004098 <HAL_GetTick>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a65      	ldr	r2, [pc, #404]	; (8001a90 <_Z8menuLoopv+0x3f8>)
 80018fa:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 80018fc:	4b65      	ldr	r3, [pc, #404]	; (8001a94 <_Z8menuLoopv+0x3fc>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	f43f aee0 	beq.w	80016d4 <_Z8menuLoopv+0x3c>
        { //Menu button

            if (!(GPIOB->IDR & GPIO_PIN_8))
 8001914:	4b60      	ldr	r3, [pc, #384]	; (8001a98 <_Z8menuLoopv+0x400>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	f43f aed4 	beq.w	80016d4 <_Z8menuLoopv+0x3c>
            {

                displayTimeout = HAL_GetTick();
 800192c:	f002 fbb4 	bl	8004098 <HAL_GetTick>
 8001930:	4603      	mov	r3, r0
 8001932:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <_Z8menuLoopv+0x404>)
 8001934:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001936:	f002 fbaf 	bl	8004098 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <_Z8menuLoopv+0x3f8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001946:	bf8c      	ite	hi
 8001948:	2301      	movhi	r3, #1
 800194a:	2300      	movls	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	f43f aec0 	beq.w	80016d4 <_Z8menuLoopv+0x3c>
                {
                    if (!menuItemSelect)
 8001954:	4b52      	ldr	r3, [pc, #328]	; (8001aa0 <_Z8menuLoopv+0x408>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	f083 0301 	eor.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d03c      	beq.n	80019dc <_Z8menuLoopv+0x344>
                    { //if scrolling through menu items
                        switch (menuItem)
 8001962:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <_Z8menuLoopv+0x40c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b04      	cmp	r3, #4
 8001968:	f200 8085 	bhi.w	8001a76 <_Z8menuLoopv+0x3de>
 800196c:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <_Z8menuLoopv+0x2dc>)
 800196e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001972:	bf00      	nop
 8001974:	08001989 	.word	0x08001989
 8001978:	08001991 	.word	0x08001991
 800197c:	08001999 	.word	0x08001999
 8001980:	080019bf 	.word	0x080019bf
 8001984:	080019c7 	.word	0x080019c7
                        {
                        case 0: //Rate
                            menuItemSelect = true;
 8001988:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <_Z8menuLoopv+0x408>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
                            break;
 800198e:	e072      	b.n	8001a76 <_Z8menuLoopv+0x3de>
                        case 1: //Offset
                            menuItemSelect = true;
 8001990:	4b43      	ldr	r3, [pc, #268]	; (8001aa0 <_Z8menuLoopv+0x408>)
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
                            //offsetAlert();
                            ///while (GPIOC->IDR & GPIO_PIN_13)
                            //{displayTimeout = HAL_GetTick();}
                            break;
 8001996:	e06e      	b.n	8001a76 <_Z8menuLoopv+0x3de>
                        case 2: //Re-jam
                            reJamAlert();
 8001998:	f000 f9c4 	bl	8001d24 <_Z10reJamAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 800199c:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <_Z8menuLoopv+0x3fc>)
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d060      	beq.n	8001a74 <_Z8menuLoopv+0x3dc>
                            {displayTimeout = HAL_GetTick();}
 80019b2:	f002 fb71 	bl	8004098 <HAL_GetTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a38      	ldr	r2, [pc, #224]	; (8001a9c <_Z8menuLoopv+0x404>)
 80019ba:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 80019bc:	e7ee      	b.n	800199c <_Z8menuLoopv+0x304>
                            break;
                        case 3: //Auto-Off
                            menuItemSelect = true;
 80019be:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <_Z8menuLoopv+0x408>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
                            break;
 80019c4:	e057      	b.n	8001a76 <_Z8menuLoopv+0x3de>
                        case 4: //Exit menu
                            buttonTime = HAL_GetTick();
 80019c6:	f002 fb67 	bl	8004098 <HAL_GetTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a30      	ldr	r2, [pc, #192]	; (8001a90 <_Z8menuLoopv+0x3f8>)
 80019ce:	6013      	str	r3, [r2, #0]
                            //menuCount = HAL_GetTick();
                            //GPIOH->ODR |= GPIO_PIN_3; //Not sure what this does
                            //Write to EEPROM
                            inMenu = false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	71fb      	strb	r3, [r7, #7]
                            uptimeMinutes = 0;
 80019d4:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <_Z8menuLoopv+0x410>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
                            break;
 80019da:	e04c      	b.n	8001a76 <_Z8menuLoopv+0x3de>
                        }
                    }
                    else //Exit menu option
                    {
                        switch (menuItem)
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <_Z8menuLoopv+0x40c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d848      	bhi.n	8001a76 <_Z8menuLoopv+0x3de>
 80019e4:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <_Z8menuLoopv+0x354>)
 80019e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ea:	bf00      	nop
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001a33 	.word	0x08001a33
 80019f4:	08001a61 	.word	0x08001a61
 80019f8:	08001a6d 	.word	0x08001a6d
                        {
                        case 0: //Rate
                            menuItemSelect = false;
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <_Z8menuLoopv+0x408>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
                            rateAlert();
 8001a02:	f000 f857 	bl	8001ab4 <_Z9rateAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <_Z8menuLoopv+0x3fc>)
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <_Z8menuLoopv+0x390>
                            {displayTimeout = HAL_GetTick();}
 8001a1c:	f002 fb3c 	bl	8004098 <HAL_GetTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <_Z8menuLoopv+0x404>)
 8001a24:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001a26:	e7ee      	b.n	8001a06 <_Z8menuLoopv+0x36e>
                            rateAdjust = frameRate;
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <_Z8menuLoopv+0x414>)
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <_Z8menuLoopv+0x418>)
 8001a2e:	701a      	strb	r2, [r3, #0]
                            break;
 8001a30:	e021      	b.n	8001a76 <_Z8menuLoopv+0x3de>
                        case 1: //Offset
                            offsetAlert();
 8001a32:	f000 f909 	bl	8001c48 <_Z11offsetAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <_Z8menuLoopv+0x3fc>)
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <_Z8menuLoopv+0x3c0>
                            {displayTimeout = HAL_GetTick();}
 8001a4c:	f002 fb24 	bl	8004098 <HAL_GetTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <_Z8menuLoopv+0x404>)
 8001a54:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8001a56:	e7ee      	b.n	8001a36 <_Z8menuLoopv+0x39e>
                            menuItemSelect = false;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <_Z8menuLoopv+0x408>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
                            break;
 8001a5e:	e00a      	b.n	8001a76 <_Z8menuLoopv+0x3de>
                        case 2: //Re-Jam
                            reJamAlert();
 8001a60:	f000 f960 	bl	8001d24 <_Z10reJamAlertv>
                            menuItemSelect = false;
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <_Z8menuLoopv+0x408>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
                            break;
 8001a6a:	e004      	b.n	8001a76 <_Z8menuLoopv+0x3de>
                        case 3: //Auto-Off
                            menuItemSelect = false;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <_Z8menuLoopv+0x408>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
                            break;
 8001a72:	e000      	b.n	8001a76 <_Z8menuLoopv+0x3de>
                            break;
 8001a74:	bf00      	nop
                        }
                    }
                    buttonTime = HAL_GetTick(); //Debounce timer
 8001a76:	f002 fb0f 	bl	8004098 <HAL_GetTick>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <_Z8menuLoopv+0x3f8>)
 8001a7e:	6013      	str	r3, [r2, #0]
    while (inMenu)
 8001a80:	e628      	b.n	80016d4 <_Z8menuLoopv+0x3c>
                }
            }
        }
    }
    updateDisplay(0x0);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7fe ff98 	bl	80009b8 <_Z13updateDisplayh>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000c4 	.word	0x200000c4
 8001a94:	48000800 	.word	0x48000800
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	200000c0 	.word	0x200000c0
 8001aa0:	200000ca 	.word	0x200000ca
 8001aa4:	200000cb 	.word	0x200000cb
 8001aa8:	2000009a 	.word	0x2000009a
 8001aac:	20000091 	.word	0x20000091
 8001ab0:	200000c8 	.word	0x200000c8

08001ab4 <_Z9rateAlertv>:
        break;
    }
}

void rateAlert()
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8001aba:	2301      	movs	r3, #1
 8001abc:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <_Z9rateAlertv+0x178>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x5);
 8001ac4:	2005      	movs	r0, #5
 8001ac6:	f7fe ff77 	bl	80009b8 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8001aca:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <_Z9rateAlertv+0x17c>)
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d000      	beq.n	8001ae2 <_Z9rateAlertv+0x2e>
 8001ae0:	e7f3      	b.n	8001aca <_Z9rateAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 809c 	beq.w	8001c22 <_Z9rateAlertv+0x16e>
    {
        updateDisplay(0x5);
 8001aea:	2005      	movs	r0, #5
 8001aec:	f7fe ff64 	bl	80009b8 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8001af0:	f002 fad2 	bl	8004098 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b4f      	ldr	r3, [pc, #316]	; (8001c34 <_Z9rateAlertv+0x180>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	bf8c      	ite	hi
 8001b04:	2301      	movhi	r3, #1
 8001b06:	2300      	movls	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <_Z9rateAlertv+0x64>
        {
            highlightYes = false;
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <_Z9rateAlertv+0x178>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8001b14:	2300      	movs	r3, #0
 8001b16:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 8001b18:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <_Z9rateAlertv+0x184>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01e      	beq.n	8001b6c <_Z9rateAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8001b2e:	f002 fab3 	bl	8004098 <HAL_GetTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a3f      	ldr	r2, [pc, #252]	; (8001c34 <_Z9rateAlertv+0x180>)
 8001b36:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001b38:	f002 faae 	bl	8004098 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <_Z9rateAlertv+0x188>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001b48:	bf8c      	ite	hi
 8001b4a:	2301      	movhi	r3, #1
 8001b4c:	2300      	movls	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00b      	beq.n	8001b6c <_Z9rateAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 8001b54:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <_Z9rateAlertv+0x178>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <_Z9rateAlertv+0x178>)
 8001b60:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001b62:	f002 fa99 	bl	8004098 <HAL_GetTick>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <_Z9rateAlertv+0x188>)
 8001b6a:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <_Z9rateAlertv+0x184>)
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01e      	beq.n	8001bc0 <_Z9rateAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 8001b82:	f002 fa89 	bl	8004098 <HAL_GetTick>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <_Z9rateAlertv+0x180>)
 8001b8a:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001b8c:	f002 fa84 	bl	8004098 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <_Z9rateAlertv+0x188>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001b9c:	bf8c      	ite	hi
 8001b9e:	2301      	movhi	r3, #1
 8001ba0:	2300      	movls	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <_Z9rateAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <_Z9rateAlertv+0x178>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <_Z9rateAlertv+0x178>)
 8001bb4:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001bb6:	f002 fa6f 	bl	8004098 <HAL_GetTick>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <_Z9rateAlertv+0x188>)
 8001bbe:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <_Z9rateAlertv+0x17c>)
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf14      	ite	ne
 8001bcc:	2301      	movne	r3, #1
 8001bce:	2300      	moveq	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d085      	beq.n	8001ae2 <_Z9rateAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8001bd6:	f002 fa5f 	bl	8004098 <HAL_GetTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <_Z9rateAlertv+0x180>)
 8001bde:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001be0:	f002 fa5a 	bl	8004098 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_Z9rateAlertv+0x188>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001bf0:	bf8c      	ite	hi
 8001bf2:	2301      	movhi	r3, #1
 8001bf4:	2300      	movls	r3, #0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f43f af72 	beq.w	8001ae2 <_Z9rateAlertv+0x2e>
            {
                if (highlightYes)
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <_Z9rateAlertv+0x178>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <_Z9rateAlertv+0x16a>
                {
                    frameRate = rateAdjust;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <_Z9rateAlertv+0x18c>)
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <_Z9rateAlertv+0x190>)
 8001c0c:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 8001c0e:	f000 fa19 	bl	8002044 <_Z13resetTimecodev>
                    highlightYes = false;
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <_Z9rateAlertv+0x178>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
                    inLoop = false;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	71fb      	strb	r3, [r7, #7]
                    break;
 8001c1c:	e001      	b.n	8001c22 <_Z9rateAlertv+0x16e>
                }
                inLoop = false;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
                break;
                buttonTime = HAL_GetTick(); //Debounce timer
            }
        }
    }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200000cc 	.word	0x200000cc
 8001c30:	48000800 	.word	0x48000800
 8001c34:	200000c0 	.word	0x200000c0
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	200000c4 	.word	0x200000c4
 8001c40:	200000c8 	.word	0x200000c8
 8001c44:	20000091 	.word	0x20000091

08001c48 <_Z11offsetAlertv>:

void offsetAlert()
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	71fb      	strb	r3, [r7, #7]
    updateDisplay(0x6);
 8001c52:	2006      	movs	r0, #6
 8001c54:	f7fe feb0 	bl	80009b8 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8001c58:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <_Z11offsetAlertv+0xc4>)
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf14      	ite	ne
 8001c64:	2301      	movne	r3, #1
 8001c66:	2300      	moveq	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d000      	beq.n	8001c70 <_Z11offsetAlertv+0x28>
 8001c6e:	e7f3      	b.n	8001c58 <_Z11offsetAlertv+0x10>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d046      	beq.n	8001d04 <_Z11offsetAlertv+0xbc>
    {
        updateDisplay(0x6);
 8001c76:	2006      	movs	r0, #6
 8001c78:	f7fe fe9e 	bl	80009b8 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 8000)
 8001c7c:	f002 fa0c 	bl	8004098 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <_Z11offsetAlertv+0xc8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001c8c:	bf8c      	ite	hi
 8001c8e:	2301      	movhi	r3, #1
 8001c90:	2300      	movls	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <_Z11offsetAlertv+0x5a>
        {
            highlightYes = false;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <_Z11offsetAlertv+0xcc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <_Z11offsetAlertv+0xc4>)
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0db      	beq.n	8001c70 <_Z11offsetAlertv+0x28>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8001cb8:	f002 f9ee 	bl	8004098 <HAL_GetTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <_Z11offsetAlertv+0xc8>)
 8001cc0:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001cc2:	f002 f9e9 	bl	8004098 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <_Z11offsetAlertv+0xd0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001cd2:	bf8c      	ite	hi
 8001cd4:	2301      	movhi	r3, #1
 8001cd6:	2300      	movls	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0c8      	beq.n	8001c70 <_Z11offsetAlertv+0x28>
            {
                //Add/subtract offset to current frame?
                //Set offset for future jams?
                intOffset = offsetAdjust;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <_Z11offsetAlertv+0xd4>)
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <_Z11offsetAlertv+0xd8>)
 8001ce4:	701a      	strb	r2, [r3, #0]
                highlightYes = !highlightYes;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <_Z11offsetAlertv+0xcc>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	f083 0301 	eor.w	r3, r3, #1
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <_Z11offsetAlertv+0xcc>)
 8001cf2:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001cf4:	f002 f9d0 	bl	8004098 <HAL_GetTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <_Z11offsetAlertv+0xd0>)
 8001cfc:	6013      	str	r3, [r2, #0]
                inLoop = false;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 8001d02:	e7b5      	b.n	8001c70 <_Z11offsetAlertv+0x28>
            }
        }
    }
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	200000c0 	.word	0x200000c0
 8001d14:	200000cc 	.word	0x200000cc
 8001d18:	200000c4 	.word	0x200000c4
 8001d1c:	200000c9 	.word	0x200000c9
 8001d20:	20000014 	.word	0x20000014

08001d24 <_Z10reJamAlertv>:

void reJamAlert()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
    bool inLoop = true;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 8001d2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x7);
 8001d34:	2007      	movs	r0, #7
 8001d36:	f7fe fe3f 	bl	80009b8 <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <_Z10reJamAlertv+0x188>)
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf14      	ite	ne
 8001d46:	2301      	movne	r3, #1
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d000      	beq.n	8001d52 <_Z10reJamAlertv+0x2e>
 8001d50:	e7f3      	b.n	8001d3a <_Z10reJamAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a3 	beq.w	8001ea0 <_Z10reJamAlertv+0x17c>
    {
        updateDisplay(0x7);
 8001d5a:	2007      	movs	r0, #7
 8001d5c:	f7fe fe2c 	bl	80009b8 <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8001d60:	f002 f99a 	bl	8004098 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <_Z10reJamAlertv+0x18c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	bf8c      	ite	hi
 8001d74:	2301      	movhi	r3, #1
 8001d76:	2300      	movls	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <_Z10reJamAlertv+0x64>
        {
            highlightYes = false;
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8001d84:	2300      	movs	r3, #0
 8001d86:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <_Z10reJamAlertv+0x190>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01e      	beq.n	8001ddc <_Z10reJamAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8001d9e:	f002 f97b 	bl	8004098 <HAL_GetTick>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a42      	ldr	r2, [pc, #264]	; (8001eb0 <_Z10reJamAlertv+0x18c>)
 8001da6:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001da8:	f002 f976 	bl	8004098 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <_Z10reJamAlertv+0x194>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001db8:	bf8c      	ite	hi
 8001dba:	2301      	movhi	r3, #1
 8001dbc:	2300      	movls	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00b      	beq.n	8001ddc <_Z10reJamAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001dd0:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001dd2:	f002 f961 	bl	8004098 <HAL_GetTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a37      	ldr	r2, [pc, #220]	; (8001eb8 <_Z10reJamAlertv+0x194>)
 8001dda:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <_Z10reJamAlertv+0x190>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01e      	beq.n	8001e30 <_Z10reJamAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 8001df2:	f002 f951 	bl	8004098 <HAL_GetTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <_Z10reJamAlertv+0x18c>)
 8001dfa:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001dfc:	f002 f94c 	bl	8004098 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <_Z10reJamAlertv+0x194>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001e0c:	bf8c      	ite	hi
 8001e0e:	2301      	movhi	r3, #1
 8001e10:	2300      	movls	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <_Z10reJamAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001e24:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8001e26:	f002 f937 	bl	8004098 <HAL_GetTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4a22      	ldr	r2, [pc, #136]	; (8001eb8 <_Z10reJamAlertv+0x194>)
 8001e2e:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <_Z10reJamAlertv+0x188>)
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d085      	beq.n	8001d52 <_Z10reJamAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 8001e46:	f002 f927 	bl	8004098 <HAL_GetTick>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <_Z10reJamAlertv+0x18c>)
 8001e4e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001e50:	f002 f922 	bl	8004098 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <_Z10reJamAlertv+0x194>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001e60:	bf8c      	ite	hi
 8001e62:	2301      	movhi	r3, #1
 8001e64:	2300      	movls	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f43f af72 	beq.w	8001d52 <_Z10reJamAlertv+0x2e>
            {
                if (highlightYes)
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <_Z10reJamAlertv+0x16c>
                {
                    frameRate = rateAdjust;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <_Z10reJamAlertv+0x198>)
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <_Z10reJamAlertv+0x19c>)
 8001e7c:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 8001e7e:	f000 f8e1 	bl	8002044 <_Z13resetTimecodev>
                    highlightYes = !highlightYes;
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	f083 0301 	eor.w	r3, r3, #1
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <_Z10reJamAlertv+0x184>)
 8001e8e:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8001e90:	f002 f902 	bl	8004098 <HAL_GetTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <_Z10reJamAlertv+0x194>)
 8001e98:	6013      	str	r3, [r2, #0]
                inLoop = false;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 8001e9e:	e758      	b.n	8001d52 <_Z10reJamAlertv+0x2e>
            }
        }
    }
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200000cc 	.word	0x200000cc
 8001eac:	48000800 	.word	0x48000800
 8001eb0:	200000c0 	.word	0x200000c0
 8001eb4:	48000400 	.word	0x48000400
 8001eb8:	200000c4 	.word	0x200000c4
 8001ebc:	200000c8 	.word	0x200000c8
 8001ec0:	20000091 	.word	0x20000091

08001ec4 <_Z12initTimecodev>:

/* Init Timecode
* Get the current frame count based on the data read in from the timer
*TODO: Add in the user variables
*/
bool initTimecode(){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
  int hr = int(tcIN[1] & 0x0F) + (int(tcIN[0] & 0x03)*10);
 8001eca:	4b55      	ldr	r3, [pc, #340]	; (8002020 <_Z12initTimecodev+0x15c>)
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f003 010f 	and.w	r1, r3, #15
 8001ed4:	4b52      	ldr	r3, [pc, #328]	; (8002020 <_Z12initTimecodev+0x15c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f003 0203 	and.w	r2, r3, #3
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	440b      	add	r3, r1
 8001ee8:	60fb      	str	r3, [r7, #12]
  int mn = int(tcIN[3] & 0x0F) + (int(tcIN[2] & 0x07)*10);
 8001eea:	4b4d      	ldr	r3, [pc, #308]	; (8002020 <_Z12initTimecodev+0x15c>)
 8001eec:	78db      	ldrb	r3, [r3, #3]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 010f 	and.w	r1, r3, #15
 8001ef4:	4b4a      	ldr	r3, [pc, #296]	; (8002020 <_Z12initTimecodev+0x15c>)
 8001ef6:	789b      	ldrb	r3, [r3, #2]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	f003 0207 	and.w	r2, r3, #7
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	440b      	add	r3, r1
 8001f08:	60bb      	str	r3, [r7, #8]
  int sc = int(tcIN[5] & 0x0F) + (int(tcIN[4] & 0x07)*10);
 8001f0a:	4b45      	ldr	r3, [pc, #276]	; (8002020 <_Z12initTimecodev+0x15c>)
 8001f0c:	795b      	ldrb	r3, [r3, #5]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f003 010f 	and.w	r1, r3, #15
 8001f14:	4b42      	ldr	r3, [pc, #264]	; (8002020 <_Z12initTimecodev+0x15c>)
 8001f16:	791b      	ldrb	r3, [r3, #4]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f003 0207 	and.w	r2, r3, #7
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	440b      	add	r3, r1
 8001f28:	607b      	str	r3, [r7, #4]
  int fr = int(tcIN[7] & 0x0F) + (int(tcIN[6] & 0x03)*10);
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <_Z12initTimecodev+0x15c>)
 8001f2c:	79db      	ldrb	r3, [r3, #7]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f003 010f 	and.w	r1, r3, #15
 8001f34:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <_Z12initTimecodev+0x15c>)
 8001f36:	799b      	ldrb	r3, [r3, #6]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f003 0203 	and.w	r2, r3, #3
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	440b      	add	r3, r1
 8001f48:	603b      	str	r3, [r7, #0]
  clockFrame = (hr * 60 * 60 * frameRateDivisor[frameRate]) + (mn * 60 * frameRateDivisor[frameRate]) + (sc * frameRateDivisor[frameRate]) + fr;
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <_Z12initTimecodev+0x160>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <_Z12initTimecodev+0x164>)
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	461a      	mov	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	fb03 f302 	mul.w	r3, r3, r2
 8001f5c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001f60:	fb02 f103 	mul.w	r1, r2, r3
 8001f64:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <_Z12initTimecodev+0x160>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <_Z12initTimecodev+0x164>)
 8001f6c:	5c9b      	ldrb	r3, [r3, r2]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	fb03 f202 	mul.w	r2, r3, r2
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	18ca      	adds	r2, r1, r3
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <_Z12initTimecodev+0x160>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <_Z12initTimecodev+0x164>)
 8001f88:	5c5b      	ldrb	r3, [r3, r1]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	fb03 f301 	mul.w	r3, r3, r1
 8001f92:	441a      	add	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b24      	ldr	r3, [pc, #144]	; (800202c <_Z12initTimecodev+0x168>)
 8001f9c:	601a      	str	r2, [r3, #0]
  //__HAL_TIM_SET_AUTORELOAD(outTIM,frameRateARR[frameRate]);
  if (intOffset > 30)
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <_Z12initTimecodev+0x16c>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b1e      	cmp	r3, #30
 8001fa4:	d909      	bls.n	8001fba <_Z12initTimecodev+0xf6>
  {
    clockFrame += (intOffset - 30);
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <_Z12initTimecodev+0x16c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <_Z12initTimecodev+0x168>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b1e      	subs	r3, #30
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <_Z12initTimecodev+0x168>)
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e00c      	b.n	8001fd4 <_Z12initTimecodev+0x110>
  }
  else if (intOffset < 30)
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <_Z12initTimecodev+0x16c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b1d      	cmp	r3, #29
 8001fc0:	d808      	bhi.n	8001fd4 <_Z12initTimecodev+0x110>
  {
    clockFrame -= (30-intOffset);
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <_Z12initTimecodev+0x16c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <_Z12initTimecodev+0x168>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b1e      	subs	r3, #30
 8001fd0:	4a16      	ldr	r2, [pc, #88]	; (800202c <_Z12initTimecodev+0x168>)
 8001fd2:	6013      	str	r3, [r2, #0]
  }
  countTIM->Instance->ARR = frameRateARR[frameRate];
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <_Z12initTimecodev+0x160>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <_Z12initTimecodev+0x170>)
 8001fdc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <_Z12initTimecodev+0x174>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  countTIM->Init.Period = frameRateARR[frameRate];
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <_Z12initTimecodev+0x160>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <_Z12initTimecodev+0x170>)
 8001ff0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <_Z12initTimecodev+0x174>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(countTIM);
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <_Z12initTimecodev+0x174>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f005 faee 	bl	80075e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(outTIM);
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <_Z12initTimecodev+0x178>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f005 fae9 	bl	80075e0 <HAL_TIM_Base_Start_IT>
  tcJammed = true;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <_Z12initTimecodev+0x17c>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000088 	.word	0x20000088
 8002024:	20000091 	.word	0x20000091
 8002028:	20000030 	.word	0x20000030
 800202c:	20000094 	.word	0x20000094
 8002030:	20000014 	.word	0x20000014
 8002034:	20000038 	.word	0x20000038
 8002038:	20000050 	.word	0x20000050
 800203c:	2000004c 	.word	0x2000004c
 8002040:	20000090 	.word	0x20000090

08002044 <_Z13resetTimecodev>:

/* Reset Timecode
* Simple function to reset all timers and variables back to
* pre-jam state
*/
bool resetTimecode(){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
    clockFrame = 0;
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <_Z13resetTimecodev+0x38>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(countTIM);
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <_Z13resetTimecodev+0x3c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f005 fb18 	bl	8007688 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(outTIM);
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <_Z13resetTimecodev+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f005 fb13 	bl	8007688 <HAL_TIM_Base_Stop_IT>
    //countTIM->Instance->ARR = frameRateARR[frameRate];
    //countTIM->Init.Period = frameRateARR[frameRate];
    //__HAL_TIM_SET_AUTORELOAD(&outTIM,frameRateARR[frameRate]);
    HAL_TIM_IC_Start_IT(inTIM, TIM_CHANNEL_3);
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <_Z13resetTimecodev+0x44>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2108      	movs	r1, #8
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fb93 	bl	8007794 <HAL_TIM_IC_Start_IT>
    tcJammed = false;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_Z13resetTimecodev+0x48>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
    //timer2 input yes
    //timer6 output no
}
 8002074:	bf00      	nop
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000094 	.word	0x20000094
 8002080:	20000050 	.word	0x20000050
 8002084:	2000004c 	.word	0x2000004c
 8002088:	20000048 	.word	0x20000048
 800208c:	20000090 	.word	0x20000090

08002090 <_Z9calibratev>:
* 
* For higher accuracy, the compensation runs at a factor of 10 times
* the frame rate divisor.
* IE 23.98 is 1001/24000, so it runs every 240,000 frames.
*/
void calibrate(){
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
  int32_t calibrationArray[6];
	calibrationArray[0] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8002096:	f240 431c 	movw	r3, #1052	; 0x41c
 800209a:	603b      	str	r3, [r7, #0]
	calibrationArray[1] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 800209c:	f240 431a 	movw	r3, #1050	; 0x41a
 80020a0:	607b      	str	r3, [r7, #4]
	calibrationArray[2] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 80020a2:	f240 431a 	movw	r3, #1050	; 0x41a
 80020a6:	60bb      	str	r3, [r7, #8]
	calibrationArray[3] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 80020a8:	f240 431c 	movw	r3, #1052	; 0x41c
 80020ac:	60fb      	str	r3, [r7, #12]
  calibrationArray[4] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 80020ae:	f240 431c 	movw	r3, #1052	; 0x41c
 80020b2:	613b      	str	r3, [r7, #16]
	calibrationArray[5] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 80020b4:	f240 431a 	movw	r3, #1050	; 0x41a
 80020b8:	617b      	str	r3, [r7, #20]
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <_Z10frameCheckv>:
*
*
*/

void frameCheck()
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  switch(frameRate)
 80020cc:	4b60      	ldr	r3, [pc, #384]	; (8002250 <_Z10frameCheckv+0x188>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	f200 80b8 	bhi.w	8002246 <_Z10frameCheckv+0x17e>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <_Z10frameCheckv+0x14>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020f5 	.word	0x080020f5
 80020e0:	08002113 	.word	0x08002113
 80020e4:	08002131 	.word	0x08002131
 80020e8:	0800214d 	.word	0x0800214d
 80020ec:	08002169 	.word	0x08002169
 80020f0:	08002215 	.word	0x08002215
  {
    case 0: //23.98
      if (clockFrame == 2073600)
 80020f4:	4b57      	ldr	r3, [pc, #348]	; (8002254 <_Z10frameCheckv+0x18c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a57      	ldr	r2, [pc, #348]	; (8002258 <_Z10frameCheckv+0x190>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8093 	beq.w	8002230 <_Z10frameCheckv+0x168>
        clockFrame = 0;
 800210a:	4b52      	ldr	r3, [pc, #328]	; (8002254 <_Z10frameCheckv+0x18c>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
      break;
 8002110:	e08e      	b.n	8002230 <_Z10frameCheckv+0x168>
    case 1: //24
      if (clockFrame == 2073600)
 8002112:	4b50      	ldr	r3, [pc, #320]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a50      	ldr	r2, [pc, #320]	; (8002258 <_Z10frameCheckv+0x190>)
 8002118:	4293      	cmp	r3, r2
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8086 	beq.w	8002234 <_Z10frameCheckv+0x16c>
        clockFrame = 0;
 8002128:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <_Z10frameCheckv+0x18c>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
      break;
 800212e:	e081      	b.n	8002234 <_Z10frameCheckv+0x16c>
    case 2: //25
      if (clockFrame == 2160000)
 8002130:	4b48      	ldr	r3, [pc, #288]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <_Z10frameCheckv+0x194>)
 8002136:	4293      	cmp	r3, r2
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d079      	beq.n	8002238 <_Z10frameCheckv+0x170>
        clockFrame = 0;
 8002144:	4b43      	ldr	r3, [pc, #268]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
      break;
 800214a:	e075      	b.n	8002238 <_Z10frameCheckv+0x170>
    case 3: //29.97
      if (clockFrame == 2592000)
 800214c:	4b41      	ldr	r3, [pc, #260]	; (8002254 <_Z10frameCheckv+0x18c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a43      	ldr	r2, [pc, #268]	; (8002260 <_Z10frameCheckv+0x198>)
 8002152:	4293      	cmp	r3, r2
 8002154:	bf0c      	ite	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	2300      	movne	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d06d      	beq.n	800223c <_Z10frameCheckv+0x174>
        clockFrame = 0;
 8002160:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
      break;
 8002166:	e069      	b.n	800223c <_Z10frameCheckv+0x174>
    case 4: //29.97 DF
      if (clockFrame == 2592000)
 8002168:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <_Z10frameCheckv+0x18c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3c      	ldr	r2, [pc, #240]	; (8002260 <_Z10frameCheckv+0x198>)
 800216e:	4293      	cmp	r3, r2
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <_Z10frameCheckv+0xba>
        clockFrame = 0;
 800217c:	4b35      	ldr	r3, [pc, #212]	; (8002254 <_Z10frameCheckv+0x18c>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
      if (clockFrame % 30 == 29 && (clockFrame / 30) % 60 == 59 && ((((clockFrame / 30) / 60) % 60)+1) % 10 != 0 )
 8002182:	4b34      	ldr	r3, [pc, #208]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <_Z10frameCheckv+0x19c>)
 8002188:	fba3 2301 	umull	r2, r3, r3, r1
 800218c:	091a      	lsrs	r2, r3, #4
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	1aca      	subs	r2, r1, r3
 8002198:	2a1d      	cmp	r2, #29
 800219a:	d12d      	bne.n	80021f8 <_Z10frameCheckv+0x130>
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <_Z10frameCheckv+0x18c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a30      	ldr	r2, [pc, #192]	; (8002264 <_Z10frameCheckv+0x19c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0919      	lsrs	r1, r3, #4
 80021a8:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <_Z10frameCheckv+0x19c>)
 80021aa:	fba3 2301 	umull	r2, r3, r3, r1
 80021ae:	095a      	lsrs	r2, r3, #5
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	1aca      	subs	r2, r1, r3
 80021ba:	2a3b      	cmp	r2, #59	; 0x3b
 80021bc:	d11c      	bne.n	80021f8 <_Z10frameCheckv+0x130>
 80021be:	4b25      	ldr	r3, [pc, #148]	; (8002254 <_Z10frameCheckv+0x18c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a29      	ldr	r2, [pc, #164]	; (8002268 <_Z10frameCheckv+0x1a0>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0a99      	lsrs	r1, r3, #10
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <_Z10frameCheckv+0x19c>)
 80021cc:	fba3 2301 	umull	r2, r3, r3, r1
 80021d0:	095a      	lsrs	r2, r3, #5
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	1aca      	subs	r2, r1, r3
 80021dc:	1c51      	adds	r1, r2, #1
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <_Z10frameCheckv+0x1a4>)
 80021e0:	fba3 2301 	umull	r2, r3, r3, r1
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	1aca      	subs	r2, r1, r3
 80021f0:	2a00      	cmp	r2, #0
 80021f2:	d001      	beq.n	80021f8 <_Z10frameCheckv+0x130>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <_Z10frameCheckv+0x132>
 80021f8:	2300      	movs	r3, #0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d020      	beq.n	8002240 <_Z10frameCheckv+0x178>
        {
          clockFrame++; 
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002206:	6013      	str	r3, [r2, #0]
          clockFrame++;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <_Z10frameCheckv+0x18c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	4a11      	ldr	r2, [pc, #68]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002210:	6013      	str	r3, [r2, #0]
        }
      break;
 8002212:	e015      	b.n	8002240 <_Z10frameCheckv+0x178>
    case 5: //30
      if (clockFrame == 2592000)
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <_Z10frameCheckv+0x18c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <_Z10frameCheckv+0x198>)
 800221a:	4293      	cmp	r3, r2
 800221c:	bf0c      	ite	eq
 800221e:	2301      	moveq	r3, #1
 8002220:	2300      	movne	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00d      	beq.n	8002244 <_Z10frameCheckv+0x17c>
        clockFrame = 0;
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <_Z10frameCheckv+0x18c>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
      break;
 800222e:	e009      	b.n	8002244 <_Z10frameCheckv+0x17c>
      break;
 8002230:	bf00      	nop
 8002232:	e008      	b.n	8002246 <_Z10frameCheckv+0x17e>
      break;
 8002234:	bf00      	nop
 8002236:	e006      	b.n	8002246 <_Z10frameCheckv+0x17e>
      break;
 8002238:	bf00      	nop
 800223a:	e004      	b.n	8002246 <_Z10frameCheckv+0x17e>
      break;
 800223c:	bf00      	nop
 800223e:	e002      	b.n	8002246 <_Z10frameCheckv+0x17e>
      break;
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <_Z10frameCheckv+0x17e>
      break;
 8002244:	bf00      	nop
  }
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	20000091 	.word	0x20000091
 8002254:	20000094 	.word	0x20000094
 8002258:	001fa400 	.word	0x001fa400
 800225c:	0020f580 	.word	0x0020f580
 8002260:	00278d00 	.word	0x00278d00
 8002264:	88888889 	.word	0x88888889
 8002268:	91a2b3c5 	.word	0x91a2b3c5
 800226c:	cccccccd 	.word	0xcccccccd

08002270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002276:	f001 fea6 	bl	8003fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800227a:	f000 fabd 	bl	80027f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800227e:	f000 fddf 	bl	8002e40 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8002282:	f000 fb57 	bl	8002934 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 8002286:	f000 fbc3 	bl	8002a10 <_ZL12MX_DAC1_Initv>
  MX_I2C1_Init();
 800228a:	f000 fbfd 	bl	8002a88 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 800228e:	f000 fc49 	bl	8002b24 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 8002292:	f000 fc99 	bl	8002bc8 <_ZL12MX_TIM2_Initv>
  MX_TIM6_Init();
 8002296:	f000 fcf9 	bl	8002c8c <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 800229a:	f000 fd37 	bl	8002d0c <_ZL12MX_TIM7_Initv>
  MX_TIM16_Init();
 800229e:	f000 fd75 	bl	8002d8c <_ZL13MX_TIM16_Initv>
  MX_USB_PCD_Init();
 80022a2:	f000 fd9f 	bl	8002de4 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */
  DAC1->DHR12R2 = 2048; //Set analog out for TXCO VCO
 80022a6:	4baf      	ldr	r3, [pc, #700]	; (8002564 <main+0x2f4>)
 80022a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ac:	615a      	str	r2, [r3, #20]
calibrate();
 80022ae:	f7ff feef 	bl	8002090 <_Z9calibratev>
  GPIOB -> ODR |= GPIO_PIN_12;  //LED
 80022b2:	4bad      	ldr	r3, [pc, #692]	; (8002568 <main+0x2f8>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4aac      	ldr	r2, [pc, #688]	; (8002568 <main+0x2f8>)
 80022b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022bc:	6153      	str	r3, [r2, #20]
  //HAL_Delay(1000);
  //GPIOB -> ODR |= GPIO_PIN_12;  //LED
 // HAL_Delay(1000);

  //GPIOA -> ODR |= GPIO_PIN_8; //Power enable
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80022be:	2108      	movs	r1, #8
 80022c0:	48aa      	ldr	r0, [pc, #680]	; (800256c <main+0x2fc>)
 80022c2:	f005 fa67 	bl	8007794 <HAL_TIM_IC_Start_IT>
  //HAL_TIM_Base_Start(&htim7);
  //HAL_TIM_Base_Start_IT(&htim16);
  //HAL_TIM_Base_Start_IT(&htim6);
    tcWrite[8] = 0b11111100;  //Sync pattern
 80022c6:	4baa      	ldr	r3, [pc, #680]	; (8002570 <main+0x300>)
 80022c8:	22fc      	movs	r2, #252	; 0xfc
 80022ca:	721a      	strb	r2, [r3, #8]
  tcWrite[9] = 0b10111111;  //Sync pattern
 80022cc:	4ba8      	ldr	r3, [pc, #672]	; (8002570 <main+0x300>)
 80022ce:	22bf      	movs	r2, #191	; 0xbf
 80022d0:	725a      	strb	r2, [r3, #9]


initDisplay();
 80022d2:	f7ff f9cb 	bl	800166c <_Z11initDisplayv>
 updateDisplay(0x1);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7fe fb6e 	bl	80009b8 <_Z13updateDisplayh>
    * Only update display every 4th cycle?
    * Run tests on optimal update range
    * Timecode output is top priority
    *
    */
updateDisplay(0x1);
 80022dc:	2001      	movs	r0, #1
 80022de:	f7fe fb6b 	bl	80009b8 <_Z13updateDisplayh>
frameCheck();
 80022e2:	f7ff fef1 	bl	80020c8 <_Z10frameCheckv>
	  stat1 = GPIOA -> IDR & GPIO_PIN_9;
 80022e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b9e      	ldr	r3, [pc, #632]	; (8002574 <main+0x304>)
 80022fc:	701a      	strb	r2, [r3, #0]
    stat2 = GPIOA -> IDR & GPIO_PIN_10;
 80022fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b99      	ldr	r3, [pc, #612]	; (8002578 <main+0x308>)
 8002314:	701a      	strb	r2, [r3, #0]
	    //PA4 STat2
	    //PA5 Stat1
    //if (clockFrame == 2073600) clockFrame = 0;
    clockFrameOutput = clockFrame + 1;
 8002316:	4b99      	ldr	r3, [pc, #612]	; (800257c <main+0x30c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	4a98      	ldr	r2, [pc, #608]	; (8002580 <main+0x310>)
 800231e:	6013      	str	r3, [r2, #0]
	    tcWrite[0] = ((clockFrameOutput % frameRateDivisor[frameRate]) % 10);
 8002320:	4b97      	ldr	r3, [pc, #604]	; (8002580 <main+0x310>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a97      	ldr	r2, [pc, #604]	; (8002584 <main+0x314>)
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	4611      	mov	r1, r2
 800232a:	4a97      	ldr	r2, [pc, #604]	; (8002588 <main+0x318>)
 800232c:	5c52      	ldrb	r2, [r2, r1]
 800232e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002332:	fb02 f201 	mul.w	r2, r2, r1
 8002336:	1a99      	subs	r1, r3, r2
 8002338:	4b94      	ldr	r3, [pc, #592]	; (800258c <main+0x31c>)
 800233a:	fba3 2301 	umull	r2, r3, r3, r1
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	1aca      	subs	r2, r1, r3
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	4b88      	ldr	r3, [pc, #544]	; (8002570 <main+0x300>)
 800234e:	701a      	strb	r2, [r3, #0]
	    tcWrite[0] |= (tcIN[7] & 0xF0);
 8002350:	4b8f      	ldr	r3, [pc, #572]	; (8002590 <main+0x320>)
 8002352:	79db      	ldrb	r3, [r3, #7]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800235a:	4b85      	ldr	r3, [pc, #532]	; (8002570 <main+0x300>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b25a      	sxtb	r2, r3
 8002360:	b24b      	sxtb	r3, r1
 8002362:	4313      	orrs	r3, r2
 8002364:	b25b      	sxtb	r3, r3
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b81      	ldr	r3, [pc, #516]	; (8002570 <main+0x300>)
 800236a:	701a      	strb	r2, [r3, #0]

	    tcWrite[1] = (clockFrameOutput % frameRateDivisor[frameRate]) / 10;
 800236c:	4b84      	ldr	r3, [pc, #528]	; (8002580 <main+0x310>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a84      	ldr	r2, [pc, #528]	; (8002584 <main+0x314>)
 8002372:	7812      	ldrb	r2, [r2, #0]
 8002374:	4611      	mov	r1, r2
 8002376:	4a84      	ldr	r2, [pc, #528]	; (8002588 <main+0x318>)
 8002378:	5c52      	ldrb	r2, [r2, r1]
 800237a:	fbb3 f1f2 	udiv	r1, r3, r2
 800237e:	fb02 f201 	mul.w	r2, r2, r1
 8002382:	1a9b      	subs	r3, r3, r2
 8002384:	4a81      	ldr	r2, [pc, #516]	; (800258c <main+0x31c>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	08db      	lsrs	r3, r3, #3
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <main+0x300>)
 8002390:	705a      	strb	r2, [r3, #1]
	    tcWrite[1] |= (tcIN[6] & 0xF0);
 8002392:	4b7f      	ldr	r3, [pc, #508]	; (8002590 <main+0x320>)
 8002394:	799b      	ldrb	r3, [r3, #6]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800239c:	4b74      	ldr	r3, [pc, #464]	; (8002570 <main+0x300>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	b25a      	sxtb	r2, r3
 80023a2:	b24b      	sxtb	r3, r1
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b71      	ldr	r3, [pc, #452]	; (8002570 <main+0x300>)
 80023ac:	705a      	strb	r2, [r3, #1]

	    tcWrite[2] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) % 10;
 80023ae:	4b74      	ldr	r3, [pc, #464]	; (8002580 <main+0x310>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a74      	ldr	r2, [pc, #464]	; (8002584 <main+0x314>)
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	4611      	mov	r1, r2
 80023b8:	4a73      	ldr	r2, [pc, #460]	; (8002588 <main+0x318>)
 80023ba:	5c52      	ldrb	r2, [r2, r1]
 80023bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80023c0:	4b74      	ldr	r3, [pc, #464]	; (8002594 <main+0x324>)
 80023c2:	fba3 2301 	umull	r2, r3, r3, r1
 80023c6:	095a      	lsrs	r2, r3, #5
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	1aca      	subs	r2, r1, r3
 80023d2:	4b6e      	ldr	r3, [pc, #440]	; (800258c <main+0x31c>)
 80023d4:	fba3 1302 	umull	r1, r3, r3, r2
 80023d8:	08d9      	lsrs	r1, r3, #3
 80023da:	460b      	mov	r3, r1
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	1ad1      	subs	r1, r2, r3
 80023e4:	b2ca      	uxtb	r2, r1
 80023e6:	4b62      	ldr	r3, [pc, #392]	; (8002570 <main+0x300>)
 80023e8:	709a      	strb	r2, [r3, #2]
	    tcWrite[2] |= (tcIN[5] & 0xF0);
 80023ea:	4b69      	ldr	r3, [pc, #420]	; (8002590 <main+0x320>)
 80023ec:	795b      	ldrb	r3, [r3, #5]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80023f4:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <main+0x300>)
 80023f6:	789b      	ldrb	r3, [r3, #2]
 80023f8:	b25a      	sxtb	r2, r3
 80023fa:	b24b      	sxtb	r3, r1
 80023fc:	4313      	orrs	r3, r2
 80023fe:	b25b      	sxtb	r3, r3
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <main+0x300>)
 8002404:	709a      	strb	r2, [r3, #2]

	    tcWrite[3] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) / 10;
 8002406:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <main+0x310>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a5e      	ldr	r2, [pc, #376]	; (8002584 <main+0x314>)
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	4611      	mov	r1, r2
 8002410:	4a5d      	ldr	r2, [pc, #372]	; (8002588 <main+0x318>)
 8002412:	5c52      	ldrb	r2, [r2, r1]
 8002414:	fbb3 f1f2 	udiv	r1, r3, r2
 8002418:	4b5e      	ldr	r3, [pc, #376]	; (8002594 <main+0x324>)
 800241a:	fba3 2301 	umull	r2, r3, r3, r1
 800241e:	095a      	lsrs	r2, r3, #5
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	1aca      	subs	r2, r1, r3
 800242a:	4b58      	ldr	r3, [pc, #352]	; (800258c <main+0x31c>)
 800242c:	fba3 2302 	umull	r2, r3, r3, r2
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b4e      	ldr	r3, [pc, #312]	; (8002570 <main+0x300>)
 8002436:	70da      	strb	r2, [r3, #3]
	    tcWrite[3] |= (tcIN[4] & 0xF0);
 8002438:	4b55      	ldr	r3, [pc, #340]	; (8002590 <main+0x320>)
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002442:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <main+0x300>)
 8002444:	78db      	ldrb	r3, [r3, #3]
 8002446:	b25a      	sxtb	r2, r3
 8002448:	b24b      	sxtb	r3, r1
 800244a:	4313      	orrs	r3, r2
 800244c:	b25b      	sxtb	r3, r3
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b47      	ldr	r3, [pc, #284]	; (8002570 <main+0x300>)
 8002452:	70da      	strb	r2, [r3, #3]

	    tcWrite[4] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) % 10;
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <main+0x310>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <main+0x314>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <main+0x318>)
 8002460:	5c5b      	ldrb	r3, [r3, r1]
 8002462:	4619      	mov	r1, r3
 8002464:	460b      	mov	r3, r1
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a5b      	subs	r3, r3, r1
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fbb2 f1f3 	udiv	r1, r2, r3
 8002470:	4b48      	ldr	r3, [pc, #288]	; (8002594 <main+0x324>)
 8002472:	fba3 2301 	umull	r2, r3, r3, r1
 8002476:	095a      	lsrs	r2, r3, #5
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	1aca      	subs	r2, r1, r3
 8002482:	4b42      	ldr	r3, [pc, #264]	; (800258c <main+0x31c>)
 8002484:	fba3 1302 	umull	r1, r3, r3, r2
 8002488:	08d9      	lsrs	r1, r3, #3
 800248a:	460b      	mov	r3, r1
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	1ad1      	subs	r1, r2, r3
 8002494:	b2ca      	uxtb	r2, r1
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <main+0x300>)
 8002498:	711a      	strb	r2, [r3, #4]
	    tcWrite[4] |= (tcIN[3] & 0xF0);
 800249a:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <main+0x320>)
 800249c:	78db      	ldrb	r3, [r3, #3]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80024a4:	4b32      	ldr	r3, [pc, #200]	; (8002570 <main+0x300>)
 80024a6:	791b      	ldrb	r3, [r3, #4]
 80024a8:	b25a      	sxtb	r2, r3
 80024aa:	b24b      	sxtb	r3, r1
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b25b      	sxtb	r3, r3
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <main+0x300>)
 80024b4:	711a      	strb	r2, [r3, #4]

	    tcWrite[5] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) / 10;
 80024b6:	4b32      	ldr	r3, [pc, #200]	; (8002580 <main+0x310>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b32      	ldr	r3, [pc, #200]	; (8002584 <main+0x314>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <main+0x318>)
 80024c2:	5c5b      	ldrb	r3, [r3, r1]
 80024c4:	4619      	mov	r1, r3
 80024c6:	460b      	mov	r3, r1
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a5b      	subs	r3, r3, r1
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	fbb2 f1f3 	udiv	r1, r2, r3
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <main+0x324>)
 80024d4:	fba3 2301 	umull	r2, r3, r3, r1
 80024d8:	095a      	lsrs	r2, r3, #5
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	1aca      	subs	r2, r1, r3
 80024e4:	4b29      	ldr	r3, [pc, #164]	; (800258c <main+0x31c>)
 80024e6:	fba3 2302 	umull	r2, r3, r3, r2
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <main+0x300>)
 80024f0:	715a      	strb	r2, [r3, #5]
	    tcWrite[5] |= (tcIN[2] & 0xF0);
 80024f2:	4b27      	ldr	r3, [pc, #156]	; (8002590 <main+0x320>)
 80024f4:	789b      	ldrb	r3, [r3, #2]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80024fc:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <main+0x300>)
 80024fe:	795b      	ldrb	r3, [r3, #5]
 8002500:	b25a      	sxtb	r2, r3
 8002502:	b24b      	sxtb	r3, r1
 8002504:	4313      	orrs	r3, r2
 8002506:	b25b      	sxtb	r3, r3
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <main+0x300>)
 800250c:	715a      	strb	r2, [r3, #5]

	    tcWrite[6] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) % 10;
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <main+0x310>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1c      	ldr	r2, [pc, #112]	; (8002584 <main+0x314>)
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	4611      	mov	r1, r2
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <main+0x318>)
 800251a:	5c52      	ldrb	r2, [r2, r1]
 800251c:	4611      	mov	r1, r2
 800251e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002522:	fb02 f201 	mul.w	r2, r2, r1
 8002526:	fbb3 f1f2 	udiv	r1, r3, r2
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <main+0x31c>)
 800252c:	fba3 2301 	umull	r2, r3, r3, r1
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	1aca      	subs	r2, r1, r3
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <main+0x300>)
 8002540:	719a      	strb	r2, [r3, #6]
	    tcWrite[6] |= (tcIN[1] & 0xF0);
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <main+0x320>)
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <main+0x300>)
 800254e:	799b      	ldrb	r3, [r3, #6]
 8002550:	b25a      	sxtb	r2, r3
 8002552:	b24b      	sxtb	r3, r1
 8002554:	4313      	orrs	r3, r2
 8002556:	b25b      	sxtb	r3, r3
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <main+0x300>)
 800255c:	719a      	strb	r2, [r3, #6]

	    tcWrite[7] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) / 10;
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <main+0x310>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e019      	b.n	8002598 <main+0x328>
 8002564:	40007400 	.word	0x40007400
 8002568:	48000400 	.word	0x48000400
 800256c:	200001e0 	.word	0x200001e0
 8002570:	20000618 	.word	0x20000618
 8002574:	200000a4 	.word	0x200000a4
 8002578:	200000a5 	.word	0x200000a5
 800257c:	20000094 	.word	0x20000094
 8002580:	20000604 	.word	0x20000604
 8002584:	20000091 	.word	0x20000091
 8002588:	20000030 	.word	0x20000030
 800258c:	cccccccd 	.word	0xcccccccd
 8002590:	20000088 	.word	0x20000088
 8002594:	88888889 	.word	0x88888889
 8002598:	4a86      	ldr	r2, [pc, #536]	; (80027b4 <main+0x544>)
 800259a:	7812      	ldrb	r2, [r2, #0]
 800259c:	4611      	mov	r1, r2
 800259e:	4a86      	ldr	r2, [pc, #536]	; (80027b8 <main+0x548>)
 80025a0:	5c52      	ldrb	r2, [r2, r1]
 80025a2:	4611      	mov	r1, r2
 80025a4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80025a8:	fb02 f201 	mul.w	r2, r2, r1
 80025ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80025b0:	4a82      	ldr	r2, [pc, #520]	; (80027bc <main+0x54c>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	08db      	lsrs	r3, r3, #3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b81      	ldr	r3, [pc, #516]	; (80027c0 <main+0x550>)
 80025bc:	71da      	strb	r2, [r3, #7]
	    tcWrite[7] |= (tcIN[0] & 0xF0);
 80025be:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <main+0x554>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80025c8:	4b7d      	ldr	r3, [pc, #500]	; (80027c0 <main+0x550>)
 80025ca:	79db      	ldrb	r3, [r3, #7]
 80025cc:	b25a      	sxtb	r2, r3
 80025ce:	b24b      	sxtb	r3, r1
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4b7a      	ldr	r3, [pc, #488]	; (80027c0 <main+0x550>)
 80025d8:	71da      	strb	r2, [r3, #7]

	    hr = (clockFrameOutput / frameRateDivisor[frameRate]) / 3600;
 80025da:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <main+0x558>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a75      	ldr	r2, [pc, #468]	; (80027b4 <main+0x544>)
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4a74      	ldr	r2, [pc, #464]	; (80027b8 <main+0x548>)
 80025e6:	5c52      	ldrb	r2, [r2, r1]
 80025e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ec:	4a77      	ldr	r2, [pc, #476]	; (80027cc <main+0x55c>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0adb      	lsrs	r3, r3, #11
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <main+0x560>)
 80025f8:	701a      	strb	r2, [r3, #0]
		mn = ((clockFrameOutput / frameRateDivisor[frameRate]) / 60 ) % 60;
 80025fa:	4b73      	ldr	r3, [pc, #460]	; (80027c8 <main+0x558>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6d      	ldr	r2, [pc, #436]	; (80027b4 <main+0x544>)
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	4611      	mov	r1, r2
 8002604:	4a6c      	ldr	r2, [pc, #432]	; (80027b8 <main+0x548>)
 8002606:	5c52      	ldrb	r2, [r2, r1]
 8002608:	fbb3 f3f2 	udiv	r3, r3, r2
 800260c:	4a71      	ldr	r2, [pc, #452]	; (80027d4 <main+0x564>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0959      	lsrs	r1, r3, #5
 8002614:	4b6f      	ldr	r3, [pc, #444]	; (80027d4 <main+0x564>)
 8002616:	fba3 2301 	umull	r2, r3, r3, r1
 800261a:	095a      	lsrs	r2, r3, #5
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	1aca      	subs	r2, r1, r3
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	4b6b      	ldr	r3, [pc, #428]	; (80027d8 <main+0x568>)
 800262a:	701a      	strb	r2, [r3, #0]
		sc = (clockFrameOutput / frameRateDivisor[frameRate]) % 60;
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <main+0x558>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <main+0x544>)
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	4611      	mov	r1, r2
 8002636:	4a60      	ldr	r2, [pc, #384]	; (80027b8 <main+0x548>)
 8002638:	5c52      	ldrb	r2, [r2, r1]
 800263a:	fbb3 f1f2 	udiv	r1, r3, r2
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <main+0x564>)
 8002640:	fba3 2301 	umull	r2, r3, r3, r1
 8002644:	095a      	lsrs	r2, r3, #5
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	1aca      	subs	r2, r1, r3
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	4b62      	ldr	r3, [pc, #392]	; (80027dc <main+0x56c>)
 8002654:	701a      	strb	r2, [r3, #0]
		fr = clockFrameOutput % frameRateDivisor[frameRate];
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <main+0x558>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a56      	ldr	r2, [pc, #344]	; (80027b4 <main+0x544>)
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	4611      	mov	r1, r2
 8002660:	4a55      	ldr	r2, [pc, #340]	; (80027b8 <main+0x548>)
 8002662:	5c52      	ldrb	r2, [r2, r1]
 8002664:	fbb3 f1f2 	udiv	r1, r3, r2
 8002668:	fb02 f201 	mul.w	r2, r2, r1
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <main+0x570>)
 8002672:	701a      	strb	r2, [r3, #0]


	    	    int oneBits = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
	    for (int i=0; i<10; i++){
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b09      	cmp	r3, #9
 8002680:	dc1b      	bgt.n	80026ba <main+0x44a>
	    	for (int b=0; b<8; b++){
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b07      	cmp	r3, #7
 800268a:	dc12      	bgt.n	80026b2 <main+0x442>
	    		if (bitRead(tcWrite[i],b) == 1){
 800268c:	4a4c      	ldr	r2, [pc, #304]	; (80027c0 <main+0x550>)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4413      	add	r3, r2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	fa42 f303 	asr.w	r3, r2, r3
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <main+0x43a>
	    			oneBits++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3301      	adds	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
	    	for (int b=0; b<8; b++){
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3301      	adds	r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	e7e9      	b.n	8002686 <main+0x416>
	    for (int i=0; i<10; i++){
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3301      	adds	r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	e7e0      	b.n	800267c <main+0x40c>
	    		}
	    	}
	    }
	    if (oneBits % 2 > 0){
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	bfb8      	it	lt
 80026c4:	425b      	neglt	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	dd07      	ble.n	80026da <main+0x46a>
	    	((tcWrite[7]) |= (1UL << (3)));
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <main+0x550>)
 80026cc:	79db      	ldrb	r3, [r3, #7]
 80026ce:	f043 0308 	orr.w	r3, r3, #8
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <main+0x550>)
 80026d6:	71da      	strb	r2, [r3, #7]
 80026d8:	e006      	b.n	80026e8 <main+0x478>
	    } else {
	    	((tcWrite[7]) &= ~(1UL << (3)));
 80026da:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <main+0x550>)
 80026dc:	79db      	ldrb	r3, [r3, #7]
 80026de:	f023 0308 	bic.w	r3, r3, #8
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <main+0x550>)
 80026e6:	71da      	strb	r2, [r3, #7]

	  setDigit(0,7,(clockFrame % frRDv[frameRate]) / 10,false);
	  setDigit(0,0,((clockFrame % frRDv[frameRate]) % 10),false);
	    }*/

	  if (clockFrame % frameRateDivisor[frameRate] == 0){
 80026e8:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <main+0x574>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <main+0x544>)
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4a31      	ldr	r2, [pc, #196]	; (80027b8 <main+0x548>)
 80026f4:	5c52      	ldrb	r2, [r2, r1]
 80026f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80026fa:	fb02 f201 	mul.w	r2, r2, r1
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <main+0x4ac>
		  (GPIOB->ODR) |= (1UL << (12));
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <main+0x578>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4a35      	ldr	r2, [pc, #212]	; (80027e8 <main+0x578>)
 8002714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002718:	6153      	str	r3, [r2, #20]
 800271a:	e005      	b.n	8002728 <main+0x4b8>
	  } else {
			  (GPIOB->ODR) &= ~(1UL << (12));
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <main+0x578>)
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <main+0x578>)
 8002722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002726:	6153      	str	r3, [r2, #20]
	  }

//button handlers
if(GPIOC -> IDR & GPIO_PIN_13){	//Menu button
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <main+0x57c>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	f43f adce 	beq.w	80022dc <main+0x6c>
	    	uint32_t menuCount = HAL_GetTick();
 8002740:	f001 fcaa 	bl	8004098 <HAL_GetTick>
 8002744:	6038      	str	r0, [r7, #0]
	    	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
	    	//if (!lock){
	    	while (GPIOC -> IDR & GPIO_PIN_13){
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <main+0x57c>)
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	f43f adbf 	beq.w	80022dc <main+0x6c>
	    		if (HAL_GetTick() - menuCount > 500){
 800275e:	f001 fc9b 	bl	8004098 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800276c:	bf8c      	ite	hi
 800276e:	2301      	movhi	r3, #1
 8002770:	2300      	movls	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d019      	beq.n	80027ac <main+0x53c>
	    			menuItem = 0;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <main+0x580>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
	    			//inMenu = true;
	    			menuItemSelect = false;
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <main+0x584>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
					//menuEnter = true;
					updateDisplay(d_menu);
 8002784:	2002      	movs	r0, #2
 8002786:	f7fe f917 	bl	80009b8 <_Z13updateDisplayh>
	    			menuLoop();
 800278a:	f7fe ff85 	bl	8001698 <_Z8menuLoopv>
            while (GPIOC -> IDR & GPIO_PIN_13)
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <main+0x57c>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <main+0x53c>
              {updateDisplay(0x1);}//add in TC process?}
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7fe f907 	bl	80009b8 <_Z13updateDisplayh>
            while (GPIOC -> IDR & GPIO_PIN_13)
 80027aa:	e7f0      	b.n	800278e <main+0x51e>
					//menuEnter = false;

	    		}

	    			updateDisplay(0x01);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7fe f903 	bl	80009b8 <_Z13updateDisplayh>
	    	while (GPIOC -> IDR & GPIO_PIN_13){
 80027b2:	e7c8      	b.n	8002746 <main+0x4d6>
 80027b4:	20000091 	.word	0x20000091
 80027b8:	20000030 	.word	0x20000030
 80027bc:	cccccccd 	.word	0xcccccccd
 80027c0:	20000618 	.word	0x20000618
 80027c4:	20000088 	.word	0x20000088
 80027c8:	20000604 	.word	0x20000604
 80027cc:	91a2b3c5 	.word	0x91a2b3c5
 80027d0:	200000a0 	.word	0x200000a0
 80027d4:	88888889 	.word	0x88888889
 80027d8:	200000a1 	.word	0x200000a1
 80027dc:	200000a2 	.word	0x200000a2
 80027e0:	200000a3 	.word	0x200000a3
 80027e4:	20000094 	.word	0x20000094
 80027e8:	48000400 	.word	0x48000400
 80027ec:	48000800 	.word	0x48000800
 80027f0:	200000cb 	.word	0x200000cb
 80027f4:	200000ca 	.word	0x200000ca

080027f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0ae      	sub	sp, #184	; 0xb8
 80027fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002802:	2244      	movs	r2, #68	; 0x44
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f005 fd6a 	bl	80082e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800280c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800281c:	463b      	mov	r3, r7
 800281e:	2260      	movs	r2, #96	; 0x60
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f005 fd5c 	bl	80082e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002828:	2301      	movs	r3, #1
 800282a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800282c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002830:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002838:	2303      	movs	r3, #3
 800283a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 2;
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002844:	230a      	movs	r3, #10
 8002846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800284a:	2307      	movs	r3, #7
 800284c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002856:	2304      	movs	r3, #4
 8002858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002860:	4618      	mov	r0, r3
 8002862:	f003 fd0b 	bl	800627c <HAL_RCC_OscConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002876:	f000 fe5b 	bl	8003530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800287a:	230f      	movs	r3, #15
 800287c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800287e:	2303      	movs	r3, #3
 8002880:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002882:	2300      	movs	r3, #0
 8002884:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800288a:	2300      	movs	r3, #0
 800288c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800288e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002892:	2101      	movs	r1, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f004 f911 	bl	8006abc <HAL_RCC_ClockConfig>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80028aa:	f000 fe41 	bl	8003530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80028ae:	f246 03c0 	movw	r3, #24768	; 0x60c0
 80028b2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028b8:	2300      	movs	r3, #0
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028c0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80028c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80028c8:	2303      	movs	r3, #3
 80028ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80028cc:	2302      	movs	r3, #2
 80028ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 80028d0:	230a      	movs	r3, #10
 80028d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80028d4:	2307      	movs	r3, #7
 80028d6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028d8:	2302      	movs	r3, #2
 80028da:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80028dc:	2302      	movs	r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80028e0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80028e4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e6:	463b      	mov	r3, r7
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 fae9 	bl	8006ec0 <HAL_RCCEx_PeriphCLKConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80028fe:	f000 fe17 	bl	8003530 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8002902:	2200      	movs	r2, #0
 8002904:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002908:	2000      	movs	r0, #0
 800290a:	f004 f9b9 	bl	8006c80 <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800290e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002912:	f003 fc5d 	bl	80061d0 <HAL_PWREx_ControlVoltageScaling>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <SystemClock_Config+0x132>
  {
    Error_Handler();
 8002926:	f000 fe03 	bl	8003530 <Error_Handler>
  }
}
 800292a:	bf00      	nop
 800292c:	37b8      	adds	r7, #184	; 0xb8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800293a:	463b      	mov	r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
 8002948:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 800294c:	4a2e      	ldr	r2, [pc, #184]	; (8002a08 <_ZL12MX_ADC1_Initv+0xd4>)
 800294e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 8002952:	2200      	movs	r2, #0
 8002954:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800295c:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002968:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 800296a:	2204      	movs	r2, #4
 800296c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 8002970:	2200      	movs	r2, #0
 8002972:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 8002976:	2200      	movs	r2, #0
 8002978:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 800297c:	2201      	movs	r2, #1
 800297e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 800298a:	2200      	movs	r2, #0
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 8002990:	2200      	movs	r2, #0
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029aa:	4816      	ldr	r0, [pc, #88]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 80029ac:	f001 fd30 	bl	8004410 <HAL_ADC_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 80029c0:	f000 fdb6 	bl	8003530 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <_ZL12MX_ADC1_Initv+0xd8>)
 80029c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029c8:	2306      	movs	r3, #6
 80029ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029d0:	237f      	movs	r3, #127	; 0x7f
 80029d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029d4:	2304      	movs	r3, #4
 80029d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029dc:	463b      	mov	r3, r7
 80029de:	4619      	mov	r1, r3
 80029e0:	4808      	ldr	r0, [pc, #32]	; (8002a04 <_ZL12MX_ADC1_Initv+0xd0>)
 80029e2:	f001 fe5b 	bl	800469c <HAL_ADC_ConfigChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 80029f6:	f000 fd9b 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200000d0 	.word	0x200000d0
 8002a08:	50040000 	.word	0x50040000
 8002a0c:	21800100 	.word	0x21800100

08002a10 <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	2224      	movs	r2, #36	; 0x24
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f005 fc5f 	bl	80082e0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <_ZL12MX_DAC1_Initv+0x70>)
 8002a24:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <_ZL12MX_DAC1_Initv+0x74>)
 8002a26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a28:	4815      	ldr	r0, [pc, #84]	; (8002a80 <_ZL12MX_DAC1_Initv+0x70>)
 8002a2a:	f002 fb26 	bl	800507a <HAL_DAC_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 8002a3e:	f000 fd77 	bl	8003530 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2210      	movs	r2, #16
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4808      	ldr	r0, [pc, #32]	; (8002a80 <_ZL12MX_DAC1_Initv+0x70>)
 8002a5e:	f002 fb92 	bl	8005186 <HAL_DAC_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 8002a72:	f000 fd5d 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000134 	.word	0x20000134
 8002a84:	40007400 	.word	0x40007400

08002a88 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002a8e:	4a23      	ldr	r2, [pc, #140]	; (8002b1c <_ZL12MX_I2C1_Initv+0x94>)
 8002a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002a94:	4a22      	ldr	r2, [pc, #136]	; (8002b20 <_ZL12MX_I2C1_Initv+0x98>)
 8002a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a98:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac2:	4815      	ldr	r0, [pc, #84]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002ac4:	f002 fe16 	bl	80056f4 <HAL_I2C_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8002ad8:	f000 fd2a 	bl	8003530 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002adc:	2100      	movs	r1, #0
 8002ade:	480e      	ldr	r0, [pc, #56]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002ae0:	f003 f974 	bl	8005dcc <HAL_I2CEx_ConfigAnalogFilter>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8002af4:	f000 fd1c 	bl	8003530 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002af8:	2100      	movs	r1, #0
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <_ZL12MX_I2C1_Initv+0x90>)
 8002afc:	f003 f9b1 	bl	8005e62 <HAL_I2CEx_ConfigDigitalFilter>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8002b10:	f000 fd0e 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000148 	.word	0x20000148
 8002b1c:	40005400 	.word	0x40005400
 8002b20:	00506682 	.word	0x00506682

08002b24 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b2a:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <_ZL12MX_I2C2_Initv+0x9c>)
 8002b2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010030D;
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b30:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <_ZL12MX_I2C2_Initv+0xa0>)
 8002b32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b4c:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b58:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b5e:	4817      	ldr	r0, [pc, #92]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b60:	f002 fdc8 	bl	80056f4 <HAL_I2C_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8002b74:	f000 fcdc 	bl	8003530 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4810      	ldr	r0, [pc, #64]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b7c:	f003 f926 	bl	8005dcc <HAL_I2CEx_ConfigAnalogFilter>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8002b90:	f000 fcce 	bl	8003530 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002b94:	2100      	movs	r1, #0
 8002b96:	4809      	ldr	r0, [pc, #36]	; (8002bbc <_ZL12MX_I2C2_Initv+0x98>)
 8002b98:	f003 f963 	bl	8005e62 <HAL_I2CEx_ConfigDigitalFilter>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8002bac:	f000 fcc0 	bl	8003530 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8002bb0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bb4:	f003 f9a2 	bl	8005efc <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000194 	.word	0x20000194
 8002bc0:	40005800 	.word	0x40005800
 8002bc4:	0010030d 	.word	0x0010030d

08002bc8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bce:	f107 0314 	add.w	r3, r7, #20
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24-1;
 8002bee:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002bf0:	2217      	movs	r2, #23
 8002bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002bfa:	4b23      	ldr	r3, [pc, #140]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c08:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002c0e:	481e      	ldr	r0, [pc, #120]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002c10:	f004 fd69 	bl	80076e6 <HAL_TIM_IC_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf14      	ite	ne
 8002c1a:	2301      	movne	r3, #1
 8002c1c:	2300      	moveq	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002c24:	f000 fc84 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	4814      	ldr	r0, [pc, #80]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002c38:	f005 fa3a 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8002c4c:	f000 fc70 	bl	8003530 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002c50:	230a      	movs	r3, #10
 8002c52:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c54:	2301      	movs	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2208      	movs	r2, #8
 8002c64:	4619      	mov	r1, r3
 8002c66:	4808      	ldr	r0, [pc, #32]	; (8002c88 <_ZL12MX_TIM2_Initv+0xc0>)
 8002c68:	f004 ffd9 	bl	8007c1e <HAL_TIM_IC_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 8002c7c:	f000 fc58 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c80:	bf00      	nop
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200001e0 	.word	0x200001e0

08002c8c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <_ZL12MX_TIM6_Initv+0x78>)
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <_ZL12MX_TIM6_Initv+0x7c>)
 8002ca0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <_ZL12MX_TIM6_Initv+0x78>)
 8002ca4:	2217      	movs	r2, #23
 8002ca6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <_ZL12MX_TIM6_Initv+0x78>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <_ZL12MX_TIM6_Initv+0x78>)
 8002cb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <_ZL12MX_TIM6_Initv+0x78>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cbc:	4811      	ldr	r0, [pc, #68]	; (8002d04 <_ZL12MX_TIM6_Initv+0x78>)
 8002cbe:	f004 fc37 	bl	8007530 <HAL_TIM_Base_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8002cd2:	f000 fc2d 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4808      	ldr	r0, [pc, #32]	; (8002d04 <_ZL12MX_TIM6_Initv+0x78>)
 8002ce4:	f005 f9e4 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8002cf8:	f000 fc1a 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	2000022c 	.word	0x2000022c
 8002d08:	40001000 	.word	0x40001000

08002d0c <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <_ZL12MX_TIM7_Initv+0x78>)
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <_ZL12MX_TIM7_Initv+0x7c>)
 8002d20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <_ZL12MX_TIM7_Initv+0x78>)
 8002d24:	2213      	movs	r2, #19
 8002d26:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <_ZL12MX_TIM7_Initv+0x78>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50049;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <_ZL12MX_TIM7_Initv+0x78>)
 8002d30:	f24c 3281 	movw	r2, #50049	; 0xc381
 8002d34:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <_ZL12MX_TIM7_Initv+0x78>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d3c:	4811      	ldr	r0, [pc, #68]	; (8002d84 <_ZL12MX_TIM7_Initv+0x78>)
 8002d3e:	f004 fbf7 	bl	8007530 <HAL_TIM_Base_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 8002d52:	f000 fbed 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4808      	ldr	r0, [pc, #32]	; (8002d84 <_ZL12MX_TIM7_Initv+0x78>)
 8002d64:	f005 f9a4 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8002d78:	f000 fbda 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000278 	.word	0x20000278
 8002d88:	40001400 	.word	0x40001400

08002d8c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <_ZL13MX_TIM16_Initv+0x50>)
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <_ZL13MX_TIM16_Initv+0x54>)
 8002d94:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <_ZL13MX_TIM16_Initv+0x50>)
 8002d98:	2203      	movs	r2, #3
 8002d9a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <_ZL13MX_TIM16_Initv+0x50>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3128-1;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <_ZL13MX_TIM16_Initv+0x50>)
 8002da4:	f640 4237 	movw	r2, #3127	; 0xc37
 8002da8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <_ZL13MX_TIM16_Initv+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002db0:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <_ZL13MX_TIM16_Initv+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <_ZL13MX_TIM16_Initv+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002dbc:	4807      	ldr	r0, [pc, #28]	; (8002ddc <_ZL13MX_TIM16_Initv+0x50>)
 8002dbe:	f004 fbb7 	bl	8007530 <HAL_TIM_Base_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf14      	ite	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	2300      	moveq	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8002dd2:	f000 fbad 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200002c4 	.word	0x200002c4
 8002de0:	40014400 	.word	0x40014400

08002de4 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <_ZL15MX_USB_PCD_Initv+0x58>)
 8002dec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002df0:	2208      	movs	r2, #8
 8002df2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002df6:	2202      	movs	r2, #2
 8002df8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002e00:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002e18:	4807      	ldr	r0, [pc, #28]	; (8002e38 <_ZL15MX_USB_PCD_Initv+0x54>)
 8002e1a:	f003 f88f 	bl	8005f3c <HAL_PCD_Init>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8002e2e:	f000 fb7f 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000310 	.word	0x20000310
 8002e3c:	40006800 	.word	0x40006800

08002e40 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e62:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e72:	4a3a      	ldr	r2, [pc, #232]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e7a:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e92:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <_ZL12MX_GPIO_Initv+0x11c>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f241 0102 	movw	r1, #4098	; 0x1002
 8002ebc:	4828      	ldr	r0, [pc, #160]	; (8002f60 <_ZL12MX_GPIO_Initv+0x120>)
 8002ebe:	f002 fc01 	bl	80056c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4823      	ldr	r0, [pc, #140]	; (8002f64 <_ZL12MX_GPIO_Initv+0x124>)
 8002ed8:	f002 fa7a 	bl	80053d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = TC_OUT_Pin|LED_STATUS_Pin;
 8002edc:	f241 0302 	movw	r3, #4098	; 0x1002
 8002ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	481a      	ldr	r0, [pc, #104]	; (8002f60 <_ZL12MX_GPIO_Initv+0x120>)
 8002ef6:	f002 fa6b 	bl	80053d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC_Pin */
  GPIO_InitStruct.Pin = OSC_Pin;
 8002efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OSC_GPIO_Port, &GPIO_InitStruct);
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4619      	mov	r1, r3
 8002f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1a:	f002 fa59 	bl	80053d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin;
 8002f1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4619      	mov	r1, r3
 8002f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f36:	f002 fa4b 	bl	80053d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_B_Pin;
 8002f3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4804      	ldr	r0, [pc, #16]	; (8002f60 <_ZL12MX_GPIO_Initv+0x120>)
 8002f50:	f002 fa3e 	bl	80053d0 <HAL_GPIO_Init>

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	48000400 	.word	0x48000400
 8002f64:	48000800 	.word	0x48000800

08002f68 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    //if ( GPIO_Pin == GPIO_PIN_8)
	if (htim->Instance == TIM2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f78:	f040 80f4 	bne.w	8003164 <HAL_TIM_IC_CaptureCallback+0x1fc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f7c:	b672      	cpsid	i
}
 8002f7e:	bf00      	nop
		__disable_irq();
/* 
    Credit for this loop to read out the timecode:
    https://forum.arduino.cc/t/smpte-jam-sync/529740/4
*/
    	edgeTimeDiff = __HAL_TIM_GetCounter(htim);          // Get time difference between this and last edge
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	4a7a      	ldr	r2, [pc, #488]	; (8003170 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002f88:	6013      	str	r3, [r2, #0]

    	__HAL_TIM_SetCounter(htim,0);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24
    	                                    // Store time of this edge



    	  if ((edgeTimeDiff < uMin1) or (edgeTimeDiff > uMax0)) { // Drop out now if edge time not withing bounds
 8002f92:	4b77      	ldr	r3, [pc, #476]	; (8003170 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b81      	cmp	r3, #129	; 0x81
 8002f98:	d904      	bls.n	8002fa4 <HAL_TIM_IC_CaptureCallback+0x3c>
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
 8002fa2:	d301      	bcc.n	8002fa8 <HAL_TIM_IC_CaptureCallback+0x40>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_TIM_IC_CaptureCallback+0x42>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_TIM_IC_CaptureCallback+0x62>
    	    bitSet(tcFlags, tcFrameError);
 8002fae:	4b71      	ldr	r3, [pc, #452]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b6e      	ldr	r3, [pc, #440]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002fbc:	701a      	strb	r2, [r3, #0]
    	    jamCount = 0;
 8002fbe:	4b6e      	ldr	r3, [pc, #440]	; (8003178 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fc4:	b662      	cpsie	i
}
 8002fc6:	bf00      	nop
    	    __enable_irq();
    	    //Offset++;
    	    return;
 8002fc8:	e0ce      	b.n	8003168 <HAL_TIM_IC_CaptureCallback+0x200>
    	  }

    	  if (edgeTimeDiff > uMax1)                               // A zero bit arrived
 8002fca:	4b69      	ldr	r3, [pc, #420]	; (8003170 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002fd2:	bf8c      	ite	hi
 8002fd4:	2301      	movhi	r3, #1
 8002fd6:	2300      	movls	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d020      	beq.n	8003020 <HAL_TIM_IC_CaptureCallback+0xb8>
    	  {
    	    if (bitRead(tcFlags, tcHalfOne) == 1){                // But we are expecting a 1 edge
 8002fde:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	111b      	asrs	r3, r3, #4
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00e      	beq.n	8003016 <HAL_TIM_IC_CaptureCallback+0xae>
    	      bitClear(tcFlags, tcHalfOne);
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f023 0310 	bic.w	r3, r3, #16
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003006:	701a      	strb	r2, [r3, #0]
    	      clearBuffer(tc, sizeof(tc)); //TODO WHAT DOES?
 8003008:	210a      	movs	r1, #10
 800300a:	485c      	ldr	r0, [pc, #368]	; (800317c <HAL_TIM_IC_CaptureCallback+0x214>)
 800300c:	f000 f8be 	bl	800318c <_Z11clearBufferPhh>
  __ASM volatile ("cpsie i" : : : "memory");
 8003010:	b662      	cpsie	i
}
 8003012:	bf00      	nop
    	      __enable_irq();
    	      return;
 8003014:	e0a8      	b.n	8003168 <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // 0 bit
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 8003016:	210a      	movs	r1, #10
 8003018:	4858      	ldr	r0, [pc, #352]	; (800317c <HAL_TIM_IC_CaptureCallback+0x214>)
 800301a:	f000 f8d3 	bl	80031c4 <_Z10shiftRightPhh>
 800301e:	e029      	b.n	8003074 <HAL_TIM_IC_CaptureCallback+0x10c>
    	    // Shift replaces top bit with zero so nothing else to do
    	    //bitClear(tc[0], 7);                                   // Reset the 1 bit in the buffer
    	  }
    	  else                                                    // Not zero so must be a 1 bit
    	  { // 1 bit
    	    if (bitRead(tcFlags, tcHalfOne) == 0){                // First edge of a 1 bit
 8003020:	4b54      	ldr	r3, [pc, #336]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_TIM_IC_CaptureCallback+0xe6>
    	      bitSet(tcFlags, tcHalfOne);                         // Flag we have the first half
 8003038:	4b4e      	ldr	r3, [pc, #312]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f043 0310 	orr.w	r3, r3, #16
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003046:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003048:	b662      	cpsie	i
}
 800304a:	bf00      	nop
    	      __enable_irq();
    	      return;
 800304c:	e08c      	b.n	8003168 <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // Second edge of a 1 bit
    	    bitClear(tcFlags, tcHalfOne);                         // Clear half 1 flag
 800304e:	4b49      	ldr	r3, [pc, #292]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f023 0310 	bic.w	r3, r3, #16
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800305c:	701a      	strb	r2, [r3, #0]
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 800305e:	210a      	movs	r1, #10
 8003060:	4846      	ldr	r0, [pc, #280]	; (800317c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003062:	f000 f8af 	bl	80031c4 <_Z10shiftRightPhh>
    	    bitSet(tc[0], 7);                                     // Set the 1 bit in the buffer
 8003066:	4b45      	ldr	r3, [pc, #276]	; (800317c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800306e:	b2da      	uxtb	r2, r3
 8003070:	4b42      	ldr	r3, [pc, #264]	; (800317c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003072:	701a      	strb	r2, [r3, #0]
    	  }
    	  // Congratulations, we have managed to read a valid 0 or 1 bit into buffer
    	  if (uint16_t( (tc[0] << 8) | (tc[1] & 0xff) ) == sync){                        // Last 2 bytes read = sync?
 8003074:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	b21a      	sxth	r2, r3
 800307c:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_TIM_IC_CaptureCallback+0x214>)
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	b21b      	sxth	r3, r3
 8003082:	4313      	orrs	r3, r2
 8003084:	b21b      	sxth	r3, r3
 8003086:	4a3e      	ldr	r2, [pc, #248]	; (8003180 <HAL_TIM_IC_CaptureCallback+0x218>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d16b      	bne.n	8003164 <HAL_TIM_IC_CaptureCallback+0x1fc>
    	    bitClear(tcFlags, tcFrameError);                      // Clear framing error
 800308c:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f023 0302 	bic.w	r3, r3, #2
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800309a:	701a      	strb	r2, [r3, #0]
    	    bitClear(tcFlags, tcOverrun);                         // Clear overrun error
 800309c:	4b35      	ldr	r3, [pc, #212]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f023 0304 	bic.w	r3, r3, #4
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80030aa:	701a      	strb	r2, [r3, #0]
    	    if (bitRead(tcFlags, tcForceUpdate) == 1){
 80030ac:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	10db      	asrs	r3, r3, #3
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_TIM_IC_CaptureCallback+0x16e>
    	      bitClear(tcFlags, tcValid);                         // Signal last TC read
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80030d4:	701a      	strb	r2, [r3, #0]
    	    }
    	    if (bitRead(tcFlags, tcValid) == 1){                  // Last TC not read
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_TIM_IC_CaptureCallback+0x196>
    	      bitSet(tcFlags, tcOverrun);                         // Flag overrun error
 80030ee:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80030fc:	701a      	strb	r2, [r3, #0]
    	     // __enable_irq();
    	     // return;                                             // Do nothing else
    	    }
    	    //if (jamEnable){
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b07      	cmp	r3, #7
 8003106:	d80a      	bhi.n	800311e <HAL_TIM_IC_CaptureCallback+0x1b6>
    	    		tcIN[x] = tc[x + 2];
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	1c9a      	adds	r2, r3, #2
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	491b      	ldr	r1, [pc, #108]	; (800317c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003110:	5c89      	ldrb	r1, [r1, r2]
 8003112:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003114:	54d1      	strb	r1, [r2, r3]
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	3301      	adds	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e7f1      	b.n	8003102 <HAL_TIM_IC_CaptureCallback+0x19a>
    	    	}
    	    //}
    	    bitSet(tcFlags, tcValid);                             // Signal valid TC
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800312c:	701a      	strb	r2, [r3, #0]
    	    jamCount++;
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_TIM_IC_CaptureCallback+0x210>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3301      	adds	r3, #1
 8003136:	b2da      	uxtb	r2, r3
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_TIM_IC_CaptureCallback+0x210>)
 800313a:	701a      	strb	r2, [r3, #0]
    	    if (jamCount > 23){
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_TIM_IC_CaptureCallback+0x210>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b17      	cmp	r3, #23
 8003144:	bf8c      	ite	hi
 8003146:	2301      	movhi	r3, #1
 8003148:	2300      	movls	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_TIM_IC_CaptureCallback+0x1f8>
    	    	//jamEnable = false;
    	    	jamCount = 0;
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_TIM_IC_CaptureCallback+0x210>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
    	    	tcJammed = true;
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_TIM_IC_CaptureCallback+0x220>)
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
initTimecode();
 800315c:	f7fe feb2 	bl	8001ec4 <_Z12initTimecodev>
  __ASM volatile ("cpsie i" : : : "memory");
 8003160:	b662      	cpsie	i
}
 8003162:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003164:	b662      	cpsie	i
}
 8003166:	bf00      	nop
    	    //}
    	  }

    }
	__enable_irq();
}
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000614 	.word	0x20000614
 8003174:	20000613 	.word	0x20000613
 8003178:	20000612 	.word	0x20000612
 800317c:	20000608 	.word	0x20000608
 8003180:	ffffbffc 	.word	0xffffbffc
 8003184:	20000088 	.word	0x20000088
 8003188:	20000090 	.word	0x20000090

0800318c <_Z11clearBufferPhh>:

void clearBuffer(uint8_t theArray[], uint8_t theArraySize){
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8003198:	2300      	movs	r3, #0
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	429a      	cmp	r2, r3
 80031a4:	da08      	bge.n	80031b8 <_Z11clearBufferPhh+0x2c>
    theArray[x] = 0;
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	3301      	adds	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e7f1      	b.n	800319c <_Z11clearBufferPhh+0x10>
  }
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_Z10shiftRightPhh>:

void shiftRight(uint8_t theArray[], uint8_t theArraySize){
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  uint8_t x;
  for (x = theArraySize; x > 0; x--){
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d024      	beq.n	8003224 <_Z10shiftRightPhh+0x60>
    uint8_t xBit = bitRead(theArray[x - 1], 0);
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	3b01      	subs	r3, #1
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	73bb      	strb	r3, [r7, #14]
    theArray[x] = theArray[x] >> 1;
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	1059      	asrs	r1, r3, #1
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	b2ca      	uxtb	r2, r1
 80031fc:	701a      	strb	r2, [r3, #0]
    theArray[x] = theArray[x] | (xBit << 7);
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b25a      	sxtb	r2, r3
 8003208:	7bbb      	ldrb	r3, [r7, #14]
 800320a:	01db      	lsls	r3, r3, #7
 800320c:	b25b      	sxtb	r3, r3
 800320e:	4313      	orrs	r3, r2
 8003210:	b259      	sxtb	r1, r3
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	b2ca      	uxtb	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
  for (x = theArraySize; x > 0; x--){
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	3b01      	subs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
 8003222:	e7d7      	b.n	80031d4 <_Z10shiftRightPhh+0x10>
  }
  theArray[x] = theArray[x] >> 1;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	1059      	asrs	r1, r3, #1
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	b2ca      	uxtb	r2, r1
 8003236:	701a      	strb	r2, [r3, #0]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
			  }
		  }
		ledCount++;
	}*/
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4aa0      	ldr	r2, [pc, #640]	; (80034d0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	f040 80bf 	bne.w	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
  {
	  switch (writeState){
 8003256:	4b9f      	ldr	r3, [pc, #636]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b07      	cmp	r3, #7
 800325c:	f200 80ba 	bhi.w	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003289 	.word	0x08003289
 800326c:	08003337 	.word	0x08003337
 8003270:	08003371 	.word	0x08003371
 8003274:	08003379 	.word	0x08003379
 8003278:	08003381 	.word	0x08003381
 800327c:	08003389 	.word	0x08003389
 8003280:	08003391 	.word	0x08003391
 8003284:	080033cb 	.word	0x080033cb
	  case 0x00:

		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8003288:	4b93      	ldr	r3, [pc, #588]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d006      	beq.n	80032ae <HAL_TIM_PeriodElapsedCallback+0x6a>
			  (GPIOB->ODR) &= ~(1UL << (1));
 80032a0:	4b8d      	ldr	r3, [pc, #564]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	4a8c      	ldr	r2, [pc, #560]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032a6:	f023 0302 	bic.w	r3, r3, #2
 80032aa:	6153      	str	r3, [r2, #20]
 80032ac:	e005      	b.n	80032ba <HAL_TIM_PeriodElapsedCallback+0x76>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 80032ae:	4b8a      	ldr	r3, [pc, #552]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4a89      	ldr	r2, [pc, #548]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	6153      	str	r3, [r2, #20]
		  }

		  if (((tcWriteBuf[byteNumber] >> bitNumber) & 0x01) == 1){
 80032ba:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x298>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a88      	ldr	r2, [pc, #544]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80032c0:	5cd3      	ldrb	r3, [r2, r3]
 80032c2:	461a      	mov	r2, r3
 80032c4:	4b87      	ldr	r3, [pc, #540]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa42 f303 	asr.w	r3, r2, r3
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_TIM_PeriodElapsedCallback+0x98>
			  writeState = 0x01;
 80032d4:	4b7f      	ldr	r3, [pc, #508]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e002      	b.n	80032e2 <HAL_TIM_PeriodElapsedCallback+0x9e>
		  } else {
			  writeState = 0x02;
 80032dc:	4b7d      	ldr	r3, [pc, #500]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
		  }
		  bitNumber++;
 80032e2:	4b80      	ldr	r3, [pc, #512]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	4a7e      	ldr	r2, [pc, #504]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80032ea:	6013      	str	r3, [r2, #0]
		  if (bitNumber == 8){
 80032ec:	4b7d      	ldr	r3, [pc, #500]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d16e      	bne.n	80033d2 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  bitNumber = 0;
 80032f4:	4b7b      	ldr	r3, [pc, #492]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
			  byteNumber++;
 80032fa:	4b78      	ldr	r3, [pc, #480]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x298>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	4a76      	ldr	r2, [pc, #472]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003302:	6013      	str	r3, [r2, #0]
			  if (byteNumber == 10){
 8003304:	4b75      	ldr	r3, [pc, #468]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b0a      	cmp	r3, #10
 800330a:	d162      	bne.n	80033d2 <HAL_TIM_PeriodElapsedCallback+0x18e>
				  byteNumber = 0;
 800330c:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x298>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

				  for (int i=0; i<10; i++){
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b09      	cmp	r3, #9
 800331a:	dc5a      	bgt.n	80033d2 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  tcWriteBuf[i] = tcWrite[i];
 800331c:	4a72      	ldr	r2, [pc, #456]	; (80034e8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	7819      	ldrb	r1, [r3, #0]
 8003324:	4a6e      	ldr	r2, [pc, #440]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	460a      	mov	r2, r1
 800332c:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<10; i++){
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3301      	adds	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e7ef      	b.n	8003316 <HAL_TIM_PeriodElapsedCallback+0xd2>
			  }
		  }
		  break;

	  case 0x01:
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8003336:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_TIM_PeriodElapsedCallback+0x118>
			  (GPIOB->ODR) &= ~(1UL << (1));
 800334e:	4b62      	ldr	r3, [pc, #392]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4a61      	ldr	r2, [pc, #388]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003354:	f023 0302 	bic.w	r3, r3, #2
 8003358:	6153      	str	r3, [r2, #20]
 800335a:	e005      	b.n	8003368 <HAL_TIM_PeriodElapsedCallback+0x124>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 800335c:	4b5e      	ldr	r3, [pc, #376]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	4a5d      	ldr	r2, [pc, #372]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	6153      	str	r3, [r2, #20]
		  }
		  writeState = 0x00;
 8003368:	4b5a      	ldr	r3, [pc, #360]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
		  break;
 800336e:	e031      	b.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x02:
		  writeState = 0x00;
 8003370:	4b58      	ldr	r3, [pc, #352]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
		  break;
 8003376:	e02d      	b.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x03:
		  writeState = 0x04;
 8003378:	4b56      	ldr	r3, [pc, #344]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800337a:	2204      	movs	r2, #4
 800337c:	701a      	strb	r2, [r3, #0]
		  break;
 800337e:	e029      	b.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x04:
		  writeState = 0x01;
 8003380:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
		  break;
 8003386:	e025      	b.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x05:
		  writeState = 0x06;
 8003388:	4b52      	ldr	r3, [pc, #328]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800338a:	2206      	movs	r2, #6
 800338c:	701a      	strb	r2, [r3, #0]

		  break;
 800338e:	e021      	b.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x06:
		  writeState = 0x07;
 8003390:	4b50      	ldr	r3, [pc, #320]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003392:	2207      	movs	r2, #7
 8003394:	701a      	strb	r2, [r3, #0]
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_TIM_PeriodElapsedCallback+0x178>
			  (GPIOB->ODR) &= ~(1UL << (1));
 80033ae:	4b4a      	ldr	r3, [pc, #296]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	4a49      	ldr	r2, [pc, #292]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80033b4:	f023 0302 	bic.w	r3, r3, #2
 80033b8:	6153      	str	r3, [r2, #20]
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
		  }
		  break;
 80033ba:	e00b      	b.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
			  (GPIOB->ODR) |= (1UL << (1));
 80033bc:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4a45      	ldr	r2, [pc, #276]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	6153      	str	r3, [r2, #20]
		  break;
 80033c8:	e004      	b.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x07:
		  writeState = 0x01;
 80033ca:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
		  break;
 80033d0:	e000      	b.n	80033d4 <HAL_TIM_PeriodElapsedCallback+0x190>
		  break;
 80033d2:	bf00      	nop
	  }

  }
  if (htim == &htim7){  //Triggers once per frame
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a45      	ldr	r2, [pc, #276]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	f040 80a0 	bne.w	800351e <HAL_TIM_PeriodElapsedCallback+0x2da>
  __ASM volatile ("cpsid i" : : : "memory");
 80033de:	b672      	cpsid	i
}
 80033e0:	bf00      	nop
	  __disable_irq();
	  clockFrame++;
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a41      	ldr	r2, [pc, #260]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80033ea:	6013      	str	r3, [r2, #0]
	  if (compensate){    //If coming back from compensation
 80033ec:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <HAL_TIM_PeriodElapsedCallback+0x1e2>
		  //reset to proper ARR
		  __HAL_TIM_SET_AUTORELOAD(&htim7,frameRateARR[frameRate]);
 80033f6:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80033fe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003402:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
 8003408:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003410:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003414:	461a      	mov	r2, r3
 8003416:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003418:	60da      	str	r2, [r3, #12]
		  //TIM7->ARR = 50049;
		  compensate = false;
 800341a:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
		  compensationCounter = 0;
 8003420:	4b37      	ldr	r3, [pc, #220]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003422:	2200      	movs	r2, #0
 8003424:	801a      	strh	r2, [r3, #0]
	  }
    //If it's time to compensate
	  if (compensationCounter == calibrationInterval[frameRate]){
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	4619      	mov	r1, r3
 8003434:	4b33      	ldr	r3, [pc, #204]	; (8003504 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003436:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800343a:	429a      	cmp	r2, r3
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d024      	beq.n	8003492 <HAL_TIM_PeriodElapsedCallback+0x24e>
		  __HAL_TIM_SET_AUTORELOAD(&htim7, (frameRateARR[frameRate] + calibrationArray[frameRate]));
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003450:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003454:	461a      	mov	r2, r3
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800345e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003462:	441a      	add	r2, r3
 8003464:	4b21      	ldr	r3, [pc, #132]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	4b22      	ldr	r3, [pc, #136]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003472:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003476:	461a      	mov	r2, r3
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003480:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003484:	4413      	add	r3, r2
 8003486:	461a      	mov	r2, r3
 8003488:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800348a:	60da      	str	r2, [r3, #12]
		  compensate = true;
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]

	  }
compensationCounter++;
 8003492:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	3301      	adds	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800349e:	801a      	strh	r2, [r3, #0]

    //Remove this blinky bit. Put in the main loop
	  if (clockFrame % frameRateDivisor[frameRate] == 0){
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80034a6:	7812      	ldrb	r2, [r2, #0]
 80034a8:	4611      	mov	r1, r2
 80034aa:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80034ac:	5c52      	ldrb	r2, [r2, r1]
 80034ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80034b2:	fb02 f201 	mul.w	r2, r2, r1
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d026      	beq.n	8003514 <HAL_TIM_PeriodElapsedCallback+0x2d0>
		  blink = true;
 80034c6:	4b12      	ldr	r3, [pc, #72]	; (8003510 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e025      	b.n	800351a <HAL_TIM_PeriodElapsedCallback+0x2d6>
 80034ce:	bf00      	nop
 80034d0:	200002c4 	.word	0x200002c4
 80034d4:	2000062e 	.word	0x2000062e
 80034d8:	48000400 	.word	0x48000400
 80034dc:	20000630 	.word	0x20000630
 80034e0:	20000624 	.word	0x20000624
 80034e4:	20000634 	.word	0x20000634
 80034e8:	20000618 	.word	0x20000618
 80034ec:	20000278 	.word	0x20000278
 80034f0:	20000094 	.word	0x20000094
 80034f4:	2000063c 	.word	0x2000063c
 80034f8:	20000091 	.word	0x20000091
 80034fc:	20000038 	.word	0x20000038
 8003500:	2000063a 	.word	0x2000063a
 8003504:	20000018 	.word	0x20000018
 8003508:	200000a8 	.word	0x200000a8
 800350c:	20000030 	.word	0x20000030
 8003510:	20000638 	.word	0x20000638
	  } else {
			  blink = false;
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800351a:	b662      	cpsie	i
}
 800351c:	bf00      	nop
	  }

	  __enable_irq();
  }
}
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000638 	.word	0x20000638

08003530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003534:	b672      	cpsid	i
}
 8003536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003538:	e7fe      	b.n	8003538 <Error_Handler+0x8>

0800353a <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af04      	add	r7, sp, #16
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003546:	230a      	movs	r3, #10
 8003548:	9302      	str	r3, [sp, #8]
 800354a:	2301      	movs	r3, #1
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	1cfb      	adds	r3, r7, #3
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2301      	movs	r3, #1
 8003554:	2200      	movs	r2, #0
 8003556:	2178      	movs	r1, #120	; 0x78
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f002 f95b 	bl	8005814 <HAL_I2C_Mem_Write>
 800355e:	4603      	mov	r3, r0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8003570:	2064      	movs	r0, #100	; 0x64
 8003572:	f000 fd9d 	bl	80040b0 <HAL_Delay>
    int status = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800357a:	21ae      	movs	r1, #174	; 0xae
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ffdc 	bl	800353a <ssd1306_WriteCommand>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800358c:	2120      	movs	r1, #32
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ffd3 	bl	800353a <ssd1306_WriteCommand>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800359e:	2110      	movs	r1, #16
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ffca 	bl	800353a <ssd1306_WriteCommand>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80035b0:	21b0      	movs	r1, #176	; 0xb0
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ffc1 	bl	800353a <ssd1306_WriteCommand>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80035c2:	21c8      	movs	r1, #200	; 0xc8
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ffb8 	bl	800353a <ssd1306_WriteCommand>
 80035ca:	4603      	mov	r3, r0
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4413      	add	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80035d4:	2100      	movs	r1, #0
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ffaf 	bl	800353a <ssd1306_WriteCommand>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80035e6:	2110      	movs	r1, #16
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ffa6 	bl	800353a <ssd1306_WriteCommand>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80035f8:	2140      	movs	r1, #64	; 0x40
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ff9d 	bl	800353a <ssd1306_WriteCommand>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4413      	add	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800360a:	2181      	movs	r1, #129	; 0x81
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff94 	bl	800353a <ssd1306_WriteCommand>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4413      	add	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800361c:	21ff      	movs	r1, #255	; 0xff
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ff8b 	bl	800353a <ssd1306_WriteCommand>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800362e:	21a1      	movs	r1, #161	; 0xa1
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ff82 	bl	800353a <ssd1306_WriteCommand>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8003640:	21a6      	movs	r1, #166	; 0xa6
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff ff79 	bl	800353a <ssd1306_WriteCommand>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8003652:	21a8      	movs	r1, #168	; 0xa8
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff70 	bl	800353a <ssd1306_WriteCommand>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4413      	add	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x3F);
 8003664:	213f      	movs	r1, #63	; 0x3f
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff67 	bl	800353a <ssd1306_WriteCommand>
 800366c:	4603      	mov	r3, r0
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003676:	21a4      	movs	r1, #164	; 0xa4
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff5e 	bl	800353a <ssd1306_WriteCommand>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8003688:	21d3      	movs	r1, #211	; 0xd3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ff55 	bl	800353a <ssd1306_WriteCommand>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800369a:	2100      	movs	r1, #0
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff4c 	bl	800353a <ssd1306_WriteCommand>
 80036a2:	4603      	mov	r3, r0
 80036a4:	461a      	mov	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4413      	add	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80036ac:	21d5      	movs	r1, #213	; 0xd5
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff43 	bl	800353a <ssd1306_WriteCommand>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80036be:	21f0      	movs	r1, #240	; 0xf0
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff3a 	bl	800353a <ssd1306_WriteCommand>
 80036c6:	4603      	mov	r3, r0
 80036c8:	461a      	mov	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80036d0:	21d9      	movs	r1, #217	; 0xd9
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ff31 	bl	800353a <ssd1306_WriteCommand>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80036e2:	2122      	movs	r1, #34	; 0x22
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff28 	bl	800353a <ssd1306_WriteCommand>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4413      	add	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80036f4:	21da      	movs	r1, #218	; 0xda
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ff1f 	bl	800353a <ssd1306_WriteCommand>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x12);
 8003706:	2112      	movs	r1, #18
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff16 	bl	800353a <ssd1306_WriteCommand>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8003718:	21db      	movs	r1, #219	; 0xdb
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ff0d 	bl	800353a <ssd1306_WriteCommand>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4413      	add	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 800372a:	2120      	movs	r1, #32
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff04 	bl	800353a <ssd1306_WriteCommand>
 8003732:	4603      	mov	r3, r0
 8003734:	461a      	mov	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 800373c:	218d      	movs	r1, #141	; 0x8d
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fefb 	bl	800353a <ssd1306_WriteCommand>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 800374e:	2114      	movs	r1, #20
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fef2 	bl	800353a <ssd1306_WriteCommand>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8003760:	21af      	movs	r1, #175	; 0xaf
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fee9 	bl	800353a <ssd1306_WriteCommand>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <ssd1306_Init+0x214>
        return 1;
 8003778:	2301      	movs	r3, #1
 800377a:	e00f      	b.n	800379c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 800377c:	2000      	movs	r0, #0
 800377e:	f000 f813 	bl	80037a8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f834 	bl	80037f0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <ssd1306_Init+0x23c>)
 800378a:	2200      	movs	r2, #0
 800378c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <ssd1306_Init+0x23c>)
 8003790:	2200      	movs	r2, #0
 8003792:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <ssd1306_Init+0x23c>)
 8003796:	2201      	movs	r2, #1
 8003798:	715a      	strb	r2, [r3, #5]

    return 0;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000a40 	.word	0x20000a40

080037a8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e00d      	b.n	80037d4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <ssd1306_Fill+0x1a>
 80037be:	2100      	movs	r1, #0
 80037c0:	e000      	b.n	80037c4 <ssd1306_Fill+0x1c>
 80037c2:	21ff      	movs	r1, #255	; 0xff
 80037c4:	4a09      	ldr	r2, [pc, #36]	; (80037ec <ssd1306_Fill+0x44>)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	460a      	mov	r2, r1
 80037cc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037da:	d3ed      	bcc.n	80037b8 <ssd1306_Fill+0x10>
    }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000640 	.word	0x20000640

080037f0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af04      	add	r7, sp, #16
 80037f6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e020      	b.n	8003840 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	3b50      	subs	r3, #80	; 0x50
 8003802:	b2db      	uxtb	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fe97 	bl	800353a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 800380c:	2100      	movs	r1, #0
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff fe93 	bl	800353a <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8003814:	2110      	movs	r1, #16
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe8f 	bl	800353a <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	01db      	lsls	r3, r3, #7
 8003820:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <ssd1306_UpdateScreen+0x60>)
 8003822:	4413      	add	r3, r2
 8003824:	2264      	movs	r2, #100	; 0x64
 8003826:	9202      	str	r2, [sp, #8]
 8003828:	2280      	movs	r2, #128	; 0x80
 800382a:	9201      	str	r2, [sp, #4]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2301      	movs	r3, #1
 8003830:	2240      	movs	r2, #64	; 0x40
 8003832:	2178      	movs	r1, #120	; 0x78
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f001 ffed 	bl	8005814 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	3301      	adds	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b07      	cmp	r3, #7
 8003844:	d9db      	bls.n	80037fe <ssd1306_UpdateScreen+0xe>
    }
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000640 	.word	0x20000640

08003854 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
 800385e:	460b      	mov	r3, r1
 8003860:	71bb      	strb	r3, [r7, #6]
 8003862:	4613      	mov	r3, r2
 8003864:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	db48      	blt.n	8003900 <ssd1306_DrawPixel+0xac>
 800386e:	79bb      	ldrb	r3, [r7, #6]
 8003870:	2b3f      	cmp	r3, #63	; 0x3f
 8003872:	d845      	bhi.n	8003900 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <ssd1306_DrawPixel+0xb8>)
 8003876:	791b      	ldrb	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d006      	beq.n	800388a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 800387c:	797b      	ldrb	r3, [r7, #5]
 800387e:	2b00      	cmp	r3, #0
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800388a:	797b      	ldrb	r3, [r7, #5]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d11a      	bne.n	80038c6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003890:	79fa      	ldrb	r2, [r7, #7]
 8003892:	79bb      	ldrb	r3, [r7, #6]
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	b2d8      	uxtb	r0, r3
 8003898:	4603      	mov	r3, r0
 800389a:	01db      	lsls	r3, r3, #7
 800389c:	4413      	add	r3, r2
 800389e:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <ssd1306_DrawPixel+0xbc>)
 80038a0:	5cd3      	ldrb	r3, [r2, r3]
 80038a2:	b25a      	sxtb	r2, r3
 80038a4:	79bb      	ldrb	r3, [r7, #6]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	b25b      	sxtb	r3, r3
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b259      	sxtb	r1, r3
 80038b6:	79fa      	ldrb	r2, [r7, #7]
 80038b8:	4603      	mov	r3, r0
 80038ba:	01db      	lsls	r3, r3, #7
 80038bc:	4413      	add	r3, r2
 80038be:	b2c9      	uxtb	r1, r1
 80038c0:	4a13      	ldr	r2, [pc, #76]	; (8003910 <ssd1306_DrawPixel+0xbc>)
 80038c2:	54d1      	strb	r1, [r2, r3]
 80038c4:	e01d      	b.n	8003902 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80038c6:	79fa      	ldrb	r2, [r7, #7]
 80038c8:	79bb      	ldrb	r3, [r7, #6]
 80038ca:	08db      	lsrs	r3, r3, #3
 80038cc:	b2d8      	uxtb	r0, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	01db      	lsls	r3, r3, #7
 80038d2:	4413      	add	r3, r2
 80038d4:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <ssd1306_DrawPixel+0xbc>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	b25a      	sxtb	r2, r3
 80038da:	79bb      	ldrb	r3, [r7, #6]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	4013      	ands	r3, r2
 80038ee:	b259      	sxtb	r1, r3
 80038f0:	79fa      	ldrb	r2, [r7, #7]
 80038f2:	4603      	mov	r3, r0
 80038f4:	01db      	lsls	r3, r3, #7
 80038f6:	4413      	add	r3, r2
 80038f8:	b2c9      	uxtb	r1, r1
 80038fa:	4a05      	ldr	r2, [pc, #20]	; (8003910 <ssd1306_DrawPixel+0xbc>)
 80038fc:	54d1      	strb	r1, [r2, r3]
 80038fe:	e000      	b.n	8003902 <ssd1306_DrawPixel+0xae>
        return;
 8003900:	bf00      	nop
    }
}
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	20000a40 	.word	0x20000a40
 8003910:	20000640 	.word	0x20000640

08003914 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	4604      	mov	r4, r0
 800391c:	1d38      	adds	r0, r7, #4
 800391e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003922:	461a      	mov	r2, r3
 8003924:	4623      	mov	r3, r4
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	4613      	mov	r3, r2
 800392a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800392c:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <ssd1306_WriteChar+0xfc>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	793b      	ldrb	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	2b7f      	cmp	r3, #127	; 0x7f
 8003938:	dc06      	bgt.n	8003948 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800393a:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <ssd1306_WriteChar+0xfc>)
 800393c:	885b      	ldrh	r3, [r3, #2]
 800393e:	461a      	mov	r2, r3
 8003940:	797b      	ldrb	r3, [r7, #5]
 8003942:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003944:	2b3f      	cmp	r3, #63	; 0x3f
 8003946:	dd01      	ble.n	800394c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8003948:	2300      	movs	r3, #0
 800394a:	e05d      	b.n	8003a08 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e04c      	b.n	80039ec <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	3b20      	subs	r3, #32
 8003958:	7979      	ldrb	r1, [r7, #5]
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4619      	mov	r1, r3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	440b      	add	r3, r1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e034      	b.n	80039dc <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d012      	beq.n	80039a8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <ssd1306_WriteChar+0xfc>)
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	4413      	add	r3, r2
 800398e:	b2d8      	uxtb	r0, r3
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <ssd1306_WriteChar+0xfc>)
 8003992:	885b      	ldrh	r3, [r3, #2]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	4413      	add	r3, r2
 800399c:	b2db      	uxtb	r3, r3
 800399e:	7bba      	ldrb	r2, [r7, #14]
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7ff ff57 	bl	8003854 <ssd1306_DrawPixel>
 80039a6:	e016      	b.n	80039d6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <ssd1306_WriteChar+0xfc>)
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	b2d8      	uxtb	r0, r3
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <ssd1306_WriteChar+0xfc>)
 80039b8:	885b      	ldrh	r3, [r3, #2]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	b2d9      	uxtb	r1, r3
 80039c4:	7bbb      	ldrb	r3, [r7, #14]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	f7ff ff3f 	bl	8003854 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	3301      	adds	r3, #1
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	793b      	ldrb	r3, [r7, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d3c5      	bcc.n	8003972 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	797b      	ldrb	r3, [r7, #5]
 80039ee:	461a      	mov	r2, r3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d3ad      	bcc.n	8003952 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <ssd1306_WriteChar+0xfc>)
 80039f8:	881a      	ldrh	r2, [r3, #0]
 80039fa:	793b      	ldrb	r3, [r7, #4]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <ssd1306_WriteChar+0xfc>)
 8003a04:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3724      	adds	r7, #36	; 0x24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd90      	pop	{r4, r7, pc}
 8003a10:	20000a40 	.word	0x20000a40

08003a14 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	1d38      	adds	r0, r7, #4
 8003a1e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003a22:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8003a24:	e012      	b.n	8003a4c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	7818      	ldrb	r0, [r3, #0]
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	1d3a      	adds	r2, r7, #4
 8003a2e:	ca06      	ldmia	r2, {r1, r2}
 8003a30:	f7ff ff70 	bl	8003914 <ssd1306_WriteChar>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d002      	beq.n	8003a46 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	e008      	b.n	8003a58 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e8      	bne.n	8003a26 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	781b      	ldrb	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	460a      	mov	r2, r1
 8003a6a:	71fb      	strb	r3, [r7, #7]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <ssd1306_SetCursor+0x2c>)
 8003a76:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003a78:	79bb      	ldrb	r3, [r7, #6]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <ssd1306_SetCursor+0x2c>)
 8003a7e:	805a      	strh	r2, [r3, #2]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20000a40 	.word	0x20000a40

08003a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_MspInit+0x4c>)
 8003a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9a:	4a10      	ldr	r2, [pc, #64]	; (8003adc <HAL_MspInit+0x4c>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_MspInit+0x4c>)
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_MspInit+0x4c>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <HAL_MspInit+0x4c>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_MspInit+0x4c>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2101      	movs	r1, #1
 8003aca:	f06f 0003 	mvn.w	r0, #3
 8003ace:	f001 fa9e 	bl	800500e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <HAL_ADC_MspInit+0x74>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d124      	bne.n	8003b4c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <HAL_ADC_MspInit+0x78>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_ADC_MspInit+0x78>)
 8003b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b0e:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_ADC_MspInit+0x78>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_ADC_MspInit+0x78>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_ADC_MspInit+0x78>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_ADC_MspInit+0x78>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATT_CHECK_Pin;
 8003b32:	2308      	movs	r3, #8
 8003b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003b36:	230b      	movs	r3, #11
 8003b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_CHECK_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b48:	f001 fc42 	bl	80053d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b4c:	bf00      	nop
 8003b4e:	3728      	adds	r7, #40	; 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	50040000 	.word	0x50040000
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_DAC_MspInit+0x84>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d12c      	bne.n	8003bd8 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_DAC_MspInit+0x88>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <HAL_DAC_MspInit+0x88>)
 8003b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b88:	6593      	str	r3, [r2, #88]	; 0x58
 8003b8a:	4b16      	ldr	r3, [pc, #88]	; (8003be4 <HAL_DAC_MspInit+0x88>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <HAL_DAC_MspInit+0x88>)
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <HAL_DAC_MspInit+0x88>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_DAC_MspInit+0x88>)
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = TCVC_Pin;
 8003bae:	2320      	movs	r3, #32
 8003bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TCVC_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 0314 	add.w	r3, r7, #20
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc4:	f001 fc04 	bl	80053d0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2108      	movs	r1, #8
 8003bcc:	2036      	movs	r0, #54	; 0x36
 8003bce:	f001 fa1e 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003bd2:	2036      	movs	r0, #54	; 0x36
 8003bd4:	f001 fa37 	bl	8005046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003bd8:	bf00      	nop
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40007400 	.word	0x40007400
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 031c 	add.w	r3, r7, #28
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2e      	ldr	r2, [pc, #184]	; (8003cc0 <HAL_I2C_MspInit+0xd8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d128      	bne.n	8003c5c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	4a2d      	ldr	r2, [pc, #180]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c16:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEM_SCL_Pin|MEM_SDA_Pin;
 8003c22:	23c0      	movs	r3, #192	; 0xc0
 8003c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c26:	2312      	movs	r3, #18
 8003c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c32:	2304      	movs	r3, #4
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c36:	f107 031c 	add.w	r3, r7, #28
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4822      	ldr	r0, [pc, #136]	; (8003cc8 <HAL_I2C_MspInit+0xe0>)
 8003c3e:	f001 fbc7 	bl	80053d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	4a1f      	ldr	r2, [pc, #124]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003c5a:	e02d      	b.n	8003cb8 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <HAL_I2C_MspInit+0xe4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d128      	bne.n	8003cb8 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MON_SCL_Pin|MON_SDA_Pin;
 8003c7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c84:	2312      	movs	r3, #18
 8003c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003c90:	2304      	movs	r3, #4
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c94:	f107 031c 	add.w	r3, r7, #28
 8003c98:	4619      	mov	r1, r3
 8003c9a:	480b      	ldr	r0, [pc, #44]	; (8003cc8 <HAL_I2C_MspInit+0xe0>)
 8003c9c:	f001 fb98 	bl	80053d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ca0:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003caa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_I2C_MspInit+0xdc>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	bf00      	nop
 8003cba:	3730      	adds	r7, #48	; 0x30
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40005400 	.word	0x40005400
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	48000400 	.word	0x48000400
 8003ccc:	40005800 	.word	0x40005800

08003cd0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d130      	bne.n	8003d54 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_TIM_IC_MspInit+0x8c>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_TIM_IC_MspInit+0x8c>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_TIM_IC_MspInit+0x8c>)
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <HAL_TIM_IC_MspInit+0x8c>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <HAL_TIM_IC_MspInit+0x8c>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_TIM_IC_MspInit+0x8c>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TC_IN_Pin;
 8003d22:	2304      	movs	r3, #4
 8003d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d32:	2301      	movs	r3, #1
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_IN_GPIO_Port, &GPIO_InitStruct);
 8003d36:	f107 0314 	add.w	r3, r7, #20
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d40:	f001 fb46 	bl	80053d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003d44:	2200      	movs	r2, #0
 8003d46:	2102      	movs	r1, #2
 8003d48:	201c      	movs	r0, #28
 8003d4a:	f001 f960 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d4e:	201c      	movs	r0, #28
 8003d50:	f001 f979 	bl	8005046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d54:	bf00      	nop
 8003d56:	3728      	adds	r7, #40	; 0x28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <HAL_TIM_Base_MspInit+0xac>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d114      	bne.n	8003d9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003d78:	f043 0310 	orr.w	r3, r3, #16
 8003d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	2036      	movs	r0, #54	; 0x36
 8003d90:	f001 f93d 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d94:	2036      	movs	r0, #54	; 0x36
 8003d96:	f001 f956 	bl	8005046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003d9a:	e032      	b.n	8003e02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <HAL_TIM_Base_MspInit+0xb4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d114      	bne.n	8003dd0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003dac:	f043 0320 	orr.w	r3, r3, #32
 8003db0:	6593      	str	r3, [r2, #88]	; 0x58
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	2037      	movs	r0, #55	; 0x37
 8003dc4:	f001 f923 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003dc8:	2037      	movs	r0, #55	; 0x37
 8003dca:	f001 f93c 	bl	8005046 <HAL_NVIC_EnableIRQ>
}
 8003dce:	e018      	b.n	8003e02 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a10      	ldr	r2, [pc, #64]	; (8003e18 <HAL_TIM_Base_MspInit+0xb8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d113      	bne.n	8003e02 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de4:	6613      	str	r3, [r2, #96]	; 0x60
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_TIM_Base_MspInit+0xb0>)
 8003de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 7, 0);
 8003df2:	2200      	movs	r2, #0
 8003df4:	2107      	movs	r1, #7
 8003df6:	2019      	movs	r0, #25
 8003df8:	f001 f909 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003dfc:	2019      	movs	r0, #25
 8003dfe:	f001 f922 	bl	8005046 <HAL_NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40001000 	.word	0x40001000
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40001400 	.word	0x40001400
 8003e18:	40014400 	.word	0x40014400

08003e1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <HAL_PCD_MspInit+0x38>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10b      	bne.n	8003e46 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_PCD_MspInit+0x3c>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <HAL_PCD_MspInit+0x3c>)
 8003e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e38:	6593      	str	r3, [r2, #88]	; 0x58
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <HAL_PCD_MspInit+0x3c>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40006800 	.word	0x40006800
 8003e58:	40021000 	.word	0x40021000

08003e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e60:	e7fe      	b.n	8003e60 <NMI_Handler+0x4>

08003e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e62:	b480      	push	{r7}
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e66:	e7fe      	b.n	8003e66 <HardFault_Handler+0x4>

08003e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e6c:	e7fe      	b.n	8003e6c <MemManage_Handler+0x4>

08003e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e72:	e7fe      	b.n	8003e72 <BusFault_Handler+0x4>

08003e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e78:	e7fe      	b.n	8003e78 <UsageFault_Handler+0x4>

08003e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ea8:	f000 f8e2 	bl	8004070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003eb6:	f003 fd93 	bl	80079e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200002c4 	.word	0x200002c4

08003ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <TIM2_IRQHandler+0x10>)
 8003eca:	f003 fd89 	bl	80079e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200001e0 	.word	0x200001e0

08003ed8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003edc:	4803      	ldr	r0, [pc, #12]	; (8003eec <TIM6_DAC_IRQHandler+0x14>)
 8003ede:	f003 fd7f 	bl	80079e0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003ee2:	4803      	ldr	r0, [pc, #12]	; (8003ef0 <TIM6_DAC_IRQHandler+0x18>)
 8003ee4:	f001 f8eb 	bl	80050be <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	2000022c 	.word	0x2000022c
 8003ef0:	20000134 	.word	0x20000134

08003ef4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <TIM7_IRQHandler+0x10>)
 8003efa:	f003 fd71 	bl	80079e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000278 	.word	0x20000278

08003f08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <SystemInit+0x64>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <SystemInit+0x64>)
 8003f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <SystemInit+0x68>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <SystemInit+0x68>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <SystemInit+0x68>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <SystemInit+0x68>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a0f      	ldr	r2, [pc, #60]	; (8003f70 <SystemInit+0x68>)
 8003f34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003f38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <SystemInit+0x68>)
 8003f40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <SystemInit+0x68>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <SystemInit+0x68>)
 8003f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <SystemInit+0x68>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <SystemInit+0x64>)
 8003f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f5e:	609a      	str	r2, [r3, #8]
#endif
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	e000ed00 	.word	0xe000ed00
 8003f70:	40021000 	.word	0x40021000

08003f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f78:	f7ff ffc6 	bl	8003f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003f7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f7e:	e003      	b.n	8003f88 <LoopCopyDataInit>

08003f80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003f82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f86:	3104      	adds	r1, #4

08003f88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f88:	480a      	ldr	r0, [pc, #40]	; (8003fb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f90:	d3f6      	bcc.n	8003f80 <CopyDataInit>
	ldr	r2, =_sbss
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f94:	e002      	b.n	8003f9c <LoopFillZerobss>

08003f96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f98:	f842 3b04 	str.w	r3, [r2], #4

08003f9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <LoopForever+0x16>)
	cmp	r2, r3
 8003f9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003fa0:	d3f9      	bcc.n	8003f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fa2:	f004 f979 	bl	8008298 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fa6:	f7fe f963 	bl	8002270 <main>

08003faa <LoopForever>:

LoopForever:
    b LoopForever
 8003faa:	e7fe      	b.n	8003faa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003fb0:	08009984 	.word	0x08009984
	ldr	r0, =_sdata
 8003fb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003fb8:	20000060 	.word	0x20000060
	ldr	r2, =_sbss
 8003fbc:	20000060 	.word	0x20000060
	ldr	r3, = _ebss
 8003fc0:	20000a4c 	.word	0x20000a4c

08003fc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fc4:	e7fe      	b.n	8003fc4 <ADC1_IRQHandler>

08003fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	f001 f811 	bl	8004ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f000 f80e 	bl	8003ff8 <HAL_InitTick>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	71fb      	strb	r3, [r7, #7]
 8003fe6:	e001      	b.n	8003fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fe8:	f7ff fd52 	bl	8003a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fec:	79fb      	ldrb	r3, [r7, #7]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_InitTick+0x6c>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d023      	beq.n	8004054 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800400c:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_InitTick+0x70>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b14      	ldr	r3, [pc, #80]	; (8004064 <HAL_InitTick+0x6c>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800401a:	fbb3 f3f1 	udiv	r3, r3, r1
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	4618      	mov	r0, r3
 8004024:	f001 f81d 	bl	8005062 <HAL_SYSTICK_Config>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b0f      	cmp	r3, #15
 8004032:	d809      	bhi.n	8004048 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004034:	2200      	movs	r2, #0
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800403c:	f000 ffe7 	bl	800500e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <HAL_InitTick+0x74>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e007      	b.n	8004058 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	e004      	b.n	8004058 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	e001      	b.n	8004058 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2000005c 	.word	0x2000005c
 8004068:	20000054 	.word	0x20000054
 800406c:	20000058 	.word	0x20000058

08004070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_IncTick+0x20>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_IncTick+0x24>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4413      	add	r3, r2
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <HAL_IncTick+0x24>)
 8004082:	6013      	str	r3, [r2, #0]
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	2000005c 	.word	0x2000005c
 8004094:	20000a48 	.word	0x20000a48

08004098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return uwTick;
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_GetTick+0x14>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000a48 	.word	0x20000a48

080040b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7ff ffee 	bl	8004098 <HAL_GetTick>
 80040bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c8:	d005      	beq.n	80040d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_Delay+0x44>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040d6:	bf00      	nop
 80040d8:	f7ff ffde 	bl	8004098 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d8f7      	bhi.n	80040d8 <HAL_Delay+0x28>
  {
  }
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	2000005c 	.word	0x2000005c

080040f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	609a      	str	r2, [r3, #8]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3360      	adds	r3, #96	; 0x60
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <LL_ADC_SetOffset+0x44>)
 8004182:	4013      	ands	r3, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	03fff000 	.word	0x03fff000

080041a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3360      	adds	r3, #96	; 0x60
 80041b6:	461a      	mov	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3360      	adds	r3, #96	; 0x60
 80041e4:	461a      	mov	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800420a:	b480      	push	{r7}
 800420c:	b087      	sub	sp, #28
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3330      	adds	r3, #48	; 0x30
 800421a:	461a      	mov	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	4413      	add	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	211f      	movs	r1, #31
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	401a      	ands	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0e9b      	lsrs	r3, r3, #26
 8004242:	f003 011f 	and.w	r1, r3, #31
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	431a      	orrs	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004262:	b480      	push	{r7}
 8004264:	b087      	sub	sp, #28
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3314      	adds	r3, #20
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	0e5b      	lsrs	r3, r3, #25
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	4413      	add	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	0d1b      	lsrs	r3, r3, #20
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2107      	movs	r1, #7
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	0d1b      	lsrs	r3, r3, #20
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	431a      	orrs	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d0:	43db      	mvns	r3, r3
 80042d2:	401a      	ands	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f003 0318 	and.w	r3, r3, #24
 80042da:	4908      	ldr	r1, [pc, #32]	; (80042fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80042dc:	40d9      	lsrs	r1, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	400b      	ands	r3, r1
 80042e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	0007ffff 	.word	0x0007ffff

08004300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6093      	str	r3, [r2, #8]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004338:	d101      	bne.n	800433e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800435c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004388:	d101      	bne.n	800438e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <LL_ADC_IsEnabled+0x18>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <LL_ADC_IsEnabled+0x1a>
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d101      	bne.n	80043da <LL_ADC_REG_IsConversionOngoing+0x18>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d101      	bne.n	8004400 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e12a      	b.n	8004680 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff fb51 	bl	8003ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff ff67 	bl	8004324 <LL_ADC_IsDeepPowerDownEnabled>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d004      	beq.n	8004466 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff4d 	bl	8004300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ff82 	bl	8004374 <LL_ADC_IsInternalRegulatorEnabled>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d113      	bne.n	800449e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7ff ff66 	bl	800434c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004480:	4b81      	ldr	r3, [pc, #516]	; (8004688 <HAL_ADC_Init+0x278>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	4a81      	ldr	r2, [pc, #516]	; (800468c <HAL_ADC_Init+0x27c>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004490:	e002      	b.n	8004498 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3b01      	subs	r3, #1
 8004496:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f9      	bne.n	8004492 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff ff66 	bl	8004374 <LL_ADC_IsInternalRegulatorEnabled>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	f043 0210 	orr.w	r2, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	f043 0201 	orr.w	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff77 	bl	80043c2 <LL_ADC_REG_IsConversionOngoing>
 80044d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 80c5 	bne.w	800466e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f040 80c1 	bne.w	800466e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044f4:	f043 0202 	orr.w	r2, r3, #2
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ff4b 	bl	800439c <LL_ADC_IsEnabled>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800450c:	4860      	ldr	r0, [pc, #384]	; (8004690 <HAL_ADC_Init+0x280>)
 800450e:	f7ff ff45 	bl	800439c <LL_ADC_IsEnabled>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4619      	mov	r1, r3
 800451e:	485d      	ldr	r0, [pc, #372]	; (8004694 <HAL_ADC_Init+0x284>)
 8004520:	f7ff fdea 	bl	80040f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	7e5b      	ldrb	r3, [r3, #25]
 8004528:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800452e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004534:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800453a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004542:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d106      	bne.n	8004560 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	3b01      	subs	r3, #1
 8004558:	045b      	lsls	r3, r3, #17
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4313      	orrs	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	4b45      	ldr	r3, [pc, #276]	; (8004698 <HAL_ADC_Init+0x288>)
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	69b9      	ldr	r1, [r7, #24]
 800458c:	430b      	orrs	r3, r1
 800458e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff14 	bl	80043c2 <LL_ADC_REG_IsConversionOngoing>
 800459a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff21 	bl	80043e8 <LL_ADC_INJ_IsConversionOngoing>
 80045a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d13d      	bne.n	800462a <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d13a      	bne.n	800462a <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d0:	f023 0302 	bic.w	r3, r3, #2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	430b      	orrs	r3, r1
 80045dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d118      	bne.n	800461a <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045f2:	f023 0304 	bic.w	r3, r3, #4
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045fe:	4311      	orrs	r1, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800460a:	430a      	orrs	r2, r1
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	611a      	str	r2, [r3, #16]
 8004618:	e007      	b.n	800462a <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10c      	bne.n	800464c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	f023 010f 	bic.w	r1, r3, #15
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	1e5a      	subs	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
 800464a:	e007      	b.n	800465c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 020f 	bic.w	r2, r2, #15
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f023 0303 	bic.w	r3, r3, #3
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
 800466c:	e007      	b.n	800467e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	f043 0210 	orr.w	r2, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800467e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000054 	.word	0x20000054
 800468c:	053e2d63 	.word	0x053e2d63
 8004690:	50040000 	.word	0x50040000
 8004694:	50040300 	.word	0x50040300
 8004698:	fff0c007 	.word	0xfff0c007

0800469c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b0b6      	sub	sp, #216	; 0xd8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_ADC_ConfigChannel+0x22>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e3b8      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x794>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fe79 	bl	80043c2 <LL_ADC_REG_IsConversionOngoing>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 839d 	bne.w	8004e12 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	d824      	bhi.n	800472a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	3b02      	subs	r3, #2
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d81b      	bhi.n	8004722 <HAL_ADC_ConfigChannel+0x86>
 80046ea:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <HAL_ADC_ConfigChannel+0x54>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004709 	.word	0x08004709
 80046f8:	08004711 	.word	0x08004711
 80046fc:	08004719 	.word	0x08004719
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	220c      	movs	r2, #12
 8004704:	605a      	str	r2, [r3, #4]
          break;
 8004706:	e011      	b.n	800472c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2212      	movs	r2, #18
 800470c:	605a      	str	r2, [r3, #4]
          break;
 800470e:	e00d      	b.n	800472c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2218      	movs	r2, #24
 8004714:	605a      	str	r2, [r3, #4]
          break;
 8004716:	e009      	b.n	800472c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800471e:	605a      	str	r2, [r3, #4]
          break;
 8004720:	e004      	b.n	800472c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2206      	movs	r2, #6
 8004726:	605a      	str	r2, [r3, #4]
          break;
 8004728:	e000      	b.n	800472c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800472a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	f7ff fd66 	bl	800420a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fe3d 	bl	80043c2 <LL_ADC_REG_IsConversionOngoing>
 8004748:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fe49 	bl	80043e8 <LL_ADC_INJ_IsConversionOngoing>
 8004756:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800475a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 81a6 	bne.w	8004ab0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 81a1 	bne.w	8004ab0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	461a      	mov	r2, r3
 800477c:	f7ff fd71 	bl	8004262 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	08db      	lsrs	r3, r3, #3
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d00a      	beq.n	80047b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6919      	ldr	r1, [r3, #16]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047b2:	f7ff fcd5 	bl	8004160 <LL_ADC_SetOffset>
 80047b6:	e17b      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fcf2 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x148>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fce7 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 80047da:	4603      	mov	r3, r0
 80047dc:	0e9b      	lsrs	r3, r3, #26
 80047de:	f003 021f 	and.w	r2, r3, #31
 80047e2:	e01e      	b.n	8004822 <HAL_ADC_ConfigChannel+0x186>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fcdc 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004806:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800480a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004812:	2320      	movs	r3, #32
 8004814:	e004      	b.n	8004820 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482a:	2b00      	cmp	r3, #0
 800482c:	d105      	bne.n	800483a <HAL_ADC_ConfigChannel+0x19e>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	0e9b      	lsrs	r3, r3, #26
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	e018      	b.n	800486c <HAL_ADC_ConfigChannel+0x1d0>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004846:	fa93 f3a3 	rbit	r3, r3
 800484a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800484e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004852:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800485e:	2320      	movs	r3, #32
 8004860:	e004      	b.n	800486c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004866:	fab3 f383 	clz	r3, r3
 800486a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800486c:	429a      	cmp	r2, r3
 800486e:	d106      	bne.n	800487e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2200      	movs	r2, #0
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fcab 	bl	80041d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2101      	movs	r1, #1
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fc8f 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 800488a:	4603      	mov	r3, r0
 800488c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x20e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2101      	movs	r1, #1
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fc84 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 80048a0:	4603      	mov	r3, r0
 80048a2:	0e9b      	lsrs	r3, r3, #26
 80048a4:	f003 021f 	and.w	r2, r3, #31
 80048a8:	e01e      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x24c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2101      	movs	r1, #1
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fc79 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80048c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80048d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80048d8:	2320      	movs	r3, #32
 80048da:	e004      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80048dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x264>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	0e9b      	lsrs	r3, r3, #26
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	e018      	b.n	8004932 <HAL_ADC_ConfigChannel+0x296>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004914:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800491c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004924:	2320      	movs	r3, #32
 8004926:	e004      	b.n	8004932 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800492c:	fab3 f383 	clz	r3, r3
 8004930:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004932:	429a      	cmp	r2, r3
 8004934:	d106      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	2101      	movs	r1, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fc48 	bl	80041d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2102      	movs	r1, #2
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fc2c 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 8004950:	4603      	mov	r3, r0
 8004952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x2d4>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2102      	movs	r1, #2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fc21 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 8004966:	4603      	mov	r3, r0
 8004968:	0e9b      	lsrs	r3, r3, #26
 800496a:	f003 021f 	and.w	r2, r3, #31
 800496e:	e01e      	b.n	80049ae <HAL_ADC_ConfigChannel+0x312>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2102      	movs	r1, #2
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fc16 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 800497c:	4603      	mov	r3, r0
 800497e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800498e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004996:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800499e:	2320      	movs	r3, #32
 80049a0:	e004      	b.n	80049ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80049a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d105      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x32a>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	0e9b      	lsrs	r3, r3, #26
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	e016      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x358>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80049d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80049de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80049e6:	2320      	movs	r3, #32
 80049e8:	e004      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80049ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ee:	fab3 f383 	clz	r3, r3
 80049f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d106      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2200      	movs	r2, #0
 80049fe:	2102      	movs	r1, #2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fbe7 	bl	80041d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fbcb 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x396>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2103      	movs	r1, #3
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fbc0 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	0e9b      	lsrs	r3, r3, #26
 8004a2c:	f003 021f 	and.w	r2, r3, #31
 8004a30:	e017      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x3c6>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2103      	movs	r1, #3
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fbb5 	bl	80041a8 <LL_ADC_GetOffsetChannel>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a44:	fa93 f3a3 	rbit	r3, r3
 8004a48:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a4c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004a54:	2320      	movs	r3, #32
 8004a56:	e003      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x3de>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	0e9b      	lsrs	r3, r3, #26
 8004a74:	f003 031f 	and.w	r3, r3, #31
 8004a78:	e011      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x402>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004a92:	2320      	movs	r3, #32
 8004a94:	e003      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d106      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2103      	movs	r1, #3
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fb92 	bl	80041d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fc71 	bl	800439c <LL_ADC_IsEnabled>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 813f 	bne.w	8004d40 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f7ff fbf2 	bl	80042b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a8e      	ldr	r2, [pc, #568]	; (8004d14 <HAL_ADC_ConfigChannel+0x678>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	f040 8130 	bne.w	8004d40 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x46c>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	0e9b      	lsrs	r3, r3, #26
 8004af6:	3301      	adds	r3, #1
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2b09      	cmp	r3, #9
 8004afe:	bf94      	ite	ls
 8004b00:	2301      	movls	r3, #1
 8004b02:	2300      	movhi	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e019      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x4a0>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004b20:	2320      	movs	r3, #32
 8004b22:	e003      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2b09      	cmp	r3, #9
 8004b34:	bf94      	ite	ls
 8004b36:	2301      	movls	r3, #1
 8004b38:	2300      	movhi	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d079      	beq.n	8004c34 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d107      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x4c0>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	0e9b      	lsrs	r3, r3, #26
 8004b52:	3301      	adds	r3, #1
 8004b54:	069b      	lsls	r3, r3, #26
 8004b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b5a:	e015      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x4ec>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b64:	fa93 f3a3 	rbit	r3, r3
 8004b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004b74:	2320      	movs	r3, #32
 8004b76:	e003      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	3301      	adds	r3, #1
 8004b82:	069b      	lsls	r3, r3, #26
 8004b84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x50c>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0e9b      	lsrs	r3, r3, #26
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba6:	e017      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x53c>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb0:	fa93 f3a3 	rbit	r3, r3
 8004bb4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	e003      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd8:	ea42 0103 	orr.w	r1, r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x562>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	0e9b      	lsrs	r3, r3, #26
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f003 021f 	and.w	r2, r3, #31
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	051b      	lsls	r3, r3, #20
 8004bfc:	e018      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x594>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	fa93 f3a3 	rbit	r3, r3
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004c16:	2320      	movs	r3, #32
 8004c18:	e003      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	3301      	adds	r3, #1
 8004c24:	f003 021f 	and.w	r2, r3, #31
 8004c28:	4613      	mov	r3, r2
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c30:	430b      	orrs	r3, r1
 8004c32:	e080      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d107      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x5b4>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	0e9b      	lsrs	r3, r3, #26
 8004c46:	3301      	adds	r3, #1
 8004c48:	069b      	lsls	r3, r3, #26
 8004c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c4e:	e015      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x5e0>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	fa93 f3a3 	rbit	r3, r3
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	e003      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3301      	adds	r3, #1
 8004c76:	069b      	lsls	r3, r3, #26
 8004c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x600>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	0e9b      	lsrs	r3, r3, #26
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	e017      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x630>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	fa93 f3a3 	rbit	r3, r3
 8004ca8:	61fb      	str	r3, [r7, #28]
  return result;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	e003      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	ea42 0103 	orr.w	r1, r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x65c>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0e9b      	lsrs	r3, r3, #26
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f003 021f 	and.w	r2, r3, #31
 8004ce8:	4613      	mov	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4413      	add	r3, r2
 8004cee:	3b1e      	subs	r3, #30
 8004cf0:	051b      	lsls	r3, r3, #20
 8004cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	e01d      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x698>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	fa93 f3a3 	rbit	r3, r3
 8004d04:	613b      	str	r3, [r7, #16]
  return result;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004d10:	2320      	movs	r3, #32
 8004d12:	e005      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x684>
 8004d14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 021f 	and.w	r2, r3, #31
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3b1e      	subs	r3, #30
 8004d2e:	051b      	lsls	r3, r3, #20
 8004d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d34:	430b      	orrs	r3, r1
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	6892      	ldr	r2, [r2, #8]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	f7ff fa91 	bl	8004262 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b3c      	ldr	r3, [pc, #240]	; (8004e38 <HAL_ADC_ConfigChannel+0x79c>)
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d06b      	beq.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d4c:	483b      	ldr	r0, [pc, #236]	; (8004e3c <HAL_ADC_ConfigChannel+0x7a0>)
 8004d4e:	f7ff f9f9 	bl	8004144 <LL_ADC_GetCommonPathInternalCh>
 8004d52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a39      	ldr	r2, [pc, #228]	; (8004e40 <HAL_ADC_ConfigChannel+0x7a4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d126      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d120      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a34      	ldr	r2, [pc, #208]	; (8004e44 <HAL_ADC_ConfigChannel+0x7a8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d156      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d7e:	4619      	mov	r1, r3
 8004d80:	482e      	ldr	r0, [pc, #184]	; (8004e3c <HAL_ADC_ConfigChannel+0x7a0>)
 8004d82:	f7ff f9cc 	bl	800411e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	099b      	lsrs	r3, r3, #6
 8004d8c:	4a2f      	ldr	r2, [pc, #188]	; (8004e4c <HAL_ADC_ConfigChannel+0x7b0>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	099a      	lsrs	r2, r3, #6
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d9e:	e002      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f9      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dac:	e03a      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a27      	ldr	r2, [pc, #156]	; (8004e50 <HAL_ADC_ConfigChannel+0x7b4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d113      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x744>
 8004db8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10d      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <HAL_ADC_ConfigChannel+0x7a8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d12a      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4818      	ldr	r0, [pc, #96]	; (8004e3c <HAL_ADC_ConfigChannel+0x7a0>)
 8004dda:	f7ff f9a0 	bl	800411e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dde:	e021      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_ADC_ConfigChannel+0x7b8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d11c      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <HAL_ADC_ConfigChannel+0x7a8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d111      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e08:	4619      	mov	r1, r3
 8004e0a:	480c      	ldr	r0, [pc, #48]	; (8004e3c <HAL_ADC_ConfigChannel+0x7a0>)
 8004e0c:	f7ff f987 	bl	800411e <LL_ADC_SetCommonPathInternalCh>
 8004e10:	e008      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e2c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	37d8      	adds	r7, #216	; 0xd8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	80080000 	.word	0x80080000
 8004e3c:	50040300 	.word	0x50040300
 8004e40:	c7520000 	.word	0xc7520000
 8004e44:	50040000 	.word	0x50040000
 8004e48:	20000054 	.word	0x20000054
 8004e4c:	053e2d63 	.word	0x053e2d63
 8004e50:	cb840000 	.word	0xcb840000
 8004e54:	80000001 	.word	0x80000001

08004e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <__NVIC_SetPriorityGrouping+0x44>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e74:	4013      	ands	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e8a:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <__NVIC_SetPriorityGrouping+0x44>)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	60d3      	str	r3, [r2, #12]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ea4:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 0307 	and.w	r3, r3, #7
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	e000ed00 	.word	0xe000ed00

08004ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	db0b      	blt.n	8004ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	f003 021f 	and.w	r2, r3, #31
 8004ed4:	4907      	ldr	r1, [pc, #28]	; (8004ef4 <__NVIC_EnableIRQ+0x38>)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2001      	movs	r0, #1
 8004ede:	fa00 f202 	lsl.w	r2, r0, r2
 8004ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	e000e100 	.word	0xe000e100

08004ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	6039      	str	r1, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	db0a      	blt.n	8004f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	490c      	ldr	r1, [pc, #48]	; (8004f44 <__NVIC_SetPriority+0x4c>)
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f20:	e00a      	b.n	8004f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	4908      	ldr	r1, [pc, #32]	; (8004f48 <__NVIC_SetPriority+0x50>)
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	0112      	lsls	r2, r2, #4
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	440b      	add	r3, r1
 8004f36:	761a      	strb	r2, [r3, #24]
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	e000e100 	.word	0xe000e100
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b089      	sub	sp, #36	; 0x24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f1c3 0307 	rsb	r3, r3, #7
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	bf28      	it	cs
 8004f6a:	2304      	movcs	r3, #4
 8004f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	3304      	adds	r3, #4
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d902      	bls.n	8004f7c <NVIC_EncodePriority+0x30>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3b03      	subs	r3, #3
 8004f7a:	e000      	b.n	8004f7e <NVIC_EncodePriority+0x32>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	401a      	ands	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	43d9      	mvns	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa4:	4313      	orrs	r3, r2
         );
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3724      	adds	r7, #36	; 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fc4:	d301      	bcc.n	8004fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e00f      	b.n	8004fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fca:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <SysTick_Config+0x40>)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fd2:	210f      	movs	r1, #15
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd8:	f7ff ff8e 	bl	8004ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <SysTick_Config+0x40>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fe2:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <SysTick_Config+0x40>)
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	e000e010 	.word	0xe000e010

08004ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff29 	bl	8004e58 <__NVIC_SetPriorityGrouping>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	4603      	mov	r3, r0
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005020:	f7ff ff3e 	bl	8004ea0 <__NVIC_GetPriorityGrouping>
 8005024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	6978      	ldr	r0, [r7, #20]
 800502c:	f7ff ff8e 	bl	8004f4c <NVIC_EncodePriority>
 8005030:	4602      	mov	r2, r0
 8005032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005036:	4611      	mov	r1, r2
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ff5d 	bl	8004ef8 <__NVIC_SetPriority>
}
 800503e:	bf00      	nop
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff31 	bl	8004ebc <__NVIC_EnableIRQ>
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff ffa2 	bl	8004fb4 <SysTick_Config>
 8005070:	4603      	mov	r3, r0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e014      	b.n	80050b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	791b      	ldrb	r3, [r3, #4]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d105      	bne.n	80050a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7fe fd5d 	bl	8003b5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d4:	d120      	bne.n	8005118 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e4:	d118      	bne.n	8005118 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2204      	movs	r2, #4
 80050ea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	f043 0201 	orr.w	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005100:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005110:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f82d 	bl	8005172 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005126:	d120      	bne.n	800516a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005136:	d118      	bne.n	800516a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2204      	movs	r2, #4
 800513c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f043 0202 	orr.w	r2, r3, #2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005162:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f928 	bl	80053ba <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b088      	sub	sp, #32
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	795b      	ldrb	r3, [r3, #5]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_DAC_ConfigChannel+0x1c>
 800519e:	2302      	movs	r3, #2
 80051a0:	e107      	b.n	80053b2 <HAL_DAC_ConfigChannel+0x22c>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2202      	movs	r2, #2
 80051ac:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d174      	bne.n	80052a0 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80051b6:	f7fe ff6f 	bl	8004098 <HAL_GetTick>
 80051ba:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d134      	bne.n	800522c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051c2:	e011      	b.n	80051e8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051c4:	f7fe ff68 	bl	8004098 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d90a      	bls.n	80051e8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f043 0208 	orr.w	r2, r3, #8
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2203      	movs	r2, #3
 80051e2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e0e4      	b.n	80053b2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80051f6:	2001      	movs	r0, #1
 80051f8:	f7fe ff5a 	bl	80040b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	6992      	ldr	r2, [r2, #24]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
 8005206:	e01e      	b.n	8005246 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005208:	f7fe ff46 	bl	8004098 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	d90a      	bls.n	800522c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f043 0208 	orr.w	r2, r3, #8
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2203      	movs	r2, #3
 8005226:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e0c2      	b.n	80053b2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005232:	2b00      	cmp	r3, #0
 8005234:	dbe8      	blt.n	8005208 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8005236:	2001      	movs	r0, #1
 8005238:	f7fe ff3a 	bl	80040b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	6992      	ldr	r2, [r2, #24]
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	43db      	mvns	r3, r3
 800525c:	ea02 0103 	and.w	r1, r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	409a      	lsls	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	21ff      	movs	r1, #255	; 0xff
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	43db      	mvns	r3, r3
 8005288:	ea02 0103 	and.w	r1, r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	409a      	lsls	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d11d      	bne.n	80052e4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	221f      	movs	r2, #31
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4013      	ands	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	4313      	orrs	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2207      	movs	r2, #7
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	431a      	orrs	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6819      	ldr	r1, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43da      	mvns	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	400a      	ands	r2, r1
 8005348:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	f640 72fc 	movw	r2, #4092	; 0xffc
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4013      	ands	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6819      	ldr	r1, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	22c0      	movs	r2, #192	; 0xc0
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43da      	mvns	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	400a      	ands	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053de:	e154      	b.n	800568a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	2101      	movs	r1, #1
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	fa01 f303 	lsl.w	r3, r1, r3
 80053ec:	4013      	ands	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 8146 	beq.w	8005684 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d00b      	beq.n	8005418 <HAL_GPIO_Init+0x48>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d007      	beq.n	8005418 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800540c:	2b11      	cmp	r3, #17
 800540e:	d003      	beq.n	8005418 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b12      	cmp	r3, #18
 8005416:	d130      	bne.n	800547a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	2203      	movs	r2, #3
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	43db      	mvns	r3, r3
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4013      	ands	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800544e:	2201      	movs	r2, #1
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4013      	ands	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	091b      	lsrs	r3, r3, #4
 8005464:	f003 0201 	and.w	r2, r3, #1
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	005b      	lsls	r3, r3, #1
 8005484:	2203      	movs	r2, #3
 8005486:	fa02 f303 	lsl.w	r3, r2, r3
 800548a:	43db      	mvns	r3, r3
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4013      	ands	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d003      	beq.n	80054ba <HAL_GPIO_Init+0xea>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b12      	cmp	r3, #18
 80054b8:	d123      	bne.n	8005502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	08da      	lsrs	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3208      	adds	r2, #8
 80054c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	220f      	movs	r2, #15
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	08da      	lsrs	r2, r3, #3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3208      	adds	r2, #8
 80054fc:	6939      	ldr	r1, [r7, #16]
 80054fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	2203      	movs	r2, #3
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43db      	mvns	r3, r3
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4013      	ands	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0203 	and.w	r2, r3, #3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80a0 	beq.w	8005684 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005544:	4b58      	ldr	r3, [pc, #352]	; (80056a8 <HAL_GPIO_Init+0x2d8>)
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	4a57      	ldr	r2, [pc, #348]	; (80056a8 <HAL_GPIO_Init+0x2d8>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6613      	str	r3, [r2, #96]	; 0x60
 8005550:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <HAL_GPIO_Init+0x2d8>)
 8005552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800555c:	4a53      	ldr	r2, [pc, #332]	; (80056ac <HAL_GPIO_Init+0x2dc>)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	089b      	lsrs	r3, r3, #2
 8005562:	3302      	adds	r3, #2
 8005564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	220f      	movs	r2, #15
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4013      	ands	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005586:	d019      	beq.n	80055bc <HAL_GPIO_Init+0x1ec>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a49      	ldr	r2, [pc, #292]	; (80056b0 <HAL_GPIO_Init+0x2e0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_GPIO_Init+0x1e8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a48      	ldr	r2, [pc, #288]	; (80056b4 <HAL_GPIO_Init+0x2e4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00d      	beq.n	80055b4 <HAL_GPIO_Init+0x1e4>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a47      	ldr	r2, [pc, #284]	; (80056b8 <HAL_GPIO_Init+0x2e8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <HAL_GPIO_Init+0x1e0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a46      	ldr	r2, [pc, #280]	; (80056bc <HAL_GPIO_Init+0x2ec>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d101      	bne.n	80055ac <HAL_GPIO_Init+0x1dc>
 80055a8:	2304      	movs	r3, #4
 80055aa:	e008      	b.n	80055be <HAL_GPIO_Init+0x1ee>
 80055ac:	2307      	movs	r3, #7
 80055ae:	e006      	b.n	80055be <HAL_GPIO_Init+0x1ee>
 80055b0:	2303      	movs	r3, #3
 80055b2:	e004      	b.n	80055be <HAL_GPIO_Init+0x1ee>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e002      	b.n	80055be <HAL_GPIO_Init+0x1ee>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_GPIO_Init+0x1ee>
 80055bc:	2300      	movs	r3, #0
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	f002 0203 	and.w	r2, r2, #3
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	4093      	lsls	r3, r2
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055ce:	4937      	ldr	r1, [pc, #220]	; (80056ac <HAL_GPIO_Init+0x2dc>)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	3302      	adds	r3, #2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80055dc:	4b38      	ldr	r3, [pc, #224]	; (80056c0 <HAL_GPIO_Init+0x2f0>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005600:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <HAL_GPIO_Init+0x2f0>)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005606:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <HAL_GPIO_Init+0x2f0>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	43db      	mvns	r3, r3
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4013      	ands	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800562a:	4a25      	ldr	r2, [pc, #148]	; (80056c0 <HAL_GPIO_Init+0x2f0>)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005630:	4b23      	ldr	r3, [pc, #140]	; (80056c0 <HAL_GPIO_Init+0x2f0>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	43db      	mvns	r3, r3
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4013      	ands	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005654:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <HAL_GPIO_Init+0x2f0>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800565a:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <HAL_GPIO_Init+0x2f0>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	43db      	mvns	r3, r3
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4013      	ands	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800567e:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <HAL_GPIO_Init+0x2f0>)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3301      	adds	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f aea3 	bne.w	80053e0 <HAL_GPIO_Init+0x10>
  }
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40010000 	.word	0x40010000
 80056b0:	48000400 	.word	0x48000400
 80056b4:	48000800 	.word	0x48000800
 80056b8:	48000c00 	.word	0x48000c00
 80056bc:	48001000 	.word	0x48001000
 80056c0:	40010400 	.word	0x40010400

080056c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	807b      	strh	r3, [r7, #2]
 80056d0:	4613      	mov	r3, r2
 80056d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056d4:	787b      	ldrb	r3, [r7, #1]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056da:	887a      	ldrh	r2, [r7, #2]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056e0:	e002      	b.n	80056e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e081      	b.n	800580a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fe fa64 	bl	8003be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2224      	movs	r2, #36	; 0x24
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d107      	bne.n	800576e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800576a:	609a      	str	r2, [r3, #8]
 800576c:	e006      	b.n	800577c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800577a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d104      	bne.n	800578e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800578c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800579c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	ea42 0103 	orr.w	r1, r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	021a      	lsls	r2, r3, #8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69d9      	ldr	r1, [r3, #28]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1a      	ldr	r2, [r3, #32]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	4608      	mov	r0, r1
 800581e:	4611      	mov	r1, r2
 8005820:	461a      	mov	r2, r3
 8005822:	4603      	mov	r3, r0
 8005824:	817b      	strh	r3, [r7, #10]
 8005826:	460b      	mov	r3, r1
 8005828:	813b      	strh	r3, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	f040 80f9 	bne.w	8005a2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_I2C_Mem_Write+0x34>
 8005842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0ed      	b.n	8005a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_I2C_Mem_Write+0x4e>
 800585e:	2302      	movs	r3, #2
 8005860:	e0e6      	b.n	8005a30 <HAL_I2C_Mem_Write+0x21c>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800586a:	f7fe fc15 	bl	8004098 <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2319      	movs	r3, #25
 8005876:	2201      	movs	r2, #1
 8005878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f955 	bl	8005b2c <I2C_WaitOnFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0d1      	b.n	8005a30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2221      	movs	r2, #33	; 0x21
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2240      	movs	r2, #64	; 0x40
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058b4:	88f8      	ldrh	r0, [r7, #6]
 80058b6:	893a      	ldrh	r2, [r7, #8]
 80058b8:	8979      	ldrh	r1, [r7, #10]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	4603      	mov	r3, r0
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f8b9 	bl	8005a3c <I2C_RequestMemoryWrite>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0a9      	b.n	8005a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2bff      	cmp	r3, #255	; 0xff
 80058e4:	d90e      	bls.n	8005904 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	22ff      	movs	r2, #255	; 0xff
 80058ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	8979      	ldrh	r1, [r7, #10]
 80058f4:	2300      	movs	r3, #0
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fa37 	bl	8005d70 <I2C_TransferConfig>
 8005902:	e00f      	b.n	8005924 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005912:	b2da      	uxtb	r2, r3
 8005914:	8979      	ldrh	r1, [r7, #10]
 8005916:	2300      	movs	r3, #0
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fa26 	bl	8005d70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f93f 	bl	8005bac <I2C_WaitOnTXISFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e07b      	b.n	8005a30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	781a      	ldrb	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d034      	beq.n	80059dc <HAL_I2C_Mem_Write+0x1c8>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005976:	2b00      	cmp	r3, #0
 8005978:	d130      	bne.n	80059dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	2200      	movs	r2, #0
 8005982:	2180      	movs	r1, #128	; 0x80
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f8d1 	bl	8005b2c <I2C_WaitOnFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e04d      	b.n	8005a30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	2bff      	cmp	r3, #255	; 0xff
 800599c:	d90e      	bls.n	80059bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	8979      	ldrh	r1, [r7, #10]
 80059ac:	2300      	movs	r3, #0
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f9db 	bl	8005d70 <I2C_TransferConfig>
 80059ba:	e00f      	b.n	80059dc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	8979      	ldrh	r1, [r7, #10]
 80059ce:	2300      	movs	r3, #0
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f9ca 	bl	8005d70 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d19e      	bne.n	8005924 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f91e 	bl	8005c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e01a      	b.n	8005a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2220      	movs	r2, #32
 8005a00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6859      	ldr	r1, [r3, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <HAL_I2C_Mem_Write+0x224>)
 8005a0e:	400b      	ands	r3, r1
 8005a10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e000      	b.n	8005a30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a2e:	2302      	movs	r3, #2
  }
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	fe00e800 	.word	0xfe00e800

08005a3c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	4608      	mov	r0, r1
 8005a46:	4611      	mov	r1, r2
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	817b      	strh	r3, [r7, #10]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	813b      	strh	r3, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	8979      	ldrh	r1, [r7, #10]
 8005a5c:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <I2C_RequestMemoryWrite+0xa4>)
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f983 	bl	8005d70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	69b9      	ldr	r1, [r7, #24]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f89c 	bl	8005bac <I2C_WaitOnTXISFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e02c      	b.n	8005ad8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d105      	bne.n	8005a90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a84:	893b      	ldrh	r3, [r7, #8]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8005a8e:	e015      	b.n	8005abc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a90:	893b      	ldrh	r3, [r7, #8]
 8005a92:	0a1b      	lsrs	r3, r3, #8
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	69b9      	ldr	r1, [r7, #24]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f882 	bl	8005bac <I2C_WaitOnTXISFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e012      	b.n	8005ad8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab2:	893b      	ldrh	r3, [r7, #8]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2180      	movs	r1, #128	; 0x80
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f830 	bl	8005b2c <I2C_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	80002000 	.word	0x80002000

08005ae4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d103      	bne.n	8005b02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2200      	movs	r2, #0
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d007      	beq.n	8005b20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	619a      	str	r2, [r3, #24]
  }
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b3c:	e022      	b.n	8005b84 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b44:	d01e      	beq.n	8005b84 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b46:	f7fe faa7 	bl	8004098 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d302      	bcc.n	8005b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d113      	bne.n	8005b84 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b60:	f043 0220 	orr.w	r2, r3, #32
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e00f      	b.n	8005ba4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d0cd      	beq.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bb8:	e02c      	b.n	8005c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f870 	bl	8005ca4 <I2C_IsAcknowledgeFailed>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e02a      	b.n	8005c24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd4:	d01e      	beq.n	8005c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fe fa5f 	bl	8004098 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d113      	bne.n	8005c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e007      	b.n	8005c24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d1cb      	bne.n	8005bba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c38:	e028      	b.n	8005c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f830 	bl	8005ca4 <I2C_IsAcknowledgeFailed>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e026      	b.n	8005c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4e:	f7fe fa23 	bl	8004098 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d302      	bcc.n	8005c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d113      	bne.n	8005c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	f043 0220 	orr.w	r2, r3, #32
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e007      	b.n	8005c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d1cf      	bne.n	8005c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d151      	bne.n	8005d62 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cbe:	e022      	b.n	8005d06 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cc6:	d01e      	beq.n	8005d06 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc8:	f7fe f9e6 	bl	8004098 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <I2C_IsAcknowledgeFailed+0x3a>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d113      	bne.n	8005d06 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e02e      	b.n	8005d64 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d1d5      	bne.n	8005cc0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2210      	movs	r2, #16
 8005d1a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2220      	movs	r2, #32
 8005d22:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fedd 	bl	8005ae4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6859      	ldr	r1, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <I2C_IsAcknowledgeFailed+0xc8>)
 8005d36:	400b      	ands	r3, r1
 8005d38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3e:	f043 0204 	orr.w	r2, r3, #4
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	fe00e800 	.word	0xfe00e800

08005d70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	817b      	strh	r3, [r7, #10]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	0d5b      	lsrs	r3, r3, #21
 8005d8c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d90:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <I2C_TransferConfig+0x58>)
 8005d92:	430b      	orrs	r3, r1
 8005d94:	43db      	mvns	r3, r3
 8005d96:	ea02 0103 	and.w	r1, r2, r3
 8005d9a:	897b      	ldrh	r3, [r7, #10]
 8005d9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005da0:	7a7b      	ldrb	r3, [r7, #9]
 8005da2:	041b      	lsls	r3, r3, #16
 8005da4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	431a      	orrs	r2, r3
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	03ff63ff 	.word	0x03ff63ff

08005dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d138      	bne.n	8005e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e032      	b.n	8005e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	; 0x24
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6819      	ldr	r1, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b20      	cmp	r3, #32
 8005e76:	d139      	bne.n	8005eec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e033      	b.n	8005eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2224      	movs	r2, #36	; 0x24
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005eb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e000      	b.n	8005eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f04:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f08:	4a0a      	ldr	r2, [pc, #40]	; (8005f34 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6613      	str	r3, [r2, #96]	; 0x60
 8005f10:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	4905      	ldr	r1, [pc, #20]	; (8005f38 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	604b      	str	r3, [r1, #4]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40021000 	.word	0x40021000
 8005f38:	40010000 	.word	0x40010000

08005f3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f3e:	b08b      	sub	sp, #44	; 0x2c
 8005f40:	af06      	add	r7, sp, #24
 8005f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e104      	b.n	8006158 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fd ff5a 	bl	8003e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f002 f930 	bl	80081da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	687e      	ldr	r6, [r7, #4]
 8005f82:	466d      	mov	r5, sp
 8005f84:	f106 0410 	add.w	r4, r6, #16
 8005f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	602b      	str	r3, [r5, #0]
 8005f90:	1d33      	adds	r3, r6, #4
 8005f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f94:	6838      	ldr	r0, [r7, #0]
 8005f96:	f002 f90f 	bl	80081b8 <USB_CoreInit>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0d5      	b.n	8006158 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f002 f92c 	bl	8008210 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e04c      	b.n	8006058 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	440b      	add	r3, r1
 8005fce:	3301      	adds	r3, #1
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	440b      	add	r3, r1
 8005fe4:	7bfa      	ldrb	r2, [r7, #15]
 8005fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fe8:	7bfa      	ldrb	r2, [r7, #15]
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	b298      	uxth	r0, r3
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	00db      	lsls	r3, r3, #3
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3336      	adds	r3, #54	; 0x36
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	3303      	adds	r3, #3
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006016:	7bfa      	ldrb	r2, [r7, #15]
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	440b      	add	r3, r1
 8006024:	3338      	adds	r3, #56	; 0x38
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800602a:	7bfa      	ldrb	r2, [r7, #15]
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	440b      	add	r3, r1
 8006038:	333c      	adds	r3, #60	; 0x3c
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800603e:	7bfa      	ldrb	r2, [r7, #15]
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	440b      	add	r3, r1
 800604c:	3340      	adds	r3, #64	; 0x40
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	3301      	adds	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
 8006058:	7bfa      	ldrb	r2, [r7, #15]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	429a      	cmp	r2, r3
 8006060:	d3ad      	bcc.n	8005fbe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
 8006066:	e044      	b.n	80060f2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006068:	7bfa      	ldrb	r2, [r7, #15]
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	440b      	add	r3, r1
 8006076:	f203 1369 	addw	r3, r3, #361	; 0x169
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	440b      	add	r3, r1
 800608c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006090:	7bfa      	ldrb	r2, [r7, #15]
 8006092:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006094:	7bfa      	ldrb	r2, [r7, #15]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	440b      	add	r3, r1
 80060a2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060aa:	7bfa      	ldrb	r2, [r7, #15]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	440b      	add	r3, r1
 80060b8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80060c0:	7bfa      	ldrb	r2, [r7, #15]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	440b      	add	r3, r1
 80060ce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	440b      	add	r3, r1
 80060e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	3301      	adds	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d3b5      	bcc.n	8006068 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	687e      	ldr	r6, [r7, #4]
 8006104:	466d      	mov	r5, sp
 8006106:	f106 0410 	add.w	r4, r6, #16
 800610a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800610c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	602b      	str	r3, [r5, #0]
 8006112:	1d33      	adds	r3, r6, #4
 8006114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006116:	6838      	ldr	r0, [r7, #0]
 8006118:	f002 f887 	bl	800822a <USB_DevInit>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e014      	b.n	8006158 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d102      	bne.n	800614c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f80a 	bl	8006160 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f002 f88b 	bl	800826c <USB_DevDisconnect>

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006160 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006184:	b29b      	uxth	r3, r3
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006198:	b29b      	uxth	r3, r3
 800619a:	f043 0302 	orr.w	r3, r3, #2
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <HAL_PWREx_GetVoltageRange+0x18>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40007000 	.word	0x40007000

080061d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061de:	d130      	bne.n	8006242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061e0:	4b23      	ldr	r3, [pc, #140]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ec:	d038      	beq.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061f6:	4a1e      	ldr	r2, [pc, #120]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2232      	movs	r2, #50	; 0x32
 8006204:	fb02 f303 	mul.w	r3, r2, r3
 8006208:	4a1b      	ldr	r2, [pc, #108]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	0c9b      	lsrs	r3, r3, #18
 8006210:	3301      	adds	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006214:	e002      	b.n	800621c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b01      	subs	r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800621c:	4b14      	ldr	r3, [pc, #80]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d102      	bne.n	8006230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f2      	bne.n	8006216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d110      	bne.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e00f      	b.n	8006262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800624a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624e:	d007      	beq.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006258:	4a05      	ldr	r2, [pc, #20]	; (8006270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800625a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800625e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40007000 	.word	0x40007000
 8006274:	20000054 	.word	0x20000054
 8006278:	431bde83 	.word	0x431bde83

0800627c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	f000 bc11 	b.w	8006ab2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006290:	4ba0      	ldr	r3, [pc, #640]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 030c 	and.w	r3, r3, #12
 8006298:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800629a:	4b9e      	ldr	r3, [pc, #632]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80e4 	beq.w	800647a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <HAL_RCC_OscConfig+0x4c>
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	2b0c      	cmp	r3, #12
 80062bc:	f040 808b 	bne.w	80063d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	f040 8087 	bne.w	80063d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062c8:	4b92      	ldr	r3, [pc, #584]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_OscConfig+0x64>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e3e8      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1a      	ldr	r2, [r3, #32]
 80062e4:	4b8b      	ldr	r3, [pc, #556]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <HAL_RCC_OscConfig+0x7e>
 80062f0:	4b88      	ldr	r3, [pc, #544]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f8:	e005      	b.n	8006306 <HAL_RCC_OscConfig+0x8a>
 80062fa:	4b86      	ldr	r3, [pc, #536]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80062fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006306:	4293      	cmp	r3, r2
 8006308:	d223      	bcs.n	8006352 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fd76 	bl	8006e00 <RCC_SetFlashLatencyFromMSIRange>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e3c9      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800631e:	4b7d      	ldr	r3, [pc, #500]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a7c      	ldr	r2, [pc, #496]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006324:	f043 0308 	orr.w	r3, r3, #8
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4b7a      	ldr	r3, [pc, #488]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	4977      	ldr	r1, [pc, #476]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800633c:	4b75      	ldr	r3, [pc, #468]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	4972      	ldr	r1, [pc, #456]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800634c:	4313      	orrs	r3, r2
 800634e:	604b      	str	r3, [r1, #4]
 8006350:	e025      	b.n	800639e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006352:	4b70      	ldr	r3, [pc, #448]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a6f      	ldr	r2, [pc, #444]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006358:	f043 0308 	orr.w	r3, r3, #8
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	4b6d      	ldr	r3, [pc, #436]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	496a      	ldr	r1, [pc, #424]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800636c:	4313      	orrs	r3, r2
 800636e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006370:	4b68      	ldr	r3, [pc, #416]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	4965      	ldr	r1, [pc, #404]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006380:	4313      	orrs	r3, r2
 8006382:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fd36 	bl	8006e00 <RCC_SetFlashLatencyFromMSIRange>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e389      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800639e:	f000 fca3 	bl	8006ce8 <HAL_RCC_GetSysClockFreq>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b5b      	ldr	r3, [pc, #364]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	495a      	ldr	r1, [pc, #360]	; (8006518 <HAL_RCC_OscConfig+0x29c>)
 80063b0:	5ccb      	ldrb	r3, [r1, r3]
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ba:	4a58      	ldr	r2, [pc, #352]	; (800651c <HAL_RCC_OscConfig+0x2a0>)
 80063bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063be:	4b58      	ldr	r3, [pc, #352]	; (8006520 <HAL_RCC_OscConfig+0x2a4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fd fe18 	bl	8003ff8 <HAL_InitTick>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d052      	beq.n	8006478 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	e36d      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d032      	beq.n	8006444 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063de:	4b4d      	ldr	r3, [pc, #308]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a4c      	ldr	r2, [pc, #304]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80063e4:	f043 0301 	orr.w	r3, r3, #1
 80063e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063ea:	f7fd fe55 	bl	8004098 <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063f2:	f7fd fe51 	bl	8004098 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e356      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006404:	4b43      	ldr	r3, [pc, #268]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0f0      	beq.n	80063f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006410:	4b40      	ldr	r3, [pc, #256]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a3f      	ldr	r2, [pc, #252]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006416:	f043 0308 	orr.w	r3, r3, #8
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	4b3d      	ldr	r3, [pc, #244]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	493a      	ldr	r1, [pc, #232]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800642e:	4b39      	ldr	r3, [pc, #228]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	4935      	ldr	r1, [pc, #212]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800643e:	4313      	orrs	r3, r2
 8006440:	604b      	str	r3, [r1, #4]
 8006442:	e01a      	b.n	800647a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006444:	4b33      	ldr	r3, [pc, #204]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a32      	ldr	r2, [pc, #200]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006450:	f7fd fe22 	bl	8004098 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006458:	f7fd fe1e 	bl	8004098 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e323      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800646a:	4b2a      	ldr	r3, [pc, #168]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0x1dc>
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006478:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d073      	beq.n	800656e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d005      	beq.n	8006498 <HAL_RCC_OscConfig+0x21c>
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b0c      	cmp	r3, #12
 8006490:	d10e      	bne.n	80064b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b03      	cmp	r3, #3
 8006496:	d10b      	bne.n	80064b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006498:	4b1e      	ldr	r3, [pc, #120]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d063      	beq.n	800656c <HAL_RCC_OscConfig+0x2f0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d15f      	bne.n	800656c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e300      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b8:	d106      	bne.n	80064c8 <HAL_RCC_OscConfig+0x24c>
 80064ba:	4b16      	ldr	r3, [pc, #88]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a15      	ldr	r2, [pc, #84]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e01d      	b.n	8006504 <HAL_RCC_OscConfig+0x288>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064d0:	d10c      	bne.n	80064ec <HAL_RCC_OscConfig+0x270>
 80064d2:	4b10      	ldr	r3, [pc, #64]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a0f      	ldr	r2, [pc, #60]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a0c      	ldr	r2, [pc, #48]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e00b      	b.n	8006504 <HAL_RCC_OscConfig+0x288>
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a08      	ldr	r2, [pc, #32]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a05      	ldr	r2, [pc, #20]	; (8006514 <HAL_RCC_OscConfig+0x298>)
 80064fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fd fdc4 	bl	8004098 <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006512:	e010      	b.n	8006536 <HAL_RCC_OscConfig+0x2ba>
 8006514:	40021000 	.word	0x40021000
 8006518:	0800993c 	.word	0x0800993c
 800651c:	20000054 	.word	0x20000054
 8006520:	20000058 	.word	0x20000058
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006524:	f7fd fdb8 	bl	8004098 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b64      	cmp	r3, #100	; 0x64
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e2bd      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006536:	4baf      	ldr	r3, [pc, #700]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f0      	beq.n	8006524 <HAL_RCC_OscConfig+0x2a8>
 8006542:	e014      	b.n	800656e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fd fda8 	bl	8004098 <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800654c:	f7fd fda4 	bl	8004098 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b64      	cmp	r3, #100	; 0x64
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e2a9      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800655e:	4ba5      	ldr	r3, [pc, #660]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1f0      	bne.n	800654c <HAL_RCC_OscConfig+0x2d0>
 800656a:	e000      	b.n	800656e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d060      	beq.n	800663c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2b04      	cmp	r3, #4
 800657e:	d005      	beq.n	800658c <HAL_RCC_OscConfig+0x310>
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b0c      	cmp	r3, #12
 8006584:	d119      	bne.n	80065ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d116      	bne.n	80065ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800658c:	4b99      	ldr	r3, [pc, #612]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_RCC_OscConfig+0x328>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e286      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a4:	4b93      	ldr	r3, [pc, #588]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	061b      	lsls	r3, r3, #24
 80065b2:	4990      	ldr	r1, [pc, #576]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065b8:	e040      	b.n	800663c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d023      	beq.n	800660a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065c2:	4b8c      	ldr	r3, [pc, #560]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a8b      	ldr	r2, [pc, #556]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80065c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ce:	f7fd fd63 	bl	8004098 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d6:	f7fd fd5f 	bl	8004098 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e264      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065e8:	4b82      	ldr	r3, [pc, #520]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d0f0      	beq.n	80065d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f4:	4b7f      	ldr	r3, [pc, #508]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	497c      	ldr	r1, [pc, #496]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
 8006608:	e018      	b.n	800663c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800660a:	4b7a      	ldr	r3, [pc, #488]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a79      	ldr	r2, [pc, #484]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006616:	f7fd fd3f 	bl	8004098 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800661e:	f7fd fd3b 	bl	8004098 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e240      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006630:	4b70      	ldr	r3, [pc, #448]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f0      	bne.n	800661e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d03c      	beq.n	80066c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01c      	beq.n	800668a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006650:	4b68      	ldr	r3, [pc, #416]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006656:	4a67      	ldr	r2, [pc, #412]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fd fd1a 	bl	8004098 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006668:	f7fd fd16 	bl	8004098 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e21b      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800667a:	4b5e      	ldr	r3, [pc, #376]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 800667c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0ef      	beq.n	8006668 <HAL_RCC_OscConfig+0x3ec>
 8006688:	e01b      	b.n	80066c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800668a:	4b5a      	ldr	r3, [pc, #360]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 800668c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006690:	4a58      	ldr	r2, [pc, #352]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006692:	f023 0301 	bic.w	r3, r3, #1
 8006696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800669a:	f7fd fcfd 	bl	8004098 <HAL_GetTick>
 800669e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066a0:	e008      	b.n	80066b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066a2:	f7fd fcf9 	bl	8004098 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e1fe      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066b4:	4b4f      	ldr	r3, [pc, #316]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80066b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1ef      	bne.n	80066a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 80a6 	beq.w	800681c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d0:	2300      	movs	r3, #0
 80066d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066d4:	4b47      	ldr	r3, [pc, #284]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80066d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10d      	bne.n	80066fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e0:	4b44      	ldr	r3, [pc, #272]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	4a43      	ldr	r2, [pc, #268]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80066e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ea:	6593      	str	r3, [r2, #88]	; 0x58
 80066ec:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80066ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f8:	2301      	movs	r3, #1
 80066fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066fc:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <HAL_RCC_OscConfig+0x57c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d118      	bne.n	800673a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006708:	4b3b      	ldr	r3, [pc, #236]	; (80067f8 <HAL_RCC_OscConfig+0x57c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a3a      	ldr	r2, [pc, #232]	; (80067f8 <HAL_RCC_OscConfig+0x57c>)
 800670e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006714:	f7fd fcc0 	bl	8004098 <HAL_GetTick>
 8006718:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800671a:	e008      	b.n	800672e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671c:	f7fd fcbc 	bl	8004098 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e1c1      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800672e:	4b32      	ldr	r3, [pc, #200]	; (80067f8 <HAL_RCC_OscConfig+0x57c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0f0      	beq.n	800671c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d108      	bne.n	8006754 <HAL_RCC_OscConfig+0x4d8>
 8006742:	4b2c      	ldr	r3, [pc, #176]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006748:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006752:	e024      	b.n	800679e <HAL_RCC_OscConfig+0x522>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b05      	cmp	r3, #5
 800675a:	d110      	bne.n	800677e <HAL_RCC_OscConfig+0x502>
 800675c:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006762:	4a24      	ldr	r2, [pc, #144]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006764:	f043 0304 	orr.w	r3, r3, #4
 8006768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800676c:	4b21      	ldr	r3, [pc, #132]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006772:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800677c:	e00f      	b.n	800679e <HAL_RCC_OscConfig+0x522>
 800677e:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006784:	4a1b      	ldr	r2, [pc, #108]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800678e:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 8006796:	f023 0304 	bic.w	r3, r3, #4
 800679a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d016      	beq.n	80067d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a6:	f7fd fc77 	bl	8004098 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ac:	e00a      	b.n	80067c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ae:	f7fd fc73 	bl	8004098 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067bc:	4293      	cmp	r3, r2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e176      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c4:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <HAL_RCC_OscConfig+0x578>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0ed      	beq.n	80067ae <HAL_RCC_OscConfig+0x532>
 80067d2:	e01a      	b.n	800680a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d4:	f7fd fc60 	bl	8004098 <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067da:	e00f      	b.n	80067fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067dc:	f7fd fc5c 	bl	8004098 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d906      	bls.n	80067fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e15f      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
 80067f2:	bf00      	nop
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067fc:	4baa      	ldr	r3, [pc, #680]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80067fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e8      	bne.n	80067dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800680a:	7ffb      	ldrb	r3, [r7, #31]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d105      	bne.n	800681c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006810:	4ba5      	ldr	r3, [pc, #660]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006814:	4aa4      	ldr	r2, [pc, #656]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800681a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d03c      	beq.n	80068a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01c      	beq.n	800686a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006830:	4b9d      	ldr	r3, [pc, #628]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006836:	4a9c      	ldr	r2, [pc, #624]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006840:	f7fd fc2a 	bl	8004098 <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006848:	f7fd fc26 	bl	8004098 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e12b      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800685a:	4b93      	ldr	r3, [pc, #588]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 800685c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ef      	beq.n	8006848 <HAL_RCC_OscConfig+0x5cc>
 8006868:	e01b      	b.n	80068a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800686a:	4b8f      	ldr	r3, [pc, #572]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 800686c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006870:	4a8d      	ldr	r2, [pc, #564]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687a:	f7fd fc0d 	bl	8004098 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006882:	f7fd fc09 	bl	8004098 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e10e      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006894:	4b84      	ldr	r3, [pc, #528]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1ef      	bne.n	8006882 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8102 	beq.w	8006ab0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	f040 80c5 	bne.w	8006a40 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068b6:	4b7c      	ldr	r3, [pc, #496]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f003 0203 	and.w	r2, r3, #3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d12c      	bne.n	8006924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	3b01      	subs	r3, #1
 80068d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d8:	429a      	cmp	r2, r3
 80068da:	d123      	bne.n	8006924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d11b      	bne.n	8006924 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d113      	bne.n	8006924 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	3b01      	subs	r3, #1
 800690a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800690c:	429a      	cmp	r2, r3
 800690e:	d109      	bne.n	8006924 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	3b01      	subs	r3, #1
 800691e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006920:	429a      	cmp	r2, r3
 8006922:	d067      	beq.n	80069f4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b0c      	cmp	r3, #12
 8006928:	d062      	beq.n	80069f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800692a:	4b5f      	ldr	r3, [pc, #380]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e0bb      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800693a:	4b5b      	ldr	r3, [pc, #364]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a5a      	ldr	r2, [pc, #360]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006944:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006946:	f7fd fba7 	bl	8004098 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800694e:	f7fd fba3 	bl	8004098 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e0a8      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006960:	4b51      	ldr	r3, [pc, #324]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f0      	bne.n	800694e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800696c:	4b4e      	ldr	r3, [pc, #312]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	4b4e      	ldr	r3, [pc, #312]	; (8006aac <HAL_RCC_OscConfig+0x830>)
 8006972:	4013      	ands	r3, r2
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800697c:	3a01      	subs	r2, #1
 800697e:	0112      	lsls	r2, r2, #4
 8006980:	4311      	orrs	r1, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006986:	0212      	lsls	r2, r2, #8
 8006988:	4311      	orrs	r1, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800698e:	0852      	lsrs	r2, r2, #1
 8006990:	3a01      	subs	r2, #1
 8006992:	0552      	lsls	r2, r2, #21
 8006994:	4311      	orrs	r1, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800699a:	0852      	lsrs	r2, r2, #1
 800699c:	3a01      	subs	r2, #1
 800699e:	0652      	lsls	r2, r2, #25
 80069a0:	4311      	orrs	r1, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069a6:	06d2      	lsls	r2, r2, #27
 80069a8:	430a      	orrs	r2, r1
 80069aa:	493f      	ldr	r1, [pc, #252]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069b0:	4b3d      	ldr	r3, [pc, #244]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a3c      	ldr	r2, [pc, #240]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80069b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069bc:	4b3a      	ldr	r3, [pc, #232]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4a39      	ldr	r2, [pc, #228]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80069c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069c8:	f7fd fb66 	bl	8004098 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d0:	f7fd fb62 	bl	8004098 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e067      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069e2:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0f0      	beq.n	80069d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069ee:	e05f      	b.n	8006ab0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e05e      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f4:	4b2c      	ldr	r3, [pc, #176]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d157      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a00:	4b29      	ldr	r3, [pc, #164]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a28      	ldr	r2, [pc, #160]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a0c:	4b26      	ldr	r3, [pc, #152]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a25      	ldr	r2, [pc, #148]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a18:	f7fd fb3e 	bl	8004098 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a20:	f7fd fb3a 	bl	8004098 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e03f      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f0      	beq.n	8006a20 <HAL_RCC_OscConfig+0x7a4>
 8006a3e:	e037      	b.n	8006ab0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b0c      	cmp	r3, #12
 8006a44:	d02d      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a46:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a17      	ldr	r2, [pc, #92]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a50:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a5e:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	4a11      	ldr	r2, [pc, #68]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a64:	f023 0303 	bic.w	r3, r3, #3
 8006a68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7a:	f7fd fb0d 	bl	8004098 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a82:	f7fd fb09 	bl	8004098 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e00e      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a94:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <HAL_RCC_OscConfig+0x82c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f0      	bne.n	8006a82 <HAL_RCC_OscConfig+0x806>
 8006aa0:	e006      	b.n	8006ab0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCC_OscConfig+0x836>
 8006aa6:	bf00      	nop
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3720      	adds	r7, #32
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop

08006abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0c8      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ad0:	4b66      	ldr	r3, [pc, #408]	; (8006c6c <HAL_RCC_ClockConfig+0x1b0>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d910      	bls.n	8006b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ade:	4b63      	ldr	r3, [pc, #396]	; (8006c6c <HAL_RCC_ClockConfig+0x1b0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f023 0207 	bic.w	r2, r3, #7
 8006ae6:	4961      	ldr	r1, [pc, #388]	; (8006c6c <HAL_RCC_ClockConfig+0x1b0>)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aee:	4b5f      	ldr	r3, [pc, #380]	; (8006c6c <HAL_RCC_ClockConfig+0x1b0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d001      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0b0      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d04c      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d107      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b14:	4b56      	ldr	r3, [pc, #344]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d121      	bne.n	8006b64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e09e      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d107      	bne.n	8006b3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b2c:	4b50      	ldr	r3, [pc, #320]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d115      	bne.n	8006b64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e092      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d107      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b44:	4b4a      	ldr	r3, [pc, #296]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e086      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b54:	4b46      	ldr	r3, [pc, #280]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e07e      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b64:	4b42      	ldr	r3, [pc, #264]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f023 0203 	bic.w	r2, r3, #3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	493f      	ldr	r1, [pc, #252]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b76:	f7fd fa8f 	bl	8004098 <HAL_GetTick>
 8006b7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7c:	e00a      	b.n	8006b94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7e:	f7fd fa8b 	bl	8004098 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e066      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b94:	4b36      	ldr	r3, [pc, #216]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 020c 	and.w	r2, r3, #12
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d1eb      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bb2:	4b2f      	ldr	r3, [pc, #188]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	492c      	ldr	r1, [pc, #176]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b29      	ldr	r3, [pc, #164]	; (8006c6c <HAL_RCC_ClockConfig+0x1b0>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d210      	bcs.n	8006bf4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b26      	ldr	r3, [pc, #152]	; (8006c6c <HAL_RCC_ClockConfig+0x1b0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f023 0207 	bic.w	r2, r3, #7
 8006bda:	4924      	ldr	r1, [pc, #144]	; (8006c6c <HAL_RCC_ClockConfig+0x1b0>)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be2:	4b22      	ldr	r3, [pc, #136]	; (8006c6c <HAL_RCC_ClockConfig+0x1b0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e036      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c00:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	4918      	ldr	r1, [pc, #96]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c1e:	4b14      	ldr	r3, [pc, #80]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4910      	ldr	r1, [pc, #64]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c32:	f000 f859 	bl	8006ce8 <HAL_RCC_GetSysClockFreq>
 8006c36:	4602      	mov	r2, r0
 8006c38:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <HAL_RCC_ClockConfig+0x1b4>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	490c      	ldr	r1, [pc, #48]	; (8006c74 <HAL_RCC_ClockConfig+0x1b8>)
 8006c44:	5ccb      	ldrb	r3, [r1, r3]
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4e:	4a0a      	ldr	r2, [pc, #40]	; (8006c78 <HAL_RCC_ClockConfig+0x1bc>)
 8006c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c52:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <HAL_RCC_ClockConfig+0x1c0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fd f9ce 	bl	8003ff8 <HAL_InitTick>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c60:	7afb      	ldrb	r3, [r7, #11]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40022000 	.word	0x40022000
 8006c70:	40021000 	.word	0x40021000
 8006c74:	0800993c 	.word	0x0800993c
 8006c78:	20000054 	.word	0x20000054
 8006c7c:	20000058 	.word	0x20000058

08006c80 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	; 0x28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8006c8c:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <HAL_RCC_MCOConfig+0x64>)
 8006c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c90:	4a14      	ldr	r2, [pc, #80]	; (8006ce4 <HAL_RCC_MCOConfig+0x64>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c98:	4b12      	ldr	r3, [pc, #72]	; (8006ce4 <HAL_RCC_MCOConfig+0x64>)
 8006c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8006ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006caa:	2302      	movs	r3, #2
 8006cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006cba:	f107 0314 	add.w	r3, r7, #20
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cc4:	f7fe fb84 	bl	80053d0 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_RCC_MCOConfig+0x64>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cd0:	68b9      	ldr	r1, [r7, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	4903      	ldr	r1, [pc, #12]	; (8006ce4 <HAL_RCC_MCOConfig+0x64>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	608b      	str	r3, [r1, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	3728      	adds	r7, #40	; 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40021000 	.word	0x40021000

08006ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b089      	sub	sp, #36	; 0x24
 8006cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cf6:	4b3e      	ldr	r3, [pc, #248]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 030c 	and.w	r3, r3, #12
 8006cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d00:	4b3b      	ldr	r3, [pc, #236]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <HAL_RCC_GetSysClockFreq+0x34>
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b0c      	cmp	r3, #12
 8006d14:	d121      	bne.n	8006d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d11e      	bne.n	8006d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d1c:	4b34      	ldr	r3, [pc, #208]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d107      	bne.n	8006d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d28:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d2e:	0a1b      	lsrs	r3, r3, #8
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	e005      	b.n	8006d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d38:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d44:	4a2b      	ldr	r2, [pc, #172]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10d      	bne.n	8006d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d58:	e00a      	b.n	8006d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d102      	bne.n	8006d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d60:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	e004      	b.n	8006d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d101      	bne.n	8006d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d6c:	4b23      	ldr	r3, [pc, #140]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8006d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b0c      	cmp	r3, #12
 8006d74:	d134      	bne.n	8006de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d76:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d003      	beq.n	8006d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d003      	beq.n	8006d94 <HAL_RCC_GetSysClockFreq+0xac>
 8006d8c:	e005      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d8e:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d90:	617b      	str	r3, [r7, #20]
      break;
 8006d92:	e005      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d94:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8006d96:	617b      	str	r3, [r7, #20]
      break;
 8006d98:	e002      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	617b      	str	r3, [r7, #20]
      break;
 8006d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006da0:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	3301      	adds	r3, #1
 8006dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	fb02 f203 	mul.w	r2, r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	0e5b      	lsrs	r3, r3, #25
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006de0:	69bb      	ldr	r3, [r7, #24]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3724      	adds	r7, #36	; 0x24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40021000 	.word	0x40021000
 8006df4:	0800994c 	.word	0x0800994c
 8006df8:	00f42400 	.word	0x00f42400
 8006dfc:	0124f800 	.word	0x0124f800

08006e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e18:	f7ff f9cc 	bl	80061b4 <HAL_PWREx_GetVoltageRange>
 8006e1c:	6178      	str	r0, [r7, #20]
 8006e1e:	e014      	b.n	8006e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e20:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e24:	4a24      	ldr	r2, [pc, #144]	; (8006eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006e2c:	4b22      	ldr	r3, [pc, #136]	; (8006eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e38:	f7ff f9bc 	bl	80061b4 <HAL_PWREx_GetVoltageRange>
 8006e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e3e:	4b1e      	ldr	r3, [pc, #120]	; (8006eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e42:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e50:	d10b      	bne.n	8006e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b80      	cmp	r3, #128	; 0x80
 8006e56:	d919      	bls.n	8006e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2ba0      	cmp	r3, #160	; 0xa0
 8006e5c:	d902      	bls.n	8006e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e5e:	2302      	movs	r3, #2
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	e013      	b.n	8006e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e64:	2301      	movs	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	e010      	b.n	8006e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b80      	cmp	r3, #128	; 0x80
 8006e6e:	d902      	bls.n	8006e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e70:	2303      	movs	r3, #3
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	e00a      	b.n	8006e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d102      	bne.n	8006e82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	e004      	b.n	8006e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b70      	cmp	r3, #112	; 0x70
 8006e86:	d101      	bne.n	8006e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e88:	2301      	movs	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f023 0207 	bic.w	r2, r3, #7
 8006e94:	4909      	ldr	r1, [pc, #36]	; (8006ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e9c:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d001      	beq.n	8006eae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	40022000 	.word	0x40022000

08006ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ec8:	2300      	movs	r3, #0
 8006eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ecc:	2300      	movs	r3, #0
 8006ece:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d031      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ee4:	d01a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ee6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006eea:	d814      	bhi.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d009      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ef0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ef4:	d10f      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006ef6:	4b5d      	ldr	r3, [pc, #372]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	4a5c      	ldr	r2, [pc, #368]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f00:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f02:	e00c      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fa1e 	bl	800734c <RCCEx_PLLSAI1_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f14:	e003      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	74fb      	strb	r3, [r7, #19]
      break;
 8006f1a:	e000      	b.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f1e:	7cfb      	ldrb	r3, [r7, #19]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10b      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f24:	4b51      	ldr	r3, [pc, #324]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f32:	494e      	ldr	r1, [pc, #312]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006f3a:	e001      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	7cfb      	ldrb	r3, [r7, #19]
 8006f3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 809e 	beq.w	800708a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f52:	4b46      	ldr	r3, [pc, #280]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f62:	2300      	movs	r3, #0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00d      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f68:	4b40      	ldr	r3, [pc, #256]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6c:	4a3f      	ldr	r2, [pc, #252]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f72:	6593      	str	r3, [r2, #88]	; 0x58
 8006f74:	4b3d      	ldr	r3, [pc, #244]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f80:	2301      	movs	r3, #1
 8006f82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f84:	4b3a      	ldr	r3, [pc, #232]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a39      	ldr	r2, [pc, #228]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f90:	f7fd f882 	bl	8004098 <HAL_GetTick>
 8006f94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006f96:	e009      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f98:	f7fd f87e 	bl	8004098 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d902      	bls.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	74fb      	strb	r3, [r7, #19]
        break;
 8006faa:	e005      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fac:	4b30      	ldr	r3, [pc, #192]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0ef      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006fb8:	7cfb      	ldrb	r3, [r7, #19]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d15a      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fbe:	4b2b      	ldr	r3, [pc, #172]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01e      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d019      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fda:	4b24      	ldr	r3, [pc, #144]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fe6:	4b21      	ldr	r3, [pc, #132]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fec:	4a1f      	ldr	r2, [pc, #124]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffc:	4a1b      	ldr	r2, [pc, #108]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007006:	4a19      	ldr	r2, [pc, #100]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d016      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fd f83e 	bl	8004098 <HAL_GetTick>
 800701c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800701e:	e00b      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007020:	f7fd f83a 	bl	8004098 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f241 3288 	movw	r2, #5000	; 0x1388
 800702e:	4293      	cmp	r3, r2
 8007030:	d902      	bls.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	74fb      	strb	r3, [r7, #19]
            break;
 8007036:	e006      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007038:	4b0c      	ldr	r3, [pc, #48]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0ec      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007046:	7cfb      	ldrb	r3, [r7, #19]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10b      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800704c:	4b07      	ldr	r3, [pc, #28]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007052:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705a:	4904      	ldr	r1, [pc, #16]	; (800706c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800705c:	4313      	orrs	r3, r2
 800705e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007062:	e009      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007064:	7cfb      	ldrb	r3, [r7, #19]
 8007066:	74bb      	strb	r3, [r7, #18]
 8007068:	e006      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800706a:	bf00      	nop
 800706c:	40021000 	.word	0x40021000
 8007070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	7cfb      	ldrb	r3, [r7, #19]
 8007076:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007078:	7c7b      	ldrb	r3, [r7, #17]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d105      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800707e:	4bb2      	ldr	r3, [pc, #712]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	4ab1      	ldr	r2, [pc, #708]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007088:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007096:	4bac      	ldr	r3, [pc, #688]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	f023 0203 	bic.w	r2, r3, #3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	49a8      	ldr	r1, [pc, #672]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070b8:	4ba3      	ldr	r3, [pc, #652]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f023 020c 	bic.w	r2, r3, #12
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	49a0      	ldr	r1, [pc, #640]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070da:	4b9b      	ldr	r3, [pc, #620]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	4997      	ldr	r1, [pc, #604]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070fc:	4b92      	ldr	r3, [pc, #584]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	498f      	ldr	r1, [pc, #572]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800711e:	4b8a      	ldr	r3, [pc, #552]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	4986      	ldr	r1, [pc, #536]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007140:	4b81      	ldr	r3, [pc, #516]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	497e      	ldr	r1, [pc, #504]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007162:	4b79      	ldr	r3, [pc, #484]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007168:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	4975      	ldr	r1, [pc, #468]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007184:	4b70      	ldr	r3, [pc, #448]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	496d      	ldr	r1, [pc, #436]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071a6:	4b68      	ldr	r3, [pc, #416]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	4964      	ldr	r1, [pc, #400]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d028      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071c8:	4b5f      	ldr	r3, [pc, #380]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d6:	495c      	ldr	r1, [pc, #368]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071e6:	d106      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071e8:	4b57      	ldr	r3, [pc, #348]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	4a56      	ldr	r2, [pc, #344]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071f2:	60d3      	str	r3, [r2, #12]
 80071f4:	e011      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071fe:	d10c      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3304      	adds	r3, #4
 8007204:	2101      	movs	r1, #1
 8007206:	4618      	mov	r0, r3
 8007208:	f000 f8a0 	bl	800734c <RCCEx_PLLSAI1_Config>
 800720c:	4603      	mov	r3, r0
 800720e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007210:	7cfb      	ldrb	r3, [r7, #19]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8007216:	7cfb      	ldrb	r3, [r7, #19]
 8007218:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d028      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007226:	4b48      	ldr	r3, [pc, #288]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007234:	4944      	ldr	r1, [pc, #272]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007244:	d106      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007246:	4b40      	ldr	r3, [pc, #256]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	4a3f      	ldr	r2, [pc, #252]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800724c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007250:	60d3      	str	r3, [r2, #12]
 8007252:	e011      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800725c:	d10c      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3304      	adds	r3, #4
 8007262:	2101      	movs	r1, #1
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f871 	bl	800734c <RCCEx_PLLSAI1_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800726e:	7cfb      	ldrb	r3, [r7, #19]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007274:	7cfb      	ldrb	r3, [r7, #19]
 8007276:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d028      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007284:	4b30      	ldr	r3, [pc, #192]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007292:	492d      	ldr	r1, [pc, #180]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072a2:	d106      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072a4:	4b28      	ldr	r3, [pc, #160]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	4a27      	ldr	r2, [pc, #156]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ae:	60d3      	str	r3, [r2, #12]
 80072b0:	e011      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072ba:	d10c      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	2101      	movs	r1, #1
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f842 	bl	800734c <RCCEx_PLLSAI1_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072cc:	7cfb      	ldrb	r3, [r7, #19]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 80072d2:	7cfb      	ldrb	r3, [r7, #19]
 80072d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01c      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072e2:	4b19      	ldr	r3, [pc, #100]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f0:	4915      	ldr	r1, [pc, #84]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007300:	d10c      	bne.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3304      	adds	r3, #4
 8007306:	2102      	movs	r1, #2
 8007308:	4618      	mov	r0, r3
 800730a:	f000 f81f 	bl	800734c <RCCEx_PLLSAI1_Config>
 800730e:	4603      	mov	r3, r0
 8007310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007312:	7cfb      	ldrb	r3, [r7, #19]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8007318:	7cfb      	ldrb	r3, [r7, #19]
 800731a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800732a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007336:	4904      	ldr	r1, [pc, #16]	; (8007348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007338:	4313      	orrs	r3, r2
 800733a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800733e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40021000 	.word	0x40021000

0800734c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800735a:	4b74      	ldr	r3, [pc, #464]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d018      	beq.n	8007398 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007366:	4b71      	ldr	r3, [pc, #452]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0203 	and.w	r2, r3, #3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d10d      	bne.n	8007392 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
       ||
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800737e:	4b6b      	ldr	r3, [pc, #428]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	091b      	lsrs	r3, r3, #4
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
       ||
 800738e:	429a      	cmp	r2, r3
 8007390:	d047      	beq.n	8007422 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	73fb      	strb	r3, [r7, #15]
 8007396:	e044      	b.n	8007422 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b03      	cmp	r3, #3
 800739e:	d018      	beq.n	80073d2 <RCCEx_PLLSAI1_Config+0x86>
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d825      	bhi.n	80073f0 <RCCEx_PLLSAI1_Config+0xa4>
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d002      	beq.n	80073ae <RCCEx_PLLSAI1_Config+0x62>
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d009      	beq.n	80073c0 <RCCEx_PLLSAI1_Config+0x74>
 80073ac:	e020      	b.n	80073f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073ae:	4b5f      	ldr	r3, [pc, #380]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d11d      	bne.n	80073f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073be:	e01a      	b.n	80073f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073c0:	4b5a      	ldr	r3, [pc, #360]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d116      	bne.n	80073fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d0:	e013      	b.n	80073fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073d2:	4b56      	ldr	r3, [pc, #344]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10f      	bne.n	80073fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073de:	4b53      	ldr	r3, [pc, #332]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d109      	bne.n	80073fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073ee:	e006      	b.n	80073fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
      break;
 80073f4:	e004      	b.n	8007400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073f6:	bf00      	nop
 80073f8:	e002      	b.n	8007400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10d      	bne.n	8007422 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007406:	4b49      	ldr	r3, [pc, #292]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	3b01      	subs	r3, #1
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	430b      	orrs	r3, r1
 800741c:	4943      	ldr	r1, [pc, #268]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 800741e:	4313      	orrs	r3, r2
 8007420:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d17c      	bne.n	8007522 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007428:	4b40      	ldr	r3, [pc, #256]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a3f      	ldr	r2, [pc, #252]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 800742e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007434:	f7fc fe30 	bl	8004098 <HAL_GetTick>
 8007438:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800743a:	e009      	b.n	8007450 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800743c:	f7fc fe2c 	bl	8004098 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d902      	bls.n	8007450 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	73fb      	strb	r3, [r7, #15]
        break;
 800744e:	e005      	b.n	800745c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007450:	4b36      	ldr	r3, [pc, #216]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1ef      	bne.n	800743c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d15f      	bne.n	8007522 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d110      	bne.n	800748a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007468:	4b30      	ldr	r3, [pc, #192]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6892      	ldr	r2, [r2, #8]
 8007478:	0211      	lsls	r1, r2, #8
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	68d2      	ldr	r2, [r2, #12]
 800747e:	06d2      	lsls	r2, r2, #27
 8007480:	430a      	orrs	r2, r1
 8007482:	492a      	ldr	r1, [pc, #168]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007484:	4313      	orrs	r3, r2
 8007486:	610b      	str	r3, [r1, #16]
 8007488:	e027      	b.n	80074da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d112      	bne.n	80074b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007490:	4b26      	ldr	r3, [pc, #152]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6892      	ldr	r2, [r2, #8]
 80074a0:	0211      	lsls	r1, r2, #8
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	6912      	ldr	r2, [r2, #16]
 80074a6:	0852      	lsrs	r2, r2, #1
 80074a8:	3a01      	subs	r2, #1
 80074aa:	0552      	lsls	r2, r2, #21
 80074ac:	430a      	orrs	r2, r1
 80074ae:	491f      	ldr	r1, [pc, #124]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	610b      	str	r3, [r1, #16]
 80074b4:	e011      	b.n	80074da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074b6:	4b1d      	ldr	r3, [pc, #116]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80074be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6892      	ldr	r2, [r2, #8]
 80074c6:	0211      	lsls	r1, r2, #8
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6952      	ldr	r2, [r2, #20]
 80074cc:	0852      	lsrs	r2, r2, #1
 80074ce:	3a01      	subs	r2, #1
 80074d0:	0652      	lsls	r2, r2, #25
 80074d2:	430a      	orrs	r2, r1
 80074d4:	4915      	ldr	r1, [pc, #84]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80074da:	4b14      	ldr	r3, [pc, #80]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a13      	ldr	r2, [pc, #76]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e6:	f7fc fdd7 	bl	8004098 <HAL_GetTick>
 80074ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074ec:	e009      	b.n	8007502 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074ee:	f7fc fdd3 	bl	8004098 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d902      	bls.n	8007502 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	73fb      	strb	r3, [r7, #15]
          break;
 8007500:	e005      	b.n	800750e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007502:	4b0a      	ldr	r3, [pc, #40]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0ef      	beq.n	80074ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d106      	bne.n	8007522 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	4903      	ldr	r1, [pc, #12]	; (800752c <RCCEx_PLLSAI1_Config+0x1e0>)
 800751e:	4313      	orrs	r3, r2
 8007520:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007522:	7bfb      	ldrb	r3, [r7, #15]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40021000 	.word	0x40021000

08007530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e049      	b.n	80075d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fc fc02 	bl	8003d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f000 fc08 	bl	8007d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d001      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e03b      	b.n	8007670 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a19      	ldr	r2, [pc, #100]	; (800767c <HAL_TIM_Base_Start_IT+0x9c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d009      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x4e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007622:	d004      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x4e>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a15      	ldr	r2, [pc, #84]	; (8007680 <HAL_TIM_Base_Start_IT+0xa0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d115      	bne.n	800765a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	4b13      	ldr	r3, [pc, #76]	; (8007684 <HAL_TIM_Base_Start_IT+0xa4>)
 8007636:	4013      	ands	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b06      	cmp	r3, #6
 800763e:	d015      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x8c>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007646:	d011      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007658:	e008      	b.n	800766c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0201 	orr.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e000      	b.n	800766e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40014000 	.word	0x40014000
 8007684:	00010007 	.word	0x00010007

08007688 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0201 	bic.w	r2, r2, #1
 800769e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10f      	bne.n	80076d0 <HAL_TIM_Base_Stop_IT+0x48>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6a1a      	ldr	r2, [r3, #32]
 80076b6:	f240 4344 	movw	r3, #1092	; 0x444
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <HAL_TIM_Base_Stop_IT+0x48>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0201 	bic.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e049      	b.n	800778c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7fc fadf 	bl	8003cd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3304      	adds	r3, #4
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f000 fb2d 	bl	8007d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <HAL_TIM_IC_Start_IT+0x1a>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	e023      	b.n	80077f6 <HAL_TIM_IC_Start_IT+0x62>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d104      	bne.n	80077be <HAL_TIM_IC_Start_IT+0x2a>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	e01b      	b.n	80077f6 <HAL_TIM_IC_Start_IT+0x62>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d104      	bne.n	80077ce <HAL_TIM_IC_Start_IT+0x3a>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	e013      	b.n	80077f6 <HAL_TIM_IC_Start_IT+0x62>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b0c      	cmp	r3, #12
 80077d2:	d104      	bne.n	80077de <HAL_TIM_IC_Start_IT+0x4a>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	e00b      	b.n	80077f6 <HAL_TIM_IC_Start_IT+0x62>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	d104      	bne.n	80077ee <HAL_TIM_IC_Start_IT+0x5a>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	e003      	b.n	80077f6 <HAL_TIM_IC_Start_IT+0x62>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d104      	bne.n	8007808 <HAL_TIM_IC_Start_IT+0x74>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007804:	b2db      	uxtb	r3, r3
 8007806:	e013      	b.n	8007830 <HAL_TIM_IC_Start_IT+0x9c>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b04      	cmp	r3, #4
 800780c:	d104      	bne.n	8007818 <HAL_TIM_IC_Start_IT+0x84>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007814:	b2db      	uxtb	r3, r3
 8007816:	e00b      	b.n	8007830 <HAL_TIM_IC_Start_IT+0x9c>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b08      	cmp	r3, #8
 800781c:	d104      	bne.n	8007828 <HAL_TIM_IC_Start_IT+0x94>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007824:	b2db      	uxtb	r3, r3
 8007826:	e003      	b.n	8007830 <HAL_TIM_IC_Start_IT+0x9c>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800782e:	b2db      	uxtb	r3, r3
 8007830:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d102      	bne.n	800783e <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d001      	beq.n	8007842 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e0c4      	b.n	80079cc <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <HAL_TIM_IC_Start_IT+0xbe>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007850:	e023      	b.n	800789a <HAL_TIM_IC_Start_IT+0x106>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b04      	cmp	r3, #4
 8007856:	d104      	bne.n	8007862 <HAL_TIM_IC_Start_IT+0xce>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007860:	e01b      	b.n	800789a <HAL_TIM_IC_Start_IT+0x106>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d104      	bne.n	8007872 <HAL_TIM_IC_Start_IT+0xde>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007870:	e013      	b.n	800789a <HAL_TIM_IC_Start_IT+0x106>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b0c      	cmp	r3, #12
 8007876:	d104      	bne.n	8007882 <HAL_TIM_IC_Start_IT+0xee>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007880:	e00b      	b.n	800789a <HAL_TIM_IC_Start_IT+0x106>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b10      	cmp	r3, #16
 8007886:	d104      	bne.n	8007892 <HAL_TIM_IC_Start_IT+0xfe>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007890:	e003      	b.n	800789a <HAL_TIM_IC_Start_IT+0x106>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <HAL_TIM_IC_Start_IT+0x116>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a8:	e013      	b.n	80078d2 <HAL_TIM_IC_Start_IT+0x13e>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_IC_Start_IT+0x126>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078b8:	e00b      	b.n	80078d2 <HAL_TIM_IC_Start_IT+0x13e>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d104      	bne.n	80078ca <HAL_TIM_IC_Start_IT+0x136>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078c8:	e003      	b.n	80078d2 <HAL_TIM_IC_Start_IT+0x13e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	d841      	bhi.n	800795c <HAL_TIM_IC_Start_IT+0x1c8>
 80078d8:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <HAL_TIM_IC_Start_IT+0x14c>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	08007915 	.word	0x08007915
 80078e4:	0800795d 	.word	0x0800795d
 80078e8:	0800795d 	.word	0x0800795d
 80078ec:	0800795d 	.word	0x0800795d
 80078f0:	08007927 	.word	0x08007927
 80078f4:	0800795d 	.word	0x0800795d
 80078f8:	0800795d 	.word	0x0800795d
 80078fc:	0800795d 	.word	0x0800795d
 8007900:	08007939 	.word	0x08007939
 8007904:	0800795d 	.word	0x0800795d
 8007908:	0800795d 	.word	0x0800795d
 800790c:	0800795d 	.word	0x0800795d
 8007910:	0800794b 	.word	0x0800794b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0202 	orr.w	r2, r2, #2
 8007922:	60da      	str	r2, [r3, #12]
      break;
 8007924:	e01b      	b.n	800795e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0204 	orr.w	r2, r2, #4
 8007934:	60da      	str	r2, [r3, #12]
      break;
 8007936:	e012      	b.n	800795e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0208 	orr.w	r2, r2, #8
 8007946:	60da      	str	r2, [r3, #12]
      break;
 8007948:	e009      	b.n	800795e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0210 	orr.w	r2, r2, #16
 8007958:	60da      	str	r2, [r3, #12]
      break;
 800795a:	e000      	b.n	800795e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800795c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2201      	movs	r2, #1
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fb7c 	bl	8008064 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a18      	ldr	r2, [pc, #96]	; (80079d4 <HAL_TIM_IC_Start_IT+0x240>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d009      	beq.n	800798a <HAL_TIM_IC_Start_IT+0x1f6>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797e:	d004      	beq.n	800798a <HAL_TIM_IC_Start_IT+0x1f6>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <HAL_TIM_IC_Start_IT+0x244>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d115      	bne.n	80079b6 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	4b12      	ldr	r3, [pc, #72]	; (80079dc <HAL_TIM_IC_Start_IT+0x248>)
 8007992:	4013      	ands	r3, r2
 8007994:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b06      	cmp	r3, #6
 800799a:	d015      	beq.n	80079c8 <HAL_TIM_IC_Start_IT+0x234>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a2:	d011      	beq.n	80079c8 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b4:	e008      	b.n	80079c8 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	e000      	b.n	80079ca <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40012c00 	.word	0x40012c00
 80079d8:	40014000 	.word	0x40014000
 80079dc:	00010007 	.word	0x00010007

080079e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d122      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d11b      	bne.n	8007a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f06f 0202 	mvn.w	r2, #2
 8007a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7fb faa0 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8007a28:	e005      	b.n	8007a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f98b 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f992 	bl	8007d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d122      	bne.n	8007a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d11b      	bne.n	8007a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f06f 0204 	mvn.w	r2, #4
 8007a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fb fa76 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8007a7c:	e005      	b.n	8007a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f961 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f968 	bl	8007d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d122      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d11b      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f06f 0208 	mvn.w	r2, #8
 8007ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2204      	movs	r2, #4
 8007aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fb fa4c 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8007ad0:	e005      	b.n	8007ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f937 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f93e 	bl	8007d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0310 	and.w	r3, r3, #16
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d122      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d11b      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0210 	mvn.w	r2, #16
 8007b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fb fa22 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8007b24:	e005      	b.n	8007b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f90d 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f914 	bl	8007d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d10e      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d107      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f06f 0201 	mvn.w	r2, #1
 8007b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7fb fb70 	bl	8003244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	2b80      	cmp	r3, #128	; 0x80
 8007b70:	d10e      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7c:	2b80      	cmp	r3, #128	; 0x80
 8007b7e:	d107      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb00 	bl	8008190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b9e:	d10e      	bne.n	8007bbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007baa:	2b80      	cmp	r3, #128	; 0x80
 8007bac:	d107      	bne.n	8007bbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 faf3 	bl	80081a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc8:	2b40      	cmp	r3, #64	; 0x40
 8007bca:	d10e      	bne.n	8007bea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b40      	cmp	r3, #64	; 0x40
 8007bd8:	d107      	bne.n	8007bea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f8c2 	bl	8007d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d10e      	bne.n	8007c16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b20      	cmp	r3, #32
 8007c04:	d107      	bne.n	8007c16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f06f 0220 	mvn.w	r2, #32
 8007c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fab3 	bl	800817c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e082      	b.n	8007d3e <HAL_TIM_IC_ConfigChannel+0x120>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d11b      	bne.n	8007c7e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6819      	ldr	r1, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f000 f8f9 	bl	8007e4c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 020c 	bic.w	r2, r2, #12
 8007c68:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6999      	ldr	r1, [r3, #24]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	619a      	str	r2, [r3, #24]
 8007c7c:	e05a      	b.n	8007d34 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d11c      	bne.n	8007cbe <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	6819      	ldr	r1, [r3, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f000 f930 	bl	8007ef8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699a      	ldr	r2, [r3, #24]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ca6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6999      	ldr	r1, [r3, #24]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	021a      	lsls	r2, r3, #8
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	619a      	str	r2, [r3, #24]
 8007cbc:	e03a      	b.n	8007d34 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d11b      	bne.n	8007cfc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	6819      	ldr	r1, [r3, #0]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f000 f94d 	bl	8007f72 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69da      	ldr	r2, [r3, #28]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 020c 	bic.w	r2, r2, #12
 8007ce6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	69d9      	ldr	r1, [r3, #28]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	61da      	str	r2, [r3, #28]
 8007cfa:	e01b      	b.n	8007d34 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	6819      	ldr	r1, [r3, #0]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f000 f96d 	bl	8007fea <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	69da      	ldr	r2, [r3, #28]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d1e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69d9      	ldr	r1, [r3, #28]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	021a      	lsls	r2, r3, #8
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <TIM_Base_SetConfig+0xbc>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d003      	beq.n	8007da4 <TIM_Base_SetConfig+0x20>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da2:	d108      	bne.n	8007db6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a21      	ldr	r2, [pc, #132]	; (8007e40 <TIM_Base_SetConfig+0xbc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d00b      	beq.n	8007dd6 <TIM_Base_SetConfig+0x52>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dc4:	d007      	beq.n	8007dd6 <TIM_Base_SetConfig+0x52>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <TIM_Base_SetConfig+0xc0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <TIM_Base_SetConfig+0x52>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a1d      	ldr	r2, [pc, #116]	; (8007e48 <TIM_Base_SetConfig+0xc4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d108      	bne.n	8007de8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a0c      	ldr	r2, [pc, #48]	; (8007e40 <TIM_Base_SetConfig+0xbc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d007      	beq.n	8007e24 <TIM_Base_SetConfig+0xa0>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a0b      	ldr	r2, [pc, #44]	; (8007e44 <TIM_Base_SetConfig+0xc0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_Base_SetConfig+0xa0>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a0a      	ldr	r2, [pc, #40]	; (8007e48 <TIM_Base_SetConfig+0xc4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d103      	bne.n	8007e2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	615a      	str	r2, [r3, #20]
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40014400 	.word	0x40014400

08007e4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	f023 0201 	bic.w	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4a1e      	ldr	r2, [pc, #120]	; (8007ef0 <TIM_TI1_SetConfig+0xa4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <TIM_TI1_SetConfig+0x3e>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e80:	d003      	beq.n	8007e8a <TIM_TI1_SetConfig+0x3e>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4a1b      	ldr	r2, [pc, #108]	; (8007ef4 <TIM_TI1_SetConfig+0xa8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d101      	bne.n	8007e8e <TIM_TI1_SetConfig+0x42>
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e000      	b.n	8007e90 <TIM_TI1_SetConfig+0x44>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f023 0303 	bic.w	r3, r3, #3
 8007e9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e003      	b.n	8007eae <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f043 0301 	orr.w	r3, r3, #1
 8007eac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	011b      	lsls	r3, r3, #4
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f023 030a 	bic.w	r3, r3, #10
 8007ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f003 030a 	and.w	r3, r3, #10
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	40014000 	.word	0x40014000

08007ef8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	f023 0210 	bic.w	r2, r3, #16
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	031b      	lsls	r3, r3, #12
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	621a      	str	r2, [r3, #32]
}
 8007f66:	bf00      	nop
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b087      	sub	sp, #28
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f023 0303 	bic.w	r3, r3, #3
 8007f9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b087      	sub	sp, #28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008016:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	021b      	lsls	r3, r3, #8
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	031b      	lsls	r3, r3, #12
 800802e:	b29b      	uxth	r3, r3
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800803c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	031b      	lsls	r3, r3, #12
 8008042:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	621a      	str	r2, [r3, #32]
}
 8008058:	bf00      	nop
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 031f 	and.w	r3, r3, #31
 8008076:	2201      	movs	r2, #1
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1a      	ldr	r2, [r3, #32]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	43db      	mvns	r3, r3
 8008086:	401a      	ands	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	431a      	orrs	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e04f      	b.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a21      	ldr	r2, [pc, #132]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d108      	bne.n	8008104 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a14      	ldr	r2, [pc, #80]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d009      	beq.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008130:	d004      	beq.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a10      	ldr	r2, [pc, #64]	; (8008178 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d10c      	bne.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008142:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	4313      	orrs	r3, r2
 800814c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	40012c00 	.word	0x40012c00
 8008178:	40014000 	.word	0x40014000

0800817c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081b8:	b084      	sub	sp, #16
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	f107 0014 	add.w	r0, r7, #20
 80081c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	b004      	add	sp, #16
 80081d8:	4770      	bx	lr

080081da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80081e2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80081e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	43db      	mvns	r3, r3
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	4013      	ands	r3, r2
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800822a:	b084      	sub	sp, #16
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	f107 0014 	add.w	r0, r7, #20
 8008238:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	b004      	add	sp, #16
 800826a:	4770      	bx	lr

0800826c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800827a:	b29b      	uxth	r3, r3
 800827c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008280:	b29a      	uxth	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
	...

08008298 <__libc_init_array>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4d0d      	ldr	r5, [pc, #52]	; (80082d0 <__libc_init_array+0x38>)
 800829c:	4c0d      	ldr	r4, [pc, #52]	; (80082d4 <__libc_init_array+0x3c>)
 800829e:	1b64      	subs	r4, r4, r5
 80082a0:	10a4      	asrs	r4, r4, #2
 80082a2:	2600      	movs	r6, #0
 80082a4:	42a6      	cmp	r6, r4
 80082a6:	d109      	bne.n	80082bc <__libc_init_array+0x24>
 80082a8:	4d0b      	ldr	r5, [pc, #44]	; (80082d8 <__libc_init_array+0x40>)
 80082aa:	4c0c      	ldr	r4, [pc, #48]	; (80082dc <__libc_init_array+0x44>)
 80082ac:	f000 f820 	bl	80082f0 <_init>
 80082b0:	1b64      	subs	r4, r4, r5
 80082b2:	10a4      	asrs	r4, r4, #2
 80082b4:	2600      	movs	r6, #0
 80082b6:	42a6      	cmp	r6, r4
 80082b8:	d105      	bne.n	80082c6 <__libc_init_array+0x2e>
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
 80082bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c0:	4798      	blx	r3
 80082c2:	3601      	adds	r6, #1
 80082c4:	e7ee      	b.n	80082a4 <__libc_init_array+0xc>
 80082c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ca:	4798      	blx	r3
 80082cc:	3601      	adds	r6, #1
 80082ce:	e7f2      	b.n	80082b6 <__libc_init_array+0x1e>
 80082d0:	0800997c 	.word	0x0800997c
 80082d4:	0800997c 	.word	0x0800997c
 80082d8:	0800997c 	.word	0x0800997c
 80082dc:	08009980 	.word	0x08009980

080082e0 <memset>:
 80082e0:	4402      	add	r2, r0
 80082e2:	4603      	mov	r3, r0
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d100      	bne.n	80082ea <memset+0xa>
 80082e8:	4770      	bx	lr
 80082ea:	f803 1b01 	strb.w	r1, [r3], #1
 80082ee:	e7f9      	b.n	80082e4 <memset+0x4>

080082f0 <_init>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr

080082fc <_fini>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	bf00      	nop
 8008300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008302:	bc08      	pop	{r3}
 8008304:	469e      	mov	lr, r3
 8008306:	4770      	bx	lr
