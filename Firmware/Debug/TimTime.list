
TimTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d70  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e0  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e0  080094e0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080094e0  080094e0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094e0  080094e0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e0  080094e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080094e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  2000002c  08009514  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  08009514  00020a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e40  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dc4  00000000  00000000  00039e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016b0  00000000  00000000  0003cc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00026660  00000000  00000000  0003e310  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00012b9b  00000000  00000000  00064970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000e53b6  00000000  00000000  0007750b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0015c8c1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001530  00000000  00000000  0015c940  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000061cc  00000000  00000000  0015de70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ee8 	.word	0x08007ee8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000030 	.word	0x20000030
 80001cc:	08007ee8 	.word	0x08007ee8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000a68:	230a      	movs	r3, #10
 8000a6a:	9302      	str	r3, [sp, #8]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	9301      	str	r3, [sp, #4]
 8000a70:	1cfb      	adds	r3, r7, #3
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2301      	movs	r3, #1
 8000a76:	2200      	movs	r2, #0
 8000a78:	2178      	movs	r1, #120	; 0x78
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f004 fcc0 	bl	8005400 <HAL_I2C_Mem_Write>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000a94:	2064      	movs	r0, #100	; 0x64
 8000a96:	f002 ff75 	bl	8003984 <HAL_Delay>
    int status = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8000a9e:	21ae      	movs	r1, #174	; 0xae
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ffdb 	bl	8000a5c <ssd1306_WriteCommand>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffd2 	bl	8000a5c <ssd1306_WriteCommand>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ffc9 	bl	8000a5c <ssd1306_WriteCommand>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000ad4:	21b0      	movs	r1, #176	; 0xb0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffc0 	bl	8000a5c <ssd1306_WriteCommand>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000ae6:	21c8      	movs	r1, #200	; 0xc8
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ffb7 	bl	8000a5c <ssd1306_WriteCommand>
 8000aee:	4603      	mov	r3, r0
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4413      	add	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000af8:	2100      	movs	r1, #0
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffae 	bl	8000a5c <ssd1306_WriteCommand>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ffa5 	bl	8000a5c <ssd1306_WriteCommand>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff9c 	bl	8000a5c <ssd1306_WriteCommand>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000b2e:	2181      	movs	r1, #129	; 0x81
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff93 	bl	8000a5c <ssd1306_WriteCommand>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000b40:	21ff      	movs	r1, #255	; 0xff
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff8a 	bl	8000a5c <ssd1306_WriteCommand>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000b52:	21a1      	movs	r1, #161	; 0xa1
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff81 	bl	8000a5c <ssd1306_WriteCommand>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000b64:	21a6      	movs	r1, #166	; 0xa6
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff78 	bl	8000a5c <ssd1306_WriteCommand>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000b76:	21a8      	movs	r1, #168	; 0xa8
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff6f 	bl	8000a5c <ssd1306_WriteCommand>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x3F);
 8000b88:	213f      	movs	r1, #63	; 0x3f
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff66 	bl	8000a5c <ssd1306_WriteCommand>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b9a:	21a4      	movs	r1, #164	; 0xa4
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff5d 	bl	8000a5c <ssd1306_WriteCommand>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4413      	add	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000bac:	21d3      	movs	r1, #211	; 0xd3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff54 	bl	8000a5c <ssd1306_WriteCommand>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff4b 	bl	8000a5c <ssd1306_WriteCommand>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000bd0:	21d5      	movs	r1, #213	; 0xd5
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff42 	bl	8000a5c <ssd1306_WriteCommand>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000be2:	21f0      	movs	r1, #240	; 0xf0
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff39 	bl	8000a5c <ssd1306_WriteCommand>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000bf4:	21d9      	movs	r1, #217	; 0xd9
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff30 	bl	8000a5c <ssd1306_WriteCommand>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000c06:	2122      	movs	r1, #34	; 0x22
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff27 	bl	8000a5c <ssd1306_WriteCommand>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4413      	add	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000c18:	21da      	movs	r1, #218	; 0xda
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ff1e 	bl	8000a5c <ssd1306_WriteCommand>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x12);
 8000c2a:	2112      	movs	r1, #18
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff15 	bl	8000a5c <ssd1306_WriteCommand>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000c3c:	21db      	movs	r1, #219	; 0xdb
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ff0c 	bl	8000a5c <ssd1306_WriteCommand>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000c4e:	2120      	movs	r1, #32
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff03 	bl	8000a5c <ssd1306_WriteCommand>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000c60:	218d      	movs	r1, #141	; 0x8d
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fefa 	bl	8000a5c <ssd1306_WriteCommand>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000c72:	2114      	movs	r1, #20
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff fef1 	bl	8000a5c <ssd1306_WriteCommand>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4413      	add	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000c84:	21af      	movs	r1, #175	; 0xaf
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff fee8 	bl	8000a5c <ssd1306_WriteCommand>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <ssd1306_Init+0x214>
        return 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e00f      	b.n	8000cc0 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f813 	bl	8000ccc <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f832 	bl	8000d10 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <ssd1306_Init+0x23c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <ssd1306_Init+0x23c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <ssd1306_Init+0x23c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	715a      	strb	r2, [r3, #5]

    return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000448 	.word	0x20000448

08000ccc <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	e00d      	b.n	8000cf8 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <ssd1306_Fill+0x1a>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	e000      	b.n	8000ce8 <ssd1306_Fill+0x1c>
 8000ce6:	21ff      	movs	r1, #255	; 0xff
 8000ce8:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <ssd1306_Fill+0x40>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	460a      	mov	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfe:	d3ed      	bcc.n	8000cdc <ssd1306_Fill+0x10>
    }
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20000048 	.word	0x20000048

08000d10 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af04      	add	r7, sp, #16
 8000d16:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e020      	b.n	8000d60 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	3b50      	subs	r3, #80	; 0x50
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fe98 	bl	8000a5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fe94 	bl	8000a5c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000d34:	2110      	movs	r1, #16
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fe90 	bl	8000a5c <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <ssd1306_UpdateScreen+0x60>)
 8000d42:	4413      	add	r3, r2
 8000d44:	2264      	movs	r2, #100	; 0x64
 8000d46:	9202      	str	r2, [sp, #8]
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	9201      	str	r2, [sp, #4]
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	2240      	movs	r2, #64	; 0x40
 8000d52:	2178      	movs	r1, #120	; 0x78
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f004 fb53 	bl	8005400 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2b07      	cmp	r3, #7
 8000d64:	d9db      	bls.n	8000d1e <ssd1306_UpdateScreen+0xe>
    }
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000048 	.word	0x20000048

08000d74 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	71bb      	strb	r3, [r7, #6]
 8000d82:	4613      	mov	r3, r2
 8000d84:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db48      	blt.n	8000e20 <ssd1306_DrawPixel+0xac>
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	2b3f      	cmp	r3, #63	; 0x3f
 8000d92:	d845      	bhi.n	8000e20 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <ssd1306_DrawPixel+0xb8>)
 8000d96:	791b      	ldrb	r3, [r3, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	2301      	moveq	r3, #1
 8000da4:	2300      	movne	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000daa:	797b      	ldrb	r3, [r7, #5]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d11a      	bne.n	8000de6 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000db0:	79fa      	ldrb	r2, [r7, #7]
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	08db      	lsrs	r3, r3, #3
 8000db6:	b2d8      	uxtb	r0, r3
 8000db8:	4603      	mov	r3, r0
 8000dba:	01db      	lsls	r3, r3, #7
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <ssd1306_DrawPixel+0xbc>)
 8000dc0:	5cd3      	ldrb	r3, [r2, r3]
 8000dc2:	b25a      	sxtb	r2, r3
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	2101      	movs	r1, #1
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b259      	sxtb	r1, r3
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	4413      	add	r3, r2
 8000dde:	b2c9      	uxtb	r1, r1
 8000de0:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <ssd1306_DrawPixel+0xbc>)
 8000de2:	54d1      	strb	r1, [r2, r3]
 8000de4:	e01d      	b.n	8000e22 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000de6:	79fa      	ldrb	r2, [r7, #7]
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	4603      	mov	r3, r0
 8000df0:	01db      	lsls	r3, r3, #7
 8000df2:	4413      	add	r3, r2
 8000df4:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <ssd1306_DrawPixel+0xbc>)
 8000df6:	5cd3      	ldrb	r3, [r2, r3]
 8000df8:	b25a      	sxtb	r2, r3
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	2101      	movs	r1, #1
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	b259      	sxtb	r1, r3
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	4603      	mov	r3, r0
 8000e14:	01db      	lsls	r3, r3, #7
 8000e16:	4413      	add	r3, r2
 8000e18:	b2c9      	uxtb	r1, r1
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <ssd1306_DrawPixel+0xbc>)
 8000e1c:	54d1      	strb	r1, [r2, r3]
 8000e1e:	e000      	b.n	8000e22 <ssd1306_DrawPixel+0xae>
        return;
 8000e20:	bf00      	nop
    }
}
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	20000448 	.word	0x20000448
 8000e30:	20000048 	.word	0x20000048

08000e34 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	1d38      	adds	r0, r7, #4
 8000e3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e42:	461a      	mov	r2, r3
 8000e44:	4623      	mov	r3, r4
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000e4c:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <ssd1306_WriteChar+0xfc>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	793b      	ldrb	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	2b7f      	cmp	r3, #127	; 0x7f
 8000e58:	dc06      	bgt.n	8000e68 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <ssd1306_WriteChar+0xfc>)
 8000e5c:	885b      	ldrh	r3, [r3, #2]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000e64:	2b3f      	cmp	r3, #63	; 0x3f
 8000e66:	dd01      	ble.n	8000e6c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e05d      	b.n	8000f28 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	e04c      	b.n	8000f0c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	3b20      	subs	r3, #32
 8000e78:	7979      	ldrb	r1, [r7, #5]
 8000e7a:	fb01 f303 	mul.w	r3, r1, r3
 8000e7e:	4619      	mov	r1, r3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	440b      	add	r3, r1
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	e034      	b.n	8000efc <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d012      	beq.n	8000ec8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <ssd1306_WriteChar+0xfc>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	b2d8      	uxtb	r0, r3
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <ssd1306_WriteChar+0xfc>)
 8000eb2:	885b      	ldrh	r3, [r3, #2]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	7bba      	ldrb	r2, [r7, #14]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff ff57 	bl	8000d74 <ssd1306_DrawPixel>
 8000ec6:	e016      	b.n	8000ef6 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <ssd1306_WriteChar+0xfc>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b2d8      	uxtb	r0, r3
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <ssd1306_WriteChar+0xfc>)
 8000ed8:	885b      	ldrh	r3, [r3, #2]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2d9      	uxtb	r1, r3
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f7ff ff3f 	bl	8000d74 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	793b      	ldrb	r3, [r7, #4]
 8000efe:	461a      	mov	r2, r3
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d3c5      	bcc.n	8000e92 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	797b      	ldrb	r3, [r7, #5]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d3ad      	bcc.n	8000e72 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <ssd1306_WriteChar+0xfc>)
 8000f18:	881a      	ldrh	r2, [r3, #0]
 8000f1a:	793b      	ldrb	r3, [r7, #4]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <ssd1306_WriteChar+0xfc>)
 8000f24:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3724      	adds	r7, #36	; 0x24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	20000448 	.word	0x20000448

08000f34 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	1d38      	adds	r0, r7, #4
 8000f3e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f42:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000f44:	e012      	b.n	8000f6c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	7818      	ldrb	r0, [r3, #0]
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	1d3a      	adds	r2, r7, #4
 8000f4e:	ca06      	ldmia	r2, {r1, r2}
 8000f50:	f7ff ff70 	bl	8000e34 <ssd1306_WriteChar>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d002      	beq.n	8000f66 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	e008      	b.n	8000f78 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e8      	bne.n	8000f46 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	781b      	ldrb	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	460a      	mov	r2, r1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <ssd1306_SetCursor+0x2c>)
 8000f96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <ssd1306_SetCursor+0x2c>)
 8000f9e:	805a      	strh	r2, [r3, #2]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	20000448 	.word	0x20000448

08000fb0 <ssd1306_DrawBattery>:

void ssd1306_DrawBattery(float remaining)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	ed87 0a01 	vstr	s0, [r7, #4]
	int xOffset = 4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	60fb      	str	r3, [r7, #12]
	//clear section
	for (int x=0; x<26; x++){
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	e02d      	b.n	8001020 <ssd1306_DrawBattery+0x70>
		for (int y=50; y<64; y++){
 8000fc4:	2332      	movs	r3, #50	; 0x32
 8000fc6:	623b      	str	r3, [r7, #32]
 8000fc8:	e024      	b.n	8001014 <ssd1306_DrawBattery+0x64>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000fca:	6a3b      	ldr	r3, [r7, #32]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da00      	bge.n	8000fd2 <ssd1306_DrawBattery+0x22>
 8000fd0:	3307      	adds	r3, #7
 8000fd2:	10db      	asrs	r3, r3, #3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	01d1      	lsls	r1, r2, #7
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	440b      	add	r3, r1
 8000fdc:	4994      	ldr	r1, [pc, #592]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8000fde:	5ccb      	ldrb	r3, [r1, r3]
 8000fe0:	b259      	sxtb	r1, r3
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	4258      	negs	r0, r3
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	f000 0007 	and.w	r0, r0, #7
 8000fee:	bf58      	it	pl
 8000ff0:	4243      	negpl	r3, r0
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	fa00 f303 	lsl.w	r3, r0, r3
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	400b      	ands	r3, r1
 8001000:	b259      	sxtb	r1, r3
 8001002:	01d2      	lsls	r2, r2, #7
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	4413      	add	r3, r2
 8001008:	b2c9      	uxtb	r1, r1
 800100a:	4a89      	ldr	r2, [pc, #548]	; (8001230 <ssd1306_DrawBattery+0x280>)
 800100c:	54d1      	strb	r1, [r2, r3]
		for (int y=50; y<64; y++){
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	3301      	adds	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	2b3f      	cmp	r3, #63	; 0x3f
 8001018:	ddd7      	ble.n	8000fca <ssd1306_DrawBattery+0x1a>
	for (int x=0; x<26; x++){
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3301      	adds	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	2b19      	cmp	r3, #25
 8001024:	ddce      	ble.n	8000fc4 <ssd1306_DrawBattery+0x14>
		}
	}
	//draw outline
	for (int x=2+xOffset; x<24+xOffset; x++)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3302      	adds	r3, #2
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	e01c      	b.n	8001068 <ssd1306_DrawBattery+0xb8>
	{
		SSD1306_Buffer[x + (52 / 8) * SSD1306_WIDTH] |= 1 << (52 % 8);
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001034:	4a7e      	ldr	r2, [pc, #504]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001036:	5cd2      	ldrb	r2, [r2, r3]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800103e:	f042 0210 	orr.w	r2, r2, #16
 8001042:	b2d1      	uxtb	r1, r2
 8001044:	4a7a      	ldr	r2, [pc, #488]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001046:	54d1      	strb	r1, [r2, r3]
		SSD1306_Buffer[x + (61 / 8) * SSD1306_WIDTH] |= 1 << (61 % 8);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800104e:	4a78      	ldr	r2, [pc, #480]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001050:	5cd2      	ldrb	r2, [r2, r3]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001058:	f042 0220 	orr.w	r2, r2, #32
 800105c:	b2d1      	uxtb	r1, r2
 800105e:	4a74      	ldr	r2, [pc, #464]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001060:	54d1      	strb	r1, [r2, r3]
	for (int x=2+xOffset; x<24+xOffset; x++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3318      	adds	r3, #24
 800106c:	69fa      	ldr	r2, [r7, #28]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbdd      	blt.n	800102e <ssd1306_DrawBattery+0x7e>
	}
	for (int y=52; y<62; y++)
 8001072:	2334      	movs	r3, #52	; 0x34
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	e072      	b.n	800115e <ssd1306_DrawBattery+0x1ae>
	{
		SSD1306_Buffer[2+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1c99      	adds	r1, r3, #2
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b00      	cmp	r3, #0
 8001080:	da00      	bge.n	8001084 <ssd1306_DrawBattery+0xd4>
 8001082:	3307      	adds	r3, #7
 8001084:	10db      	asrs	r3, r3, #3
 8001086:	461a      	mov	r2, r3
 8001088:	01d3      	lsls	r3, r2, #7
 800108a:	440b      	add	r3, r1
 800108c:	4968      	ldr	r1, [pc, #416]	; (8001230 <ssd1306_DrawBattery+0x280>)
 800108e:	5ccb      	ldrb	r3, [r1, r3]
 8001090:	b259      	sxtb	r1, r3
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4258      	negs	r0, r3
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	f000 0007 	and.w	r0, r0, #7
 800109e:	bf58      	it	pl
 80010a0:	4243      	negpl	r3, r0
 80010a2:	2001      	movs	r0, #1
 80010a4:	fa00 f303 	lsl.w	r3, r0, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	430b      	orrs	r3, r1
 80010ac:	b258      	sxtb	r0, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1c99      	adds	r1, r3, #2
 80010b2:	01d3      	lsls	r3, r2, #7
 80010b4:	440b      	add	r3, r1
 80010b6:	b2c1      	uxtb	r1, r0
 80010b8:	4a5d      	ldr	r2, [pc, #372]	; (8001230 <ssd1306_DrawBattery+0x280>)
 80010ba:	54d1      	strb	r1, [r2, r3]
		SSD1306_Buffer[23+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f103 0117 	add.w	r1, r3, #23
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	da00      	bge.n	80010ca <ssd1306_DrawBattery+0x11a>
 80010c8:	3307      	adds	r3, #7
 80010ca:	10db      	asrs	r3, r3, #3
 80010cc:	461a      	mov	r2, r3
 80010ce:	01d3      	lsls	r3, r2, #7
 80010d0:	440b      	add	r3, r1
 80010d2:	4957      	ldr	r1, [pc, #348]	; (8001230 <ssd1306_DrawBattery+0x280>)
 80010d4:	5ccb      	ldrb	r3, [r1, r3]
 80010d6:	b259      	sxtb	r1, r3
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4258      	negs	r0, r3
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	f000 0007 	and.w	r0, r0, #7
 80010e4:	bf58      	it	pl
 80010e6:	4243      	negpl	r3, r0
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f303 	lsl.w	r3, r0, r3
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	430b      	orrs	r3, r1
 80010f2:	b258      	sxtb	r0, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f103 0117 	add.w	r1, r3, #23
 80010fa:	01d3      	lsls	r3, r2, #7
 80010fc:	440b      	add	r3, r1
 80010fe:	b2c1      	uxtb	r1, r0
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001102:	54d1      	strb	r1, [r2, r3]
		if (y < 61 && y > 52){
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2b3c      	cmp	r3, #60	; 0x3c
 8001108:	dc26      	bgt.n	8001158 <ssd1306_DrawBattery+0x1a8>
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2b34      	cmp	r3, #52	; 0x34
 800110e:	dd23      	ble.n	8001158 <ssd1306_DrawBattery+0x1a8>
			SSD1306_Buffer[25+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f103 0119 	add.w	r1, r3, #25
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b00      	cmp	r3, #0
 800111a:	da00      	bge.n	800111e <ssd1306_DrawBattery+0x16e>
 800111c:	3307      	adds	r3, #7
 800111e:	10db      	asrs	r3, r3, #3
 8001120:	461a      	mov	r2, r3
 8001122:	01d3      	lsls	r3, r2, #7
 8001124:	440b      	add	r3, r1
 8001126:	4942      	ldr	r1, [pc, #264]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001128:	5ccb      	ldrb	r3, [r1, r3]
 800112a:	b259      	sxtb	r1, r3
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	4258      	negs	r0, r3
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	f000 0007 	and.w	r0, r0, #7
 8001138:	bf58      	it	pl
 800113a:	4243      	negpl	r3, r0
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f303 	lsl.w	r3, r0, r3
 8001142:	b25b      	sxtb	r3, r3
 8001144:	430b      	orrs	r3, r1
 8001146:	b258      	sxtb	r0, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f103 0119 	add.w	r1, r3, #25
 800114e:	01d3      	lsls	r3, r2, #7
 8001150:	440b      	add	r3, r1
 8001152:	b2c1      	uxtb	r1, r0
 8001154:	4a36      	ldr	r2, [pc, #216]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001156:	54d1      	strb	r1, [r2, r3]
	for (int y=52; y<62; y++)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	3301      	adds	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	2b3d      	cmp	r3, #61	; 0x3d
 8001162:	dd89      	ble.n	8001078 <ssd1306_DrawBattery+0xc8>
		}
	}
	SSD1306_Buffer[24+xOffset + (53 / 8) * SSD1306_WIDTH] |= 1 << (53 % 8);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800116a:	4a31      	ldr	r2, [pc, #196]	; (8001230 <ssd1306_DrawBattery+0x280>)
 800116c:	5cd2      	ldrb	r2, [r2, r3]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001174:	f042 0220 	orr.w	r2, r2, #32
 8001178:	b2d1      	uxtb	r1, r2
 800117a:	4a2d      	ldr	r2, [pc, #180]	; (8001230 <ssd1306_DrawBattery+0x280>)
 800117c:	54d1      	strb	r1, [r2, r3]
	SSD1306_Buffer[24+xOffset + (60 / 8) * SSD1306_WIDTH] |= 1 << (60 % 8);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8001184:	4a2a      	ldr	r2, [pc, #168]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001186:	5cd2      	ldrb	r2, [r2, r3]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f503 7366 	add.w	r3, r3, #920	; 0x398
 800118e:	f042 0210 	orr.w	r2, r2, #16
 8001192:	b2d1      	uxtb	r1, r2
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001196:	54d1      	strb	r1, [r2, r3]

	//Draw remaining
	int slices = (int)(20.0 * remaining);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff f97d 	bl	8000498 <__aeabi_f2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <ssd1306_DrawBattery+0x284>)
 80011a4:	f7ff f9d0 	bl	8000548 <__aeabi_dmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	4618      	mov	r0, r3
 80011ae:	4621      	mov	r1, r4
 80011b0:	f7ff fbdc 	bl	800096c <__aeabi_d2iz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60bb      	str	r3, [r7, #8]
	for (int x=3+xOffset; x<(4+xOffset+slices); x++)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3303      	adds	r3, #3
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e02b      	b.n	8001218 <ssd1306_DrawBattery+0x268>
	{
		for (int y=53; y<61; y++)
 80011c0:	2335      	movs	r3, #53	; 0x35
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	e022      	b.n	800120c <ssd1306_DrawBattery+0x25c>
			{
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da00      	bge.n	80011ce <ssd1306_DrawBattery+0x21e>
 80011cc:	3307      	adds	r3, #7
 80011ce:	10db      	asrs	r3, r3, #3
 80011d0:	461a      	mov	r2, r3
 80011d2:	01d1      	lsls	r1, r2, #7
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	440b      	add	r3, r1
 80011d8:	4915      	ldr	r1, [pc, #84]	; (8001230 <ssd1306_DrawBattery+0x280>)
 80011da:	5ccb      	ldrb	r3, [r1, r3]
 80011dc:	b259      	sxtb	r1, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4258      	negs	r0, r3
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	f000 0007 	and.w	r0, r0, #7
 80011ea:	bf58      	it	pl
 80011ec:	4243      	negpl	r3, r0
 80011ee:	2001      	movs	r0, #1
 80011f0:	fa00 f303 	lsl.w	r3, r0, r3
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	430b      	orrs	r3, r1
 80011f8:	b259      	sxtb	r1, r3
 80011fa:	01d2      	lsls	r2, r2, #7
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4413      	add	r3, r2
 8001200:	b2c9      	uxtb	r1, r1
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <ssd1306_DrawBattery+0x280>)
 8001204:	54d1      	strb	r1, [r2, r3]
		for (int y=53; y<61; y++)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	3301      	adds	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b3c      	cmp	r3, #60	; 0x3c
 8001210:	ddd9      	ble.n	80011c6 <ssd1306_DrawBattery+0x216>
	for (int x=3+xOffset; x<(4+xOffset+slices); x++)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3301      	adds	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1d1a      	adds	r2, r3, #4
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4413      	add	r3, r2
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	429a      	cmp	r2, r3
 8001224:	dbcc      	blt.n	80011c0 <ssd1306_DrawBattery+0x210>
			}
	}
}
 8001226:	bf00      	nop
 8001228:	372c      	adds	r7, #44	; 0x2c
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	20000048 	.word	0x20000048
 8001234:	40340000 	.word	0x40340000

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123e:	f002 fb2c 	bl	800389a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001242:	f000 fb57 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 fe79 	bl	8001f3c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800124a:	f000 fbf1 	bl	8001a30 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 800124e:	f000 fc5d 	bl	8001b0c <_ZL12MX_DAC1_Initv>
  MX_I2C1_Init();
 8001252:	f000 fc97 	bl	8001b84 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 8001256:	f000 fce3 	bl	8001c20 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 800125a:	f000 fd33 	bl	8001cc4 <_ZL12MX_TIM2_Initv>
  MX_TIM6_Init();
 800125e:	f000 fd93 	bl	8001d88 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8001262:	f000 fdd1 	bl	8001e08 <_ZL12MX_TIM7_Initv>
  MX_TIM16_Init();
 8001266:	f000 fe0f 	bl	8001e88 <_ZL13MX_TIM16_Initv>
  MX_USB_PCD_Init();
 800126a:	f000 fe39 	bl	8001ee0 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */
  DAC1->DHR12R2 = 2048;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <main+0x94>)
 8001270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001274:	615a      	str	r2, [r3, #20]
calibrate();
 8001276:	f000 fef5 	bl	8002064 <_Z9calibratev>
  GPIOB -> ODR |= GPIO_PIN_12;  //LED
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <main+0x98>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <main+0x98>)
 8001280:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001284:	6153      	str	r3, [r2, #20]
  //HAL_Delay(1000);
  //GPIOB -> ODR |= GPIO_PIN_12;  //LED
 // HAL_Delay(1000);

  //GPIOA -> ODR |= GPIO_PIN_8; //Power enable
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001286:	2108      	movs	r1, #8
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <main+0x9c>)
 800128a:	f006 f87f 	bl	800738c <HAL_TIM_IC_Start_IT>
  //HAL_TIM_Base_Start(&htim7);
  //HAL_TIM_Base_Start_IT(&htim16);
  //HAL_TIM_Base_Start_IT(&htim6);
    tcWrite[8] = 0b11111100;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <main+0xa0>)
 8001290:	22fc      	movs	r2, #252	; 0xfc
 8001292:	721a      	strb	r2, [r3, #8]
  tcWrite[9] = 0b10111111;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <main+0xa0>)
 8001296:	22bf      	movs	r2, #191	; 0xbf
 8001298:	725a      	strb	r2, [r3, #9]


 if (ssd1306_Init(&hi2c2) != 0) {
 800129a:	4810      	ldr	r0, [pc, #64]	; (80012dc <main+0xa4>)
 800129c:	f7ff fbf6 	bl	8000a8c <ssd1306_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <main+0x7c>
     Error_Handler();
 80012b0:	f002 f854 	bl	800335c <Error_Handler>
   }
 updateDisplay(0x01);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f001 fa4d 	bl	8002754 <_Z13updateDisplayh>


  //HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
  //HAL_PWR_EnterSTANDBYMode();

   while (!jammed){
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <main+0xa8>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f083 0301 	eor.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00c      	beq.n	80012e4 <main+0xac>
 80012ca:	e7f6      	b.n	80012ba <main+0x82>
 80012cc:	40007400 	.word	0x40007400
 80012d0:	48000400 	.word	0x48000400
 80012d4:	20000560 	.word	0x20000560
 80012d8:	200009c0 	.word	0x200009c0
 80012dc:	20000514 	.word	0x20000514
 80012e0:	200009a1 	.word	0x200009a1

}

//HAL_Delay(1);
//clockFrame++;
HAL_TIM_Base_Start_IT(&htim7);		//Throw a microsecond delay in here to align the TC perfectly with the input? Currently off by ~1 bits
 80012e4:	48ab      	ldr	r0, [pc, #684]	; (8001594 <main+0x35c>)
 80012e6:	f005 ffa5 	bl	8007234 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //JumpToBootloader();
updateDisplay(0x01);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f001 fa32 	bl	8002754 <_Z13updateDisplayh>
	      stat1 = GPIOA -> IDR & GPIO_PIN_9;
 80012f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4ba4      	ldr	r3, [pc, #656]	; (8001598 <main+0x360>)
 8001306:	701a      	strb	r2, [r3, #0]
    stat2 = GPIOA -> IDR & GPIO_PIN_10;
 8001308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b9f      	ldr	r3, [pc, #636]	; (800159c <main+0x364>)
 800131e:	701a      	strb	r2, [r3, #0]
	    //PA4 STat2
	    //PA5 Stat1
    if (clockFrame == 2073600) clockFrame = 0;
 8001320:	4b9f      	ldr	r3, [pc, #636]	; (80015a0 <main+0x368>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a9f      	ldr	r2, [pc, #636]	; (80015a4 <main+0x36c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <main+0x102>
 8001334:	4b9a      	ldr	r3, [pc, #616]	; (80015a0 <main+0x368>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
    clockFrameOutput = clockFrame + 1;
 800133a:	4b99      	ldr	r3, [pc, #612]	; (80015a0 <main+0x368>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a99      	ldr	r2, [pc, #612]	; (80015a8 <main+0x370>)
 8001342:	6013      	str	r3, [r2, #0]
	    tcWrite[0] = ((clockFrameOutput % frRDv[frameRate]) % 10);
 8001344:	4b98      	ldr	r3, [pc, #608]	; (80015a8 <main+0x370>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a98      	ldr	r2, [pc, #608]	; (80015ac <main+0x374>)
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	4611      	mov	r1, r2
 800134e:	4a98      	ldr	r2, [pc, #608]	; (80015b0 <main+0x378>)
 8001350:	5c52      	ldrb	r2, [r2, r1]
 8001352:	fbb3 f1f2 	udiv	r1, r3, r2
 8001356:	fb02 f201 	mul.w	r2, r2, r1
 800135a:	1a99      	subs	r1, r3, r2
 800135c:	4b95      	ldr	r3, [pc, #596]	; (80015b4 <main+0x37c>)
 800135e:	fba3 2301 	umull	r2, r3, r3, r1
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	1aca      	subs	r2, r1, r3
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	4b91      	ldr	r3, [pc, #580]	; (80015b8 <main+0x380>)
 8001372:	701a      	strb	r2, [r3, #0]
	    tcWrite[0] |= (xtc[7] & 0xF0);
 8001374:	4b91      	ldr	r3, [pc, #580]	; (80015bc <main+0x384>)
 8001376:	79db      	ldrb	r3, [r3, #7]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800137e:	4b8e      	ldr	r3, [pc, #568]	; (80015b8 <main+0x380>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25a      	sxtb	r2, r3
 8001384:	b24b      	sxtb	r3, r1
 8001386:	4313      	orrs	r3, r2
 8001388:	b25b      	sxtb	r3, r3
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b8a      	ldr	r3, [pc, #552]	; (80015b8 <main+0x380>)
 800138e:	701a      	strb	r2, [r3, #0]

	    tcWrite[1] = (clockFrameOutput % frRDv[frameRate]) / 10;
 8001390:	4b85      	ldr	r3, [pc, #532]	; (80015a8 <main+0x370>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a85      	ldr	r2, [pc, #532]	; (80015ac <main+0x374>)
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	4611      	mov	r1, r2
 800139a:	4a85      	ldr	r2, [pc, #532]	; (80015b0 <main+0x378>)
 800139c:	5c52      	ldrb	r2, [r2, r1]
 800139e:	fbb3 f1f2 	udiv	r1, r3, r2
 80013a2:	fb02 f201 	mul.w	r2, r2, r1
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	4a82      	ldr	r2, [pc, #520]	; (80015b4 <main+0x37c>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <main+0x380>)
 80013b4:	705a      	strb	r2, [r3, #1]
	    tcWrite[1] |= (xtc[6] & 0xF0);
 80013b6:	4b81      	ldr	r3, [pc, #516]	; (80015bc <main+0x384>)
 80013b8:	799b      	ldrb	r3, [r3, #6]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80013c0:	4b7d      	ldr	r3, [pc, #500]	; (80015b8 <main+0x380>)
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	b24b      	sxtb	r3, r1
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b7a      	ldr	r3, [pc, #488]	; (80015b8 <main+0x380>)
 80013d0:	705a      	strb	r2, [r3, #1]

	    tcWrite[2] = ((clockFrameOutput / frRDv[frameRate]) % 60) % 10;
 80013d2:	4b75      	ldr	r3, [pc, #468]	; (80015a8 <main+0x370>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a75      	ldr	r2, [pc, #468]	; (80015ac <main+0x374>)
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	4611      	mov	r1, r2
 80013dc:	4a74      	ldr	r2, [pc, #464]	; (80015b0 <main+0x378>)
 80013de:	5c52      	ldrb	r2, [r2, r1]
 80013e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80013e4:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <main+0x388>)
 80013e6:	fba3 2301 	umull	r2, r3, r3, r1
 80013ea:	095a      	lsrs	r2, r3, #5
 80013ec:	4613      	mov	r3, r2
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	1aca      	subs	r2, r1, r3
 80013f6:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <main+0x37c>)
 80013f8:	fba3 1302 	umull	r1, r3, r3, r2
 80013fc:	08d9      	lsrs	r1, r3, #3
 80013fe:	460b      	mov	r3, r1
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	1ad1      	subs	r1, r2, r3
 8001408:	b2ca      	uxtb	r2, r1
 800140a:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <main+0x380>)
 800140c:	709a      	strb	r2, [r3, #2]
	    tcWrite[2] |= (xtc[5] & 0xF0);
 800140e:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <main+0x384>)
 8001410:	795b      	ldrb	r3, [r3, #5]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8001418:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <main+0x380>)
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	b25a      	sxtb	r2, r3
 800141e:	b24b      	sxtb	r3, r1
 8001420:	4313      	orrs	r3, r2
 8001422:	b25b      	sxtb	r3, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b64      	ldr	r3, [pc, #400]	; (80015b8 <main+0x380>)
 8001428:	709a      	strb	r2, [r3, #2]

	    tcWrite[3] = ((clockFrameOutput / frRDv[frameRate]) % 60) / 10;
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <main+0x370>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5f      	ldr	r2, [pc, #380]	; (80015ac <main+0x374>)
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	4611      	mov	r1, r2
 8001434:	4a5e      	ldr	r2, [pc, #376]	; (80015b0 <main+0x378>)
 8001436:	5c52      	ldrb	r2, [r2, r1]
 8001438:	fbb3 f1f2 	udiv	r1, r3, r2
 800143c:	4b60      	ldr	r3, [pc, #384]	; (80015c0 <main+0x388>)
 800143e:	fba3 2301 	umull	r2, r3, r3, r1
 8001442:	095a      	lsrs	r2, r3, #5
 8001444:	4613      	mov	r3, r2
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	1aca      	subs	r2, r1, r3
 800144e:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <main+0x37c>)
 8001450:	fba3 2302 	umull	r2, r3, r3, r2
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <main+0x380>)
 800145a:	70da      	strb	r2, [r3, #3]
	    tcWrite[3] |= (xtc[4] & 0xF0);
 800145c:	4b57      	ldr	r3, [pc, #348]	; (80015bc <main+0x384>)
 800145e:	791b      	ldrb	r3, [r3, #4]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <main+0x380>)
 8001468:	78db      	ldrb	r3, [r3, #3]
 800146a:	b25a      	sxtb	r2, r3
 800146c:	b24b      	sxtb	r3, r1
 800146e:	4313      	orrs	r3, r2
 8001470:	b25b      	sxtb	r3, r3
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b50      	ldr	r3, [pc, #320]	; (80015b8 <main+0x380>)
 8001476:	70da      	strb	r2, [r3, #3]

	    tcWrite[4] = ((clockFrameOutput / (frRDv[frameRate] * 60)) % 60) % 10;
 8001478:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <main+0x370>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <main+0x374>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <main+0x378>)
 8001484:	5c5b      	ldrb	r3, [r3, r1]
 8001486:	4619      	mov	r1, r3
 8001488:	460b      	mov	r3, r1
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	1a5b      	subs	r3, r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fbb2 f1f3 	udiv	r1, r2, r3
 8001494:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <main+0x388>)
 8001496:	fba3 2301 	umull	r2, r3, r3, r1
 800149a:	095a      	lsrs	r2, r3, #5
 800149c:	4613      	mov	r3, r2
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	1aca      	subs	r2, r1, r3
 80014a6:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <main+0x37c>)
 80014a8:	fba3 1302 	umull	r1, r3, r3, r2
 80014ac:	08d9      	lsrs	r1, r3, #3
 80014ae:	460b      	mov	r3, r1
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	1ad1      	subs	r1, r2, r3
 80014b8:	b2ca      	uxtb	r2, r1
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <main+0x380>)
 80014bc:	711a      	strb	r2, [r3, #4]
	    tcWrite[4] |= (xtc[3] & 0xF0);
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <main+0x384>)
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80014c8:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <main+0x380>)
 80014ca:	791b      	ldrb	r3, [r3, #4]
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	b24b      	sxtb	r3, r1
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <main+0x380>)
 80014d8:	711a      	strb	r2, [r3, #4]

	    tcWrite[5] = ((clockFrameOutput / (frRDv[frameRate] * 60)) % 60) / 10;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <main+0x370>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <main+0x374>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <main+0x378>)
 80014e6:	5c5b      	ldrb	r3, [r3, r1]
 80014e8:	4619      	mov	r1, r3
 80014ea:	460b      	mov	r3, r1
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	1a5b      	subs	r3, r3, r1
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80014f6:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <main+0x388>)
 80014f8:	fba3 2301 	umull	r2, r3, r3, r1
 80014fc:	095a      	lsrs	r2, r3, #5
 80014fe:	4613      	mov	r3, r2
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	1aca      	subs	r2, r1, r3
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <main+0x37c>)
 800150a:	fba3 2302 	umull	r2, r3, r3, r2
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <main+0x380>)
 8001514:	715a      	strb	r2, [r3, #5]
	    tcWrite[5] |= (xtc[2] & 0xF0);
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <main+0x384>)
 8001518:	789b      	ldrb	r3, [r3, #2]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <main+0x380>)
 8001522:	795b      	ldrb	r3, [r3, #5]
 8001524:	b25a      	sxtb	r2, r3
 8001526:	b24b      	sxtb	r3, r1
 8001528:	4313      	orrs	r3, r2
 800152a:	b25b      	sxtb	r3, r3
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <main+0x380>)
 8001530:	715a      	strb	r2, [r3, #5]

	    tcWrite[6] = (clockFrameOutput / (frRDv[frameRate] * 60 * 60)) % 10;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <main+0x370>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <main+0x374>)
 8001538:	7812      	ldrb	r2, [r2, #0]
 800153a:	4611      	mov	r1, r2
 800153c:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <main+0x378>)
 800153e:	5c52      	ldrb	r2, [r2, r1]
 8001540:	4611      	mov	r1, r2
 8001542:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001546:	fb02 f201 	mul.w	r2, r2, r1
 800154a:	fbb3 f1f2 	udiv	r1, r3, r2
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <main+0x37c>)
 8001550:	fba3 2301 	umull	r2, r3, r3, r1
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	1aca      	subs	r2, r1, r3
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <main+0x380>)
 8001564:	719a      	strb	r2, [r3, #6]
	    tcWrite[6] |= (xtc[1] & 0xF0);
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <main+0x384>)
 8001568:	785b      	ldrb	r3, [r3, #1]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <main+0x380>)
 8001572:	799b      	ldrb	r3, [r3, #6]
 8001574:	b25a      	sxtb	r2, r3
 8001576:	b24b      	sxtb	r3, r1
 8001578:	4313      	orrs	r3, r2
 800157a:	b25b      	sxtb	r3, r3
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <main+0x380>)
 8001580:	719a      	strb	r2, [r3, #6]

	    tcWrite[7] = (clockFrameOutput / (frRDv[frameRate] * 60 * 60)) / 10;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <main+0x370>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <main+0x374>)
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	4611      	mov	r1, r2
 800158c:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <main+0x378>)
 800158e:	5c52      	ldrb	r2, [r2, r1]
 8001590:	4611      	mov	r1, r2
 8001592:	e017      	b.n	80015c4 <main+0x38c>
 8001594:	200005f8 	.word	0x200005f8
 8001598:	20000a4c 	.word	0x20000a4c
 800159c:	20000a4d 	.word	0x20000a4d
 80015a0:	20000998 	.word	0x20000998
 80015a4:	001fa400 	.word	0x001fa400
 80015a8:	2000099c 	.word	0x2000099c
 80015ac:	20000a6c 	.word	0x20000a6c
 80015b0:	20000018 	.word	0x20000018
 80015b4:	cccccccd 	.word	0xcccccccd
 80015b8:	200009c0 	.word	0x200009c0
 80015bc:	200009b0 	.word	0x200009b0
 80015c0:	88888889 	.word	0x88888889
 80015c4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80015c8:	fb02 f201 	mul.w	r2, r2, r1
 80015cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80015d0:	4a72      	ldr	r2, [pc, #456]	; (800179c <main+0x564>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b71      	ldr	r3, [pc, #452]	; (80017a0 <main+0x568>)
 80015dc:	71da      	strb	r2, [r3, #7]
	    tcWrite[7] |= (xtc[0] & 0xF0);
 80015de:	4b71      	ldr	r3, [pc, #452]	; (80017a4 <main+0x56c>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80015e8:	4b6d      	ldr	r3, [pc, #436]	; (80017a0 <main+0x568>)
 80015ea:	79db      	ldrb	r3, [r3, #7]
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	b24b      	sxtb	r3, r1
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <main+0x568>)
 80015f8:	71da      	strb	r2, [r3, #7]

	    hr = (clockFrameOutput / frRDv[frameRate]) / 3600;
 80015fa:	4b6b      	ldr	r3, [pc, #428]	; (80017a8 <main+0x570>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6b      	ldr	r2, [pc, #428]	; (80017ac <main+0x574>)
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	4611      	mov	r1, r2
 8001604:	4a6a      	ldr	r2, [pc, #424]	; (80017b0 <main+0x578>)
 8001606:	5c52      	ldrb	r2, [r2, r1]
 8001608:	fbb3 f3f2 	udiv	r3, r3, r2
 800160c:	4a69      	ldr	r2, [pc, #420]	; (80017b4 <main+0x57c>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0adb      	lsrs	r3, r3, #11
 8001614:	461a      	mov	r2, r3
 8001616:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <main+0x580>)
 8001618:	601a      	str	r2, [r3, #0]
		mn = ((clockFrameOutput / frRDv[frameRate]) / 60 ) % 60;
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <main+0x570>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a63      	ldr	r2, [pc, #396]	; (80017ac <main+0x574>)
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	4611      	mov	r1, r2
 8001624:	4a62      	ldr	r2, [pc, #392]	; (80017b0 <main+0x578>)
 8001626:	5c52      	ldrb	r2, [r2, r1]
 8001628:	fbb3 f3f2 	udiv	r3, r3, r2
 800162c:	4a63      	ldr	r2, [pc, #396]	; (80017bc <main+0x584>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0959      	lsrs	r1, r3, #5
 8001634:	4b61      	ldr	r3, [pc, #388]	; (80017bc <main+0x584>)
 8001636:	fba3 2301 	umull	r2, r3, r3, r1
 800163a:	095a      	lsrs	r2, r3, #5
 800163c:	4613      	mov	r3, r2
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	1aca      	subs	r2, r1, r3
 8001646:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <main+0x588>)
 8001648:	601a      	str	r2, [r3, #0]
		sc = (clockFrameOutput / frRDv[frameRate]) % 60;
 800164a:	4b57      	ldr	r3, [pc, #348]	; (80017a8 <main+0x570>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a57      	ldr	r2, [pc, #348]	; (80017ac <main+0x574>)
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	4611      	mov	r1, r2
 8001654:	4a56      	ldr	r2, [pc, #344]	; (80017b0 <main+0x578>)
 8001656:	5c52      	ldrb	r2, [r2, r1]
 8001658:	fbb3 f1f2 	udiv	r1, r3, r2
 800165c:	4b57      	ldr	r3, [pc, #348]	; (80017bc <main+0x584>)
 800165e:	fba3 2301 	umull	r2, r3, r3, r1
 8001662:	095a      	lsrs	r2, r3, #5
 8001664:	4613      	mov	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	1aca      	subs	r2, r1, r3
 800166e:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <main+0x58c>)
 8001670:	601a      	str	r2, [r3, #0]
		fr = clockFrameOutput % frRDv[frameRate];
 8001672:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <main+0x570>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a4d      	ldr	r2, [pc, #308]	; (80017ac <main+0x574>)
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	4611      	mov	r1, r2
 800167c:	4a4c      	ldr	r2, [pc, #304]	; (80017b0 <main+0x578>)
 800167e:	5c52      	ldrb	r2, [r2, r1]
 8001680:	fbb3 f1f2 	udiv	r1, r3, r2
 8001684:	fb02 f201 	mul.w	r2, r2, r1
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	461a      	mov	r2, r3
 800168c:	4b4e      	ldr	r3, [pc, #312]	; (80017c8 <main+0x590>)
 800168e:	601a      	str	r2, [r3, #0]


	    	    int oneBits = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
	    for (int i=0; i<10; i++){
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b09      	cmp	r3, #9
 800169c:	dc1b      	bgt.n	80016d6 <main+0x49e>
	    	for (int b=0; b<8; b++){
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b07      	cmp	r3, #7
 80016a6:	dc12      	bgt.n	80016ce <main+0x496>
	    		if (bitRead(tcWrite[i],b) == 1){
 80016a8:	4a3d      	ldr	r2, [pc, #244]	; (80017a0 <main+0x568>)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	fa42 f303 	asr.w	r3, r2, r3
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <main+0x48e>
	    			oneBits++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
	    	for (int b=0; b<8; b++){
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	e7e9      	b.n	80016a2 <main+0x46a>
	    for (int i=0; i<10; i++){
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	e7e0      	b.n	8001698 <main+0x460>
	    		}
	    	}
	    }
	    if (oneBits % 2 > 0){
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	bfb8      	it	lt
 80016e0:	425b      	neglt	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	dd07      	ble.n	80016f6 <main+0x4be>
	    	((tcWrite[7]) |= (1UL << (3)));
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <main+0x568>)
 80016e8:	79db      	ldrb	r3, [r3, #7]
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <main+0x568>)
 80016f2:	71da      	strb	r2, [r3, #7]
 80016f4:	e006      	b.n	8001704 <main+0x4cc>
	    } else {
	    	((tcWrite[7]) &= ~(1UL << (3)));
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <main+0x568>)
 80016f8:	79db      	ldrb	r3, [r3, #7]
 80016fa:	f023 0308 	bic.w	r3, r3, #8
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <main+0x568>)
 8001702:	71da      	strb	r2, [r3, #7]

	  setDigit(0,7,(clockFrame % frRDv[frameRate]) / 10,false);
	  setDigit(0,0,((clockFrame % frRDv[frameRate]) % 10),false);
	    }*/

	  if (blink){
 8001704:	4b31      	ldr	r3, [pc, #196]	; (80017cc <main+0x594>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <main+0x4e4>
		  (GPIOB->ODR) |= (1UL << (12));
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <main+0x598>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <main+0x598>)
 8001714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	e005      	b.n	8001728 <main+0x4f0>
	  } else {
			  (GPIOB->ODR) &= ~(1UL << (12));
 800171c:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <main+0x598>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	4a2b      	ldr	r2, [pc, #172]	; (80017d0 <main+0x598>)
 8001722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001726:	6153      	str	r3, [r2, #20]
	  }


	  	    HAL_ADC_Start(&hadc1);
 8001728:	482a      	ldr	r0, [pc, #168]	; (80017d4 <main+0x59c>)
 800172a:	f002 fc5b 	bl	8003fe4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800172e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001732:	4828      	ldr	r0, [pc, #160]	; (80017d4 <main+0x59c>)
 8001734:	f002 fcb9 	bl	80040aa <HAL_ADC_PollForConversion>
    batt = HAL_ADC_GetValue(&hadc1);
 8001738:	4826      	ldr	r0, [pc, #152]	; (80017d4 <main+0x59c>)
 800173a:	f002 fd3e 	bl	80041ba <HAL_ADC_GetValue>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <main+0x5a0>)
 8001744:	801a      	strh	r2, [r3, #0]
    battAvg[battLoc] = batt;
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <main+0x5a4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <main+0x5a0>)
 800174e:	8819      	ldrh	r1, [r3, #0]
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <main+0x5a8>)
 8001752:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    battLoc++;
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <main+0x5a4>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <main+0x5a4>)
 8001760:	701a      	strb	r2, [r3, #0]
    if (battLoc > 31) battLoc = 0;
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <main+0x5a4>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b1f      	cmp	r3, #31
 8001768:	d902      	bls.n	8001770 <main+0x538>
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <main+0x5a4>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
    battCount = 0;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <main+0x5ac>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
    for (int i = 0; i< 32; i++){
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b1f      	cmp	r3, #31
 800177e:	dc33      	bgt.n	80017e8 <main+0x5b0>
    	battCount += battAvg[i];
 8001780:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <main+0x5a8>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001788:	461a      	mov	r2, r3
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <main+0x5ac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <main+0x5ac>)
 8001792:	6013      	str	r3, [r2, #0]
    for (int i = 0; i< 32; i++){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3301      	adds	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e7ee      	b.n	800177a <main+0x542>
 800179c:	cccccccd 	.word	0xcccccccd
 80017a0:	200009c0 	.word	0x200009c0
 80017a4:	200009b0 	.word	0x200009b0
 80017a8:	2000099c 	.word	0x2000099c
 80017ac:	20000a6c 	.word	0x20000a6c
 80017b0:	20000018 	.word	0x20000018
 80017b4:	91a2b3c5 	.word	0x91a2b3c5
 80017b8:	20000988 	.word	0x20000988
 80017bc:	88888889 	.word	0x88888889
 80017c0:	2000098c 	.word	0x2000098c
 80017c4:	20000990 	.word	0x20000990
 80017c8:	20000994 	.word	0x20000994
 80017cc:	20000a4e 	.word	0x20000a4e
 80017d0:	48000400 	.word	0x48000400
 80017d4:	20000450 	.word	0x20000450
 80017d8:	200009f0 	.word	0x200009f0
 80017dc:	20000a34 	.word	0x20000a34
 80017e0:	200009f4 	.word	0x200009f4
 80017e4:	20000a38 	.word	0x20000a38
    }
    battCount = battCount / 32;
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <main+0x6a0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <main+0x6a0>)
 80017f0:	6013      	str	r3, [r2, #0]
    battStatus = (((float)battCount-2120.0) / 500.0);
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <main+0x6a0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	ee07 3a90 	vmov	s15, r3
 80017fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017fe:	ee17 0a90 	vmov	r0, s15
 8001802:	f7fe fe49 	bl	8000498 <__aeabi_f2d>
 8001806:	a332      	add	r3, pc, #200	; (adr r3, 80018d0 <main+0x698>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fce4 	bl	80001d8 <__aeabi_dsub>
 8001810:	4603      	mov	r3, r0
 8001812:	460c      	mov	r4, r1
 8001814:	4618      	mov	r0, r3
 8001816:	4621      	mov	r1, r4
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <main+0x6a4>)
 800181e:	f7fe ffbd 	bl	800079c <__aeabi_ddiv>
 8001822:	4603      	mov	r3, r0
 8001824:	460c      	mov	r4, r1
 8001826:	4618      	mov	r0, r3
 8001828:	4621      	mov	r1, r4
 800182a:	f7ff f8c7 	bl	80009bc <__aeabi_d2f>
 800182e:	4602      	mov	r2, r0
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <main+0x6a8>)
 8001832:	601a      	str	r2, [r3, #0]
    if (battStatus < 0.0) battStatus = 0.0;
 8001834:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <main+0x6a8>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	d503      	bpl.n	800184c <main+0x614>
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <main+0x6a8>)
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
    if (battStatus > 1.0) battStatus = 1.0;
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <main+0x6a8>)
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	dd03      	ble.n	8001868 <main+0x630>
 8001860:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <main+0x6a8>)
 8001862:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001866:	601a      	str	r2, [r3, #0]
	    //PA7 Battery check pin

    stat1 = GPIOA -> IDR & GPIO_PIN_9;
 8001868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	2b00      	cmp	r3, #0
 8001874:	bf14      	ite	ne
 8001876:	2301      	movne	r3, #1
 8001878:	2300      	moveq	r3, #0
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <main+0x6ac>)
 800187e:	701a      	strb	r2, [r3, #0]
    stat2 = GPIOA -> IDR & GPIO_PIN_10;
 8001880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf14      	ite	ne
 800188e:	2301      	movne	r3, #1
 8001890:	2300      	moveq	r3, #0
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <main+0x6b0>)
 8001896:	701a      	strb	r2, [r3, #0]

    if(GPIOB -> IDR & GPIO_PIN_8){
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <main+0x6b4>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f43f ad1d 	beq.w	80012ea <main+0xb2>
    	     /* Clear the WU FLAG */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <main+0x6b8>)
 80018b2:	221f      	movs	r2, #31
 80018b4:	619a      	str	r2, [r3, #24]


  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f004 fa72 	bl	8005da0 <HAL_PWR_EnableWakeUpPin>
  HAL_Delay(500);
 80018bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c0:	f002 f860 	bl	8003984 <HAL_Delay>
 HAL_PWR_EnterSTANDBYMode();
 80018c4:	f004 fa8c 	bl	8005de0 <HAL_PWR_EnterSTANDBYMode>
	    //PA5 Stat1

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80018c8:	e50f      	b.n	80012ea <main+0xb2>
 80018ca:	bf00      	nop
 80018cc:	f3af 8000 	nop.w
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40a09000 	.word	0x40a09000
 80018d8:	20000a38 	.word	0x20000a38
 80018dc:	407f4000 	.word	0x407f4000
 80018e0:	20000a3c 	.word	0x20000a3c
 80018e4:	20000a4c 	.word	0x20000a4c
 80018e8:	20000a4d 	.word	0x20000a4d
 80018ec:	48000400 	.word	0x48000400
 80018f0:	40007000 	.word	0x40007000

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0ae      	sub	sp, #184	; 0xb8
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018fe:	2244      	movs	r2, #68	; 0x44
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f006 fae8 	bl	8007ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	463b      	mov	r3, r7
 800191a:	2260      	movs	r2, #96	; 0x60
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f006 fada 	bl	8007ed8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001924:	2301      	movs	r3, #1
 8001926:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001928:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800192c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001934:	2303      	movs	r3, #3
 8001936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 2;
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001940:	230a      	movs	r3, #10
 8001942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001946:	2307      	movs	r3, #7
 8001948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001952:	2304      	movs	r3, #4
 8001954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001958:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fabd 	bl	8005edc <HAL_RCC_OscConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf14      	ite	ne
 8001968:	2301      	movne	r3, #1
 800196a:	2300      	moveq	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001972:	f001 fcf3 	bl	800335c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001976:	230f      	movs	r3, #15
 8001978:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197a:	2303      	movs	r3, #3
 800197c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197e:	2300      	movs	r3, #0
 8001980:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800198a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800198e:	2101      	movs	r1, #1
 8001990:	4618      	mov	r0, r3
 8001992:	f004 fec3 	bl	800671c <HAL_RCC_ClockConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80019a6:	f001 fcd9 	bl	800335c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80019aa:	f246 03c0 	movw	r3, #24768	; 0x60c0
 80019ae:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019bc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80019be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80019c4:	2303      	movs	r3, #3
 80019c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 80019cc:	230a      	movs	r3, #10
 80019ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019d0:	2307      	movs	r3, #7
 80019d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019d8:	2302      	movs	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80019dc:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80019e0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4618      	mov	r0, r3
 80019e6:	f005 f899 	bl	8006b1c <HAL_RCCEx_PeriphCLKConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80019fa:	f001 fcaf 	bl	800335c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001a04:	2000      	movs	r0, #0
 8001a06:	f004 ff6b 	bl	80068e0 <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a0e:	f004 fa0f 	bl	8005e30 <HAL_PWREx_ControlVoltageScaling>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8001a22:	f001 fc9b 	bl	800335c <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	37b8      	adds	r7, #184	; 0xb8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a36:	463b      	mov	r3, r7
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
 8001a44:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a48:	4a2e      	ldr	r2, [pc, #184]	; (8001b04 <_ZL12MX_ADC1_Initv+0xd4>)
 8001a4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a66:	2204      	movs	r2, #4
 8001a68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aa6:	4816      	ldr	r0, [pc, #88]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001aa8:	f002 f956 	bl	8003d58 <HAL_ADC_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 8001abc:	f001 fc4e 	bl	800335c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_ZL12MX_ADC1_Initv+0xd8>)
 8001ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ac4:	2306      	movs	r3, #6
 8001ac6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001acc:	237f      	movs	r3, #127	; 0x7f
 8001ace:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4808      	ldr	r0, [pc, #32]	; (8001b00 <_ZL12MX_ADC1_Initv+0xd0>)
 8001ade:	f002 fb79 	bl	80041d4 <HAL_ADC_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8001af2:	f001 fc33 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000450 	.word	0x20000450
 8001b04:	50040000 	.word	0x50040000
 8001b08:	21800100 	.word	0x21800100

08001b0c <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2224      	movs	r2, #36	; 0x24
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f006 f9dd 	bl	8007ed8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <_ZL12MX_DAC1_Initv+0x70>)
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <_ZL12MX_DAC1_Initv+0x74>)
 8001b22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b24:	4815      	ldr	r0, [pc, #84]	; (8001b7c <_ZL12MX_DAC1_Initv+0x70>)
 8001b26:	f003 f89e 	bl	8004c66 <HAL_DAC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 8001b3a:	f001 fc0f 	bl	800335c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2210      	movs	r2, #16
 8001b56:	4619      	mov	r1, r3
 8001b58:	4808      	ldr	r0, [pc, #32]	; (8001b7c <_ZL12MX_DAC1_Initv+0x70>)
 8001b5a:	f003 f90a 	bl	8004d72 <HAL_DAC_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 8001b6e:	f001 fbf5 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	; 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200004b4 	.word	0x200004b4
 8001b80:	40007400 	.word	0x40007400

08001b84 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001b8a:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <_ZL12MX_I2C1_Initv+0x94>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001b90:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <_ZL12MX_I2C1_Initv+0x98>)
 8001b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba0:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bbe:	4815      	ldr	r0, [pc, #84]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001bc0:	f003 fb8e 	bl	80052e0 <HAL_I2C_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8001bd4:	f001 fbc2 	bl	800335c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	480e      	ldr	r0, [pc, #56]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001bdc:	f003 feec 	bl	80059b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf14      	ite	ne
 8001be6:	2301      	movne	r3, #1
 8001be8:	2300      	moveq	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8001bf0:	f001 fbb4 	bl	800335c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4807      	ldr	r0, [pc, #28]	; (8001c14 <_ZL12MX_I2C1_Initv+0x90>)
 8001bf8:	f003 ff29 	bl	8005a4e <HAL_I2CEx_ConfigDigitalFilter>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf14      	ite	ne
 8001c02:	2301      	movne	r3, #1
 8001c04:	2300      	moveq	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8001c0c:	f001 fba6 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	200004c8 	.word	0x200004c8
 8001c18:	40005400 	.word	0x40005400
 8001c1c:	00506682 	.word	0x00506682

08001c20 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c26:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <_ZL12MX_I2C2_Initv+0x9c>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010030D;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c2c:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <_ZL12MX_I2C2_Initv+0xa0>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c5a:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c5c:	f003 fb40 	bl	80052e0 <HAL_I2C_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8001c70:	f001 fb74 	bl	800335c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c74:	2100      	movs	r1, #0
 8001c76:	4810      	ldr	r0, [pc, #64]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c78:	f003 fe9e 	bl	80059b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8001c8c:	f001 fb66 	bl	800335c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c90:	2100      	movs	r1, #0
 8001c92:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <_ZL12MX_I2C2_Initv+0x98>)
 8001c94:	f003 fedb 	bl	8005a4e <HAL_I2CEx_ConfigDigitalFilter>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf14      	ite	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	2300      	moveq	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8001ca8:	f001 fb58 	bl	800335c <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8001cac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001cb0:	f003 ff1a 	bl	8005ae8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000514 	.word	0x20000514
 8001cbc:	40005800 	.word	0x40005800
 8001cc0:	0010030d 	.word	0x0010030d

08001cc4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ce8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24-1;
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001cec:	2217      	movs	r2, #23
 8001cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d0a:	481e      	ldr	r0, [pc, #120]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001d0c:	f005 fae6 	bl	80072dc <HAL_TIM_IC_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8001d20:	f001 fb1c 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	4814      	ldr	r0, [pc, #80]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001d34:	f005 ffb8 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8001d48:	f001 fb08 	bl	800335c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001d4c:	230a      	movs	r3, #10
 8001d4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d50:	2301      	movs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2208      	movs	r2, #8
 8001d60:	4619      	mov	r1, r3
 8001d62:	4808      	ldr	r0, [pc, #32]	; (8001d84 <_ZL12MX_TIM2_Initv+0xc0>)
 8001d64:	f005 fd57 	bl	8007816 <HAL_TIM_IC_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 8001d78:	f001 faf0 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000560 	.word	0x20000560

08001d88 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <_ZL12MX_TIM6_Initv+0x7c>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001da0:	2217      	movs	r2, #23
 8001da2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001dac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001db0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001db8:	4811      	ldr	r0, [pc, #68]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001dba:	f005 f9e3 	bl	8007184 <HAL_TIM_Base_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001dce:	f001 fac5 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4808      	ldr	r0, [pc, #32]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001de0:	f005 ff62 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8001df4:	f001 fab2 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200005ac 	.word	0x200005ac
 8001e04:	40001000 	.word	0x40001000

08001e08 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <_ZL12MX_TIM7_Initv+0x78>)
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <_ZL12MX_TIM7_Initv+0x7c>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <_ZL12MX_TIM7_Initv+0x78>)
 8001e20:	2213      	movs	r2, #19
 8001e22:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <_ZL12MX_TIM7_Initv+0x78>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50049;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <_ZL12MX_TIM7_Initv+0x78>)
 8001e2c:	f24c 3281 	movw	r2, #50049	; 0xc381
 8001e30:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_ZL12MX_TIM7_Initv+0x78>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e38:	4811      	ldr	r0, [pc, #68]	; (8001e80 <_ZL12MX_TIM7_Initv+0x78>)
 8001e3a:	f005 f9a3 	bl	8007184 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 8001e4e:	f001 fa85 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4808      	ldr	r0, [pc, #32]	; (8001e80 <_ZL12MX_TIM7_Initv+0x78>)
 8001e60:	f005 ff22 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf14      	ite	ne
 8001e6a:	2301      	movne	r3, #1
 8001e6c:	2300      	moveq	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8001e74:	f001 fa72 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200005f8 	.word	0x200005f8
 8001e84:	40001400 	.word	0x40001400

08001e88 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <_ZL13MX_TIM16_Initv+0x50>)
 8001e8e:	4a13      	ldr	r2, [pc, #76]	; (8001edc <_ZL13MX_TIM16_Initv+0x54>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <_ZL13MX_TIM16_Initv+0x50>)
 8001e94:	2203      	movs	r2, #3
 8001e96:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <_ZL13MX_TIM16_Initv+0x50>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3128-1;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <_ZL13MX_TIM16_Initv+0x50>)
 8001ea0:	f640 4237 	movw	r2, #3127	; 0xc37
 8001ea4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <_ZL13MX_TIM16_Initv+0x50>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <_ZL13MX_TIM16_Initv+0x50>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <_ZL13MX_TIM16_Initv+0x50>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001eb8:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <_ZL13MX_TIM16_Initv+0x50>)
 8001eba:	f005 f963 	bl	8007184 <HAL_TIM_Base_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8001ece:	f001 fa45 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000644 	.word	0x20000644
 8001edc:	40014400 	.word	0x40014400

08001ee0 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_ZL15MX_USB_PCD_Initv+0x58>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001eec:	2208      	movs	r2, #8
 8001eee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001ef8:	2202      	movs	r2, #2
 8001efa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001f16:	f003 fe07 	bl	8005b28 <HAL_PCD_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8001f2a:	f001 fa17 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000690 	.word	0x20000690
 8001f38:	40006800 	.word	0x40006800

08001f3c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a40      	ldr	r2, [pc, #256]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b35      	ldr	r3, [pc, #212]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a34      	ldr	r2, [pc, #208]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a2e      	ldr	r2, [pc, #184]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <_ZL12MX_GPIO_Initv+0x11c>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f241 0102 	movw	r1, #4098	; 0x1002
 8001fb8:	4828      	ldr	r0, [pc, #160]	; (800205c <_ZL12MX_GPIO_Initv+0x120>)
 8001fba:	f003 f979 	bl	80052b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4823      	ldr	r0, [pc, #140]	; (8002060 <_ZL12MX_GPIO_Initv+0x124>)
 8001fd4:	f002 fff2 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = TC_OUT_Pin|LED_STATUS_Pin;
 8001fd8:	f241 0302 	movw	r3, #4098	; 0x1002
 8001fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481a      	ldr	r0, [pc, #104]	; (800205c <_ZL12MX_GPIO_Initv+0x120>)
 8001ff2:	f002 ffe3 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC_Pin */
  GPIO_InitStruct.Pin = OSC_Pin;
 8001ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OSC_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002016:	f002 ffd1 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin;
 800201a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800201e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002032:	f002 ffc3 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_B_Pin;
 8002036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4804      	ldr	r0, [pc, #16]	; (800205c <_ZL12MX_GPIO_Initv+0x120>)
 800204c:	f002 ffb6 	bl	8004fbc <HAL_GPIO_Init>

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	48000400 	.word	0x48000400
 8002060:	48000800 	.word	0x48000800

08002064 <_Z9calibratev>:

/* USER CODE BEGIN 4 */
void calibrate(){
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
	calibrationA = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <_Z9calibratev+0x40>)
 800206a:	f240 421c 	movw	r2, #1052	; 0x41c
 800206e:	601a      	str	r2, [r3, #0]
	calibrationArray[0] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <_Z9calibratev+0x44>)
 8002072:	f240 421c 	movw	r2, #1052	; 0x41c
 8002076:	601a      	str	r2, [r3, #0]
	calibrationArray[1] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <_Z9calibratev+0x44>)
 800207a:	f240 421a 	movw	r2, #1050	; 0x41a
 800207e:	605a      	str	r2, [r3, #4]
	calibrationArray[2] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <_Z9calibratev+0x44>)
 8002082:	f240 421a 	movw	r2, #1050	; 0x41a
 8002086:	609a      	str	r2, [r3, #8]
	calibrationArray[3] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <_Z9calibratev+0x44>)
 800208a:	f240 421c 	movw	r2, #1052	; 0x41c
 800208e:	60da      	str	r2, [r3, #12]
	calibrationArray[4] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <_Z9calibratev+0x44>)
 8002092:	f240 421a 	movw	r2, #1050	; 0x41a
 8002096:	611a      	str	r2, [r3, #16]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000a54 	.word	0x20000a54
 80020a8:	20000a58 	.word	0x20000a58

080020ac <HAL_TIM_IC_CaptureCallback>:

}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    //if ( GPIO_Pin == GPIO_PIN_8)
	if (htim->Instance == TIM2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	f040 80fc 	bne.w	80022b8 <HAL_TIM_IC_CaptureCallback+0x20c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c0:	b672      	cpsid	i
    {
//Offset++;
		__disable_irq();

    	edgeTimeDiff = __HAL_TIM_GetCounter(htim);          // Get time difference between this and last edge
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	4a7d      	ldr	r2, [pc, #500]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x214>)
 80020ca:	6013      	str	r3, [r2, #0]

    	__HAL_TIM_SetCounter(htim,0);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24
    	                                    // Store time of this edge



    	  if ((edgeTimeDiff < uMin1) or (edgeTimeDiff > uMax0)) { // Drop out now if edge time not withing bounds
 80020d4:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x214>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b81      	cmp	r3, #129	; 0x81
 80020da:	d904      	bls.n	80020e6 <HAL_TIM_IC_CaptureCallback+0x3a>
 80020dc:	4b78      	ldr	r3, [pc, #480]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x214>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
 80020e4:	d301      	bcc.n	80020ea <HAL_TIM_IC_CaptureCallback+0x3e>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_TIM_IC_CaptureCallback+0x40>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00c      	beq.n	800210a <HAL_TIM_IC_CaptureCallback+0x5e>
    	    bitSet(tcFlags, tcFrameError);
 80020f0:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b71      	ldr	r3, [pc, #452]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 80020fe:	701a      	strb	r2, [r3, #0]
    	    jamCount = 0;
 8002100:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002106:	b662      	cpsie	i
    	    __enable_irq();
    	    //Offset++;
    	    return;
 8002108:	e0d7      	b.n	80022ba <HAL_TIM_IC_CaptureCallback+0x20e>
    	  }

    	  if (edgeTimeDiff > uMax1)                               // A zero bit arrived
 800210a:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <HAL_TIM_IC_CaptureCallback+0x214>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002112:	bf8c      	ite	hi
 8002114:	2301      	movhi	r3, #1
 8002116:	2300      	movls	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01f      	beq.n	800215e <HAL_TIM_IC_CaptureCallback+0xb2>
    	  {
    	    if (bitRead(tcFlags, tcHalfOne) == 1){                // But we are expecting a 1 edge
 800211e:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	111b      	asrs	r3, r3, #4
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_TIM_IC_CaptureCallback+0xa8>
    	      bitClear(tcFlags, tcHalfOne);
 8002138:	4b62      	ldr	r3, [pc, #392]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f023 0310 	bic.w	r3, r3, #16
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002146:	701a      	strb	r2, [r3, #0]
    	      clearBuffer(tc, sizeof(tc));
 8002148:	210a      	movs	r1, #10
 800214a:	4860      	ldr	r0, [pc, #384]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x220>)
 800214c:	f000 f8c8 	bl	80022e0 <_Z11clearBufferPhh>
 8002150:	b662      	cpsie	i
    	      __enable_irq();
    	      return;
 8002152:	e0b2      	b.n	80022ba <HAL_TIM_IC_CaptureCallback+0x20e>
    	    }
    	    // 0 bit
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 8002154:	210a      	movs	r1, #10
 8002156:	485d      	ldr	r0, [pc, #372]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x220>)
 8002158:	f000 f8de 	bl	8002318 <_Z10shiftRightPhh>
 800215c:	e028      	b.n	80021b0 <HAL_TIM_IC_CaptureCallback+0x104>
    	    // Shift replaces top bit with zero so nothing else to do
    	    //bitClear(tc[0], 7);                                   // Reset the 1 bit in the buffer
    	  }
    	  else                                                    // Not zero so must be a 1 bit
    	  { // 1 bit
    	    if (bitRead(tcFlags, tcHalfOne) == 0){                // First edge of a 1 bit
 800215e:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_TIM_IC_CaptureCallback+0xde>
    	      bitSet(tcFlags, tcHalfOne);                         // Flag we have the first half
 8002176:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	b662      	cpsie	i
    	      __enable_irq();
    	      return;
 8002188:	e097      	b.n	80022ba <HAL_TIM_IC_CaptureCallback+0x20e>
    	    }
    	    // Second edge of a 1 bit
    	    bitClear(tcFlags, tcHalfOne);                         // Clear half 1 flag
 800218a:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f023 0310 	bic.w	r3, r3, #16
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002198:	701a      	strb	r2, [r3, #0]
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 800219a:	210a      	movs	r1, #10
 800219c:	484b      	ldr	r0, [pc, #300]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x220>)
 800219e:	f000 f8bb 	bl	8002318 <_Z10shiftRightPhh>
    	    bitSet(tc[0], 7);                                     // Set the 1 bit in the buffer
 80021a2:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x220>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x220>)
 80021ae:	701a      	strb	r2, [r3, #0]
    	  }
    	  // Congratulations, we have managed to read a valid 0 or 1 bit into buffer
    	  if (uint16_t( (tc[0] << 8) | (tc[1] & 0xff) ) == sync){                        // Last 2 bytes read = sync?
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x220>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	4b44      	ldr	r3, [pc, #272]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x220>)
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <HAL_TIM_IC_CaptureCallback+0x224>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d177      	bne.n	80022b8 <HAL_TIM_IC_CaptureCallback+0x20c>
    	    bitClear(tcFlags, tcFrameError);                      // Clear framing error
 80021c8:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f023 0302 	bic.w	r3, r3, #2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 80021d6:	701a      	strb	r2, [r3, #0]
    	    bitClear(tcFlags, tcOverrun);                         // Clear overrun error
 80021d8:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 80021e6:	701a      	strb	r2, [r3, #0]
    	    if (bitRead(tcFlags, tcForceUpdate) == 1){
 80021e8:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	10db      	asrs	r3, r3, #3
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <HAL_TIM_IC_CaptureCallback+0x166>
    	      bitClear(tcFlags, tcValid);                         // Signal last TC read
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002210:	701a      	strb	r2, [r3, #0]
    	    }
    	    if (bitRead(tcFlags, tcValid) == 1){                  // Last TC not read
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_TIM_IC_CaptureCallback+0x18e>
    	      bitSet(tcFlags, tcOverrun);                         // Flag overrun error
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002238:	701a      	strb	r2, [r3, #0]
    	     // __enable_irq();
    	     // return;                                             // Do nothing else
    	    }
    	    if (jamEnable){
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_TIM_IC_CaptureCallback+0x228>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00f      	beq.n	8002264 <HAL_TIM_IC_CaptureCallback+0x1b8>
    	    	for (uint8_t x = 0; x < sizeof(xtc); x++){            // Copy buffer without sync word
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b07      	cmp	r3, #7
 800224c:	d80a      	bhi.n	8002264 <HAL_TIM_IC_CaptureCallback+0x1b8>
    	    		xtc[x] = tc[x + 2];
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	1c9a      	adds	r2, r3, #2
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	491d      	ldr	r1, [pc, #116]	; (80022cc <HAL_TIM_IC_CaptureCallback+0x220>)
 8002256:	5c89      	ldrb	r1, [r1, r2]
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800225a:	54d1      	strb	r1, [r2, r3]
    	    	for (uint8_t x = 0; x < sizeof(xtc); x++){            // Copy buffer without sync word
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e7f1      	b.n	8002248 <HAL_TIM_IC_CaptureCallback+0x19c>
    	    	}
    	    }
    	    bitSet(tcFlags, tcValid);                             // Signal valid TC
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002272:	701a      	strb	r2, [r3, #0]
    	    jamCount++;
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3301      	adds	r3, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002280:	701a      	strb	r2, [r3, #0]
    	    if (jamCount > 23 && jamEnable){
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b17      	cmp	r3, #23
 800228a:	d906      	bls.n	800229a <HAL_TIM_IC_CaptureCallback+0x1ee>
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_TIM_IC_CaptureCallback+0x228>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_TIM_IC_CaptureCallback+0x1ee>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_TIM_IC_CaptureCallback+0x1f0>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_TIM_IC_CaptureCallback+0x20a>
    	    	jamEnable = false;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_TIM_IC_CaptureCallback+0x228>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
    	    	jamCount = 0;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
    	    	jammed = true;
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_TIM_IC_CaptureCallback+0x230>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
initTimecode();
 80022b2:	f000 f871 	bl	8002398 <_Z12initTimecodev>
 80022b6:	b662      	cpsie	i
 80022b8:	b662      	cpsie	i
    	    //}
    	  }

    }
	__enable_irq();
}
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200009bc 	.word	0x200009bc
 80022c4:	200009b8 	.word	0x200009b8
 80022c8:	200009a0 	.word	0x200009a0
 80022cc:	200009a4 	.word	0x200009a4
 80022d0:	ffffbffc 	.word	0xffffbffc
 80022d4:	20000010 	.word	0x20000010
 80022d8:	200009b0 	.word	0x200009b0
 80022dc:	200009a1 	.word	0x200009a1

080022e0 <_Z11clearBufferPhh>:

void clearBuffer(uint8_t theArray[], uint8_t theArraySize){
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	429a      	cmp	r2, r3
 80022f8:	da08      	bge.n	800230c <_Z11clearBufferPhh+0x2c>
    theArray[x] = 0;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	e7f1      	b.n	80022f0 <_Z11clearBufferPhh+0x10>
  }
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_Z10shiftRightPhh>:

void shiftRight(uint8_t theArray[], uint8_t theArraySize){
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
  uint8_t x;
  for (x = theArraySize; x > 0; x--){
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d024      	beq.n	8002378 <_Z10shiftRightPhh+0x60>
    uint8_t xBit = bitRead(theArray[x - 1], 0);
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	3b01      	subs	r3, #1
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	73bb      	strb	r3, [r7, #14]
    theArray[x] = theArray[x] >> 1;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	1059      	asrs	r1, r3, #1
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	b2ca      	uxtb	r2, r1
 8002350:	701a      	strb	r2, [r3, #0]
    theArray[x] = theArray[x] | (xBit << 7);
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b25a      	sxtb	r2, r3
 800235c:	7bbb      	ldrb	r3, [r7, #14]
 800235e:	01db      	lsls	r3, r3, #7
 8002360:	b25b      	sxtb	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b259      	sxtb	r1, r3
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	b2ca      	uxtb	r2, r1
 800236e:	701a      	strb	r2, [r3, #0]
  for (x = theArraySize; x > 0; x--){
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	3b01      	subs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
 8002376:	e7d7      	b.n	8002328 <_Z10shiftRightPhh+0x10>
  }
  theArray[x] = theArray[x] >> 1;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	1059      	asrs	r1, r3, #1
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	b2ca      	uxtb	r2, r1
 800238a:	701a      	strb	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_Z12initTimecodev>:

void initTimecode(){
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
  int hr = int(xtc[1] & 0x0F) + (int(xtc[0] & 0x03)*10);
 800239e:	4b2f      	ldr	r3, [pc, #188]	; (800245c <_Z12initTimecodev+0xc4>)
 80023a0:	785b      	ldrb	r3, [r3, #1]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 010f 	and.w	r1, r3, #15
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <_Z12initTimecodev+0xc4>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 0203 	and.w	r2, r3, #3
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	440b      	add	r3, r1
 80023bc:	60fb      	str	r3, [r7, #12]
  int mn = int(xtc[3] & 0x0F) + (int(xtc[2] & 0x07)*10);
 80023be:	4b27      	ldr	r3, [pc, #156]	; (800245c <_Z12initTimecodev+0xc4>)
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f003 010f 	and.w	r1, r3, #15
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <_Z12initTimecodev+0xc4>)
 80023ca:	789b      	ldrb	r3, [r3, #2]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 0207 	and.w	r2, r3, #7
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	60bb      	str	r3, [r7, #8]
  int sc = int(xtc[5] & 0x0F) + (int(xtc[4] & 0x07)*10);
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <_Z12initTimecodev+0xc4>)
 80023e0:	795b      	ldrb	r3, [r3, #5]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f003 010f 	and.w	r1, r3, #15
 80023e8:	4b1c      	ldr	r3, [pc, #112]	; (800245c <_Z12initTimecodev+0xc4>)
 80023ea:	791b      	ldrb	r3, [r3, #4]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f003 0207 	and.w	r2, r3, #7
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	440b      	add	r3, r1
 80023fc:	607b      	str	r3, [r7, #4]
  int fr = int(xtc[7] & 0x0F) + (int(xtc[6] & 0x03)*10);
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <_Z12initTimecodev+0xc4>)
 8002400:	79db      	ldrb	r3, [r3, #7]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 010f 	and.w	r1, r3, #15
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <_Z12initTimecodev+0xc4>)
 800240a:	799b      	ldrb	r3, [r3, #6]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f003 0203 	and.w	r2, r3, #3
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	603b      	str	r3, [r7, #0]
  clockFrame = (hr * 60 * 60 * frRDv[frameRate]) + (mn * 60 * frRDv[frameRate]) + (sc * frRDv[frameRate]) + fr;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002424:	fb02 f103 	mul.w	r1, r2, r3
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	18ca      	adds	r2, r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	4a09      	ldr	r2, [pc, #36]	; (8002460 <_Z12initTimecodev+0xc8>)
 800243a:	7812      	ldrb	r2, [r2, #0]
 800243c:	4611      	mov	r1, r2
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <_Z12initTimecodev+0xcc>)
 8002440:	5c52      	ldrb	r2, [r2, r1]
 8002442:	fb02 f203 	mul.w	r2, r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	461a      	mov	r2, r3
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <_Z12initTimecodev+0xd0>)
 800244e:	601a      	str	r2, [r3, #0]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	200009b0 	.word	0x200009b0
 8002460:	20000a6c 	.word	0x20000a6c
 8002464:	20000018 	.word	0x20000018
 8002468:	20000998 	.word	0x20000998

0800246c <HAL_TIM_PeriodElapsedCallback>:
		//}
	//}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
			  }
		  }
		ledCount++;
	}*/
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4aa0      	ldr	r2, [pc, #640]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	f040 80c0 	bne.w	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
  {
	  switch (writeState){
 800247e:	4b9f      	ldr	r3, [pc, #636]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b07      	cmp	r3, #7
 8002484:	f200 80bb 	bhi.w	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024b1 	.word	0x080024b1
 8002494:	0800255f 	.word	0x0800255f
 8002498:	08002599 	.word	0x08002599
 800249c:	080025a1 	.word	0x080025a1
 80024a0:	080025a9 	.word	0x080025a9
 80024a4:	080025b1 	.word	0x080025b1
 80024a8:	080025b9 	.word	0x080025b9
 80024ac:	080025f3 	.word	0x080025f3
	  case 0x00:

		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 80024b0:	4b93      	ldr	r3, [pc, #588]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	bf0c      	ite	eq
 80024be:	2301      	moveq	r3, #1
 80024c0:	2300      	movne	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_TIM_PeriodElapsedCallback+0x6a>
			  (GPIOB->ODR) &= ~(1UL << (1));
 80024c8:	4b8d      	ldr	r3, [pc, #564]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	4a8c      	ldr	r2, [pc, #560]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80024ce:	f023 0302 	bic.w	r3, r3, #2
 80024d2:	6153      	str	r3, [r2, #20]
 80024d4:	e005      	b.n	80024e2 <HAL_TIM_PeriodElapsedCallback+0x76>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 80024d6:	4b8a      	ldr	r3, [pc, #552]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	4a89      	ldr	r2, [pc, #548]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6153      	str	r3, [r2, #20]
		  }

		  if (((tcWriteBuf[byteNumber] >> bitNumber) & 0x01) == 1){
 80024e2:	4b88      	ldr	r3, [pc, #544]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a88      	ldr	r2, [pc, #544]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b87      	ldr	r3, [pc, #540]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa42 f303 	asr.w	r3, r2, r3
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_TIM_PeriodElapsedCallback+0x98>
			  writeState = 0x01;
 80024fc:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
 8002502:	e002      	b.n	800250a <HAL_TIM_PeriodElapsedCallback+0x9e>
		  } else {
			  writeState = 0x02;
 8002504:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]
		  }
		  bitNumber++;
 800250a:	4b80      	ldr	r3, [pc, #512]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	4a7e      	ldr	r2, [pc, #504]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002512:	6013      	str	r3, [r2, #0]
		  if (bitNumber == 8){
 8002514:	4b7d      	ldr	r3, [pc, #500]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d16f      	bne.n	80025fc <HAL_TIM_PeriodElapsedCallback+0x190>
			  bitNumber = 0;
 800251c:	4b7b      	ldr	r3, [pc, #492]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
			  byteNumber++;
 8002522:	4b78      	ldr	r3, [pc, #480]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	4a76      	ldr	r2, [pc, #472]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800252a:	6013      	str	r3, [r2, #0]
			  if (byteNumber == 10){
 800252c:	4b75      	ldr	r3, [pc, #468]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b0a      	cmp	r3, #10
 8002532:	d163      	bne.n	80025fc <HAL_TIM_PeriodElapsedCallback+0x190>
				  byteNumber = 0;
 8002534:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

				  for (int i=0; i<10; i++){
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b09      	cmp	r3, #9
 8002542:	dc5b      	bgt.n	80025fc <HAL_TIM_PeriodElapsedCallback+0x190>
			  tcWriteBuf[i] = tcWrite[i];
 8002544:	4a72      	ldr	r2, [pc, #456]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4413      	add	r3, r2
 800254a:	7819      	ldrb	r1, [r3, #0]
 800254c:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	460a      	mov	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<10; i++){
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e7ef      	b.n	800253e <HAL_TIM_PeriodElapsedCallback+0xd2>
			  }
		  }
		  break;

	  case 0x01:
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 800255e:	4b68      	ldr	r3, [pc, #416]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_TIM_PeriodElapsedCallback+0x118>
			  (GPIOB->ODR) &= ~(1UL << (1));
 8002576:	4b62      	ldr	r3, [pc, #392]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	4a61      	ldr	r2, [pc, #388]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800257c:	f023 0302 	bic.w	r3, r3, #2
 8002580:	6153      	str	r3, [r2, #20]
 8002582:	e005      	b.n	8002590 <HAL_TIM_PeriodElapsedCallback+0x124>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 8002584:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	4a5d      	ldr	r2, [pc, #372]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800258a:	f043 0302 	orr.w	r3, r3, #2
 800258e:	6153      	str	r3, [r2, #20]
		  }
		  writeState = 0x00;
 8002590:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
		  break;
 8002596:	e032      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
	  case 0x02:
		  writeState = 0x00;
 8002598:	4b58      	ldr	r3, [pc, #352]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
		  break;
 800259e:	e02e      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
	  case 0x03:
		  writeState = 0x04;
 80025a0:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80025a2:	2204      	movs	r2, #4
 80025a4:	701a      	strb	r2, [r3, #0]
		  break;
 80025a6:	e02a      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
	  case 0x04:
		  writeState = 0x01;
 80025a8:	4b54      	ldr	r3, [pc, #336]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
		  break;
 80025ae:	e026      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
	  case 0x05:
		  writeState = 0x06;
 80025b0:	4b52      	ldr	r3, [pc, #328]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80025b2:	2206      	movs	r2, #6
 80025b4:	701a      	strb	r2, [r3, #0]

		  break;
 80025b6:	e022      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
	  case 0x06:
		  writeState = 0x07;
 80025b8:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80025ba:	2207      	movs	r2, #7
 80025bc:	701a      	strb	r2, [r3, #0]
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d006      	beq.n	80025e4 <HAL_TIM_PeriodElapsedCallback+0x178>
			  (GPIOB->ODR) &= ~(1UL << (1));
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80025dc:	f023 0302 	bic.w	r3, r3, #2
 80025e0:	6153      	str	r3, [r2, #20]
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
		  }
		  break;
 80025e2:	e00c      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
			  (GPIOB->ODR) |= (1UL << (1));
 80025e4:	4b46      	ldr	r3, [pc, #280]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	4a45      	ldr	r2, [pc, #276]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	6153      	str	r3, [r2, #20]
		  break;
 80025f0:	e005      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
	  case 0x07:
		  writeState = 0x01;
 80025f2:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	701a      	strb	r2, [r3, #0]
		  break;
 80025f8:	bf00      	nop
 80025fa:	e000      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x192>
		  break;
 80025fc:	bf00      	nop
	  }

  }
  if (htim == &htim7){
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a44      	ldr	r2, [pc, #272]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	f040 809e 	bne.w	8002744 <HAL_TIM_PeriodElapsedCallback+0x2d8>
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
	  __disable_irq();
	  clockFrame++;
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	4a41      	ldr	r2, [pc, #260]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002612:	6013      	str	r3, [r2, #0]
	  if (compensate){
 8002614:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d017      	beq.n	800264e <HAL_TIM_PeriodElapsedCallback+0x1e2>
		  //reset to 50049
		  __HAL_TIM_SET_AUTORELOAD(&htim7,frARR[frameRate]);
 800261e:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002626:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800262a:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002630:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002638:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800263c:	461a      	mov	r2, r3
 800263e:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002640:	60da      	str	r2, [r3, #12]
		  //TIM7->ARR = 50049;
		  compensate = false;
 8002642:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
		  compensationCounter = 0;
 8002648:	4b37      	ldr	r3, [pc, #220]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800264a:	2200      	movs	r2, #0
 800264c:	801a      	strh	r2, [r3, #0]
	  }

	  if (compensationCounter == calibrationInterval[frameRate]){
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800265e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002662:	429a      	cmp	r2, r3
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d024      	beq.n	80026ba <HAL_TIM_PeriodElapsedCallback+0x24e>
		  __HAL_TIM_SET_AUTORELOAD(&htim7, (frARR[frameRate] + calibrationArray[frameRate]));
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002678:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800267c:	461a      	mov	r2, r3
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002686:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800268a:	441a      	add	r2, r3
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800269a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800269e:	461a      	mov	r2, r3
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80026a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026ac:	4413      	add	r3, r2
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80026b2:	60da      	str	r2, [r3, #12]
		  compensate = true;
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]

	  }
compensationCounter++;
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3301      	adds	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80026c6:	801a      	strh	r2, [r3, #0]


	  if (clockFrame % frRDv[frameRate] == 0){
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	4611      	mov	r1, r2
 80026d2:	4a18      	ldr	r2, [pc, #96]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80026d4:	5c52      	ldrb	r2, [r2, r1]
 80026d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80026da:	fb02 f201 	mul.w	r2, r2, r1
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d026      	beq.n	800273c <HAL_TIM_PeriodElapsedCallback+0x2d0>
		  blink = true;
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e025      	b.n	8002742 <HAL_TIM_PeriodElapsedCallback+0x2d6>
 80026f6:	bf00      	nop
 80026f8:	20000644 	.word	0x20000644
 80026fc:	200009e7 	.word	0x200009e7
 8002700:	48000400 	.word	0x48000400
 8002704:	200009e8 	.word	0x200009e8
 8002708:	200009cc 	.word	0x200009cc
 800270c:	200009ec 	.word	0x200009ec
 8002710:	200009c0 	.word	0x200009c0
 8002714:	200005f8 	.word	0x200005f8
 8002718:	20000998 	.word	0x20000998
 800271c:	20000a52 	.word	0x20000a52
 8002720:	20000a6c 	.word	0x20000a6c
 8002724:	08009494 	.word	0x08009494
 8002728:	20000a50 	.word	0x20000a50
 800272c:	08009480 	.word	0x08009480
 8002730:	20000a58 	.word	0x20000a58
 8002734:	20000018 	.word	0x20000018
 8002738:	20000a4e 	.word	0x20000a4e
	  } else {
			  blink = false;
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002742:	b662      	cpsie	i
	  }

	  __enable_irq();
  }
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	20000a4e 	.word	0x20000a4e

08002754 <_Z13updateDisplayh>:
}




void updateDisplay(uint8_t state){
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
	switch (state)
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b05      	cmp	r3, #5
 8002762:	f200 85ee 	bhi.w	8003342 <_Z13updateDisplayh+0xbee>
 8002766:	a201      	add	r2, pc, #4	; (adr r2, 800276c <_Z13updateDisplayh+0x18>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	08002785 	.word	0x08002785
 8002770:	08002795 	.word	0x08002795
 8002774:	08002aed 	.word	0x08002aed
 8002778:	08002dcb 	.word	0x08002dcb
 800277c:	08003093 	.word	0x08003093
 8002780:	080030cb 	.word	0x080030cb
	{
	case 0x0:	//Blank
		ssd1306_Fill(Black);
 8002784:	2000      	movs	r0, #0
 8002786:	f7fe faa1 	bl	8000ccc <ssd1306_Fill>
		ssd1306_UpdateScreen(&hi2c2);
 800278a:	489c      	ldr	r0, [pc, #624]	; (80029fc <_Z13updateDisplayh+0x2a8>)
 800278c:	f7fe fac0 	bl	8000d10 <ssd1306_UpdateScreen>
		break;
 8002790:	f000 bdd7 	b.w	8003342 <_Z13updateDisplayh+0xbee>
	case 0x01:	//Standard
		tcDisplay[0] = foo[hr / 10];
 8002794:	4b9a      	ldr	r3, [pc, #616]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b9a      	ldr	r3, [pc, #616]	; (8002a04 <_Z13updateDisplayh+0x2b0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	499a      	ldr	r1, [pc, #616]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 800279e:	fb81 0103 	smull	r0, r1, r1, r3
 80027a2:	1089      	asrs	r1, r1, #2
 80027a4:	17db      	asrs	r3, r3, #31
 80027a6:	1acb      	subs	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	4b97      	ldr	r3, [pc, #604]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 80027ae:	701a      	strb	r2, [r3, #0]
			    tcDisplay[1] = foo[hr % 10];
 80027b0:	4b93      	ldr	r3, [pc, #588]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <_Z13updateDisplayh+0x2b0>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b93      	ldr	r3, [pc, #588]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 80027ba:	fb83 1302 	smull	r1, r3, r3, r2
 80027be:	1099      	asrs	r1, r3, #2
 80027c0:	17d3      	asrs	r3, r2, #31
 80027c2:	1ac9      	subs	r1, r1, r3
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	1ad1      	subs	r1, r2, r3
 80027ce:	460b      	mov	r3, r1
 80027d0:	4403      	add	r3, r0
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	4b8d      	ldr	r3, [pc, #564]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 80027d6:	705a      	strb	r2, [r3, #1]
			    tcDisplay[2] = ':';
 80027d8:	4b8c      	ldr	r3, [pc, #560]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 80027da:	223a      	movs	r2, #58	; 0x3a
 80027dc:	709a      	strb	r2, [r3, #2]
			    tcDisplay[3] = foo[mn / 10];
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <_Z13updateDisplayh+0x2bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4988      	ldr	r1, [pc, #544]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 80027e8:	fb81 0103 	smull	r0, r1, r1, r3
 80027ec:	1089      	asrs	r1, r1, #2
 80027ee:	17db      	asrs	r3, r3, #31
 80027f0:	1acb      	subs	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	781a      	ldrb	r2, [r3, #0]
 80027f6:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 80027f8:	70da      	strb	r2, [r3, #3]
			    tcDisplay[4] = foo[mn % 10];
 80027fa:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	4b84      	ldr	r3, [pc, #528]	; (8002a10 <_Z13updateDisplayh+0x2bc>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b81      	ldr	r3, [pc, #516]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 8002804:	fb83 1302 	smull	r1, r3, r3, r2
 8002808:	1099      	asrs	r1, r3, #2
 800280a:	17d3      	asrs	r3, r2, #31
 800280c:	1ac9      	subs	r1, r1, r3
 800280e:	460b      	mov	r3, r1
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	1ad1      	subs	r1, r2, r3
 8002818:	460b      	mov	r3, r1
 800281a:	4403      	add	r3, r0
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 8002820:	711a      	strb	r2, [r3, #4]
			    tcDisplay[5] = ':';
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 8002824:	223a      	movs	r2, #58	; 0x3a
 8002826:	715a      	strb	r2, [r3, #5]
			    tcDisplay[6] = foo[sc / 10];
 8002828:	4b75      	ldr	r3, [pc, #468]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <_Z13updateDisplayh+0x2c0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4975      	ldr	r1, [pc, #468]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 8002832:	fb81 0103 	smull	r0, r1, r1, r3
 8002836:	1089      	asrs	r1, r1, #2
 8002838:	17db      	asrs	r3, r3, #31
 800283a:	1acb      	subs	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 8002842:	719a      	strb	r2, [r3, #6]
			    tcDisplay[7] = foo[sc % 10];
 8002844:	4b6e      	ldr	r3, [pc, #440]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	4b72      	ldr	r3, [pc, #456]	; (8002a14 <_Z13updateDisplayh+0x2c0>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b6e      	ldr	r3, [pc, #440]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 800284e:	fb83 1302 	smull	r1, r3, r3, r2
 8002852:	1099      	asrs	r1, r3, #2
 8002854:	17d3      	asrs	r3, r2, #31
 8002856:	1ac9      	subs	r1, r1, r3
 8002858:	460b      	mov	r3, r1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	1ad1      	subs	r1, r2, r3
 8002862:	460b      	mov	r3, r1
 8002864:	4403      	add	r3, r0
 8002866:	781a      	ldrb	r2, [r3, #0]
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 800286a:	71da      	strb	r2, [r3, #7]
			    tcDisplay[8] = ':';
 800286c:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 800286e:	223a      	movs	r2, #58	; 0x3a
 8002870:	721a      	strb	r2, [r3, #8]
			    tcDisplay[9] = foo[fr / 10];
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <_Z13updateDisplayh+0x2c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4963      	ldr	r1, [pc, #396]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 800287c:	fb81 0103 	smull	r0, r1, r1, r3
 8002880:	1089      	asrs	r1, r1, #2
 8002882:	17db      	asrs	r3, r3, #31
 8002884:	1acb      	subs	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 800288c:	725a      	strb	r2, [r3, #9]
			    tcDisplay[10] = foo[fr % 10];
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <_Z13updateDisplayh+0x2c4>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 8002898:	fb83 1302 	smull	r1, r3, r3, r2
 800289c:	1099      	asrs	r1, r3, #2
 800289e:	17d3      	asrs	r3, r2, #31
 80028a0:	1ac9      	subs	r1, r1, r3
 80028a2:	460b      	mov	r3, r1
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	1ad1      	subs	r1, r2, r3
 80028ac:	460b      	mov	r3, r1
 80028ae:	4403      	add	r3, r0
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	4b56      	ldr	r3, [pc, #344]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 80028b4:	729a      	strb	r2, [r3, #10]
			    if (Offset < 0){
 80028b6:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <_Z13updateDisplayh+0x2c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	da03      	bge.n	80028c6 <_Z13updateDisplayh+0x172>
			   dispOffset[0] = '-';
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <_Z13updateDisplayh+0x2cc>)
 80028c0:	222d      	movs	r2, #45	; 0x2d
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	e002      	b.n	80028cc <_Z13updateDisplayh+0x178>
		   } else {
			   dispOffset[0] = '+';
 80028c6:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <_Z13updateDisplayh+0x2cc>)
 80028c8:	222b      	movs	r2, #43	; 0x2b
 80028ca:	701a      	strb	r2, [r3, #0]
		   }
		   if (Offset < 0){
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <_Z13updateDisplayh+0x2c8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	da24      	bge.n	800291e <_Z13updateDisplayh+0x1ca>
			   dispOffset[1] = foo[(Offset * -1)/10];
 80028d4:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <_Z13updateDisplayh+0x2c8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	425b      	negs	r3, r3
 80028de:	494a      	ldr	r1, [pc, #296]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 80028e0:	fb81 0103 	smull	r0, r1, r1, r3
 80028e4:	1089      	asrs	r1, r1, #2
 80028e6:	17db      	asrs	r3, r3, #31
 80028e8:	1acb      	subs	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	4b4c      	ldr	r3, [pc, #304]	; (8002a20 <_Z13updateDisplayh+0x2cc>)
 80028f0:	705a      	strb	r2, [r3, #1]
			   dispOffset[2] = foo[(Offset * -1)%10];
 80028f2:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <_Z13updateDisplayh+0x2c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	425a      	negs	r2, r3
 80028fc:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 80028fe:	fb83 1302 	smull	r1, r3, r3, r2
 8002902:	1099      	asrs	r1, r3, #2
 8002904:	17d3      	asrs	r3, r2, #31
 8002906:	1ac9      	subs	r1, r1, r3
 8002908:	460b      	mov	r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	1ad1      	subs	r1, r2, r3
 8002912:	460b      	mov	r3, r1
 8002914:	4403      	add	r3, r0
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <_Z13updateDisplayh+0x2cc>)
 800291a:	709a      	strb	r2, [r3, #2]
 800291c:	e021      	b.n	8002962 <_Z13updateDisplayh+0x20e>
		   } else {
			   dispOffset[1] = foo[Offset/10];
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <_Z13updateDisplayh+0x2c8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4938      	ldr	r1, [pc, #224]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 8002928:	fb81 0103 	smull	r0, r1, r1, r3
 800292c:	1089      	asrs	r1, r1, #2
 800292e:	17db      	asrs	r3, r3, #31
 8002930:	1acb      	subs	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	4b3a      	ldr	r3, [pc, #232]	; (8002a20 <_Z13updateDisplayh+0x2cc>)
 8002938:	705a      	strb	r2, [r3, #1]
			   dispOffset[2] = foo[Offset%10];
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <_Z13updateDisplayh+0x2ac>)
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <_Z13updateDisplayh+0x2c8>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <_Z13updateDisplayh+0x2b4>)
 8002944:	fb83 1302 	smull	r1, r3, r3, r2
 8002948:	1099      	asrs	r1, r3, #2
 800294a:	17d3      	asrs	r3, r2, #31
 800294c:	1ac9      	subs	r1, r1, r3
 800294e:	460b      	mov	r3, r1
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	1ad1      	subs	r1, r2, r3
 8002958:	460b      	mov	r3, r1
 800295a:	4403      	add	r3, r0
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <_Z13updateDisplayh+0x2cc>)
 8002960:	709a      	strb	r2, [r3, #2]
		      //ssd1306_SetCursor(4,32);
		      //ssd1306_WriteString("<", Font_11x18, White);
		      //ssd1306_SetCursor(116,32);
		      //ssd1306_WriteString(">", Font_11x18, White);

		      ssd1306_SetCursor(4,24);
 8002962:	2118      	movs	r1, #24
 8002964:	2004      	movs	r0, #4
 8002966:	f7fe fb0b 	bl	8000f80 <ssd1306_SetCursor>
		      ssd1306_WriteString(tcDisplay,Font_11x18,White);
 800296a:	4a2e      	ldr	r2, [pc, #184]	; (8002a24 <_Z13updateDisplayh+0x2d0>)
 800296c:	2301      	movs	r3, #1
 800296e:	ca06      	ldmia	r2, {r1, r2}
 8002970:	4826      	ldr	r0, [pc, #152]	; (8002a0c <_Z13updateDisplayh+0x2b8>)
 8002972:	f7fe fadf 	bl	8000f34 <ssd1306_WriteString>

		      ssd1306_SetCursor(4,6);
 8002976:	2106      	movs	r1, #6
 8002978:	2004      	movs	r0, #4
 800297a:	f7fe fb01 	bl	8000f80 <ssd1306_SetCursor>
		      ssd1306_WriteString("23.98",Font_7x10,White);
 800297e:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <_Z13updateDisplayh+0x2d4>)
 8002980:	2301      	movs	r3, #1
 8002982:	ca06      	ldmia	r2, {r1, r2}
 8002984:	4829      	ldr	r0, [pc, #164]	; (8002a2c <_Z13updateDisplayh+0x2d8>)
 8002986:	f7fe fad5 	bl	8000f34 <ssd1306_WriteString>

		      ssd1306_SetCursor(92,52);
 800298a:	2134      	movs	r1, #52	; 0x34
 800298c:	205c      	movs	r0, #92	; 0x5c
 800298e:	f7fe faf7 	bl	8000f80 <ssd1306_SetCursor>
		      ssd1306_WriteString("Menu",Font_7x10,White);
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <_Z13updateDisplayh+0x2d4>)
 8002994:	2301      	movs	r3, #1
 8002996:	ca06      	ldmia	r2, {r1, r2}
 8002998:	4825      	ldr	r0, [pc, #148]	; (8002a30 <_Z13updateDisplayh+0x2dc>)
 800299a:	f7fe facb 	bl	8000f34 <ssd1306_WriteString>


		      ssd1306_DrawBattery(battStatus);
 800299e:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <_Z13updateDisplayh+0x2e0>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	eeb0 0a67 	vmov.f32	s0, s15
 80029a8:	f7fe fb02 	bl	8000fb0 <ssd1306_DrawBattery>
		      ssd1306_SetCursor(34,52);
 80029ac:	2134      	movs	r1, #52	; 0x34
 80029ae:	2022      	movs	r0, #34	; 0x22
 80029b0:	f7fe fae6 	bl	8000f80 <ssd1306_SetCursor>
		      battPrint = int(battStatus * 100.0);
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <_Z13updateDisplayh+0x2e0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd6d 	bl	8000498 <__aeabi_f2d>
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <_Z13updateDisplayh+0x2e4>)
 80029c4:	f7fd fdc0 	bl	8000548 <__aeabi_dmul>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	4618      	mov	r0, r3
 80029ce:	4621      	mov	r1, r4
 80029d0:	f7fd ffcc 	bl	800096c <__aeabi_d2iz>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <_Z13updateDisplayh+0x2e8>)
 80029d8:	601a      	str	r2, [r3, #0]
		      if (battPrint == 100){
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <_Z13updateDisplayh+0x2e8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d130      	bne.n	8002a44 <_Z13updateDisplayh+0x2f0>
		    	  battDisp[0] = '1';
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <_Z13updateDisplayh+0x2ec>)
 80029e4:	2231      	movs	r2, #49	; 0x31
 80029e6:	701a      	strb	r2, [r3, #0]
		    	  battDisp[1] = '0';
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <_Z13updateDisplayh+0x2ec>)
 80029ea:	2230      	movs	r2, #48	; 0x30
 80029ec:	705a      	strb	r2, [r3, #1]
		    	  battDisp[2] = '0';
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <_Z13updateDisplayh+0x2ec>)
 80029f0:	2230      	movs	r2, #48	; 0x30
 80029f2:	709a      	strb	r2, [r3, #2]
		    	  battDisp[3] = '%';
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <_Z13updateDisplayh+0x2ec>)
 80029f6:	2225      	movs	r2, #37	; 0x25
 80029f8:	70da      	strb	r2, [r3, #3]
 80029fa:	e069      	b.n	8002ad0 <_Z13updateDisplayh+0x37c>
 80029fc:	20000514 	.word	0x20000514
 8002a00:	20000014 	.word	0x20000014
 8002a04:	20000988 	.word	0x20000988
 8002a08:	66666667 	.word	0x66666667
 8002a0c:	200009d8 	.word	0x200009d8
 8002a10:	2000098c 	.word	0x2000098c
 8002a14:	20000990 	.word	0x20000990
 8002a18:	20000994 	.word	0x20000994
 8002a1c:	20000984 	.word	0x20000984
 8002a20:	200009e4 	.word	0x200009e4
 8002a24:	20000008 	.word	0x20000008
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	08007f0c 	.word	0x08007f0c
 8002a30:	08007f14 	.word	0x08007f14
 8002a34:	20000a3c 	.word	0x20000a3c
 8002a38:	40590000 	.word	0x40590000
 8002a3c:	20000a48 	.word	0x20000a48
 8002a40:	20000a40 	.word	0x20000a40
		      }else {
		    	  battDisp[0] = ' ';
 8002a44:	4ba4      	ldr	r3, [pc, #656]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002a46:	2220      	movs	r2, #32
 8002a48:	701a      	strb	r2, [r3, #0]
		    	  battDisp[1] = foo[battPrint / 10];
 8002a4a:	4ba4      	ldr	r3, [pc, #656]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4ba4      	ldr	r3, [pc, #656]	; (8002ce0 <_Z13updateDisplayh+0x58c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	49a4      	ldr	r1, [pc, #656]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002a54:	fb81 0103 	smull	r0, r1, r1, r3
 8002a58:	1089      	asrs	r1, r1, #2
 8002a5a:	17db      	asrs	r3, r3, #31
 8002a5c:	1acb      	subs	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	4b9d      	ldr	r3, [pc, #628]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002a64:	705a      	strb	r2, [r3, #1]
		    	  battDisp[2] = foo[battPrint % 10];
 8002a66:	4b9d      	ldr	r3, [pc, #628]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	4b9d      	ldr	r3, [pc, #628]	; (8002ce0 <_Z13updateDisplayh+0x58c>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b9d      	ldr	r3, [pc, #628]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002a70:	fb83 1302 	smull	r1, r3, r3, r2
 8002a74:	1099      	asrs	r1, r3, #2
 8002a76:	17d3      	asrs	r3, r2, #31
 8002a78:	1ac9      	subs	r1, r1, r3
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	1ad1      	subs	r1, r2, r3
 8002a84:	460b      	mov	r3, r1
 8002a86:	4403      	add	r3, r0
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b93      	ldr	r3, [pc, #588]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002a8c:	709a      	strb	r2, [r3, #2]
		    	  if (!stat1 && stat2) battDisp[3] = '^';
 8002a8e:	4b96      	ldr	r3, [pc, #600]	; (8002ce8 <_Z13updateDisplayh+0x594>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f083 0301 	eor.w	r3, r3, #1
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <_Z13updateDisplayh+0x358>
 8002a9c:	4b93      	ldr	r3, [pc, #588]	; (8002cec <_Z13updateDisplayh+0x598>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <_Z13updateDisplayh+0x358>
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002aa6:	225e      	movs	r2, #94	; 0x5e
 8002aa8:	70da      	strb	r2, [r3, #3]
 8002aaa:	e011      	b.n	8002ad0 <_Z13updateDisplayh+0x37c>
		    	  else if (stat1 && !stat2) battDisp[3] = '!';
 8002aac:	4b8e      	ldr	r3, [pc, #568]	; (8002ce8 <_Z13updateDisplayh+0x594>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <_Z13updateDisplayh+0x376>
 8002ab4:	4b8d      	ldr	r3, [pc, #564]	; (8002cec <_Z13updateDisplayh+0x598>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f083 0301 	eor.w	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <_Z13updateDisplayh+0x376>
 8002ac2:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	70da      	strb	r2, [r3, #3]
 8002ac8:	e002      	b.n	8002ad0 <_Z13updateDisplayh+0x37c>
		    	  else battDisp[3] = '%';
 8002aca:	4b83      	ldr	r3, [pc, #524]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002acc:	2225      	movs	r2, #37	; 0x25
 8002ace:	70da      	strb	r2, [r3, #3]
		      }
		      battDisp[4] = ' ';
 8002ad0:	4b81      	ldr	r3, [pc, #516]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	711a      	strb	r2, [r3, #4]
		      ssd1306_WriteString(battDisp,Font_7x10,White);
 8002ad6:	4a86      	ldr	r2, [pc, #536]	; (8002cf0 <_Z13updateDisplayh+0x59c>)
 8002ad8:	2301      	movs	r3, #1
 8002ada:	ca06      	ldmia	r2, {r1, r2}
 8002adc:	487e      	ldr	r0, [pc, #504]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002ade:	f7fe fa29 	bl	8000f34 <ssd1306_WriteString>
		      ssd1306_UpdateScreen(&hi2c2);
 8002ae2:	4884      	ldr	r0, [pc, #528]	; (8002cf4 <_Z13updateDisplayh+0x5a0>)
 8002ae4:	f7fe f914 	bl	8000d10 <ssd1306_UpdateScreen>
		break;
 8002ae8:	f000 bc2b 	b.w	8003342 <_Z13updateDisplayh+0xbee>
	case 0x02:	//Locked, button bumped
		tcDisplay[0] = foo[hr / 10];
 8002aec:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <_Z13updateDisplayh+0x5a4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	497b      	ldr	r1, [pc, #492]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002af6:	fb81 0103 	smull	r0, r1, r1, r3
 8002afa:	1089      	asrs	r1, r1, #2
 8002afc:	17db      	asrs	r3, r3, #31
 8002afe:	1acb      	subs	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	4b7d      	ldr	r3, [pc, #500]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002b06:	701a      	strb	r2, [r3, #0]
			    tcDisplay[1] = foo[hr % 10];
 8002b08:	4b74      	ldr	r3, [pc, #464]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	4b7a      	ldr	r3, [pc, #488]	; (8002cf8 <_Z13updateDisplayh+0x5a4>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b74      	ldr	r3, [pc, #464]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002b12:	fb83 1302 	smull	r1, r3, r3, r2
 8002b16:	1099      	asrs	r1, r3, #2
 8002b18:	17d3      	asrs	r3, r2, #31
 8002b1a:	1ac9      	subs	r1, r1, r3
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	1ad1      	subs	r1, r2, r3
 8002b26:	460b      	mov	r3, r1
 8002b28:	4403      	add	r3, r0
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	4b73      	ldr	r3, [pc, #460]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002b2e:	705a      	strb	r2, [r3, #1]
			    tcDisplay[2] = ':';
 8002b30:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002b32:	223a      	movs	r2, #58	; 0x3a
 8002b34:	709a      	strb	r2, [r3, #2]
			    tcDisplay[3] = foo[mn / 10];
 8002b36:	4b69      	ldr	r3, [pc, #420]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b71      	ldr	r3, [pc, #452]	; (8002d00 <_Z13updateDisplayh+0x5ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4969      	ldr	r1, [pc, #420]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002b40:	fb81 0103 	smull	r0, r1, r1, r3
 8002b44:	1089      	asrs	r1, r1, #2
 8002b46:	17db      	asrs	r3, r3, #31
 8002b48:	1acb      	subs	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002b50:	70da      	strb	r2, [r3, #3]
			    tcDisplay[4] = foo[mn % 10];
 8002b52:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <_Z13updateDisplayh+0x5ac>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b62      	ldr	r3, [pc, #392]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002b5c:	fb83 1302 	smull	r1, r3, r3, r2
 8002b60:	1099      	asrs	r1, r3, #2
 8002b62:	17d3      	asrs	r3, r2, #31
 8002b64:	1ac9      	subs	r1, r1, r3
 8002b66:	460b      	mov	r3, r1
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	1ad1      	subs	r1, r2, r3
 8002b70:	460b      	mov	r3, r1
 8002b72:	4403      	add	r3, r0
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002b78:	711a      	strb	r2, [r3, #4]
			    tcDisplay[5] = ':';
 8002b7a:	4b60      	ldr	r3, [pc, #384]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002b7c:	223a      	movs	r2, #58	; 0x3a
 8002b7e:	715a      	strb	r2, [r3, #5]
			    tcDisplay[6] = foo[sc / 10];
 8002b80:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <_Z13updateDisplayh+0x5b0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4956      	ldr	r1, [pc, #344]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002b8a:	fb81 0103 	smull	r0, r1, r1, r3
 8002b8e:	1089      	asrs	r1, r1, #2
 8002b90:	17db      	asrs	r3, r3, #31
 8002b92:	1acb      	subs	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002b9a:	719a      	strb	r2, [r3, #6]
			    tcDisplay[7] = foo[sc % 10];
 8002b9c:	4b4f      	ldr	r3, [pc, #316]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <_Z13updateDisplayh+0x5b0>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002ba6:	fb83 1302 	smull	r1, r3, r3, r2
 8002baa:	1099      	asrs	r1, r3, #2
 8002bac:	17d3      	asrs	r3, r2, #31
 8002bae:	1ac9      	subs	r1, r1, r3
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	1ad1      	subs	r1, r2, r3
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4403      	add	r3, r0
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	4b4e      	ldr	r3, [pc, #312]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002bc2:	71da      	strb	r2, [r3, #7]
			    tcDisplay[8] = ':';
 8002bc4:	4b4d      	ldr	r3, [pc, #308]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002bc6:	223a      	movs	r2, #58	; 0x3a
 8002bc8:	721a      	strb	r2, [r3, #8]
			    tcDisplay[9] = foo[fr / 10];
 8002bca:	4b44      	ldr	r3, [pc, #272]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <_Z13updateDisplayh+0x5b4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4944      	ldr	r1, [pc, #272]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002bd4:	fb81 0103 	smull	r0, r1, r1, r3
 8002bd8:	1089      	asrs	r1, r1, #2
 8002bda:	17db      	asrs	r3, r3, #31
 8002bdc:	1acb      	subs	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	4b46      	ldr	r3, [pc, #280]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002be4:	725a      	strb	r2, [r3, #9]
			    tcDisplay[10] = foo[fr % 10];
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <_Z13updateDisplayh+0x588>)
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <_Z13updateDisplayh+0x5b4>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <_Z13updateDisplayh+0x590>)
 8002bf0:	fb83 1302 	smull	r1, r3, r3, r2
 8002bf4:	1099      	asrs	r1, r3, #2
 8002bf6:	17d3      	asrs	r3, r2, #31
 8002bf8:	1ac9      	subs	r1, r1, r3
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	1ad1      	subs	r1, r2, r3
 8002c04:	460b      	mov	r3, r1
 8002c06:	4403      	add	r3, r0
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002c0c:	729a      	strb	r2, [r3, #10]
		ssd1306_Fill(Black);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fe f85c 	bl	8000ccc <ssd1306_Fill>
		ssd1306_SetCursor(44,20);
 8002c14:	2114      	movs	r1, #20
 8002c16:	202c      	movs	r0, #44	; 0x2c
 8002c18:	f7fe f9b2 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("Locked", Font_7x10, White);
 8002c1c:	4a34      	ldr	r2, [pc, #208]	; (8002cf0 <_Z13updateDisplayh+0x59c>)
 8002c1e:	2301      	movs	r3, #1
 8002c20:	ca06      	ldmia	r2, {r1, r2}
 8002c22:	483a      	ldr	r0, [pc, #232]	; (8002d0c <_Z13updateDisplayh+0x5b8>)
 8002c24:	f7fe f986 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_SetCursor(24,30);
 8002c28:	211e      	movs	r1, #30
 8002c2a:	2018      	movs	r0, #24
 8002c2c:	f7fe f9a8 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("Hold < and >", Font_7x10, White);
 8002c30:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <_Z13updateDisplayh+0x59c>)
 8002c32:	2301      	movs	r3, #1
 8002c34:	ca06      	ldmia	r2, {r1, r2}
 8002c36:	4836      	ldr	r0, [pc, #216]	; (8002d10 <_Z13updateDisplayh+0x5bc>)
 8002c38:	f7fe f97c 	bl	8000f34 <ssd1306_WriteString>

		 ssd1306_SetCursor(34,40);
 8002c3c:	2128      	movs	r1, #40	; 0x28
 8002c3e:	2022      	movs	r0, #34	; 0x22
 8002c40:	f7fe f99e 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("to unlock", Font_7x10, White);
 8002c44:	4a2a      	ldr	r2, [pc, #168]	; (8002cf0 <_Z13updateDisplayh+0x59c>)
 8002c46:	2301      	movs	r3, #1
 8002c48:	ca06      	ldmia	r2, {r1, r2}
 8002c4a:	4832      	ldr	r0, [pc, #200]	; (8002d14 <_Z13updateDisplayh+0x5c0>)
 8002c4c:	f7fe f972 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_SetCursor(2,6);
 8002c50:	2106      	movs	r1, #6
 8002c52:	2002      	movs	r0, #2
 8002c54:	f7fe f994 	bl	8000f80 <ssd1306_SetCursor>
		      ssd1306_WriteString(tcDisplay,Font_7x10,White);
 8002c58:	4a25      	ldr	r2, [pc, #148]	; (8002cf0 <_Z13updateDisplayh+0x59c>)
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	ca06      	ldmia	r2, {r1, r2}
 8002c5e:	4827      	ldr	r0, [pc, #156]	; (8002cfc <_Z13updateDisplayh+0x5a8>)
 8002c60:	f7fe f968 	bl	8000f34 <ssd1306_WriteString>

		      ssd1306_SetCursor(90,6);
 8002c64:	2106      	movs	r1, #6
 8002c66:	205a      	movs	r0, #90	; 0x5a
 8002c68:	f7fe f98a 	bl	8000f80 <ssd1306_SetCursor>
		      ssd1306_WriteString("23.98",Font_7x10,White);
 8002c6c:	4a20      	ldr	r2, [pc, #128]	; (8002cf0 <_Z13updateDisplayh+0x59c>)
 8002c6e:	2301      	movs	r3, #1
 8002c70:	ca06      	ldmia	r2, {r1, r2}
 8002c72:	4829      	ldr	r0, [pc, #164]	; (8002d18 <_Z13updateDisplayh+0x5c4>)
 8002c74:	f7fe f95e 	bl	8000f34 <ssd1306_WriteString>

		      ssd1306_DrawBattery(battStatus);
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <_Z13updateDisplayh+0x5c8>)
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c82:	f7fe f995 	bl	8000fb0 <ssd1306_DrawBattery>
		      ssd1306_SetCursor(34,52);
 8002c86:	2134      	movs	r1, #52	; 0x34
 8002c88:	2022      	movs	r0, #34	; 0x22
 8002c8a:	f7fe f979 	bl	8000f80 <ssd1306_SetCursor>
		      battPrint = int(battStatus * 100.0);
 8002c8e:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <_Z13updateDisplayh+0x5c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc00 	bl	8000498 <__aeabi_f2d>
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <_Z13updateDisplayh+0x5cc>)
 8002c9e:	f7fd fc53 	bl	8000548 <__aeabi_dmul>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	4621      	mov	r1, r4
 8002caa:	f7fd fe5f 	bl	800096c <__aeabi_d2iz>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <_Z13updateDisplayh+0x58c>)
 8002cb2:	601a      	str	r2, [r3, #0]
		      if (battPrint == 100){
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <_Z13updateDisplayh+0x58c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b64      	cmp	r3, #100	; 0x64
 8002cba:	d133      	bne.n	8002d24 <_Z13updateDisplayh+0x5d0>
		    	  battDisp[0] = '1';
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002cbe:	2231      	movs	r2, #49	; 0x31
 8002cc0:	701a      	strb	r2, [r3, #0]
		    	  battDisp[1] = '0';
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002cc4:	2230      	movs	r2, #48	; 0x30
 8002cc6:	705a      	strb	r2, [r3, #1]
		    	  battDisp[2] = '0';
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002cca:	2230      	movs	r2, #48	; 0x30
 8002ccc:	709a      	strb	r2, [r3, #2]
		    	  battDisp[3] = '%';
 8002cce:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <_Z13updateDisplayh+0x584>)
 8002cd0:	2225      	movs	r2, #37	; 0x25
 8002cd2:	70da      	strb	r2, [r3, #3]
 8002cd4:	e06c      	b.n	8002db0 <_Z13updateDisplayh+0x65c>
 8002cd6:	bf00      	nop
 8002cd8:	20000a40 	.word	0x20000a40
 8002cdc:	20000014 	.word	0x20000014
 8002ce0:	20000a48 	.word	0x20000a48
 8002ce4:	66666667 	.word	0x66666667
 8002ce8:	20000a4c 	.word	0x20000a4c
 8002cec:	20000a4d 	.word	0x20000a4d
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000514 	.word	0x20000514
 8002cf8:	20000988 	.word	0x20000988
 8002cfc:	200009d8 	.word	0x200009d8
 8002d00:	2000098c 	.word	0x2000098c
 8002d04:	20000990 	.word	0x20000990
 8002d08:	20000994 	.word	0x20000994
 8002d0c:	08007f1c 	.word	0x08007f1c
 8002d10:	08007f24 	.word	0x08007f24
 8002d14:	08007f34 	.word	0x08007f34
 8002d18:	08007f0c 	.word	0x08007f0c
 8002d1c:	20000a3c 	.word	0x20000a3c
 8002d20:	40590000 	.word	0x40590000
		      }else {
		    	  battDisp[0] = ' ';
 8002d24:	4b9f      	ldr	r3, [pc, #636]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002d26:	2220      	movs	r2, #32
 8002d28:	701a      	strb	r2, [r3, #0]
		    	  battDisp[1] = foo[battPrint / 10];
 8002d2a:	4b9f      	ldr	r3, [pc, #636]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b9f      	ldr	r3, [pc, #636]	; (8002fac <_Z13updateDisplayh+0x858>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	499f      	ldr	r1, [pc, #636]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002d34:	fb81 0103 	smull	r0, r1, r1, r3
 8002d38:	1089      	asrs	r1, r1, #2
 8002d3a:	17db      	asrs	r3, r3, #31
 8002d3c:	1acb      	subs	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	4b98      	ldr	r3, [pc, #608]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002d44:	705a      	strb	r2, [r3, #1]
		    	  battDisp[2] = foo[battPrint % 10];
 8002d46:	4b98      	ldr	r3, [pc, #608]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	4b98      	ldr	r3, [pc, #608]	; (8002fac <_Z13updateDisplayh+0x858>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b98      	ldr	r3, [pc, #608]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002d50:	fb83 1302 	smull	r1, r3, r3, r2
 8002d54:	1099      	asrs	r1, r3, #2
 8002d56:	17d3      	asrs	r3, r2, #31
 8002d58:	1ac9      	subs	r1, r1, r3
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	1ad1      	subs	r1, r2, r3
 8002d64:	460b      	mov	r3, r1
 8002d66:	4403      	add	r3, r0
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	4b8e      	ldr	r3, [pc, #568]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002d6c:	709a      	strb	r2, [r3, #2]
		    	  if (!stat1 && stat2) battDisp[3] = '^';
 8002d6e:	4b91      	ldr	r3, [pc, #580]	; (8002fb4 <_Z13updateDisplayh+0x860>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <_Z13updateDisplayh+0x638>
 8002d7c:	4b8e      	ldr	r3, [pc, #568]	; (8002fb8 <_Z13updateDisplayh+0x864>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <_Z13updateDisplayh+0x638>
 8002d84:	4b87      	ldr	r3, [pc, #540]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002d86:	225e      	movs	r2, #94	; 0x5e
 8002d88:	70da      	strb	r2, [r3, #3]
 8002d8a:	e011      	b.n	8002db0 <_Z13updateDisplayh+0x65c>
		    	  else if (stat1 && !stat2) battDisp[3] = '!';
 8002d8c:	4b89      	ldr	r3, [pc, #548]	; (8002fb4 <_Z13updateDisplayh+0x860>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <_Z13updateDisplayh+0x656>
 8002d94:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <_Z13updateDisplayh+0x864>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f083 0301 	eor.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <_Z13updateDisplayh+0x656>
 8002da2:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002da4:	2221      	movs	r2, #33	; 0x21
 8002da6:	70da      	strb	r2, [r3, #3]
 8002da8:	e002      	b.n	8002db0 <_Z13updateDisplayh+0x65c>
		    	  else battDisp[3] = '%';
 8002daa:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002dac:	2225      	movs	r2, #37	; 0x25
 8002dae:	70da      	strb	r2, [r3, #3]
		      }
		      battDisp[4] = ' ';
 8002db0:	4b7c      	ldr	r3, [pc, #496]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002db2:	2220      	movs	r2, #32
 8002db4:	711a      	strb	r2, [r3, #4]
		      ssd1306_WriteString(battDisp,Font_7x10,White);
 8002db6:	4a81      	ldr	r2, [pc, #516]	; (8002fbc <_Z13updateDisplayh+0x868>)
 8002db8:	2301      	movs	r3, #1
 8002dba:	ca06      	ldmia	r2, {r1, r2}
 8002dbc:	4879      	ldr	r0, [pc, #484]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002dbe:	f7fe f8b9 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_UpdateScreen(&hi2c2);
 8002dc2:	487f      	ldr	r0, [pc, #508]	; (8002fc0 <_Z13updateDisplayh+0x86c>)
 8002dc4:	f7fd ffa4 	bl	8000d10 <ssd1306_UpdateScreen>
		break;
 8002dc8:	e2bb      	b.n	8003342 <_Z13updateDisplayh+0xbee>
	case 0x03:	//Locked, button held
		tcDisplay[0] = foo[hr / 10];
 8002dca:	4b77      	ldr	r3, [pc, #476]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b7d      	ldr	r3, [pc, #500]	; (8002fc4 <_Z13updateDisplayh+0x870>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4977      	ldr	r1, [pc, #476]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002dd4:	fb81 0103 	smull	r0, r1, r1, r3
 8002dd8:	1089      	asrs	r1, r1, #2
 8002dda:	17db      	asrs	r3, r3, #31
 8002ddc:	1acb      	subs	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002de4:	701a      	strb	r2, [r3, #0]
			    tcDisplay[1] = foo[hr % 10];
 8002de6:	4b70      	ldr	r3, [pc, #448]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <_Z13updateDisplayh+0x870>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b70      	ldr	r3, [pc, #448]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002df0:	fb83 1302 	smull	r1, r3, r3, r2
 8002df4:	1099      	asrs	r1, r3, #2
 8002df6:	17d3      	asrs	r3, r2, #31
 8002df8:	1ac9      	subs	r1, r1, r3
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	1ad1      	subs	r1, r2, r3
 8002e04:	460b      	mov	r3, r1
 8002e06:	4403      	add	r3, r0
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002e0c:	705a      	strb	r2, [r3, #1]
			    tcDisplay[2] = ':';
 8002e0e:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002e10:	223a      	movs	r2, #58	; 0x3a
 8002e12:	709a      	strb	r2, [r3, #2]
			    tcDisplay[3] = foo[mn / 10];
 8002e14:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b6c      	ldr	r3, [pc, #432]	; (8002fcc <_Z13updateDisplayh+0x878>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4964      	ldr	r1, [pc, #400]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002e1e:	fb81 0103 	smull	r0, r1, r1, r3
 8002e22:	1089      	asrs	r1, r1, #2
 8002e24:	17db      	asrs	r3, r3, #31
 8002e26:	1acb      	subs	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002e2e:	70da      	strb	r2, [r3, #3]
			    tcDisplay[4] = foo[mn % 10];
 8002e30:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <_Z13updateDisplayh+0x878>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002e3a:	fb83 1302 	smull	r1, r3, r3, r2
 8002e3e:	1099      	asrs	r1, r3, #2
 8002e40:	17d3      	asrs	r3, r2, #31
 8002e42:	1ac9      	subs	r1, r1, r3
 8002e44:	460b      	mov	r3, r1
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	1ad1      	subs	r1, r2, r3
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4403      	add	r3, r0
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b5c      	ldr	r3, [pc, #368]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002e56:	711a      	strb	r2, [r3, #4]
			    tcDisplay[5] = ':';
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002e5a:	223a      	movs	r2, #58	; 0x3a
 8002e5c:	715a      	strb	r2, [r3, #5]
			    tcDisplay[6] = foo[sc / 10];
 8002e5e:	4b52      	ldr	r3, [pc, #328]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b5b      	ldr	r3, [pc, #364]	; (8002fd0 <_Z13updateDisplayh+0x87c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4952      	ldr	r1, [pc, #328]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002e68:	fb81 0103 	smull	r0, r1, r1, r3
 8002e6c:	1089      	asrs	r1, r1, #2
 8002e6e:	17db      	asrs	r3, r3, #31
 8002e70:	1acb      	subs	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002e78:	719a      	strb	r2, [r3, #6]
			    tcDisplay[7] = foo[sc % 10];
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <_Z13updateDisplayh+0x87c>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002e84:	fb83 1302 	smull	r1, r3, r3, r2
 8002e88:	1099      	asrs	r1, r3, #2
 8002e8a:	17d3      	asrs	r3, r2, #31
 8002e8c:	1ac9      	subs	r1, r1, r3
 8002e8e:	460b      	mov	r3, r1
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	1ad1      	subs	r1, r2, r3
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4403      	add	r3, r0
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002ea0:	71da      	strb	r2, [r3, #7]
			    tcDisplay[8] = ':';
 8002ea2:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002ea4:	223a      	movs	r2, #58	; 0x3a
 8002ea6:	721a      	strb	r2, [r3, #8]
			    tcDisplay[9] = foo[fr / 10];
 8002ea8:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <_Z13updateDisplayh+0x880>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	493f      	ldr	r1, [pc, #252]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002eb2:	fb81 0103 	smull	r0, r1, r1, r3
 8002eb6:	1089      	asrs	r1, r1, #2
 8002eb8:	17db      	asrs	r3, r3, #31
 8002eba:	1acb      	subs	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002ec2:	725a      	strb	r2, [r3, #9]
			    tcDisplay[10] = foo[fr % 10];
 8002ec4:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <_Z13updateDisplayh+0x854>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <_Z13updateDisplayh+0x880>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b38      	ldr	r3, [pc, #224]	; (8002fb0 <_Z13updateDisplayh+0x85c>)
 8002ece:	fb83 1302 	smull	r1, r3, r3, r2
 8002ed2:	1099      	asrs	r1, r3, #2
 8002ed4:	17d3      	asrs	r3, r2, #31
 8002ed6:	1ac9      	subs	r1, r1, r3
 8002ed8:	460b      	mov	r3, r1
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	1ad1      	subs	r1, r2, r3
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4403      	add	r3, r0
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002eea:	729a      	strb	r2, [r3, #10]
		ssd1306_Fill(Black);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7fd feed 	bl	8000ccc <ssd1306_Fill>
		ssd1306_SetCursor(44,20);
 8002ef2:	2114      	movs	r1, #20
 8002ef4:	202c      	movs	r0, #44	; 0x2c
 8002ef6:	f7fe f843 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("Locked", Font_7x10, White);
 8002efa:	4a30      	ldr	r2, [pc, #192]	; (8002fbc <_Z13updateDisplayh+0x868>)
 8002efc:	2301      	movs	r3, #1
 8002efe:	ca06      	ldmia	r2, {r1, r2}
 8002f00:	4835      	ldr	r0, [pc, #212]	; (8002fd8 <_Z13updateDisplayh+0x884>)
 8002f02:	f7fe f817 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_SetCursor(60,32);
 8002f06:	2120      	movs	r1, #32
 8002f08:	203c      	movs	r0, #60	; 0x3c
 8002f0a:	f7fe f839 	bl	8000f80 <ssd1306_SetCursor>
		//lockDisplay = foo[lockCountdown];
		ssd1306_WriteChar(lockDisplay, Font_7x10, White);
 8002f0e:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <_Z13updateDisplayh+0x888>)
 8002f10:	7818      	ldrb	r0, [r3, #0]
 8002f12:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <_Z13updateDisplayh+0x868>)
 8002f14:	2301      	movs	r3, #1
 8002f16:	ca06      	ldmia	r2, {r1, r2}
 8002f18:	f7fd ff8c 	bl	8000e34 <ssd1306_WriteChar>
		ssd1306_SetCursor(2,6);
 8002f1c:	2106      	movs	r1, #6
 8002f1e:	2002      	movs	r0, #2
 8002f20:	f7fe f82e 	bl	8000f80 <ssd1306_SetCursor>
		      ssd1306_WriteString(tcDisplay,Font_7x10,White);
 8002f24:	4a25      	ldr	r2, [pc, #148]	; (8002fbc <_Z13updateDisplayh+0x868>)
 8002f26:	2301      	movs	r3, #1
 8002f28:	ca06      	ldmia	r2, {r1, r2}
 8002f2a:	4827      	ldr	r0, [pc, #156]	; (8002fc8 <_Z13updateDisplayh+0x874>)
 8002f2c:	f7fe f802 	bl	8000f34 <ssd1306_WriteString>

		      ssd1306_SetCursor(90,6);
 8002f30:	2106      	movs	r1, #6
 8002f32:	205a      	movs	r0, #90	; 0x5a
 8002f34:	f7fe f824 	bl	8000f80 <ssd1306_SetCursor>
		      ssd1306_WriteString("23.98",Font_7x10,White);
 8002f38:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <_Z13updateDisplayh+0x868>)
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	ca06      	ldmia	r2, {r1, r2}
 8002f3e:	4828      	ldr	r0, [pc, #160]	; (8002fe0 <_Z13updateDisplayh+0x88c>)
 8002f40:	f7fd fff8 	bl	8000f34 <ssd1306_WriteString>
		      ssd1306_DrawBattery(battStatus);
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <_Z13updateDisplayh+0x890>)
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4e:	f7fe f82f 	bl	8000fb0 <ssd1306_DrawBattery>
		      ssd1306_SetCursor(34,52);
 8002f52:	2134      	movs	r1, #52	; 0x34
 8002f54:	2022      	movs	r0, #34	; 0x22
 8002f56:	f7fe f813 	bl	8000f80 <ssd1306_SetCursor>
		      battPrint = int(battStatus * 100.0);
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <_Z13updateDisplayh+0x890>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fa9a 	bl	8000498 <__aeabi_f2d>
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <_Z13updateDisplayh+0x894>)
 8002f6a:	f7fd faed 	bl	8000548 <__aeabi_dmul>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	4618      	mov	r0, r3
 8002f74:	4621      	mov	r1, r4
 8002f76:	f7fd fcf9 	bl	800096c <__aeabi_d2iz>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <_Z13updateDisplayh+0x858>)
 8002f7e:	601a      	str	r2, [r3, #0]
		      if (battPrint == 100){
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <_Z13updateDisplayh+0x858>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b64      	cmp	r3, #100	; 0x64
 8002f86:	d131      	bne.n	8002fec <_Z13updateDisplayh+0x898>
		    	  battDisp[0] = '1';
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002f8a:	2231      	movs	r2, #49	; 0x31
 8002f8c:	701a      	strb	r2, [r3, #0]
		    	  battDisp[1] = '0';
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002f90:	2230      	movs	r2, #48	; 0x30
 8002f92:	705a      	strb	r2, [r3, #1]
		    	  battDisp[2] = '0';
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002f96:	2230      	movs	r2, #48	; 0x30
 8002f98:	709a      	strb	r2, [r3, #2]
		    	  battDisp[3] = '%';
 8002f9a:	4b02      	ldr	r3, [pc, #8]	; (8002fa4 <_Z13updateDisplayh+0x850>)
 8002f9c:	2225      	movs	r2, #37	; 0x25
 8002f9e:	70da      	strb	r2, [r3, #3]
 8002fa0:	e06a      	b.n	8003078 <_Z13updateDisplayh+0x924>
 8002fa2:	bf00      	nop
 8002fa4:	20000a40 	.word	0x20000a40
 8002fa8:	20000014 	.word	0x20000014
 8002fac:	20000a48 	.word	0x20000a48
 8002fb0:	66666667 	.word	0x66666667
 8002fb4:	20000a4c 	.word	0x20000a4c
 8002fb8:	20000a4d 	.word	0x20000a4d
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000514 	.word	0x20000514
 8002fc4:	20000988 	.word	0x20000988
 8002fc8:	200009d8 	.word	0x200009d8
 8002fcc:	2000098c 	.word	0x2000098c
 8002fd0:	20000990 	.word	0x20000990
 8002fd4:	20000994 	.word	0x20000994
 8002fd8:	08007f1c 	.word	0x08007f1c
 8002fdc:	20000a71 	.word	0x20000a71
 8002fe0:	08007f0c 	.word	0x08007f0c
 8002fe4:	20000a3c 	.word	0x20000a3c
 8002fe8:	40590000 	.word	0x40590000
		      }else {
		    	  battDisp[0] = ' ';
 8002fec:	4ba8      	ldr	r3, [pc, #672]	; (8003290 <_Z13updateDisplayh+0xb3c>)
 8002fee:	2220      	movs	r2, #32
 8002ff0:	701a      	strb	r2, [r3, #0]
		    	  battDisp[1] = foo[battPrint / 10];
 8002ff2:	4ba8      	ldr	r3, [pc, #672]	; (8003294 <_Z13updateDisplayh+0xb40>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4ba8      	ldr	r3, [pc, #672]	; (8003298 <_Z13updateDisplayh+0xb44>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	49a8      	ldr	r1, [pc, #672]	; (800329c <_Z13updateDisplayh+0xb48>)
 8002ffc:	fb81 0103 	smull	r0, r1, r1, r3
 8003000:	1089      	asrs	r1, r1, #2
 8003002:	17db      	asrs	r3, r3, #31
 8003004:	1acb      	subs	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	4ba1      	ldr	r3, [pc, #644]	; (8003290 <_Z13updateDisplayh+0xb3c>)
 800300c:	705a      	strb	r2, [r3, #1]
		    	  battDisp[2] = foo[battPrint % 10];
 800300e:	4ba1      	ldr	r3, [pc, #644]	; (8003294 <_Z13updateDisplayh+0xb40>)
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	4ba1      	ldr	r3, [pc, #644]	; (8003298 <_Z13updateDisplayh+0xb44>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4ba1      	ldr	r3, [pc, #644]	; (800329c <_Z13updateDisplayh+0xb48>)
 8003018:	fb83 1302 	smull	r1, r3, r3, r2
 800301c:	1099      	asrs	r1, r3, #2
 800301e:	17d3      	asrs	r3, r2, #31
 8003020:	1ac9      	subs	r1, r1, r3
 8003022:	460b      	mov	r3, r1
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	1ad1      	subs	r1, r2, r3
 800302c:	460b      	mov	r3, r1
 800302e:	4403      	add	r3, r0
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	4b97      	ldr	r3, [pc, #604]	; (8003290 <_Z13updateDisplayh+0xb3c>)
 8003034:	709a      	strb	r2, [r3, #2]
		    	  if (!stat1 && stat2) battDisp[3] = '^';
 8003036:	4b9a      	ldr	r3, [pc, #616]	; (80032a0 <_Z13updateDisplayh+0xb4c>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <_Z13updateDisplayh+0x900>
 8003044:	4b97      	ldr	r3, [pc, #604]	; (80032a4 <_Z13updateDisplayh+0xb50>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <_Z13updateDisplayh+0x900>
 800304c:	4b90      	ldr	r3, [pc, #576]	; (8003290 <_Z13updateDisplayh+0xb3c>)
 800304e:	225e      	movs	r2, #94	; 0x5e
 8003050:	70da      	strb	r2, [r3, #3]
 8003052:	e011      	b.n	8003078 <_Z13updateDisplayh+0x924>
		    	  else if (stat1 && !stat2) battDisp[3] = '!';
 8003054:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <_Z13updateDisplayh+0xb4c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <_Z13updateDisplayh+0x91e>
 800305c:	4b91      	ldr	r3, [pc, #580]	; (80032a4 <_Z13updateDisplayh+0xb50>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	f083 0301 	eor.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <_Z13updateDisplayh+0x91e>
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <_Z13updateDisplayh+0xb3c>)
 800306c:	2221      	movs	r2, #33	; 0x21
 800306e:	70da      	strb	r2, [r3, #3]
 8003070:	e002      	b.n	8003078 <_Z13updateDisplayh+0x924>
		    	  else battDisp[3] = '%';
 8003072:	4b87      	ldr	r3, [pc, #540]	; (8003290 <_Z13updateDisplayh+0xb3c>)
 8003074:	2225      	movs	r2, #37	; 0x25
 8003076:	70da      	strb	r2, [r3, #3]
		      }
		      battDisp[4] = ' ';
 8003078:	4b85      	ldr	r3, [pc, #532]	; (8003290 <_Z13updateDisplayh+0xb3c>)
 800307a:	2220      	movs	r2, #32
 800307c:	711a      	strb	r2, [r3, #4]
		      ssd1306_WriteString(battDisp,Font_7x10,White);
 800307e:	4a8a      	ldr	r2, [pc, #552]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 8003080:	2301      	movs	r3, #1
 8003082:	ca06      	ldmia	r2, {r1, r2}
 8003084:	4882      	ldr	r0, [pc, #520]	; (8003290 <_Z13updateDisplayh+0xb3c>)
 8003086:	f7fd ff55 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_UpdateScreen(&hi2c2);
 800308a:	4888      	ldr	r0, [pc, #544]	; (80032ac <_Z13updateDisplayh+0xb58>)
 800308c:	f7fd fe40 	bl	8000d10 <ssd1306_UpdateScreen>
		break;
 8003090:	e157      	b.n	8003342 <_Z13updateDisplayh+0xbee>
	case 0x04:	//Power off
		ssd1306_Fill(Black);
 8003092:	2000      	movs	r0, #0
 8003094:	f7fd fe1a 	bl	8000ccc <ssd1306_Fill>
		ssd1306_SetCursor(14,10);
 8003098:	210a      	movs	r1, #10
 800309a:	200e      	movs	r0, #14
 800309c:	f7fd ff70 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("Power Off", Font_11x18, White);
 80030a0:	4a83      	ldr	r2, [pc, #524]	; (80032b0 <_Z13updateDisplayh+0xb5c>)
 80030a2:	2301      	movs	r3, #1
 80030a4:	ca06      	ldmia	r2, {r1, r2}
 80030a6:	4883      	ldr	r0, [pc, #524]	; (80032b4 <_Z13updateDisplayh+0xb60>)
 80030a8:	f7fd ff44 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_SetCursor(60,36);
 80030ac:	2124      	movs	r1, #36	; 0x24
 80030ae:	203c      	movs	r0, #60	; 0x3c
 80030b0:	f7fd ff66 	bl	8000f80 <ssd1306_SetCursor>
		//powerDisplay = foo[powerCountdown];
		ssd1306_WriteChar(powerDisplay, Font_11x18, White);
 80030b4:	4b80      	ldr	r3, [pc, #512]	; (80032b8 <_Z13updateDisplayh+0xb64>)
 80030b6:	7818      	ldrb	r0, [r3, #0]
 80030b8:	4a7d      	ldr	r2, [pc, #500]	; (80032b0 <_Z13updateDisplayh+0xb5c>)
 80030ba:	2301      	movs	r3, #1
 80030bc:	ca06      	ldmia	r2, {r1, r2}
 80030be:	f7fd feb9 	bl	8000e34 <ssd1306_WriteChar>
		ssd1306_UpdateScreen(&hi2c2);
 80030c2:	487a      	ldr	r0, [pc, #488]	; (80032ac <_Z13updateDisplayh+0xb58>)
 80030c4:	f7fd fe24 	bl	8000d10 <ssd1306_UpdateScreen>
		break;
 80030c8:	e13b      	b.n	8003342 <_Z13updateDisplayh+0xbee>
	case 0x05:	//Menu
		ssd1306_Fill(Black);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7fd fdfe 	bl	8000ccc <ssd1306_Fill>
		//Frame rate
		//Auto power off
		//Exit
		ssd1306_SetCursor(50,2);
 80030d0:	2102      	movs	r1, #2
 80030d2:	2032      	movs	r0, #50	; 0x32
 80030d4:	f7fd ff54 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("Menu", Font_7x10, White);
 80030d8:	4a73      	ldr	r2, [pc, #460]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 80030da:	2301      	movs	r3, #1
 80030dc:	ca06      	ldmia	r2, {r1, r2}
 80030de:	4877      	ldr	r0, [pc, #476]	; (80032bc <_Z13updateDisplayh+0xb68>)
 80030e0:	f7fd ff28 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_SetCursor(10,14);
 80030e4:	210e      	movs	r1, #14
 80030e6:	200a      	movs	r0, #10
 80030e8:	f7fd ff4a 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("Rate: ",Font_7x10, White);
 80030ec:	4a6e      	ldr	r2, [pc, #440]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 80030ee:	2301      	movs	r3, #1
 80030f0:	ca06      	ldmia	r2, {r1, r2}
 80030f2:	4873      	ldr	r0, [pc, #460]	; (80032c0 <_Z13updateDisplayh+0xb6c>)
 80030f4:	f7fd ff1e 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_SetCursor(10,24);
 80030f8:	2118      	movs	r1, #24
 80030fa:	200a      	movs	r0, #10
 80030fc:	f7fd ff40 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("Auto-Off: ",Font_7x10, White);
 8003100:	4a69      	ldr	r2, [pc, #420]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 8003102:	2301      	movs	r3, #1
 8003104:	ca06      	ldmia	r2, {r1, r2}
 8003106:	486f      	ldr	r0, [pc, #444]	; (80032c4 <_Z13updateDisplayh+0xb70>)
 8003108:	f7fd ff14 	bl	8000f34 <ssd1306_WriteString>
		ssd1306_SetCursor(50,50);
 800310c:	2132      	movs	r1, #50	; 0x32
 800310e:	2032      	movs	r0, #50	; 0x32
 8003110:	f7fd ff36 	bl	8000f80 <ssd1306_SetCursor>
		ssd1306_WriteString("Exit",Font_7x10, White);
 8003114:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 8003116:	2301      	movs	r3, #1
 8003118:	ca06      	ldmia	r2, {r1, r2}
 800311a:	486b      	ldr	r0, [pc, #428]	; (80032c8 <_Z13updateDisplayh+0xb74>)
 800311c:	f7fd ff0a 	bl	8000f34 <ssd1306_WriteString>

		ssd1306_SetCursor(50,14);
 8003120:	210e      	movs	r1, #14
 8003122:	2032      	movs	r0, #50	; 0x32
 8003124:	f7fd ff2c 	bl	8000f80 <ssd1306_SetCursor>
		switch (frameRate){
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <_Z13updateDisplayh+0xb78>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d839      	bhi.n	80031a4 <_Z13updateDisplayh+0xa50>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <_Z13updateDisplayh+0x9e4>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003151 	.word	0x08003151
 800313c:	0800315f 	.word	0x0800315f
 8003140:	0800316d 	.word	0x0800316d
 8003144:	0800317b 	.word	0x0800317b
 8003148:	08003189 	.word	0x08003189
 800314c:	08003197 	.word	0x08003197
		case 0:
			ssd1306_WriteString("23.98",Font_7x10, White);
 8003150:	4a55      	ldr	r2, [pc, #340]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 8003152:	2301      	movs	r3, #1
 8003154:	ca06      	ldmia	r2, {r1, r2}
 8003156:	485e      	ldr	r0, [pc, #376]	; (80032d0 <_Z13updateDisplayh+0xb7c>)
 8003158:	f7fd feec 	bl	8000f34 <ssd1306_WriteString>
			break;
 800315c:	e022      	b.n	80031a4 <_Z13updateDisplayh+0xa50>
		case 1:
			ssd1306_WriteString("24",Font_7x10, White);
 800315e:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 8003160:	2301      	movs	r3, #1
 8003162:	ca06      	ldmia	r2, {r1, r2}
 8003164:	485b      	ldr	r0, [pc, #364]	; (80032d4 <_Z13updateDisplayh+0xb80>)
 8003166:	f7fd fee5 	bl	8000f34 <ssd1306_WriteString>
			break;
 800316a:	e01b      	b.n	80031a4 <_Z13updateDisplayh+0xa50>
		case 2:
			ssd1306_WriteString("25",Font_7x10, White);
 800316c:	4a4e      	ldr	r2, [pc, #312]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 800316e:	2301      	movs	r3, #1
 8003170:	ca06      	ldmia	r2, {r1, r2}
 8003172:	4859      	ldr	r0, [pc, #356]	; (80032d8 <_Z13updateDisplayh+0xb84>)
 8003174:	f7fd fede 	bl	8000f34 <ssd1306_WriteString>
			break;
 8003178:	e014      	b.n	80031a4 <_Z13updateDisplayh+0xa50>
		case 3:
			ssd1306_WriteString("29.97",Font_7x10, White);
 800317a:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 800317c:	2301      	movs	r3, #1
 800317e:	ca06      	ldmia	r2, {r1, r2}
 8003180:	4856      	ldr	r0, [pc, #344]	; (80032dc <_Z13updateDisplayh+0xb88>)
 8003182:	f7fd fed7 	bl	8000f34 <ssd1306_WriteString>
			break;
 8003186:	e00d      	b.n	80031a4 <_Z13updateDisplayh+0xa50>
		case 4:
			ssd1306_WriteString("29.97 DF",Font_7x10, White);
 8003188:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 800318a:	2301      	movs	r3, #1
 800318c:	ca06      	ldmia	r2, {r1, r2}
 800318e:	4854      	ldr	r0, [pc, #336]	; (80032e0 <_Z13updateDisplayh+0xb8c>)
 8003190:	f7fd fed0 	bl	8000f34 <ssd1306_WriteString>
			break;
 8003194:	e006      	b.n	80031a4 <_Z13updateDisplayh+0xa50>
		case 5:
			ssd1306_WriteString("30",Font_7x10, White);
 8003196:	4a44      	ldr	r2, [pc, #272]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 8003198:	2301      	movs	r3, #1
 800319a:	ca06      	ldmia	r2, {r1, r2}
 800319c:	4851      	ldr	r0, [pc, #324]	; (80032e4 <_Z13updateDisplayh+0xb90>)
 800319e:	f7fd fec9 	bl	8000f34 <ssd1306_WriteString>
			break;
 80031a2:	bf00      	nop
		}
		ssd1306_SetCursor(75,24);
 80031a4:	2118      	movs	r1, #24
 80031a6:	204b      	movs	r0, #75	; 0x4b
 80031a8:	f7fd feea 	bl	8000f80 <ssd1306_SetCursor>
		switch (autoOff){
 80031ac:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <_Z13updateDisplayh+0xb94>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d830      	bhi.n	8003216 <_Z13updateDisplayh+0xac2>
 80031b4:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <_Z13updateDisplayh+0xa68>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031d1 	.word	0x080031d1
 80031c0:	080031df 	.word	0x080031df
 80031c4:	080031ed 	.word	0x080031ed
 80031c8:	080031fb 	.word	0x080031fb
 80031cc:	08003209 	.word	0x08003209
		case 0:
			ssd1306_WriteString("1 hr",Font_7x10, White);
 80031d0:	4a35      	ldr	r2, [pc, #212]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 80031d2:	2301      	movs	r3, #1
 80031d4:	ca06      	ldmia	r2, {r1, r2}
 80031d6:	4845      	ldr	r0, [pc, #276]	; (80032ec <_Z13updateDisplayh+0xb98>)
 80031d8:	f7fd feac 	bl	8000f34 <ssd1306_WriteString>
			break;
 80031dc:	e01b      	b.n	8003216 <_Z13updateDisplayh+0xac2>
		case 1:
			ssd1306_WriteString("2 hr",Font_7x10, White);
 80031de:	4a32      	ldr	r2, [pc, #200]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 80031e0:	2301      	movs	r3, #1
 80031e2:	ca06      	ldmia	r2, {r1, r2}
 80031e4:	4842      	ldr	r0, [pc, #264]	; (80032f0 <_Z13updateDisplayh+0xb9c>)
 80031e6:	f7fd fea5 	bl	8000f34 <ssd1306_WriteString>
			break;
 80031ea:	e014      	b.n	8003216 <_Z13updateDisplayh+0xac2>
		case 2:
			ssd1306_WriteString("4 hr",Font_7x10, White);
 80031ec:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 80031ee:	2301      	movs	r3, #1
 80031f0:	ca06      	ldmia	r2, {r1, r2}
 80031f2:	4840      	ldr	r0, [pc, #256]	; (80032f4 <_Z13updateDisplayh+0xba0>)
 80031f4:	f7fd fe9e 	bl	8000f34 <ssd1306_WriteString>
			break;
 80031f8:	e00d      	b.n	8003216 <_Z13updateDisplayh+0xac2>
		case 3:
			ssd1306_WriteString("8 hr",Font_7x10, White);
 80031fa:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 80031fc:	2301      	movs	r3, #1
 80031fe:	ca06      	ldmia	r2, {r1, r2}
 8003200:	483d      	ldr	r0, [pc, #244]	; (80032f8 <_Z13updateDisplayh+0xba4>)
 8003202:	f7fd fe97 	bl	8000f34 <ssd1306_WriteString>
			break;
 8003206:	e006      	b.n	8003216 <_Z13updateDisplayh+0xac2>
		case 4:
			ssd1306_WriteString("12 hr",Font_7x10, White);
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 800320a:	2301      	movs	r3, #1
 800320c:	ca06      	ldmia	r2, {r1, r2}
 800320e:	483b      	ldr	r0, [pc, #236]	; (80032fc <_Z13updateDisplayh+0xba8>)
 8003210:	f7fd fe90 	bl	8000f34 <ssd1306_WriteString>
			break;
 8003214:	bf00      	nop
		}

			switch (menuItem){
 8003216:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <_Z13updateDisplayh+0xbac>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d01e      	beq.n	800325c <_Z13updateDisplayh+0xb08>
 800321e:	2b02      	cmp	r3, #2
 8003220:	d076      	beq.n	8003310 <_Z13updateDisplayh+0xbbc>
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 8089 	bne.w	800333a <_Z13updateDisplayh+0xbe6>
			case 0:
				if (menuItemSelect){
 8003228:	4b36      	ldr	r3, [pc, #216]	; (8003304 <_Z13updateDisplayh+0xbb0>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <_Z13updateDisplayh+0xaf2>
					ssd1306_SetCursor(120,14);
 8003230:	210e      	movs	r1, #14
 8003232:	2078      	movs	r0, #120	; 0x78
 8003234:	f7fd fea4 	bl	8000f80 <ssd1306_SetCursor>
					ssd1306_WriteString("<",Font_7x10, White);
 8003238:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 800323a:	2301      	movs	r3, #1
 800323c:	ca06      	ldmia	r2, {r1, r2}
 800323e:	4832      	ldr	r0, [pc, #200]	; (8003308 <_Z13updateDisplayh+0xbb4>)
 8003240:	f7fd fe78 	bl	8000f34 <ssd1306_WriteString>
				}else {
					ssd1306_SetCursor(2,14);
					ssd1306_WriteString(">",Font_7x10, White);
				}
				break;
 8003244:	e079      	b.n	800333a <_Z13updateDisplayh+0xbe6>
					ssd1306_SetCursor(2,14);
 8003246:	210e      	movs	r1, #14
 8003248:	2002      	movs	r0, #2
 800324a:	f7fd fe99 	bl	8000f80 <ssd1306_SetCursor>
					ssd1306_WriteString(">",Font_7x10, White);
 800324e:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 8003250:	2301      	movs	r3, #1
 8003252:	ca06      	ldmia	r2, {r1, r2}
 8003254:	482d      	ldr	r0, [pc, #180]	; (800330c <_Z13updateDisplayh+0xbb8>)
 8003256:	f7fd fe6d 	bl	8000f34 <ssd1306_WriteString>
				break;
 800325a:	e06e      	b.n	800333a <_Z13updateDisplayh+0xbe6>
			case 1:
				if (menuItemSelect){
 800325c:	4b29      	ldr	r3, [pc, #164]	; (8003304 <_Z13updateDisplayh+0xbb0>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <_Z13updateDisplayh+0xb26>
					ssd1306_SetCursor(120,24);
 8003264:	2118      	movs	r1, #24
 8003266:	2078      	movs	r0, #120	; 0x78
 8003268:	f7fd fe8a 	bl	8000f80 <ssd1306_SetCursor>
					ssd1306_WriteString("<",Font_7x10, White);
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 800326e:	2301      	movs	r3, #1
 8003270:	ca06      	ldmia	r2, {r1, r2}
 8003272:	4825      	ldr	r0, [pc, #148]	; (8003308 <_Z13updateDisplayh+0xbb4>)
 8003274:	f7fd fe5e 	bl	8000f34 <ssd1306_WriteString>
				} else {
					ssd1306_SetCursor(2,24);
					ssd1306_WriteString(">",Font_7x10, White);
				}

				break;
 8003278:	e05f      	b.n	800333a <_Z13updateDisplayh+0xbe6>
					ssd1306_SetCursor(2,24);
 800327a:	2118      	movs	r1, #24
 800327c:	2002      	movs	r0, #2
 800327e:	f7fd fe7f 	bl	8000f80 <ssd1306_SetCursor>
					ssd1306_WriteString(">",Font_7x10, White);
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <_Z13updateDisplayh+0xb54>)
 8003284:	2301      	movs	r3, #1
 8003286:	ca06      	ldmia	r2, {r1, r2}
 8003288:	4820      	ldr	r0, [pc, #128]	; (800330c <_Z13updateDisplayh+0xbb8>)
 800328a:	f7fd fe53 	bl	8000f34 <ssd1306_WriteString>
				break;
 800328e:	e054      	b.n	800333a <_Z13updateDisplayh+0xbe6>
 8003290:	20000a40 	.word	0x20000a40
 8003294:	20000014 	.word	0x20000014
 8003298:	20000a48 	.word	0x20000a48
 800329c:	66666667 	.word	0x66666667
 80032a0:	20000a4c 	.word	0x20000a4c
 80032a4:	20000a4d 	.word	0x20000a4d
 80032a8:	20000000 	.word	0x20000000
 80032ac:	20000514 	.word	0x20000514
 80032b0:	20000008 	.word	0x20000008
 80032b4:	08007f40 	.word	0x08007f40
 80032b8:	20000a70 	.word	0x20000a70
 80032bc:	08007f14 	.word	0x08007f14
 80032c0:	08007f4c 	.word	0x08007f4c
 80032c4:	08007f54 	.word	0x08007f54
 80032c8:	08007f60 	.word	0x08007f60
 80032cc:	20000a6c 	.word	0x20000a6c
 80032d0:	08007f0c 	.word	0x08007f0c
 80032d4:	08007f68 	.word	0x08007f68
 80032d8:	08007f6c 	.word	0x08007f6c
 80032dc:	08007f70 	.word	0x08007f70
 80032e0:	08007f78 	.word	0x08007f78
 80032e4:	08007f84 	.word	0x08007f84
 80032e8:	20000a6d 	.word	0x20000a6d
 80032ec:	08007f88 	.word	0x08007f88
 80032f0:	08007f90 	.word	0x08007f90
 80032f4:	08007f98 	.word	0x08007f98
 80032f8:	08007fa0 	.word	0x08007fa0
 80032fc:	08007fa8 	.word	0x08007fa8
 8003300:	20000a6f 	.word	0x20000a6f
 8003304:	20000a6e 	.word	0x20000a6e
 8003308:	08007fb0 	.word	0x08007fb0
 800330c:	08007fb4 	.word	0x08007fb4
			case 2:
				ssd1306_SetCursor(40,50);
 8003310:	2132      	movs	r1, #50	; 0x32
 8003312:	2028      	movs	r0, #40	; 0x28
 8003314:	f7fd fe34 	bl	8000f80 <ssd1306_SetCursor>
				ssd1306_WriteString(">",Font_7x10, White);
 8003318:	4a0c      	ldr	r2, [pc, #48]	; (800334c <_Z13updateDisplayh+0xbf8>)
 800331a:	2301      	movs	r3, #1
 800331c:	ca06      	ldmia	r2, {r1, r2}
 800331e:	480c      	ldr	r0, [pc, #48]	; (8003350 <_Z13updateDisplayh+0xbfc>)
 8003320:	f7fd fe08 	bl	8000f34 <ssd1306_WriteString>
				ssd1306_SetCursor(79,50);
 8003324:	2132      	movs	r1, #50	; 0x32
 8003326:	204f      	movs	r0, #79	; 0x4f
 8003328:	f7fd fe2a 	bl	8000f80 <ssd1306_SetCursor>
				ssd1306_WriteString("<",Font_7x10, White);
 800332c:	4a07      	ldr	r2, [pc, #28]	; (800334c <_Z13updateDisplayh+0xbf8>)
 800332e:	2301      	movs	r3, #1
 8003330:	ca06      	ldmia	r2, {r1, r2}
 8003332:	4808      	ldr	r0, [pc, #32]	; (8003354 <_Z13updateDisplayh+0xc00>)
 8003334:	f7fd fdfe 	bl	8000f34 <ssd1306_WriteString>
				break;
 8003338:	bf00      	nop
			}

		ssd1306_UpdateScreen(&hi2c2);
 800333a:	4807      	ldr	r0, [pc, #28]	; (8003358 <_Z13updateDisplayh+0xc04>)
 800333c:	f7fd fce8 	bl	8000d10 <ssd1306_UpdateScreen>

		break;
 8003340:	bf00      	nop
	}
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	bf00      	nop
 800334c:	20000000 	.word	0x20000000
 8003350:	08007fb4 	.word	0x08007fb4
 8003354:	08007fb0 	.word	0x08007fb0
 8003358:	20000514 	.word	0x20000514

0800335c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003362:	e7fe      	b.n	8003362 <Error_Handler+0x6>

08003364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_MspInit+0x4c>)
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_MspInit+0x4c>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6613      	str	r3, [r2, #96]	; 0x60
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_MspInit+0x4c>)
 8003378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_MspInit+0x4c>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <HAL_MspInit+0x4c>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338c:	6593      	str	r3, [r2, #88]	; 0x58
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_MspInit+0x4c>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800339a:	2200      	movs	r2, #0
 800339c:	2101      	movs	r1, #1
 800339e:	f06f 0003 	mvn.w	r0, #3
 80033a2:	f001 fc2a 	bl	8004bfa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <HAL_ADC_MspInit+0x74>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d124      	bne.n	8003420 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <HAL_ADC_MspInit+0x78>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	4a14      	ldr	r2, [pc, #80]	; (800342c <HAL_ADC_MspInit+0x78>)
 80033dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_ADC_MspInit+0x78>)
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <HAL_ADC_MspInit+0x78>)
 80033f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_ADC_MspInit+0x78>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_ADC_MspInit+0x78>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATT_CHECK_Pin;
 8003406:	2308      	movs	r3, #8
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800340a:	230b      	movs	r3, #11
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_CHECK_GPIO_Port, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800341c:	f001 fdce 	bl	8004fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003420:	bf00      	nop
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	50040000 	.word	0x50040000
 800342c:	40021000 	.word	0x40021000

08003430 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 0314 	add.w	r3, r7, #20
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a19      	ldr	r2, [pc, #100]	; (80034b4 <HAL_DAC_MspInit+0x84>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d12c      	bne.n	80034ac <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_DAC_MspInit+0x88>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003456:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <HAL_DAC_MspInit+0x88>)
 8003458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800345c:	6593      	str	r3, [r2, #88]	; 0x58
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <HAL_DAC_MspInit+0x88>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_DAC_MspInit+0x88>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <HAL_DAC_MspInit+0x88>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_DAC_MspInit+0x88>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = TCVC_Pin;
 8003482:	2320      	movs	r3, #32
 8003484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003486:	2303      	movs	r3, #3
 8003488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TCVC_GPIO_Port, &GPIO_InitStruct);
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4619      	mov	r1, r3
 8003494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003498:	f001 fd90 	bl	8004fbc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 800349c:	2200      	movs	r2, #0
 800349e:	2108      	movs	r1, #8
 80034a0:	2036      	movs	r0, #54	; 0x36
 80034a2:	f001 fbaa 	bl	8004bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034a6:	2036      	movs	r0, #54	; 0x36
 80034a8:	f001 fbc3 	bl	8004c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80034ac:	bf00      	nop
 80034ae:	3728      	adds	r7, #40	; 0x28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40007400 	.word	0x40007400
 80034b8:	40021000 	.word	0x40021000

080034bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	; 0x30
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 031c 	add.w	r3, r7, #28
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <HAL_I2C_MspInit+0xd8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d128      	bne.n	8003530 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	4a2d      	ldr	r2, [pc, #180]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEM_SCL_Pin|MEM_SDA_Pin;
 80034f6:	23c0      	movs	r3, #192	; 0xc0
 80034f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034fa:	2312      	movs	r3, #18
 80034fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034fe:	2301      	movs	r3, #1
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003506:	2304      	movs	r3, #4
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	4619      	mov	r1, r3
 8003510:	4822      	ldr	r0, [pc, #136]	; (800359c <HAL_I2C_MspInit+0xe0>)
 8003512:	f001 fd53 	bl	8004fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 800351c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800352e:	e02d      	b.n	800358c <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1a      	ldr	r2, [pc, #104]	; (80035a0 <HAL_I2C_MspInit+0xe4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d128      	bne.n	800358c <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353a:	4b17      	ldr	r3, [pc, #92]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 8003548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MON_SCL_Pin|MON_SDA_Pin;
 8003552:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003558:	2312      	movs	r3, #18
 800355a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355c:	2301      	movs	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003564:	2304      	movs	r3, #4
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	4619      	mov	r1, r3
 800356e:	480b      	ldr	r0, [pc, #44]	; (800359c <HAL_I2C_MspInit+0xe0>)
 8003570:	f001 fd24 	bl	8004fbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a07      	ldr	r2, [pc, #28]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 800357a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_I2C_MspInit+0xdc>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	bf00      	nop
 800358e:	3730      	adds	r7, #48	; 0x30
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40005400 	.word	0x40005400
 8003598:	40021000 	.word	0x40021000
 800359c:	48000400 	.word	0x48000400
 80035a0:	40005800 	.word	0x40005800

080035a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d130      	bne.n	8003628 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035c6:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <HAL_TIM_IC_MspInit+0x8c>)
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	4a19      	ldr	r2, [pc, #100]	; (8003630 <HAL_TIM_IC_MspInit+0x8c>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <HAL_TIM_IC_MspInit+0x8c>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <HAL_TIM_IC_MspInit+0x8c>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	4a13      	ldr	r2, [pc, #76]	; (8003630 <HAL_TIM_IC_MspInit+0x8c>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ea:	4b11      	ldr	r3, [pc, #68]	; (8003630 <HAL_TIM_IC_MspInit+0x8c>)
 80035ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TC_IN_Pin;
 80035f6:	2304      	movs	r3, #4
 80035f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003602:	2300      	movs	r3, #0
 8003604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003606:	2301      	movs	r3, #1
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_IN_GPIO_Port, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003614:	f001 fcd2 	bl	8004fbc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2102      	movs	r1, #2
 800361c:	201c      	movs	r0, #28
 800361e:	f001 faec 	bl	8004bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003622:	201c      	movs	r0, #28
 8003624:	f001 fb05 	bl	8004c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003628:	bf00      	nop
 800362a:	3728      	adds	r7, #40	; 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000

08003634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <HAL_TIM_Base_MspInit+0xac>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d114      	bne.n	8003670 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003646:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	6593      	str	r3, [r2, #88]	; 0x58
 8003652:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 800365e:	2200      	movs	r2, #0
 8003660:	2108      	movs	r1, #8
 8003662:	2036      	movs	r0, #54	; 0x36
 8003664:	f001 fac9 	bl	8004bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003668:	2036      	movs	r0, #54	; 0x36
 800366a:	f001 fae2 	bl	8004c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800366e:	e032      	b.n	80036d6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <HAL_TIM_Base_MspInit+0xb4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d114      	bne.n	80036a4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 8003680:	f043 0320 	orr.w	r3, r3, #32
 8003684:	6593      	str	r3, [r2, #88]	; 0x58
 8003686:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	2100      	movs	r1, #0
 8003696:	2037      	movs	r0, #55	; 0x37
 8003698:	f001 faaf 	bl	8004bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800369c:	2037      	movs	r0, #55	; 0x37
 800369e:	f001 fac8 	bl	8004c32 <HAL_NVIC_EnableIRQ>
}
 80036a2:	e018      	b.n	80036d6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a10      	ldr	r2, [pc, #64]	; (80036ec <HAL_TIM_Base_MspInit+0xb8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d113      	bne.n	80036d6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	6613      	str	r3, [r2, #96]	; 0x60
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_TIM_Base_MspInit+0xb0>)
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 7, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2107      	movs	r1, #7
 80036ca:	2019      	movs	r0, #25
 80036cc:	f001 fa95 	bl	8004bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80036d0:	2019      	movs	r0, #25
 80036d2:	f001 faae 	bl	8004c32 <HAL_NVIC_EnableIRQ>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40001000 	.word	0x40001000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40001400 	.word	0x40001400
 80036ec:	40014400 	.word	0x40014400

080036f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_PCD_MspInit+0x38>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10b      	bne.n	800371a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_PCD_MspInit+0x3c>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_PCD_MspInit+0x3c>)
 8003708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800370c:	6593      	str	r3, [r2, #88]	; 0x58
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <HAL_PCD_MspInit+0x3c>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40006800 	.word	0x40006800
 800372c:	40021000 	.word	0x40021000

08003730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003734:	e7fe      	b.n	8003734 <NMI_Handler+0x4>

08003736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800373a:	e7fe      	b.n	800373a <HardFault_Handler+0x4>

0800373c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003740:	e7fe      	b.n	8003740 <MemManage_Handler+0x4>

08003742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003746:	e7fe      	b.n	8003746 <BusFault_Handler+0x4>

08003748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800374c:	e7fe      	b.n	800374c <UsageFault_Handler+0x4>

0800374e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800377c:	f000 f8e2 	bl	8003944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}

08003784 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800378a:	f003 ff25 	bl	80075d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000644 	.word	0x20000644

08003798 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <TIM2_IRQHandler+0x10>)
 800379e:	f003 ff1b 	bl	80075d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000560 	.word	0x20000560

080037ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037b0:	4803      	ldr	r0, [pc, #12]	; (80037c0 <TIM6_DAC_IRQHandler+0x14>)
 80037b2:	f003 ff11 	bl	80075d8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80037b6:	4803      	ldr	r0, [pc, #12]	; (80037c4 <TIM6_DAC_IRQHandler+0x18>)
 80037b8:	f001 fa77 	bl	8004caa <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200005ac 	.word	0x200005ac
 80037c4:	200004b4 	.word	0x200004b4

080037c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <TIM7_IRQHandler+0x10>)
 80037ce:	f003 ff03 	bl	80075d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200005f8 	.word	0x200005f8

080037dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037e0:	4b17      	ldr	r3, [pc, #92]	; (8003840 <SystemInit+0x64>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <SystemInit+0x64>)
 80037e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <SystemInit+0x68>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <SystemInit+0x68>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <SystemInit+0x68>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <SystemInit+0x68>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <SystemInit+0x68>)
 8003808:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800380c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003810:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <SystemInit+0x68>)
 8003814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003818:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800381a:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <SystemInit+0x68>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <SystemInit+0x68>)
 8003820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003824:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <SystemInit+0x68>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <SystemInit+0x64>)
 800382e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003832:	609a      	str	r2, [r3, #8]
#endif
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00
 8003844:	40021000 	.word	0x40021000

08003848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003880 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800384c:	f7ff ffc6 	bl	80037dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003850:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003852:	e003      	b.n	800385c <LoopCopyDataInit>

08003854 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003856:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003858:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800385a:	3104      	adds	r1, #4

0800385c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800385c:	480a      	ldr	r0, [pc, #40]	; (8003888 <LoopForever+0xa>)
	ldr	r3, =_edata
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003860:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003862:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003864:	d3f6      	bcc.n	8003854 <CopyDataInit>
	ldr	r2, =_sbss
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003868:	e002      	b.n	8003870 <LoopFillZerobss>

0800386a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800386a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800386c:	f842 3b04 	str.w	r3, [r2], #4

08003870 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <LoopForever+0x16>)
	cmp	r2, r3
 8003872:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003874:	d3f9      	bcc.n	800386a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003876:	f004 fb0b 	bl	8007e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800387a:	f7fd fcdd 	bl	8001238 <main>

0800387e <LoopForever>:

LoopForever:
    b LoopForever
 800387e:	e7fe      	b.n	800387e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003880:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003884:	080094e8 	.word	0x080094e8
	ldr	r0, =_sdata
 8003888:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800388c:	2000002c 	.word	0x2000002c
	ldr	r2, =_sbss
 8003890:	2000002c 	.word	0x2000002c
	ldr	r3, = _ebss
 8003894:	20000a78 	.word	0x20000a78

08003898 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003898:	e7fe      	b.n	8003898 <ADC1_IRQHandler>

0800389a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038a4:	2003      	movs	r0, #3
 80038a6:	f001 f99d 	bl	8004be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038aa:	2000      	movs	r0, #0
 80038ac:	f000 f80e 	bl	80038cc <HAL_InitTick>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	71fb      	strb	r3, [r7, #7]
 80038ba:	e001      	b.n	80038c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038bc:	f7ff fd52 	bl	8003364 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038c0:	79fb      	ldrb	r3, [r7, #7]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <HAL_InitTick+0x6c>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d023      	beq.n	8003928 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <HAL_InitTick+0x70>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_InitTick+0x6c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f9a9 	bl	8004c4e <HAL_SYSTICK_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0f      	cmp	r3, #15
 8003906:	d809      	bhi.n	800391c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003908:	2200      	movs	r2, #0
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003910:	f001 f973 	bl	8004bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003914:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <HAL_InitTick+0x74>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e007      	b.n	800392c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e004      	b.n	800392c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	e001      	b.n	800392c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000028 	.word	0x20000028
 800393c:	20000020 	.word	0x20000020
 8003940:	20000024 	.word	0x20000024

08003944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_IncTick+0x20>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_IncTick+0x24>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <HAL_IncTick+0x24>)
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000028 	.word	0x20000028
 8003968:	20000a74 	.word	0x20000a74

0800396c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return uwTick;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_GetTick+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000a74 	.word	0x20000a74

08003984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff ffee 	bl	800396c <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399c:	d005      	beq.n	80039aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_Delay+0x40>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039aa:	bf00      	nop
 80039ac:	f7ff ffde 	bl	800396c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d8f7      	bhi.n	80039ac <HAL_Delay+0x28>
  {
  }
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000028 	.word	0x20000028

080039c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	609a      	str	r2, [r3, #8]
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	609a      	str	r2, [r3, #8]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	3360      	adds	r3, #96	; 0x60
 8003a42:	461a      	mov	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <LL_ADC_SetOffset+0x44>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	03fff000 	.word	0x03fff000

08003a78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3360      	adds	r3, #96	; 0x60
 8003a86:	461a      	mov	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3360      	adds	r3, #96	; 0x60
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3330      	adds	r3, #48	; 0x30
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	4413      	add	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	211f      	movs	r1, #31
 8003b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0e9b      	lsrs	r3, r3, #26
 8003b38:	f003 011f 	and.w	r1, r3, #31
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	431a      	orrs	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3314      	adds	r3, #20
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0e5b      	lsrs	r3, r3, #25
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0d1b      	lsrs	r3, r3, #20
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2107      	movs	r1, #7
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0d1b      	lsrs	r3, r3, #20
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0318 	and.w	r3, r3, #24
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bd4:	40d9      	lsrs	r1, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	400b      	ands	r3, r1
 8003bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	0007ffff 	.word	0x0007ffff

08003bf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6093      	str	r3, [r2, #8]
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d101      	bne.n	8003c36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c80:	d101      	bne.n	8003c86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ca8:	f043 0201 	orr.w	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <LL_ADC_IsEnabled+0x18>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_ADC_IsEnabled+0x1a>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cf2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d101      	bne.n	8003d22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d101      	bne.n	8003d48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e12a      	b.n	8003fc8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fb17 	bl	80033b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff3f 	bl	8003c1c <LL_ADC_IsDeepPowerDownEnabled>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff25 	bl	8003bf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff ff5a 	bl	8003c6c <LL_ADC_IsInternalRegulatorEnabled>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d113      	bne.n	8003de6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ff3e 	bl	8003c44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003dc8:	4b81      	ldr	r3, [pc, #516]	; (8003fd0 <HAL_ADC_Init+0x278>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	4a81      	ldr	r2, [pc, #516]	; (8003fd4 <HAL_ADC_Init+0x27c>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003dd8:	e002      	b.n	8003de0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f9      	bne.n	8003dda <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff3e 	bl	8003c6c <LL_ADC_IsInternalRegulatorEnabled>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10d      	bne.n	8003e12 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	f043 0210 	orr.w	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ff77 	bl	8003d0a <LL_ADC_REG_IsConversionOngoing>
 8003e1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 80c5 	bne.w	8003fb6 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f040 80c1 	bne.w	8003fb6 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e3c:	f043 0202 	orr.w	r2, r3, #2
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff37 	bl	8003cbc <LL_ADC_IsEnabled>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e54:	4860      	ldr	r0, [pc, #384]	; (8003fd8 <HAL_ADC_Init+0x280>)
 8003e56:	f7ff ff31 	bl	8003cbc <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4619      	mov	r1, r3
 8003e66:	485d      	ldr	r0, [pc, #372]	; (8003fdc <HAL_ADC_Init+0x284>)
 8003e68:	f7ff fdae 	bl	80039c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7e5b      	ldrb	r3, [r3, #25]
 8003e70:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e76:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003e7c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003e82:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e8a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d106      	bne.n	8003ea8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	045b      	lsls	r3, r3, #17
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	4b45      	ldr	r3, [pc, #276]	; (8003fe0 <HAL_ADC_Init+0x288>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	69b9      	ldr	r1, [r7, #24]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff14 	bl	8003d0a <LL_ADC_REG_IsConversionOngoing>
 8003ee2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff21 	bl	8003d30 <LL_ADC_INJ_IsConversionOngoing>
 8003eee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d13d      	bne.n	8003f72 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d13a      	bne.n	8003f72 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f00:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f08:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f18:	f023 0302 	bic.w	r3, r3, #2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	69b9      	ldr	r1, [r7, #24]
 8003f22:	430b      	orrs	r3, r1
 8003f24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d118      	bne.n	8003f62 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003f3a:	f023 0304 	bic.w	r3, r3, #4
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f46:	4311      	orrs	r1, r2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f4c:	4311      	orrs	r1, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f52:	430a      	orrs	r2, r1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	611a      	str	r2, [r3, #16]
 8003f60:	e007      	b.n	8003f72 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d10c      	bne.n	8003f94 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	f023 010f 	bic.w	r1, r3, #15
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
 8003f92:	e007      	b.n	8003fa4 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 020f 	bic.w	r2, r2, #15
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	f023 0303 	bic.w	r3, r3, #3
 8003fac:	f043 0201 	orr.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
 8003fb4:	e007      	b.n	8003fc6 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f043 0210 	orr.w	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000020 	.word	0x20000020
 8003fd4:	053e2d63 	.word	0x053e2d63
 8003fd8:	50040000 	.word	0x50040000
 8003fdc:	50040300 	.word	0x50040300
 8003fe0:	fff0c007 	.word	0xfff0c007

08003fe4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fe8a 	bl	8003d0a <LL_ADC_REG_IsConversionOngoing>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d14f      	bne.n	800409c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_ADC_Start+0x26>
 8004006:	2302      	movs	r3, #2
 8004008:	e04b      	b.n	80040a2 <HAL_ADC_Start+0xbe>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fcbc 	bl	8004990 <ADC_Enable>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d137      	bne.n	8004092 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004042:	d106      	bne.n	8004052 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f023 0206 	bic.w	r2, r3, #6
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	659a      	str	r2, [r3, #88]	; 0x58
 8004050:	e002      	b.n	8004058 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	221c      	movs	r2, #28
 800405e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800407e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fe29 	bl	8003ce2 <LL_ADC_REG_StartConversion>
 8004090:	e006      	b.n	80040a0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800409a:	e001      	b.n	80040a0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800409c:	2302      	movs	r3, #2
 800409e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b086      	sub	sp, #24
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d102      	bne.n	80040c2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80040bc:	2308      	movs	r3, #8
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e010      	b.n	80040e4 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d007      	beq.n	80040e0 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e068      	b.n	80041b2 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80040e0:	2304      	movs	r3, #4
 80040e2:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80040e4:	f7ff fc42 	bl	800396c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80040ea:	e01a      	b.n	8004122 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f2:	d016      	beq.n	8004122 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80040f4:	f7ff fc3a 	bl	800396c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d302      	bcc.n	800410a <HAL_ADC_PollForConversion+0x60>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	f043 0204 	orr.w	r2, r3, #4
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e047      	b.n	80041b2 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0dd      	beq.n	80040ec <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fcca 	bl	8003ada <LL_ADC_REG_IsTriggerSourceSWStart>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01c      	beq.n	8004186 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7e5b      	ldrb	r3, [r3, #25]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d118      	bne.n	8004186 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b08      	cmp	r3, #8
 8004160:	d111      	bne.n	8004186 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d104      	bne.n	800419e <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2208      	movs	r2, #8
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e008      	b.n	80041b0 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d103      	bne.n	80041b0 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	220c      	movs	r2, #12
 80041ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b0b6      	sub	sp, #216	; 0xd8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x22>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e3b8      	b.n	8004968 <HAL_ADC_ConfigChannel+0x794>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fd81 	bl	8003d0a <LL_ADC_REG_IsConversionOngoing>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	f040 839d 	bne.w	800494a <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b05      	cmp	r3, #5
 8004216:	d824      	bhi.n	8004262 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	3b02      	subs	r3, #2
 800421e:	2b03      	cmp	r3, #3
 8004220:	d81b      	bhi.n	800425a <HAL_ADC_ConfigChannel+0x86>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <HAL_ADC_ConfigChannel+0x54>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004239 	.word	0x08004239
 800422c:	08004241 	.word	0x08004241
 8004230:	08004249 	.word	0x08004249
 8004234:	08004251 	.word	0x08004251
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	220c      	movs	r2, #12
 800423c:	605a      	str	r2, [r3, #4]
          break;
 800423e:	e011      	b.n	8004264 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2212      	movs	r2, #18
 8004244:	605a      	str	r2, [r3, #4]
          break;
 8004246:	e00d      	b.n	8004264 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2218      	movs	r2, #24
 800424c:	605a      	str	r2, [r3, #4]
          break;
 800424e:	e009      	b.n	8004264 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004256:	605a      	str	r2, [r3, #4]
          break;
 8004258:	e004      	b.n	8004264 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2206      	movs	r2, #6
 800425e:	605a      	str	r2, [r3, #4]
          break;
 8004260:	e000      	b.n	8004264 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004262:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6859      	ldr	r1, [r3, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	f7ff fc45 	bl	8003b00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fd45 	bl	8003d0a <LL_ADC_REG_IsConversionOngoing>
 8004280:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fd51 	bl	8003d30 <LL_ADC_INJ_IsConversionOngoing>
 800428e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004292:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004296:	2b00      	cmp	r3, #0
 8004298:	f040 81a6 	bne.w	80045e8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800429c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 81a1 	bne.w	80045e8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f7ff fc50 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	08db      	lsrs	r3, r3, #3
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d00a      	beq.n	80042f0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6919      	ldr	r1, [r3, #16]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042ea:	f7ff fba1 	bl	8003a30 <LL_ADC_SetOffset>
 80042ee:	e17b      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fbbe 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <HAL_ADC_ConfigChannel+0x148>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fbb3 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 8004312:	4603      	mov	r3, r0
 8004314:	0e9b      	lsrs	r3, r3, #26
 8004316:	f003 021f 	and.w	r2, r3, #31
 800431a:	e01e      	b.n	800435a <HAL_ADC_ConfigChannel+0x186>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2100      	movs	r1, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fba8 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 8004328:	4603      	mov	r3, r0
 800432a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800433a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800433e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e004      	b.n	8004358 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800434e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d105      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x19e>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	e018      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x1d0>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800438a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800438e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004396:	2320      	movs	r3, #32
 8004398:	e004      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800439a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d106      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2200      	movs	r2, #0
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fb77 	bl	8003aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fb5b 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x20e>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff fb50 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80043d8:	4603      	mov	r3, r0
 80043da:	0e9b      	lsrs	r3, r3, #26
 80043dc:	f003 021f 	and.w	r2, r3, #31
 80043e0:	e01e      	b.n	8004420 <HAL_ADC_ConfigChannel+0x24c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2101      	movs	r1, #1
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fb45 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004400:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e004      	b.n	800441e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x264>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0e9b      	lsrs	r3, r3, #26
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	e018      	b.n	800446a <HAL_ADC_ConfigChannel+0x296>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800444c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800445c:	2320      	movs	r3, #32
 800445e:	e004      	b.n	800446a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004464:	fab3 f383 	clz	r3, r3
 8004468:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800446a:	429a      	cmp	r2, r3
 800446c:	d106      	bne.n	800447c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2200      	movs	r2, #0
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fb14 	bl	8003aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2102      	movs	r1, #2
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff faf8 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 8004488:	4603      	mov	r3, r0
 800448a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x2d4>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2102      	movs	r1, #2
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff faed 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 800449e:	4603      	mov	r3, r0
 80044a0:	0e9b      	lsrs	r3, r3, #26
 80044a2:	f003 021f 	and.w	r2, r3, #31
 80044a6:	e01e      	b.n	80044e6 <HAL_ADC_ConfigChannel+0x312>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2102      	movs	r1, #2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fae2 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044be:	fa93 f3a3 	rbit	r3, r3
 80044c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80044c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80044ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80044d6:	2320      	movs	r3, #32
 80044d8:	e004      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80044da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d105      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x32a>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	0e9b      	lsrs	r3, r3, #26
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	e016      	b.n	800452c <HAL_ADC_ConfigChannel+0x358>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004510:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800451e:	2320      	movs	r3, #32
 8004520:	e004      	b.n	800452c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800452c:	429a      	cmp	r2, r3
 800452e:	d106      	bne.n	800453e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2200      	movs	r2, #0
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fab3 	bl	8003aa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2103      	movs	r1, #3
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fa97 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 800454a:	4603      	mov	r3, r0
 800454c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <HAL_ADC_ConfigChannel+0x396>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2103      	movs	r1, #3
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fa8c 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 8004560:	4603      	mov	r3, r0
 8004562:	0e9b      	lsrs	r3, r3, #26
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	e017      	b.n	800459a <HAL_ADC_ConfigChannel+0x3c6>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2103      	movs	r1, #3
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fa81 	bl	8003a78 <LL_ADC_GetOffsetChannel>
 8004576:	4603      	mov	r3, r0
 8004578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004584:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800458c:	2320      	movs	r3, #32
 800458e:	e003      	b.n	8004598 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d105      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x3de>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	0e9b      	lsrs	r3, r3, #26
 80045ac:	f003 031f 	and.w	r3, r3, #31
 80045b0:	e011      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x402>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80045c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80045c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80045ca:	2320      	movs	r3, #32
 80045cc:	e003      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80045ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d0:	fab3 f383 	clz	r3, r3
 80045d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d106      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2200      	movs	r2, #0
 80045e0:	2103      	movs	r1, #3
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fa5e 	bl	8003aa4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fb65 	bl	8003cbc <LL_ADC_IsEnabled>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 813f 	bne.w	8004878 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6819      	ldr	r1, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f7ff fad2 	bl	8003bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a8e      	ldr	r2, [pc, #568]	; (800484c <HAL_ADC_ConfigChannel+0x678>)
 8004612:	4293      	cmp	r3, r2
 8004614:	f040 8130 	bne.w	8004878 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10b      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x46c>
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	0e9b      	lsrs	r3, r3, #26
 800462e:	3301      	adds	r3, #1
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	2b09      	cmp	r3, #9
 8004636:	bf94      	ite	ls
 8004638:	2301      	movls	r3, #1
 800463a:	2300      	movhi	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e019      	b.n	8004674 <HAL_ADC_ConfigChannel+0x4a0>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800464e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004650:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004658:	2320      	movs	r3, #32
 800465a:	e003      	b.n	8004664 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800465c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800465e:	fab3 f383 	clz	r3, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	3301      	adds	r3, #1
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2b09      	cmp	r3, #9
 800466c:	bf94      	ite	ls
 800466e:	2301      	movls	r3, #1
 8004670:	2300      	movhi	r3, #0
 8004672:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004674:	2b00      	cmp	r3, #0
 8004676:	d079      	beq.n	800476c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004680:	2b00      	cmp	r3, #0
 8004682:	d107      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x4c0>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	0e9b      	lsrs	r3, r3, #26
 800468a:	3301      	adds	r3, #1
 800468c:	069b      	lsls	r3, r3, #26
 800468e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004692:	e015      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x4ec>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469c:	fa93 f3a3 	rbit	r3, r3
 80046a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80046a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80046ac:	2320      	movs	r3, #32
 80046ae:	e003      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80046b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3301      	adds	r3, #1
 80046ba:	069b      	lsls	r3, r3, #26
 80046bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d109      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x50c>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0e9b      	lsrs	r3, r3, #26
 80046d2:	3301      	adds	r3, #1
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	2101      	movs	r1, #1
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	e017      	b.n	8004710 <HAL_ADC_ConfigChannel+0x53c>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80046ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80046f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80046f8:	2320      	movs	r3, #32
 80046fa:	e003      	b.n	8004704 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80046fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	3301      	adds	r3, #1
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	2101      	movs	r1, #1
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	ea42 0103 	orr.w	r1, r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x562>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0e9b      	lsrs	r3, r3, #26
 8004726:	3301      	adds	r3, #1
 8004728:	f003 021f 	and.w	r2, r3, #31
 800472c:	4613      	mov	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4413      	add	r3, r2
 8004732:	051b      	lsls	r3, r3, #20
 8004734:	e018      	b.n	8004768 <HAL_ADC_ConfigChannel+0x594>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004746:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800474e:	2320      	movs	r3, #32
 8004750:	e003      	b.n	800475a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004754:	fab3 f383 	clz	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	3301      	adds	r3, #1
 800475c:	f003 021f 	and.w	r2, r3, #31
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004768:	430b      	orrs	r3, r1
 800476a:	e080      	b.n	800486e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004774:	2b00      	cmp	r3, #0
 8004776:	d107      	bne.n	8004788 <HAL_ADC_ConfigChannel+0x5b4>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	0e9b      	lsrs	r3, r3, #26
 800477e:	3301      	adds	r3, #1
 8004780:	069b      	lsls	r3, r3, #26
 8004782:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004786:	e015      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x5e0>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	fa93 f3a3 	rbit	r3, r3
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80047a0:	2320      	movs	r3, #32
 80047a2:	e003      	b.n	80047ac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	fab3 f383 	clz	r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	3301      	adds	r3, #1
 80047ae:	069b      	lsls	r3, r3, #26
 80047b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x600>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0e9b      	lsrs	r3, r3, #26
 80047c6:	3301      	adds	r3, #1
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2101      	movs	r1, #1
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	e017      	b.n	8004804 <HAL_ADC_ConfigChannel+0x630>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	61fb      	str	r3, [r7, #28]
  return result;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2101      	movs	r1, #1
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	ea42 0103 	orr.w	r1, r2, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10d      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x65c>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0e9b      	lsrs	r3, r3, #26
 800481a:	3301      	adds	r3, #1
 800481c:	f003 021f 	and.w	r2, r3, #31
 8004820:	4613      	mov	r3, r2
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	4413      	add	r3, r2
 8004826:	3b1e      	subs	r3, #30
 8004828:	051b      	lsls	r3, r3, #20
 800482a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800482e:	e01d      	b.n	800486c <HAL_ADC_ConfigChannel+0x698>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	fa93 f3a3 	rbit	r3, r3
 800483c:	613b      	str	r3, [r7, #16]
  return result;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d103      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004848:	2320      	movs	r3, #32
 800484a:	e005      	b.n	8004858 <HAL_ADC_ConfigChannel+0x684>
 800484c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	3301      	adds	r3, #1
 800485a:	f003 021f 	and.w	r2, r3, #31
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	3b1e      	subs	r3, #30
 8004866:	051b      	lsls	r3, r3, #20
 8004868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800486c:	430b      	orrs	r3, r1
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	6892      	ldr	r2, [r2, #8]
 8004872:	4619      	mov	r1, r3
 8004874:	f7ff f970 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b3c      	ldr	r3, [pc, #240]	; (8004970 <HAL_ADC_ConfigChannel+0x79c>)
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d06b      	beq.n	800495c <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004884:	483b      	ldr	r0, [pc, #236]	; (8004974 <HAL_ADC_ConfigChannel+0x7a0>)
 8004886:	f7ff f8c5 	bl	8003a14 <LL_ADC_GetCommonPathInternalCh>
 800488a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a39      	ldr	r2, [pc, #228]	; (8004978 <HAL_ADC_ConfigChannel+0x7a4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d126      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800489c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d120      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a34      	ldr	r2, [pc, #208]	; (800497c <HAL_ADC_ConfigChannel+0x7a8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d156      	bne.n	800495c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048b6:	4619      	mov	r1, r3
 80048b8:	482e      	ldr	r0, [pc, #184]	; (8004974 <HAL_ADC_ConfigChannel+0x7a0>)
 80048ba:	f7ff f898 	bl	80039ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80048be:	4b30      	ldr	r3, [pc, #192]	; (8004980 <HAL_ADC_ConfigChannel+0x7ac>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	4a2f      	ldr	r2, [pc, #188]	; (8004984 <HAL_ADC_ConfigChannel+0x7b0>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	099a      	lsrs	r2, r3, #6
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048d6:	e002      	b.n	80048de <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b01      	subs	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f9      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048e4:	e03a      	b.n	800495c <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a27      	ldr	r2, [pc, #156]	; (8004988 <HAL_ADC_ConfigChannel+0x7b4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d113      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x744>
 80048f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10d      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1e      	ldr	r2, [pc, #120]	; (800497c <HAL_ADC_ConfigChannel+0x7a8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d12a      	bne.n	800495c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800490a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490e:	4619      	mov	r1, r3
 8004910:	4818      	ldr	r0, [pc, #96]	; (8004974 <HAL_ADC_ConfigChannel+0x7a0>)
 8004912:	f7ff f86c 	bl	80039ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004916:	e021      	b.n	800495c <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1b      	ldr	r2, [pc, #108]	; (800498c <HAL_ADC_ConfigChannel+0x7b8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d11c      	bne.n	800495c <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a12      	ldr	r2, [pc, #72]	; (800497c <HAL_ADC_ConfigChannel+0x7a8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d111      	bne.n	800495c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800493c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004940:	4619      	mov	r1, r3
 8004942:	480c      	ldr	r0, [pc, #48]	; (8004974 <HAL_ADC_ConfigChannel+0x7a0>)
 8004944:	f7ff f853 	bl	80039ee <LL_ADC_SetCommonPathInternalCh>
 8004948:	e008      	b.n	800495c <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004964:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004968:	4618      	mov	r0, r3
 800496a:	37d8      	adds	r7, #216	; 0xd8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	80080000 	.word	0x80080000
 8004974:	50040300 	.word	0x50040300
 8004978:	c7520000 	.word	0xc7520000
 800497c:	50040000 	.word	0x50040000
 8004980:	20000020 	.word	0x20000020
 8004984:	053e2d63 	.word	0x053e2d63
 8004988:	cb840000 	.word	0xcb840000
 800498c:	80000001 	.word	0x80000001

08004990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff f98d 	bl	8003cbc <LL_ADC_IsEnabled>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d146      	bne.n	8004a36 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <ADC_Enable+0xb0>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e032      	b.n	8004a38 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff f95c 	bl	8003c94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049dc:	f7fe ffc6 	bl	800396c <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049e2:	e021      	b.n	8004a28 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff f967 	bl	8003cbc <LL_ADC_IsEnabled>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d104      	bne.n	80049fe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff f94b 	bl	8003c94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049fe:	f7fe ffb5 	bl	800396c <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d90d      	bls.n	8004a28 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f043 0210 	orr.w	r2, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	f043 0201 	orr.w	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e007      	b.n	8004a38 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d1d6      	bne.n	80049e4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	8000003f 	.word	0x8000003f

08004a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <__NVIC_SetPriorityGrouping+0x44>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a60:	4013      	ands	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a76:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <__NVIC_SetPriorityGrouping+0x44>)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	60d3      	str	r3, [r2, #12]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	e000ed00 	.word	0xe000ed00

08004a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a90:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	f003 0307 	and.w	r3, r3, #7
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	db0b      	blt.n	8004ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	f003 021f 	and.w	r2, r3, #31
 8004ac0:	4907      	ldr	r1, [pc, #28]	; (8004ae0 <__NVIC_EnableIRQ+0x38>)
 8004ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2001      	movs	r0, #1
 8004aca:	fa00 f202 	lsl.w	r2, r0, r2
 8004ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	e000e100 	.word	0xe000e100

08004ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	6039      	str	r1, [r7, #0]
 8004aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	db0a      	blt.n	8004b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	490c      	ldr	r1, [pc, #48]	; (8004b30 <__NVIC_SetPriority+0x4c>)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	0112      	lsls	r2, r2, #4
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	440b      	add	r3, r1
 8004b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b0c:	e00a      	b.n	8004b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	4908      	ldr	r1, [pc, #32]	; (8004b34 <__NVIC_SetPriority+0x50>)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	3b04      	subs	r3, #4
 8004b1c:	0112      	lsls	r2, r2, #4
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	440b      	add	r3, r1
 8004b22:	761a      	strb	r2, [r3, #24]
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000e100 	.word	0xe000e100
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	; 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f1c3 0307 	rsb	r3, r3, #7
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	bf28      	it	cs
 8004b56:	2304      	movcs	r3, #4
 8004b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	d902      	bls.n	8004b68 <NVIC_EncodePriority+0x30>
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3b03      	subs	r3, #3
 8004b66:	e000      	b.n	8004b6a <NVIC_EncodePriority+0x32>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	43da      	mvns	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8a:	43d9      	mvns	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b90:	4313      	orrs	r3, r2
         );
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3724      	adds	r7, #36	; 0x24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bb0:	d301      	bcc.n	8004bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e00f      	b.n	8004bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <SysTick_Config+0x40>)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bbe:	210f      	movs	r1, #15
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc4:	f7ff ff8e 	bl	8004ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <SysTick_Config+0x40>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bce:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <SysTick_Config+0x40>)
 8004bd0:	2207      	movs	r2, #7
 8004bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	e000e010 	.word	0xe000e010

08004be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff29 	bl	8004a44 <__NVIC_SetPriorityGrouping>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	4603      	mov	r3, r0
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c0c:	f7ff ff3e 	bl	8004a8c <__NVIC_GetPriorityGrouping>
 8004c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7ff ff8e 	bl	8004b38 <NVIC_EncodePriority>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff5d 	bl	8004ae4 <__NVIC_SetPriority>
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	4603      	mov	r3, r0
 8004c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff ff31 	bl	8004aa8 <__NVIC_EnableIRQ>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff ffa2 	bl	8004ba0 <SysTick_Config>
 8004c5c:	4603      	mov	r3, r0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e014      	b.n	8004ca2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	791b      	ldrb	r3, [r3, #4]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7fe fbd1 	bl	8003430 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc0:	d120      	bne.n	8004d04 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd0:	d118      	bne.n	8004d04 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f043 0201 	orr.w	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cfc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f82d 	bl	8004d5e <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d120      	bne.n	8004d56 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d22:	d118      	bne.n	8004d56 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2204      	movs	r2, #4
 8004d28:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f043 0202 	orr.w	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f928 	bl	8004fa6 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b088      	sub	sp, #32
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	795b      	ldrb	r3, [r3, #5]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_DAC_ConfigChannel+0x1c>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e107      	b.n	8004f9e <HAL_DAC_ConfigChannel+0x22c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2202      	movs	r2, #2
 8004d98:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d174      	bne.n	8004e8c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004da2:	f7fe fde3 	bl	800396c <HAL_GetTick>
 8004da6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d134      	bne.n	8004e18 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dae:	e011      	b.n	8004dd4 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004db0:	f7fe fddc 	bl	800396c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d90a      	bls.n	8004dd4 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f043 0208 	orr.w	r2, r3, #8
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e0e4      	b.n	8004f9e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e6      	bne.n	8004db0 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004de2:	2001      	movs	r0, #1
 8004de4:	f7fe fdce 	bl	8003984 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	6992      	ldr	r2, [r2, #24]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
 8004df2:	e01e      	b.n	8004e32 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004df4:	f7fe fdba 	bl	800396c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d90a      	bls.n	8004e18 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f043 0208 	orr.w	r2, r3, #8
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2203      	movs	r2, #3
 8004e12:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0c2      	b.n	8004f9e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	dbe8      	blt.n	8004df4 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004e22:	2001      	movs	r0, #1
 8004e24:	f7fe fdae 	bl	8003984 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	6992      	ldr	r2, [r2, #24]
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	ea02 0103 	and.w	r1, r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	69da      	ldr	r2, [r3, #28]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	409a      	lsls	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	21ff      	movs	r1, #255	; 0xff
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	43db      	mvns	r3, r3
 8004e74:	ea02 0103 	and.w	r1, r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	409a      	lsls	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d11d      	bne.n	8004ed0 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	221f      	movs	r2, #31
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2207      	movs	r2, #7
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6819      	ldr	r1, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43da      	mvns	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	400a      	ands	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	22c0      	movs	r2, #192	; 0xc0
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43da      	mvns	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	400a      	ands	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fca:	e154      	b.n	8005276 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8146 	beq.w	8005270 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d00b      	beq.n	8005004 <HAL_GPIO_Init+0x48>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d007      	beq.n	8005004 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ff8:	2b11      	cmp	r3, #17
 8004ffa:	d003      	beq.n	8005004 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b12      	cmp	r3, #18
 8005002:	d130      	bne.n	8005066 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	2203      	movs	r2, #3
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4013      	ands	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800503a:	2201      	movs	r2, #1
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	f003 0201 	and.w	r2, r3, #1
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	2203      	movs	r2, #3
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4013      	ands	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d003      	beq.n	80050a6 <HAL_GPIO_Init+0xea>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b12      	cmp	r3, #18
 80050a4:	d123      	bne.n	80050ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	08da      	lsrs	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3208      	adds	r2, #8
 80050ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	220f      	movs	r2, #15
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4013      	ands	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	08da      	lsrs	r2, r3, #3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3208      	adds	r2, #8
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	2203      	movs	r2, #3
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4013      	ands	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 0203 	and.w	r2, r3, #3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 80a0 	beq.w	8005270 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005130:	4b58      	ldr	r3, [pc, #352]	; (8005294 <HAL_GPIO_Init+0x2d8>)
 8005132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005134:	4a57      	ldr	r2, [pc, #348]	; (8005294 <HAL_GPIO_Init+0x2d8>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6613      	str	r3, [r2, #96]	; 0x60
 800513c:	4b55      	ldr	r3, [pc, #340]	; (8005294 <HAL_GPIO_Init+0x2d8>)
 800513e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005148:	4a53      	ldr	r2, [pc, #332]	; (8005298 <HAL_GPIO_Init+0x2dc>)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	3302      	adds	r3, #2
 8005150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005154:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	220f      	movs	r2, #15
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4013      	ands	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005172:	d019      	beq.n	80051a8 <HAL_GPIO_Init+0x1ec>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a49      	ldr	r2, [pc, #292]	; (800529c <HAL_GPIO_Init+0x2e0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <HAL_GPIO_Init+0x1e8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a48      	ldr	r2, [pc, #288]	; (80052a0 <HAL_GPIO_Init+0x2e4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d00d      	beq.n	80051a0 <HAL_GPIO_Init+0x1e4>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a47      	ldr	r2, [pc, #284]	; (80052a4 <HAL_GPIO_Init+0x2e8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d007      	beq.n	800519c <HAL_GPIO_Init+0x1e0>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a46      	ldr	r2, [pc, #280]	; (80052a8 <HAL_GPIO_Init+0x2ec>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d101      	bne.n	8005198 <HAL_GPIO_Init+0x1dc>
 8005194:	2304      	movs	r3, #4
 8005196:	e008      	b.n	80051aa <HAL_GPIO_Init+0x1ee>
 8005198:	2307      	movs	r3, #7
 800519a:	e006      	b.n	80051aa <HAL_GPIO_Init+0x1ee>
 800519c:	2303      	movs	r3, #3
 800519e:	e004      	b.n	80051aa <HAL_GPIO_Init+0x1ee>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e002      	b.n	80051aa <HAL_GPIO_Init+0x1ee>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <HAL_GPIO_Init+0x1ee>
 80051a8:	2300      	movs	r3, #0
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	f002 0203 	and.w	r2, r2, #3
 80051b0:	0092      	lsls	r2, r2, #2
 80051b2:	4093      	lsls	r3, r2
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051ba:	4937      	ldr	r1, [pc, #220]	; (8005298 <HAL_GPIO_Init+0x2dc>)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	089b      	lsrs	r3, r3, #2
 80051c0:	3302      	adds	r3, #2
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80051c8:	4b38      	ldr	r3, [pc, #224]	; (80052ac <HAL_GPIO_Init+0x2f0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051ec:	4a2f      	ldr	r2, [pc, #188]	; (80052ac <HAL_GPIO_Init+0x2f0>)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80051f2:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <HAL_GPIO_Init+0x2f0>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4013      	ands	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005216:	4a25      	ldr	r2, [pc, #148]	; (80052ac <HAL_GPIO_Init+0x2f0>)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800521c:	4b23      	ldr	r3, [pc, #140]	; (80052ac <HAL_GPIO_Init+0x2f0>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	43db      	mvns	r3, r3
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4013      	ands	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005240:	4a1a      	ldr	r2, [pc, #104]	; (80052ac <HAL_GPIO_Init+0x2f0>)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005246:	4b19      	ldr	r3, [pc, #100]	; (80052ac <HAL_GPIO_Init+0x2f0>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	43db      	mvns	r3, r3
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800526a:	4a10      	ldr	r2, [pc, #64]	; (80052ac <HAL_GPIO_Init+0x2f0>)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3301      	adds	r3, #1
 8005274:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	f47f aea3 	bne.w	8004fcc <HAL_GPIO_Init+0x10>
  }
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000
 8005298:	40010000 	.word	0x40010000
 800529c:	48000400 	.word	0x48000400
 80052a0:	48000800 	.word	0x48000800
 80052a4:	48000c00 	.word	0x48000c00
 80052a8:	48001000 	.word	0x48001000
 80052ac:	40010400 	.word	0x40010400

080052b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	807b      	strh	r3, [r7, #2]
 80052bc:	4613      	mov	r3, r2
 80052be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052c0:	787b      	ldrb	r3, [r7, #1]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052c6:	887a      	ldrh	r2, [r7, #2]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052cc:	e002      	b.n	80052d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052ce:	887a      	ldrh	r2, [r7, #2]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e081      	b.n	80053f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fe f8d8 	bl	80034bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	; 0x24
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0201 	bic.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d107      	bne.n	800535a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	e006      	b.n	8005368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d104      	bne.n	800537a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005378:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800539c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	ea42 0103 	orr.w	r1, r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	021a      	lsls	r2, r3, #8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	69d9      	ldr	r1, [r3, #28]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	817b      	strh	r3, [r7, #10]
 8005412:	460b      	mov	r3, r1
 8005414:	813b      	strh	r3, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b20      	cmp	r3, #32
 8005424:	f040 80f9 	bne.w	800561a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_I2C_Mem_Write+0x34>
 800542e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800543a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0ed      	b.n	800561c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_I2C_Mem_Write+0x4e>
 800544a:	2302      	movs	r3, #2
 800544c:	e0e6      	b.n	800561c <HAL_I2C_Mem_Write+0x21c>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005456:	f7fe fa89 	bl	800396c <HAL_GetTick>
 800545a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2319      	movs	r3, #25
 8005462:	2201      	movs	r2, #1
 8005464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f955 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0d1      	b.n	800561c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2221      	movs	r2, #33	; 0x21
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005498:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054a0:	88f8      	ldrh	r0, [r7, #6]
 80054a2:	893a      	ldrh	r2, [r7, #8]
 80054a4:	8979      	ldrh	r1, [r7, #10]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	4603      	mov	r3, r0
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f8b9 	bl	8005628 <I2C_RequestMemoryWrite>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0a9      	b.n	800561c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2bff      	cmp	r3, #255	; 0xff
 80054d0:	d90e      	bls.n	80054f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	8979      	ldrh	r1, [r7, #10]
 80054e0:	2300      	movs	r3, #0
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fa37 	bl	800595c <I2C_TransferConfig>
 80054ee:	e00f      	b.n	8005510 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	8979      	ldrh	r1, [r7, #10]
 8005502:	2300      	movs	r3, #0
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fa26 	bl	800595c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f93f 	bl	8005798 <I2C_WaitOnTXISFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e07b      	b.n	800561c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d034      	beq.n	80055c8 <HAL_I2C_Mem_Write+0x1c8>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	2b00      	cmp	r3, #0
 8005564:	d130      	bne.n	80055c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	2200      	movs	r2, #0
 800556e:	2180      	movs	r1, #128	; 0x80
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f8d1 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e04d      	b.n	800561c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005584:	b29b      	uxth	r3, r3
 8005586:	2bff      	cmp	r3, #255	; 0xff
 8005588:	d90e      	bls.n	80055a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	22ff      	movs	r2, #255	; 0xff
 800558e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005594:	b2da      	uxtb	r2, r3
 8005596:	8979      	ldrh	r1, [r7, #10]
 8005598:	2300      	movs	r3, #0
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f9db 	bl	800595c <I2C_TransferConfig>
 80055a6:	e00f      	b.n	80055c8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	8979      	ldrh	r1, [r7, #10]
 80055ba:	2300      	movs	r3, #0
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f9ca 	bl	800595c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d19e      	bne.n	8005510 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 f91e 	bl	8005818 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e01a      	b.n	800561c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2220      	movs	r2, #32
 80055ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <HAL_I2C_Mem_Write+0x224>)
 80055fa:	400b      	ands	r3, r1
 80055fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800561a:	2302      	movs	r3, #2
  }
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	fe00e800 	.word	0xfe00e800

08005628 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	4603      	mov	r3, r0
 8005638:	817b      	strh	r3, [r7, #10]
 800563a:	460b      	mov	r3, r1
 800563c:	813b      	strh	r3, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	8979      	ldrh	r1, [r7, #10]
 8005648:	4b20      	ldr	r3, [pc, #128]	; (80056cc <I2C_RequestMemoryWrite+0xa4>)
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f983 	bl	800595c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	69b9      	ldr	r1, [r7, #24]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f89c 	bl	8005798 <I2C_WaitOnTXISFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e02c      	b.n	80056c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d105      	bne.n	800567c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005670:	893b      	ldrh	r3, [r7, #8]
 8005672:	b2da      	uxtb	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	629a      	str	r2, [r3, #40]	; 0x28
 800567a:	e015      	b.n	80056a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800567c:	893b      	ldrh	r3, [r7, #8]
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	b29b      	uxth	r3, r3
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f882 	bl	8005798 <I2C_WaitOnTXISFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e012      	b.n	80056c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800569e:	893b      	ldrh	r3, [r7, #8]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f830 	bl	8005718 <I2C_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	80002000 	.word	0x80002000

080056d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d103      	bne.n	80056ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d007      	beq.n	800570c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	619a      	str	r2, [r3, #24]
  }
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005728:	e022      	b.n	8005770 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005730:	d01e      	beq.n	8005770 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fe f91b 	bl	800396c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d113      	bne.n	8005770 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e00f      	b.n	8005790 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4013      	ands	r3, r2
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	429a      	cmp	r2, r3
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	429a      	cmp	r2, r3
 800578c:	d0cd      	beq.n	800572a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057a4:	e02c      	b.n	8005800 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f870 	bl	8005890 <I2C_IsAcknowledgeFailed>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e02a      	b.n	8005810 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c0:	d01e      	beq.n	8005800 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fe f8d3 	bl	800396c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d113      	bne.n	8005800 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e007      	b.n	8005810 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b02      	cmp	r3, #2
 800580c:	d1cb      	bne.n	80057a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005824:	e028      	b.n	8005878 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f830 	bl	8005890 <I2C_IsAcknowledgeFailed>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e026      	b.n	8005888 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583a:	f7fe f897 	bl	800396c <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	429a      	cmp	r2, r3
 8005848:	d302      	bcc.n	8005850 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d113      	bne.n	8005878 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e007      	b.n	8005888 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b20      	cmp	r3, #32
 8005884:	d1cf      	bne.n	8005826 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d151      	bne.n	800594e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058aa:	e022      	b.n	80058f2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058b2:	d01e      	beq.n	80058f2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b4:	f7fe f85a 	bl	800396c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d302      	bcc.n	80058ca <I2C_IsAcknowledgeFailed+0x3a>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d113      	bne.n	80058f2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e02e      	b.n	8005950 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d1d5      	bne.n	80058ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2210      	movs	r2, #16
 8005906:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2220      	movs	r2, #32
 800590e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f7ff fedd 	bl	80056d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <I2C_IsAcknowledgeFailed+0xc8>)
 8005922:	400b      	ands	r3, r1
 8005924:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	f043 0204 	orr.w	r2, r3, #4
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	fe00e800 	.word	0xfe00e800

0800595c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	817b      	strh	r3, [r7, #10]
 800596a:	4613      	mov	r3, r2
 800596c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	0d5b      	lsrs	r3, r3, #21
 8005978:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800597c:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <I2C_TransferConfig+0x58>)
 800597e:	430b      	orrs	r3, r1
 8005980:	43db      	mvns	r3, r3
 8005982:	ea02 0103 	and.w	r1, r2, r3
 8005986:	897b      	ldrh	r3, [r7, #10]
 8005988:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800598c:	7a7b      	ldrb	r3, [r7, #9]
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	431a      	orrs	r2, r3
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	431a      	orrs	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	03ff63ff 	.word	0x03ff63ff

080059b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d138      	bne.n	8005a40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059d8:	2302      	movs	r3, #2
 80059da:	e032      	b.n	8005a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2224      	movs	r2, #36	; 0x24
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6819      	ldr	r1, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a40:	2302      	movs	r3, #2
  }
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d139      	bne.n	8005ad8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e033      	b.n	8005ada <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2224      	movs	r2, #36	; 0x24
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0201 	bic.w	r2, r2, #1
 8005a90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005aa0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e000      	b.n	8005ada <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ad8:	2302      	movs	r3, #2
  }
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af4:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	6613      	str	r3, [r2, #96]	; 0x60
 8005afc:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	4905      	ldr	r1, [pc, #20]	; (8005b24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40021000 	.word	0x40021000
 8005b24:	40010000 	.word	0x40010000

08005b28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2a:	b08b      	sub	sp, #44	; 0x2c
 8005b2c:	af06      	add	r7, sp, #24
 8005b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e104      	b.n	8005d44 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fd fdce 	bl	80036f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2203      	movs	r2, #3
 8005b58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f002 f936 	bl	8007dd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	687e      	ldr	r6, [r7, #4]
 8005b6e:	466d      	mov	r5, sp
 8005b70:	f106 0410 	add.w	r4, r6, #16
 8005b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	602b      	str	r3, [r5, #0]
 8005b7c:	1d33      	adds	r3, r6, #4
 8005b7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b80:	6838      	ldr	r0, [r7, #0]
 8005b82:	f002 f915 	bl	8007db0 <USB_CoreInit>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0d5      	b.n	8005d44 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f002 f932 	bl	8007e08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]
 8005ba8:	e04c      	b.n	8005c44 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	440b      	add	r3, r1
 8005bba:	3301      	adds	r3, #1
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	440b      	add	r3, r1
 8005bd0:	7bfa      	ldrb	r2, [r7, #15]
 8005bd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bd4:	7bfa      	ldrb	r2, [r7, #15]
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	b298      	uxth	r0, r3
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	440b      	add	r3, r1
 8005be6:	3336      	adds	r3, #54	; 0x36
 8005be8:	4602      	mov	r2, r0
 8005bea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	440b      	add	r3, r1
 8005bfc:	3303      	adds	r3, #3
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c02:	7bfa      	ldrb	r2, [r7, #15]
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	440b      	add	r3, r1
 8005c10:	3338      	adds	r3, #56	; 0x38
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c16:	7bfa      	ldrb	r2, [r7, #15]
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	440b      	add	r3, r1
 8005c24:	333c      	adds	r3, #60	; 0x3c
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c2a:	7bfa      	ldrb	r2, [r7, #15]
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	3340      	adds	r3, #64	; 0x40
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	3301      	adds	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
 8005c44:	7bfa      	ldrb	r2, [r7, #15]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d3ad      	bcc.n	8005baa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	e044      	b.n	8005cde <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	440b      	add	r3, r1
 8005c62:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c6a:	7bfa      	ldrb	r2, [r7, #15]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c7c:	7bfa      	ldrb	r2, [r7, #15]
 8005c7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c80:	7bfa      	ldrb	r2, [r7, #15]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	440b      	add	r3, r1
 8005c8e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c96:	7bfa      	ldrb	r2, [r7, #15]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	440b      	add	r3, r1
 8005ca4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cac:	7bfa      	ldrb	r2, [r7, #15]
 8005cae:	6879      	ldr	r1, [r7, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	440b      	add	r3, r1
 8005cba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005cc2:	7bfa      	ldrb	r2, [r7, #15]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	440b      	add	r3, r1
 8005cd0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	73fb      	strb	r3, [r7, #15]
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3b5      	bcc.n	8005c54 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	687e      	ldr	r6, [r7, #4]
 8005cf0:	466d      	mov	r5, sp
 8005cf2:	f106 0410 	add.w	r4, r6, #16
 8005cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	1d33      	adds	r3, r6, #4
 8005d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d02:	6838      	ldr	r0, [r7, #0]
 8005d04:	f002 f88d 	bl	8007e22 <USB_DevInit>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e014      	b.n	8005d44 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d102      	bne.n	8005d38 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f80a 	bl	8005d4c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f002 f891 	bl	8007e64 <USB_DevDisconnect>

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f043 0302 	orr.w	r3, r3, #2
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	43db      	mvns	r3, r3
 8005db4:	401a      	ands	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	4908      	ldr	r1, [pc, #32]	; (8005ddc <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	4904      	ldr	r1, [pc, #16]	; (8005ddc <HAL_PWR_EnableWakeUpPin+0x3c>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	608b      	str	r3, [r1, #8]


}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40007000 	.word	0x40007000

08005de0 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8005de4:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f023 0307 	bic.w	r3, r3, #7
 8005dec:	4a07      	ldr	r2, [pc, #28]	; (8005e0c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005dee:	f043 0303 	orr.w	r3, r3, #3
 8005df2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005df4:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	4a05      	ldr	r2, [pc, #20]	; (8005e10 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8005dfa:	f043 0304 	orr.w	r3, r3, #4
 8005dfe:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005e00:	bf30      	wfi
}
 8005e02:	bf00      	nop
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	e000ed00 	.word	0xe000ed00

08005e14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <HAL_PWREx_GetVoltageRange+0x18>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40007000 	.word	0x40007000

08005e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e3e:	d130      	bne.n	8005ea2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e40:	4b23      	ldr	r3, [pc, #140]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4c:	d038      	beq.n	8005ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e4e:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e56:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2232      	movs	r2, #50	; 0x32
 8005e64:	fb02 f303 	mul.w	r3, r2, r3
 8005e68:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	0c9b      	lsrs	r3, r3, #18
 8005e70:	3301      	adds	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e74:	e002      	b.n	8005e7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e7c:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e88:	d102      	bne.n	8005e90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f2      	bne.n	8005e76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9c:	d110      	bne.n	8005ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e00f      	b.n	8005ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eae:	d007      	beq.n	8005ec0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005eb8:	4a05      	ldr	r2, [pc, #20]	; (8005ed0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ebe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40007000 	.word	0x40007000
 8005ed4:	20000020 	.word	0x20000020
 8005ed8:	431bde83 	.word	0x431bde83

08005edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f000 bc11 	b.w	8006712 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef0:	4ba0      	ldr	r3, [pc, #640]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 030c 	and.w	r3, r3, #12
 8005ef8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005efa:	4b9e      	ldr	r3, [pc, #632]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80e4 	beq.w	80060da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <HAL_RCC_OscConfig+0x4c>
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b0c      	cmp	r3, #12
 8005f1c:	f040 808b 	bne.w	8006036 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	f040 8087 	bne.w	8006036 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f28:	4b92      	ldr	r3, [pc, #584]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_RCC_OscConfig+0x64>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e3e8      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	4b8b      	ldr	r3, [pc, #556]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <HAL_RCC_OscConfig+0x7e>
 8005f50:	4b88      	ldr	r3, [pc, #544]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f58:	e005      	b.n	8005f66 <HAL_RCC_OscConfig+0x8a>
 8005f5a:	4b86      	ldr	r3, [pc, #536]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d223      	bcs.n	8005fb2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fd74 	bl	8006a5c <RCC_SetFlashLatencyFromMSIRange>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e3c9      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f7e:	4b7d      	ldr	r3, [pc, #500]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a7c      	ldr	r2, [pc, #496]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f84:	f043 0308 	orr.w	r3, r3, #8
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	4b7a      	ldr	r3, [pc, #488]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	4977      	ldr	r1, [pc, #476]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f9c:	4b75      	ldr	r3, [pc, #468]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	4972      	ldr	r1, [pc, #456]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	604b      	str	r3, [r1, #4]
 8005fb0:	e025      	b.n	8005ffe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fb2:	4b70      	ldr	r3, [pc, #448]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a6f      	ldr	r2, [pc, #444]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005fb8:	f043 0308 	orr.w	r3, r3, #8
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	4b6d      	ldr	r3, [pc, #436]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	496a      	ldr	r1, [pc, #424]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fd0:	4b68      	ldr	r3, [pc, #416]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	4965      	ldr	r1, [pc, #404]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fd34 	bl	8006a5c <RCC_SetFlashLatencyFromMSIRange>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e389      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ffe:	f000 fca3 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8006002:	4601      	mov	r1, r0
 8006004:	4b5b      	ldr	r3, [pc, #364]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	4a5a      	ldr	r2, [pc, #360]	; (8006178 <HAL_RCC_OscConfig+0x29c>)
 8006010:	5cd3      	ldrb	r3, [r2, r3]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	fa21 f303 	lsr.w	r3, r1, r3
 800601a:	4a58      	ldr	r2, [pc, #352]	; (800617c <HAL_RCC_OscConfig+0x2a0>)
 800601c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800601e:	4b58      	ldr	r3, [pc, #352]	; (8006180 <HAL_RCC_OscConfig+0x2a4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7fd fc52 	bl	80038cc <HAL_InitTick>
 8006028:	4603      	mov	r3, r0
 800602a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d052      	beq.n	80060d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	e36d      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d032      	beq.n	80060a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800603e:	4b4d      	ldr	r3, [pc, #308]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a4c      	ldr	r2, [pc, #304]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800604a:	f7fd fc8f 	bl	800396c <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006052:	f7fd fc8b 	bl	800396c <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e356      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006064:	4b43      	ldr	r3, [pc, #268]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006070:	4b40      	ldr	r3, [pc, #256]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a3f      	ldr	r2, [pc, #252]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006076:	f043 0308 	orr.w	r3, r3, #8
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	4b3d      	ldr	r3, [pc, #244]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	493a      	ldr	r1, [pc, #232]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800608e:	4b39      	ldr	r3, [pc, #228]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	4935      	ldr	r1, [pc, #212]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	604b      	str	r3, [r1, #4]
 80060a2:	e01a      	b.n	80060da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060a4:	4b33      	ldr	r3, [pc, #204]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a32      	ldr	r2, [pc, #200]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060b0:	f7fd fc5c 	bl	800396c <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060b8:	f7fd fc58 	bl	800396c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e323      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060ca:	4b2a      	ldr	r3, [pc, #168]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x1dc>
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d073      	beq.n	80061ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d005      	beq.n	80060f8 <HAL_RCC_OscConfig+0x21c>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b0c      	cmp	r3, #12
 80060f0:	d10e      	bne.n	8006110 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d10b      	bne.n	8006110 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d063      	beq.n	80061cc <HAL_RCC_OscConfig+0x2f0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d15f      	bne.n	80061cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e300      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d106      	bne.n	8006128 <HAL_RCC_OscConfig+0x24c>
 800611a:	4b16      	ldr	r3, [pc, #88]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a15      	ldr	r2, [pc, #84]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	e01d      	b.n	8006164 <HAL_RCC_OscConfig+0x288>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006130:	d10c      	bne.n	800614c <HAL_RCC_OscConfig+0x270>
 8006132:	4b10      	ldr	r3, [pc, #64]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a0f      	ldr	r2, [pc, #60]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e00b      	b.n	8006164 <HAL_RCC_OscConfig+0x288>
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a08      	ldr	r2, [pc, #32]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 8006152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a05      	ldr	r2, [pc, #20]	; (8006174 <HAL_RCC_OscConfig+0x298>)
 800615e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01b      	beq.n	80061a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fd fbfe 	bl	800396c <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006172:	e010      	b.n	8006196 <HAL_RCC_OscConfig+0x2ba>
 8006174:	40021000 	.word	0x40021000
 8006178:	080094a0 	.word	0x080094a0
 800617c:	20000020 	.word	0x20000020
 8006180:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006184:	f7fd fbf2 	bl	800396c <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e2bd      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006196:	4baf      	ldr	r3, [pc, #700]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f0      	beq.n	8006184 <HAL_RCC_OscConfig+0x2a8>
 80061a2:	e014      	b.n	80061ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fd fbe2 	bl	800396c <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ac:	f7fd fbde 	bl	800396c <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b64      	cmp	r3, #100	; 0x64
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e2a9      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061be:	4ba5      	ldr	r3, [pc, #660]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x2d0>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d060      	beq.n	800629c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d005      	beq.n	80061ec <HAL_RCC_OscConfig+0x310>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d119      	bne.n	800621a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d116      	bne.n	800621a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ec:	4b99      	ldr	r3, [pc, #612]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <HAL_RCC_OscConfig+0x328>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e286      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006204:	4b93      	ldr	r3, [pc, #588]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	061b      	lsls	r3, r3, #24
 8006212:	4990      	ldr	r1, [pc, #576]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006214:	4313      	orrs	r3, r2
 8006216:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006218:	e040      	b.n	800629c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d023      	beq.n	800626a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006222:	4b8c      	ldr	r3, [pc, #560]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a8b      	ldr	r2, [pc, #556]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fd fb9d 	bl	800396c <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006236:	f7fd fb99 	bl	800396c <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e264      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006248:	4b82      	ldr	r3, [pc, #520]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0f0      	beq.n	8006236 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006254:	4b7f      	ldr	r3, [pc, #508]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	061b      	lsls	r3, r3, #24
 8006262:	497c      	ldr	r1, [pc, #496]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006264:	4313      	orrs	r3, r2
 8006266:	604b      	str	r3, [r1, #4]
 8006268:	e018      	b.n	800629c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800626a:	4b7a      	ldr	r3, [pc, #488]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a79      	ldr	r2, [pc, #484]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006276:	f7fd fb79 	bl	800396c <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800627e:	f7fd fb75 	bl	800396c <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e240      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006290:	4b70      	ldr	r3, [pc, #448]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f0      	bne.n	800627e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d03c      	beq.n	8006322 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01c      	beq.n	80062ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062b0:	4b68      	ldr	r3, [pc, #416]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80062b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062b6:	4a67      	ldr	r2, [pc, #412]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c0:	f7fd fb54 	bl	800396c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c8:	f7fd fb50 	bl	800396c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e21b      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062da:	4b5e      	ldr	r3, [pc, #376]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80062dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0ef      	beq.n	80062c8 <HAL_RCC_OscConfig+0x3ec>
 80062e8:	e01b      	b.n	8006322 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ea:	4b5a      	ldr	r3, [pc, #360]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80062ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f0:	4a58      	ldr	r2, [pc, #352]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fa:	f7fd fb37 	bl	800396c <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006302:	f7fd fb33 	bl	800396c <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e1fe      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006314:	4b4f      	ldr	r3, [pc, #316]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1ef      	bne.n	8006302 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80a6 	beq.w	800647c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006330:	2300      	movs	r3, #0
 8006332:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006334:	4b47      	ldr	r3, [pc, #284]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006340:	4b44      	ldr	r3, [pc, #272]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	4a43      	ldr	r2, [pc, #268]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634a:	6593      	str	r3, [r2, #88]	; 0x58
 800634c:	4b41      	ldr	r3, [pc, #260]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006358:	2301      	movs	r3, #1
 800635a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800635c:	4b3e      	ldr	r3, [pc, #248]	; (8006458 <HAL_RCC_OscConfig+0x57c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d118      	bne.n	800639a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006368:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <HAL_RCC_OscConfig+0x57c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3a      	ldr	r2, [pc, #232]	; (8006458 <HAL_RCC_OscConfig+0x57c>)
 800636e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006372:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006374:	f7fd fafa 	bl	800396c <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637c:	f7fd faf6 	bl	800396c <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e1c1      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800638e:	4b32      	ldr	r3, [pc, #200]	; (8006458 <HAL_RCC_OscConfig+0x57c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d108      	bne.n	80063b4 <HAL_RCC_OscConfig+0x4d8>
 80063a2:	4b2c      	ldr	r3, [pc, #176]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	4a2a      	ldr	r2, [pc, #168]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063b2:	e024      	b.n	80063fe <HAL_RCC_OscConfig+0x522>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b05      	cmp	r3, #5
 80063ba:	d110      	bne.n	80063de <HAL_RCC_OscConfig+0x502>
 80063bc:	4b25      	ldr	r3, [pc, #148]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c2:	4a24      	ldr	r2, [pc, #144]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063c4:	f043 0304 	orr.w	r3, r3, #4
 80063c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063cc:	4b21      	ldr	r3, [pc, #132]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d2:	4a20      	ldr	r2, [pc, #128]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063dc:	e00f      	b.n	80063fe <HAL_RCC_OscConfig+0x522>
 80063de:	4b1d      	ldr	r3, [pc, #116]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e4:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063ee:	4b19      	ldr	r3, [pc, #100]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f4:	4a17      	ldr	r2, [pc, #92]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 80063f6:	f023 0304 	bic.w	r3, r3, #4
 80063fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006406:	f7fd fab1 	bl	800396c <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800640c:	e00a      	b.n	8006424 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640e:	f7fd faad 	bl	800396c <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f241 3288 	movw	r2, #5000	; 0x1388
 800641c:	4293      	cmp	r3, r2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e176      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006424:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <HAL_RCC_OscConfig+0x578>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0ed      	beq.n	800640e <HAL_RCC_OscConfig+0x532>
 8006432:	e01a      	b.n	800646a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006434:	f7fd fa9a 	bl	800396c <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800643a:	e00f      	b.n	800645c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800643c:	f7fd fa96 	bl	800396c <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	; 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d906      	bls.n	800645c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e15f      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
 8006452:	bf00      	nop
 8006454:	40021000 	.word	0x40021000
 8006458:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800645c:	4baa      	ldr	r3, [pc, #680]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e8      	bne.n	800643c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800646a:	7ffb      	ldrb	r3, [r7, #31]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d105      	bne.n	800647c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006470:	4ba5      	ldr	r3, [pc, #660]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	4aa4      	ldr	r2, [pc, #656]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d03c      	beq.n	8006502 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01c      	beq.n	80064ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006490:	4b9d      	ldr	r3, [pc, #628]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006496:	4a9c      	ldr	r2, [pc, #624]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a0:	f7fd fa64 	bl	800396c <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064a8:	f7fd fa60 	bl	800396c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e12b      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064ba:	4b93      	ldr	r3, [pc, #588]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80064bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0ef      	beq.n	80064a8 <HAL_RCC_OscConfig+0x5cc>
 80064c8:	e01b      	b.n	8006502 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064ca:	4b8f      	ldr	r3, [pc, #572]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80064cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064d0:	4a8d      	ldr	r2, [pc, #564]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064da:	f7fd fa47 	bl	800396c <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e2:	f7fd fa43 	bl	800396c <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e10e      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064f4:	4b84      	ldr	r3, [pc, #528]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80064f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1ef      	bne.n	80064e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8102 	beq.w	8006710 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	2b02      	cmp	r3, #2
 8006512:	f040 80c5 	bne.w	80066a0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006516:	4b7c      	ldr	r3, [pc, #496]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f003 0203 	and.w	r2, r3, #3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	429a      	cmp	r2, r3
 8006528:	d12c      	bne.n	8006584 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	3b01      	subs	r3, #1
 8006536:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006538:	429a      	cmp	r2, r3
 800653a:	d123      	bne.n	8006584 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006546:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006548:	429a      	cmp	r2, r3
 800654a:	d11b      	bne.n	8006584 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d113      	bne.n	8006584 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	3b01      	subs	r3, #1
 800656a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800656c:	429a      	cmp	r2, r3
 800656e:	d109      	bne.n	8006584 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	3b01      	subs	r3, #1
 800657e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006580:	429a      	cmp	r2, r3
 8006582:	d067      	beq.n	8006654 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b0c      	cmp	r3, #12
 8006588:	d062      	beq.n	8006650 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800658a:	4b5f      	ldr	r3, [pc, #380]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e0bb      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800659a:	4b5b      	ldr	r3, [pc, #364]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a5a      	ldr	r2, [pc, #360]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80065a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065a6:	f7fd f9e1 	bl	800396c <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065ac:	e008      	b.n	80065c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ae:	f7fd f9dd 	bl	800396c <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e0a8      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065c0:	4b51      	ldr	r3, [pc, #324]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1f0      	bne.n	80065ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065cc:	4b4e      	ldr	r3, [pc, #312]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	4b4e      	ldr	r3, [pc, #312]	; (800670c <HAL_RCC_OscConfig+0x830>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80065dc:	3a01      	subs	r2, #1
 80065de:	0112      	lsls	r2, r2, #4
 80065e0:	4311      	orrs	r1, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065e6:	0212      	lsls	r2, r2, #8
 80065e8:	4311      	orrs	r1, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80065ee:	0852      	lsrs	r2, r2, #1
 80065f0:	3a01      	subs	r2, #1
 80065f2:	0552      	lsls	r2, r2, #21
 80065f4:	4311      	orrs	r1, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80065fa:	0852      	lsrs	r2, r2, #1
 80065fc:	3a01      	subs	r2, #1
 80065fe:	0652      	lsls	r2, r2, #25
 8006600:	4311      	orrs	r1, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006606:	06d2      	lsls	r2, r2, #27
 8006608:	430a      	orrs	r2, r1
 800660a:	493f      	ldr	r1, [pc, #252]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 800660c:	4313      	orrs	r3, r2
 800660e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006610:	4b3d      	ldr	r3, [pc, #244]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a3c      	ldr	r2, [pc, #240]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800661a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800661c:	4b3a      	ldr	r3, [pc, #232]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4a39      	ldr	r2, [pc, #228]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006626:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006628:	f7fd f9a0 	bl	800396c <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006630:	f7fd f99c 	bl	800396c <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e067      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006642:	4b31      	ldr	r3, [pc, #196]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800664e:	e05f      	b.n	8006710 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e05e      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006654:	4b2c      	ldr	r3, [pc, #176]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d157      	bne.n	8006710 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006660:	4b29      	ldr	r3, [pc, #164]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a28      	ldr	r2, [pc, #160]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800666a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800666c:	4b26      	ldr	r3, [pc, #152]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a25      	ldr	r2, [pc, #148]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006676:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006678:	f7fd f978 	bl	800396c <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006680:	f7fd f974 	bl	800396c <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e03f      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCC_OscConfig+0x7a4>
 800669e:	e037      	b.n	8006710 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b0c      	cmp	r3, #12
 80066a4:	d02d      	beq.n	8006702 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a6:	4b18      	ldr	r3, [pc, #96]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a17      	ldr	r2, [pc, #92]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80066ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066b0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80066be:	4b12      	ldr	r3, [pc, #72]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	4a11      	ldr	r2, [pc, #68]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80066c4:	f023 0303 	bic.w	r3, r3, #3
 80066c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80066ca:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	4a0e      	ldr	r2, [pc, #56]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80066d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80066d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066da:	f7fd f947 	bl	800396c <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e2:	f7fd f943 	bl	800396c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e00e      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066f4:	4b04      	ldr	r3, [pc, #16]	; (8006708 <HAL_RCC_OscConfig+0x82c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1f0      	bne.n	80066e2 <HAL_RCC_OscConfig+0x806>
 8006700:	e006      	b.n	8006710 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e005      	b.n	8006712 <HAL_RCC_OscConfig+0x836>
 8006706:	bf00      	nop
 8006708:	40021000 	.word	0x40021000
 800670c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop

0800671c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0c8      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006730:	4b66      	ldr	r3, [pc, #408]	; (80068cc <HAL_RCC_ClockConfig+0x1b0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d910      	bls.n	8006760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673e:	4b63      	ldr	r3, [pc, #396]	; (80068cc <HAL_RCC_ClockConfig+0x1b0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 0207 	bic.w	r2, r3, #7
 8006746:	4961      	ldr	r1, [pc, #388]	; (80068cc <HAL_RCC_ClockConfig+0x1b0>)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	4313      	orrs	r3, r2
 800674c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800674e:	4b5f      	ldr	r3, [pc, #380]	; (80068cc <HAL_RCC_ClockConfig+0x1b0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d001      	beq.n	8006760 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0b0      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d04c      	beq.n	8006806 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d107      	bne.n	8006784 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006774:	4b56      	ldr	r3, [pc, #344]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d121      	bne.n	80067c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e09e      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d107      	bne.n	800679c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800678c:	4b50      	ldr	r3, [pc, #320]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d115      	bne.n	80067c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e092      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d107      	bne.n	80067b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80067a4:	4b4a      	ldr	r3, [pc, #296]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e086      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b4:	4b46      	ldr	r3, [pc, #280]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e07e      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067c4:	4b42      	ldr	r3, [pc, #264]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f023 0203 	bic.w	r2, r3, #3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	493f      	ldr	r1, [pc, #252]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d6:	f7fd f8c9 	bl	800396c <HAL_GetTick>
 80067da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067dc:	e00a      	b.n	80067f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067de:	f7fd f8c5 	bl	800396c <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e066      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f4:	4b36      	ldr	r3, [pc, #216]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 020c 	and.w	r2, r3, #12
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	429a      	cmp	r2, r3
 8006804:	d1eb      	bne.n	80067de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006812:	4b2f      	ldr	r3, [pc, #188]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	492c      	ldr	r1, [pc, #176]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006820:	4313      	orrs	r3, r2
 8006822:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006824:	4b29      	ldr	r3, [pc, #164]	; (80068cc <HAL_RCC_ClockConfig+0x1b0>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d210      	bcs.n	8006854 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006832:	4b26      	ldr	r3, [pc, #152]	; (80068cc <HAL_RCC_ClockConfig+0x1b0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 0207 	bic.w	r2, r3, #7
 800683a:	4924      	ldr	r1, [pc, #144]	; (80068cc <HAL_RCC_ClockConfig+0x1b0>)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	4313      	orrs	r3, r2
 8006840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006842:	4b22      	ldr	r3, [pc, #136]	; (80068cc <HAL_RCC_ClockConfig+0x1b0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e036      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006860:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4918      	ldr	r1, [pc, #96]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 800686e:	4313      	orrs	r3, r2
 8006870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800687e:	4b14      	ldr	r3, [pc, #80]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	4910      	ldr	r1, [pc, #64]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 800688e:	4313      	orrs	r3, r2
 8006890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006892:	f000 f859 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8006896:	4601      	mov	r1, r0
 8006898:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <HAL_RCC_ClockConfig+0x1b4>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	091b      	lsrs	r3, r3, #4
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <HAL_RCC_ClockConfig+0x1b8>)
 80068a4:	5cd3      	ldrb	r3, [r2, r3]
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	fa21 f303 	lsr.w	r3, r1, r3
 80068ae:	4a0a      	ldr	r2, [pc, #40]	; (80068d8 <HAL_RCC_ClockConfig+0x1bc>)
 80068b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <HAL_RCC_ClockConfig+0x1c0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fd f808 	bl	80038cc <HAL_InitTick>
 80068bc:	4603      	mov	r3, r0
 80068be:	72fb      	strb	r3, [r7, #11]

  return status;
 80068c0:	7afb      	ldrb	r3, [r7, #11]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40022000 	.word	0x40022000
 80068d0:	40021000 	.word	0x40021000
 80068d4:	080094a0 	.word	0x080094a0
 80068d8:	20000020 	.word	0x20000020
 80068dc:	20000024 	.word	0x20000024

080068e0 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 80068ec:	4b15      	ldr	r3, [pc, #84]	; (8006944 <HAL_RCC_MCOConfig+0x64>)
 80068ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f0:	4a14      	ldr	r2, [pc, #80]	; (8006944 <HAL_RCC_MCOConfig+0x64>)
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068f8:	4b12      	ldr	r3, [pc, #72]	; (8006944 <HAL_RCC_MCOConfig+0x64>)
 80068fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8006904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690a:	2302      	movs	r3, #2
 800690c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800690e:	2302      	movs	r3, #2
 8006910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006916:	2300      	movs	r3, #0
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800691a:	f107 0314 	add.w	r3, r7, #20
 800691e:	4619      	mov	r1, r3
 8006920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006924:	f7fe fb4a 	bl	8004fbc <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8006928:	4b06      	ldr	r3, [pc, #24]	; (8006944 <HAL_RCC_MCOConfig+0x64>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	430b      	orrs	r3, r1
 8006936:	4903      	ldr	r1, [pc, #12]	; (8006944 <HAL_RCC_MCOConfig+0x64>)
 8006938:	4313      	orrs	r3, r2
 800693a:	608b      	str	r3, [r1, #8]
}
 800693c:	bf00      	nop
 800693e:	3728      	adds	r7, #40	; 0x28
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40021000 	.word	0x40021000

08006948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006948:	b480      	push	{r7}
 800694a:	b089      	sub	sp, #36	; 0x24
 800694c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	2300      	movs	r3, #0
 8006954:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006956:	4b3d      	ldr	r3, [pc, #244]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
 800695e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006960:	4b3a      	ldr	r3, [pc, #232]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x34>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b0c      	cmp	r3, #12
 8006974:	d121      	bne.n	80069ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d11e      	bne.n	80069ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800697c:	4b33      	ldr	r3, [pc, #204]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d107      	bne.n	8006998 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006988:	4b30      	ldr	r3, [pc, #192]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 800698a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800698e:	0a1b      	lsrs	r3, r3, #8
 8006990:	f003 030f 	and.w	r3, r3, #15
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	e005      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006998:	4b2c      	ldr	r3, [pc, #176]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	091b      	lsrs	r3, r3, #4
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80069a4:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x108>)
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10d      	bne.n	80069d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d102      	bne.n	80069c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069c0:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x10c>)
 80069c2:	61bb      	str	r3, [r7, #24]
 80069c4:	e004      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d101      	bne.n	80069d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069cc:	4b22      	ldr	r3, [pc, #136]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80069ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	2b0c      	cmp	r3, #12
 80069d4:	d133      	bne.n	8006a3e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069d6:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d002      	beq.n	80069ec <HAL_RCC_GetSysClockFreq+0xa4>
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d003      	beq.n	80069f2 <HAL_RCC_GetSysClockFreq+0xaa>
 80069ea:	e005      	b.n	80069f8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80069ec:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <HAL_RCC_GetSysClockFreq+0x10c>)
 80069ee:	617b      	str	r3, [r7, #20]
      break;
 80069f0:	e005      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80069f2:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80069f4:	617b      	str	r3, [r7, #20]
      break;
 80069f6:	e002      	b.n	80069fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	617b      	str	r3, [r7, #20]
      break;
 80069fc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069fe:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	091b      	lsrs	r3, r3, #4
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	3301      	adds	r3, #1
 8006a0a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	fb02 f203 	mul.w	r2, r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a22:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	0e5b      	lsrs	r3, r3, #25
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	3301      	adds	r3, #1
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a3c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3724      	adds	r7, #36	; 0x24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	080094b0 	.word	0x080094b0
 8006a54:	00f42400 	.word	0x00f42400
 8006a58:	0124f800 	.word	0x0124f800

08006a5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a68:	4b2a      	ldr	r3, [pc, #168]	; (8006b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a74:	f7ff f9ce 	bl	8005e14 <HAL_PWREx_GetVoltageRange>
 8006a78:	6178      	str	r0, [r7, #20]
 8006a7a:	e014      	b.n	8006aa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a7c:	4b25      	ldr	r3, [pc, #148]	; (8006b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a80:	4a24      	ldr	r2, [pc, #144]	; (8006b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a86:	6593      	str	r3, [r2, #88]	; 0x58
 8006a88:	4b22      	ldr	r3, [pc, #136]	; (8006b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a94:	f7ff f9be 	bl	8005e14 <HAL_PWREx_GetVoltageRange>
 8006a98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a9a:	4b1e      	ldr	r3, [pc, #120]	; (8006b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9e:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aac:	d10b      	bne.n	8006ac6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d919      	bls.n	8006ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2ba0      	cmp	r3, #160	; 0xa0
 8006ab8:	d902      	bls.n	8006ac0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006aba:	2302      	movs	r3, #2
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	e013      	b.n	8006ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	e010      	b.n	8006ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b80      	cmp	r3, #128	; 0x80
 8006aca:	d902      	bls.n	8006ad2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006acc:	2303      	movs	r3, #3
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	e00a      	b.n	8006ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d102      	bne.n	8006ade <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ad8:	2302      	movs	r3, #2
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	e004      	b.n	8006ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b70      	cmp	r3, #112	; 0x70
 8006ae2:	d101      	bne.n	8006ae8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f023 0207 	bic.w	r2, r3, #7
 8006af0:	4909      	ldr	r1, [pc, #36]	; (8006b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d001      	beq.n	8006b0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40021000 	.word	0x40021000
 8006b18:	40022000 	.word	0x40022000

08006b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b24:	2300      	movs	r3, #0
 8006b26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b28:	2300      	movs	r3, #0
 8006b2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02f      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b40:	d005      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006b42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006b46:	d015      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d007      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006b4c:	e00f      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006b4e:	4b5d      	ldr	r3, [pc, #372]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	4a5c      	ldr	r2, [pc, #368]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b5a:	e00c      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fa1e 	bl	8006fa4 <RCCEx_PLLSAI1_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b6c:	e003      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	74fb      	strb	r3, [r7, #19]
      break;
 8006b72:	e000      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8006b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b76:	7cfb      	ldrb	r3, [r7, #19]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b7c:	4b51      	ldr	r3, [pc, #324]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	494e      	ldr	r1, [pc, #312]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006b92:	e001      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b94:	7cfb      	ldrb	r3, [r7, #19]
 8006b96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 809e 	beq.w	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006baa:	4b46      	ldr	r3, [pc, #280]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00d      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bc0:	4b40      	ldr	r3, [pc, #256]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc4:	4a3f      	ldr	r2, [pc, #252]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bca:	6593      	str	r3, [r2, #88]	; 0x58
 8006bcc:	4b3d      	ldr	r3, [pc, #244]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bdc:	4b3a      	ldr	r3, [pc, #232]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a39      	ldr	r2, [pc, #228]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006be8:	f7fc fec0 	bl	800396c <HAL_GetTick>
 8006bec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006bee:	e009      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf0:	f7fc febc 	bl	800396c <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d902      	bls.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	74fb      	strb	r3, [r7, #19]
        break;
 8006c02:	e005      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c04:	4b30      	ldr	r3, [pc, #192]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0ef      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8006c10:	7cfb      	ldrb	r3, [r7, #19]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d15a      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c16:	4b2b      	ldr	r3, [pc, #172]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01e      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d019      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c32:	4b24      	ldr	r3, [pc, #144]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c3e:	4b21      	ldr	r3, [pc, #132]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c44:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4e:	4b1d      	ldr	r3, [pc, #116]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c5e:	4a19      	ldr	r2, [pc, #100]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d016      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fc fe7c 	bl	800396c <HAL_GetTick>
 8006c74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c76:	e00b      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c78:	f7fc fe78 	bl	800396c <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d902      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	74fb      	strb	r3, [r7, #19]
            break;
 8006c8e:	e006      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0ec      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8006c9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10b      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ca4:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	4904      	ldr	r1, [pc, #16]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006cba:	e009      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cbc:	7cfb      	ldrb	r3, [r7, #19]
 8006cbe:	74bb      	strb	r3, [r7, #18]
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8006cc2:	bf00      	nop
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ccc:	7cfb      	ldrb	r3, [r7, #19]
 8006cce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cd0:	7c7b      	ldrb	r3, [r7, #17]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d105      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cd6:	4bb2      	ldr	r3, [pc, #712]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	4ab1      	ldr	r2, [pc, #708]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cee:	4bac      	ldr	r3, [pc, #688]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf4:	f023 0203 	bic.w	r2, r3, #3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	49a8      	ldr	r1, [pc, #672]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d10:	4ba3      	ldr	r3, [pc, #652]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d16:	f023 020c 	bic.w	r2, r3, #12
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	49a0      	ldr	r1, [pc, #640]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d32:	4b9b      	ldr	r3, [pc, #620]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	4997      	ldr	r1, [pc, #604]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d54:	4b92      	ldr	r3, [pc, #584]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	498f      	ldr	r1, [pc, #572]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d76:	4b8a      	ldr	r3, [pc, #552]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d84:	4986      	ldr	r1, [pc, #536]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d98:	4b81      	ldr	r3, [pc, #516]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	497e      	ldr	r1, [pc, #504]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dba:	4b79      	ldr	r3, [pc, #484]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	4975      	ldr	r1, [pc, #468]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ddc:	4b70      	ldr	r3, [pc, #448]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	496d      	ldr	r1, [pc, #436]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dfe:	4b68      	ldr	r3, [pc, #416]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	4964      	ldr	r1, [pc, #400]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d028      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e20:	4b5f      	ldr	r3, [pc, #380]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	495c      	ldr	r1, [pc, #368]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e3e:	d106      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e40:	4b57      	ldr	r3, [pc, #348]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a56      	ldr	r2, [pc, #344]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e4a:	60d3      	str	r3, [r2, #12]
 8006e4c:	e011      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e56:	d10c      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f8a0 	bl	8006fa4 <RCCEx_PLLSAI1_Config>
 8006e64:	4603      	mov	r3, r0
 8006e66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006e68:	7cfb      	ldrb	r3, [r7, #19]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8006e6e:	7cfb      	ldrb	r3, [r7, #19]
 8006e70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d028      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e7e:	4b48      	ldr	r3, [pc, #288]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8c:	4944      	ldr	r1, [pc, #272]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e9c:	d106      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e9e:	4b40      	ldr	r3, [pc, #256]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	4a3f      	ldr	r2, [pc, #252]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ea8:	60d3      	str	r3, [r2, #12]
 8006eaa:	e011      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eb4:	d10c      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	2101      	movs	r1, #1
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f871 	bl	8006fa4 <RCCEx_PLLSAI1_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ec6:	7cfb      	ldrb	r3, [r7, #19]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8006ecc:	7cfb      	ldrb	r3, [r7, #19]
 8006ece:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d028      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006edc:	4b30      	ldr	r3, [pc, #192]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eea:	492d      	ldr	r1, [pc, #180]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006efa:	d106      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006efc:	4b28      	ldr	r3, [pc, #160]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4a27      	ldr	r2, [pc, #156]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f06:	60d3      	str	r3, [r2, #12]
 8006f08:	e011      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f12:	d10c      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	2101      	movs	r1, #1
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f842 	bl	8006fa4 <RCCEx_PLLSAI1_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f24:	7cfb      	ldrb	r3, [r7, #19]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8006f2a:	7cfb      	ldrb	r3, [r7, #19]
 8006f2c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01c      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f3a:	4b19      	ldr	r3, [pc, #100]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f48:	4915      	ldr	r1, [pc, #84]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2102      	movs	r1, #2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f81f 	bl	8006fa4 <RCCEx_PLLSAI1_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f6a:	7cfb      	ldrb	r3, [r7, #19]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8006f70:	7cfb      	ldrb	r3, [r7, #19]
 8006f72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8e:	4904      	ldr	r1, [pc, #16]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006f96:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40021000 	.word	0x40021000

08006fa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006fb2:	4b73      	ldr	r3, [pc, #460]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d018      	beq.n	8006ff0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006fbe:	4b70      	ldr	r3, [pc, #448]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f003 0203 	and.w	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d10d      	bne.n	8006fea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
       ||
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006fd6:	4b6a      	ldr	r3, [pc, #424]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	091b      	lsrs	r3, r3, #4
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
       ||
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d044      	beq.n	8007074 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	73fb      	strb	r3, [r7, #15]
 8006fee:	e041      	b.n	8007074 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d00c      	beq.n	8007012 <RCCEx_PLLSAI1_Config+0x6e>
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d013      	beq.n	8007024 <RCCEx_PLLSAI1_Config+0x80>
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d120      	bne.n	8007042 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007000:	4b5f      	ldr	r3, [pc, #380]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11d      	bne.n	8007048 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007010:	e01a      	b.n	8007048 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007012:	4b5b      	ldr	r3, [pc, #364]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800701a:	2b00      	cmp	r3, #0
 800701c:	d116      	bne.n	800704c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007022:	e013      	b.n	800704c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007024:	4b56      	ldr	r3, [pc, #344]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10f      	bne.n	8007050 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007030:	4b53      	ldr	r3, [pc, #332]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d109      	bne.n	8007050 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007040:	e006      	b.n	8007050 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	73fb      	strb	r3, [r7, #15]
      break;
 8007046:	e004      	b.n	8007052 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007048:	bf00      	nop
 800704a:	e002      	b.n	8007052 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800704c:	bf00      	nop
 800704e:	e000      	b.n	8007052 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007050:	bf00      	nop
    }

    if(status == HAL_OK)
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10d      	bne.n	8007074 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007058:	4b49      	ldr	r3, [pc, #292]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	3b01      	subs	r3, #1
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	430b      	orrs	r3, r1
 800706e:	4944      	ldr	r1, [pc, #272]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007070:	4313      	orrs	r3, r2
 8007072:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d17c      	bne.n	8007174 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800707a:	4b41      	ldr	r3, [pc, #260]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a40      	ldr	r2, [pc, #256]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007080:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007086:	f7fc fc71 	bl	800396c <HAL_GetTick>
 800708a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800708c:	e009      	b.n	80070a2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800708e:	f7fc fc6d 	bl	800396c <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d902      	bls.n	80070a2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	73fb      	strb	r3, [r7, #15]
        break;
 80070a0:	e005      	b.n	80070ae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070a2:	4b37      	ldr	r3, [pc, #220]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1ef      	bne.n	800708e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d15f      	bne.n	8007174 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d110      	bne.n	80070dc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070ba:	4b31      	ldr	r3, [pc, #196]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80070c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6892      	ldr	r2, [r2, #8]
 80070ca:	0211      	lsls	r1, r2, #8
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	68d2      	ldr	r2, [r2, #12]
 80070d0:	06d2      	lsls	r2, r2, #27
 80070d2:	430a      	orrs	r2, r1
 80070d4:	492a      	ldr	r1, [pc, #168]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	610b      	str	r3, [r1, #16]
 80070da:	e027      	b.n	800712c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d112      	bne.n	8007108 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070e2:	4b27      	ldr	r3, [pc, #156]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80070ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6892      	ldr	r2, [r2, #8]
 80070f2:	0211      	lsls	r1, r2, #8
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6912      	ldr	r2, [r2, #16]
 80070f8:	0852      	lsrs	r2, r2, #1
 80070fa:	3a01      	subs	r2, #1
 80070fc:	0552      	lsls	r2, r2, #21
 80070fe:	430a      	orrs	r2, r1
 8007100:	491f      	ldr	r1, [pc, #124]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007102:	4313      	orrs	r3, r2
 8007104:	610b      	str	r3, [r1, #16]
 8007106:	e011      	b.n	800712c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007108:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007110:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6892      	ldr	r2, [r2, #8]
 8007118:	0211      	lsls	r1, r2, #8
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6952      	ldr	r2, [r2, #20]
 800711e:	0852      	lsrs	r2, r2, #1
 8007120:	3a01      	subs	r2, #1
 8007122:	0652      	lsls	r2, r2, #25
 8007124:	430a      	orrs	r2, r1
 8007126:	4916      	ldr	r1, [pc, #88]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007128:	4313      	orrs	r3, r2
 800712a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800712c:	4b14      	ldr	r3, [pc, #80]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a13      	ldr	r2, [pc, #76]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007136:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007138:	f7fc fc18 	bl	800396c <HAL_GetTick>
 800713c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800713e:	e009      	b.n	8007154 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007140:	f7fc fc14 	bl	800396c <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d902      	bls.n	8007154 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	73fb      	strb	r3, [r7, #15]
          break;
 8007152:	e005      	b.n	8007160 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007154:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0ef      	beq.n	8007140 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007168:	691a      	ldr	r2, [r3, #16]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	4904      	ldr	r1, [pc, #16]	; (8007180 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007170:	4313      	orrs	r3, r2
 8007172:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40021000 	.word	0x40021000

08007184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e049      	b.n	800722a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fc fa42 	bl	8003634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f000 fbda 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b01      	cmp	r3, #1
 8007246:	d001      	beq.n	800724c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e03b      	b.n	80072c4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a19      	ldr	r2, [pc, #100]	; (80072d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <HAL_TIM_Base_Start_IT+0x4e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007276:	d004      	beq.n	8007282 <HAL_TIM_Base_Start_IT+0x4e>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <HAL_TIM_Base_Start_IT+0xa0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d115      	bne.n	80072ae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <HAL_TIM_Base_Start_IT+0xa4>)
 800728a:	4013      	ands	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b06      	cmp	r3, #6
 8007292:	d015      	beq.n	80072c0 <HAL_TIM_Base_Start_IT+0x8c>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729a:	d011      	beq.n	80072c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ac:	e008      	b.n	80072c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0201 	orr.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e000      	b.n	80072c2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	40012c00 	.word	0x40012c00
 80072d4:	40014000 	.word	0x40014000
 80072d8:	00010007 	.word	0x00010007

080072dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e049      	b.n	8007382 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fc f94e 	bl	80035a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3304      	adds	r3, #4
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f000 fb2e 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <HAL_TIM_IC_Start_IT+0x1a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	e023      	b.n	80073ee <HAL_TIM_IC_Start_IT+0x62>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d104      	bne.n	80073b6 <HAL_TIM_IC_Start_IT+0x2a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	e01b      	b.n	80073ee <HAL_TIM_IC_Start_IT+0x62>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d104      	bne.n	80073c6 <HAL_TIM_IC_Start_IT+0x3a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	e013      	b.n	80073ee <HAL_TIM_IC_Start_IT+0x62>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b0c      	cmp	r3, #12
 80073ca:	d104      	bne.n	80073d6 <HAL_TIM_IC_Start_IT+0x4a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	e00b      	b.n	80073ee <HAL_TIM_IC_Start_IT+0x62>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b10      	cmp	r3, #16
 80073da:	d104      	bne.n	80073e6 <HAL_TIM_IC_Start_IT+0x5a>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	e003      	b.n	80073ee <HAL_TIM_IC_Start_IT+0x62>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d104      	bne.n	8007400 <HAL_TIM_IC_Start_IT+0x74>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	e013      	b.n	8007428 <HAL_TIM_IC_Start_IT+0x9c>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b04      	cmp	r3, #4
 8007404:	d104      	bne.n	8007410 <HAL_TIM_IC_Start_IT+0x84>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800740c:	b2db      	uxtb	r3, r3
 800740e:	e00b      	b.n	8007428 <HAL_TIM_IC_Start_IT+0x9c>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b08      	cmp	r3, #8
 8007414:	d104      	bne.n	8007420 <HAL_TIM_IC_Start_IT+0x94>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800741c:	b2db      	uxtb	r3, r3
 800741e:	e003      	b.n	8007428 <HAL_TIM_IC_Start_IT+0x9c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007426:	b2db      	uxtb	r3, r3
 8007428:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d102      	bne.n	8007436 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d001      	beq.n	800743a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e0c4      	b.n	80075c4 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d104      	bne.n	800744a <HAL_TIM_IC_Start_IT+0xbe>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007448:	e023      	b.n	8007492 <HAL_TIM_IC_Start_IT+0x106>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b04      	cmp	r3, #4
 800744e:	d104      	bne.n	800745a <HAL_TIM_IC_Start_IT+0xce>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007458:	e01b      	b.n	8007492 <HAL_TIM_IC_Start_IT+0x106>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b08      	cmp	r3, #8
 800745e:	d104      	bne.n	800746a <HAL_TIM_IC_Start_IT+0xde>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007468:	e013      	b.n	8007492 <HAL_TIM_IC_Start_IT+0x106>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b0c      	cmp	r3, #12
 800746e:	d104      	bne.n	800747a <HAL_TIM_IC_Start_IT+0xee>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007478:	e00b      	b.n	8007492 <HAL_TIM_IC_Start_IT+0x106>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b10      	cmp	r3, #16
 800747e:	d104      	bne.n	800748a <HAL_TIM_IC_Start_IT+0xfe>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007488:	e003      	b.n	8007492 <HAL_TIM_IC_Start_IT+0x106>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_IC_Start_IT+0x116>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a0:	e013      	b.n	80074ca <HAL_TIM_IC_Start_IT+0x13e>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_IC_Start_IT+0x126>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b0:	e00b      	b.n	80074ca <HAL_TIM_IC_Start_IT+0x13e>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_IC_Start_IT+0x136>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074c0:	e003      	b.n	80074ca <HAL_TIM_IC_Start_IT+0x13e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b0c      	cmp	r3, #12
 80074ce:	d841      	bhi.n	8007554 <HAL_TIM_IC_Start_IT+0x1c8>
 80074d0:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <HAL_TIM_IC_Start_IT+0x14c>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	0800750d 	.word	0x0800750d
 80074dc:	08007555 	.word	0x08007555
 80074e0:	08007555 	.word	0x08007555
 80074e4:	08007555 	.word	0x08007555
 80074e8:	0800751f 	.word	0x0800751f
 80074ec:	08007555 	.word	0x08007555
 80074f0:	08007555 	.word	0x08007555
 80074f4:	08007555 	.word	0x08007555
 80074f8:	08007531 	.word	0x08007531
 80074fc:	08007555 	.word	0x08007555
 8007500:	08007555 	.word	0x08007555
 8007504:	08007555 	.word	0x08007555
 8007508:	08007543 	.word	0x08007543
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0202 	orr.w	r2, r2, #2
 800751a:	60da      	str	r2, [r3, #12]
      break;
 800751c:	e01b      	b.n	8007556 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0204 	orr.w	r2, r2, #4
 800752c:	60da      	str	r2, [r3, #12]
      break;
 800752e:	e012      	b.n	8007556 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68da      	ldr	r2, [r3, #12]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0208 	orr.w	r2, r2, #8
 800753e:	60da      	str	r2, [r3, #12]
      break;
 8007540:	e009      	b.n	8007556 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68da      	ldr	r2, [r3, #12]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0210 	orr.w	r2, r2, #16
 8007550:	60da      	str	r2, [r3, #12]
      break;
 8007552:	e000      	b.n	8007556 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8007554:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2201      	movs	r2, #1
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fb7c 	bl	8007c5c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a18      	ldr	r2, [pc, #96]	; (80075cc <HAL_TIM_IC_Start_IT+0x240>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_TIM_IC_Start_IT+0x1f6>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007576:	d004      	beq.n	8007582 <HAL_TIM_IC_Start_IT+0x1f6>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a14      	ldr	r2, [pc, #80]	; (80075d0 <HAL_TIM_IC_Start_IT+0x244>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d115      	bne.n	80075ae <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <HAL_TIM_IC_Start_IT+0x248>)
 800758a:	4013      	ands	r3, r2
 800758c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b06      	cmp	r3, #6
 8007592:	d015      	beq.n	80075c0 <HAL_TIM_IC_Start_IT+0x234>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759a:	d011      	beq.n	80075c0 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ac:	e008      	b.n	80075c0 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0201 	orr.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	e000      	b.n	80075c2 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40012c00 	.word	0x40012c00
 80075d0:	40014000 	.word	0x40014000
 80075d4:	00010007 	.word	0x00010007

080075d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d122      	bne.n	8007634 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d11b      	bne.n	8007634 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f06f 0202 	mvn.w	r2, #2
 8007604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fa fd46 	bl	80020ac <HAL_TIM_IC_CaptureCallback>
 8007620:	e005      	b.n	800762e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f98b 	bl	800793e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f992 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b04      	cmp	r3, #4
 8007640:	d122      	bne.n	8007688 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b04      	cmp	r3, #4
 800764e:	d11b      	bne.n	8007688 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0204 	mvn.w	r2, #4
 8007658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2202      	movs	r2, #2
 800765e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7fa fd1c 	bl	80020ac <HAL_TIM_IC_CaptureCallback>
 8007674:	e005      	b.n	8007682 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f961 	bl	800793e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f968 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b08      	cmp	r3, #8
 8007694:	d122      	bne.n	80076dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d11b      	bne.n	80076dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0208 	mvn.w	r2, #8
 80076ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2204      	movs	r2, #4
 80076b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fa fcf2 	bl	80020ac <HAL_TIM_IC_CaptureCallback>
 80076c8:	e005      	b.n	80076d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f937 	bl	800793e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f93e 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b10      	cmp	r3, #16
 80076e8:	d122      	bne.n	8007730 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	d11b      	bne.n	8007730 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0210 	mvn.w	r2, #16
 8007700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2208      	movs	r2, #8
 8007706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fa fcc8 	bl	80020ac <HAL_TIM_IC_CaptureCallback>
 800771c:	e005      	b.n	800772a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f90d 	bl	800793e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f914 	bl	8007952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b01      	cmp	r3, #1
 800773c:	d10e      	bne.n	800775c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b01      	cmp	r3, #1
 800774a:	d107      	bne.n	800775c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0201 	mvn.w	r2, #1
 8007754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fa fe88 	bl	800246c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d10e      	bne.n	8007788 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007774:	2b80      	cmp	r3, #128	; 0x80
 8007776:	d107      	bne.n	8007788 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fb00 	bl	8007d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007796:	d10e      	bne.n	80077b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a2:	2b80      	cmp	r3, #128	; 0x80
 80077a4:	d107      	bne.n	80077b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 faf3 	bl	8007d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d10e      	bne.n	80077e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d107      	bne.n	80077e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f8c2 	bl	8007966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d10e      	bne.n	800780e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d107      	bne.n	800780e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f06f 0220 	mvn.w	r2, #32
 8007806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fab3 	bl	8007d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_TIM_IC_ConfigChannel+0x1a>
 800782c:	2302      	movs	r3, #2
 800782e:	e082      	b.n	8007936 <HAL_TIM_IC_ConfigChannel+0x120>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11b      	bne.n	8007876 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6819      	ldr	r1, [r3, #0]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f000 f8f9 	bl	8007a44 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 020c 	bic.w	r2, r2, #12
 8007860:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6999      	ldr	r1, [r3, #24]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	619a      	str	r2, [r3, #24]
 8007874:	e05a      	b.n	800792c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d11c      	bne.n	80078b6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	6819      	ldr	r1, [r3, #0]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f000 f930 	bl	8007af0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800789e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6999      	ldr	r1, [r3, #24]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	021a      	lsls	r2, r3, #8
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	619a      	str	r2, [r3, #24]
 80078b4:	e03a      	b.n	800792c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d11b      	bne.n	80078f4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f000 f94d 	bl	8007b6a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 020c 	bic.w	r2, r2, #12
 80078de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69d9      	ldr	r1, [r3, #28]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	61da      	str	r2, [r3, #28]
 80078f2:	e01b      	b.n	800792c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	6819      	ldr	r1, [r3, #0]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f000 f96d 	bl	8007be2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69da      	ldr	r2, [r3, #28]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007916:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69d9      	ldr	r1, [r3, #28]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	021a      	lsls	r2, r3, #8
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a2a      	ldr	r2, [pc, #168]	; (8007a38 <TIM_Base_SetConfig+0xbc>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d003      	beq.n	800799c <TIM_Base_SetConfig+0x20>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799a:	d108      	bne.n	80079ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a21      	ldr	r2, [pc, #132]	; (8007a38 <TIM_Base_SetConfig+0xbc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00b      	beq.n	80079ce <TIM_Base_SetConfig+0x52>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079bc:	d007      	beq.n	80079ce <TIM_Base_SetConfig+0x52>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <TIM_Base_SetConfig+0xc0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d003      	beq.n	80079ce <TIM_Base_SetConfig+0x52>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a1d      	ldr	r2, [pc, #116]	; (8007a40 <TIM_Base_SetConfig+0xc4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d108      	bne.n	80079e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <TIM_Base_SetConfig+0xbc>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d007      	beq.n	8007a1c <TIM_Base_SetConfig+0xa0>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a0b      	ldr	r2, [pc, #44]	; (8007a3c <TIM_Base_SetConfig+0xc0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d003      	beq.n	8007a1c <TIM_Base_SetConfig+0xa0>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <TIM_Base_SetConfig+0xc4>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d103      	bne.n	8007a24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	615a      	str	r2, [r3, #20]
}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40012c00 	.word	0x40012c00
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	40014400 	.word	0x40014400

08007a44 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f023 0201 	bic.w	r2, r3, #1
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <TIM_TI1_SetConfig+0xa4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d007      	beq.n	8007a82 <TIM_TI1_SetConfig+0x3e>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a78:	d003      	beq.n	8007a82 <TIM_TI1_SetConfig+0x3e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4a1b      	ldr	r2, [pc, #108]	; (8007aec <TIM_TI1_SetConfig+0xa8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d101      	bne.n	8007a86 <TIM_TI1_SetConfig+0x42>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e000      	b.n	8007a88 <TIM_TI1_SetConfig+0x44>
 8007a86:	2300      	movs	r3, #0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f023 0303 	bic.w	r3, r3, #3
 8007a92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e003      	b.n	8007aa6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f043 0301 	orr.w	r3, r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f023 030a 	bic.w	r3, r3, #10
 8007ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f003 030a 	and.w	r3, r3, #10
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	40014000 	.word	0x40014000

08007af0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f023 0210 	bic.w	r2, r3, #16
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	021b      	lsls	r3, r3, #8
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	031b      	lsls	r3, r3, #12
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	621a      	str	r2, [r3, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b087      	sub	sp, #28
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ba6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007bba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	621a      	str	r2, [r3, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b087      	sub	sp, #28
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	021b      	lsls	r3, r3, #8
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	031b      	lsls	r3, r3, #12
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	031b      	lsls	r3, r3, #12
 8007c3a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	621a      	str	r2, [r3, #32]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	2201      	movs	r2, #1
 8007c70:	fa02 f303 	lsl.w	r3, r2, r3
 8007c74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a1a      	ldr	r2, [r3, #32]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	401a      	ands	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6a1a      	ldr	r2, [r3, #32]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	fa01 f303 	lsl.w	r3, r1, r3
 8007c94:	431a      	orrs	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	621a      	str	r2, [r3, #32]
}
 8007c9a:	bf00      	nop
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d101      	bne.n	8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	e04f      	b.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a21      	ldr	r2, [pc, #132]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d108      	bne.n	8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cf0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a14      	ldr	r2, [pc, #80]	; (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d009      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d28:	d004      	beq.n	8007d34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a10      	ldr	r2, [pc, #64]	; (8007d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d10c      	bne.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	40012c00 	.word	0x40012c00
 8007d70:	40014000 	.word	0x40014000

08007d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007db0:	b084      	sub	sp, #16
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	f107 0014 	add.w	r0, r7, #20
 8007dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	b004      	add	sp, #16
 8007dd0:	4770      	bx	lr

08007dd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007dda:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007dde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	43db      	mvns	r3, r3
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4013      	ands	r3, r2
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e22:	b084      	sub	sp, #16
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	f107 0014 	add.w	r0, r7, #20
 8007e30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	b004      	add	sp, #16
 8007e62:	4770      	bx	lr

08007e64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <__libc_init_array>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	4e0d      	ldr	r6, [pc, #52]	; (8007ec8 <__libc_init_array+0x38>)
 8007e94:	4c0d      	ldr	r4, [pc, #52]	; (8007ecc <__libc_init_array+0x3c>)
 8007e96:	1ba4      	subs	r4, r4, r6
 8007e98:	10a4      	asrs	r4, r4, #2
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	42a5      	cmp	r5, r4
 8007e9e:	d109      	bne.n	8007eb4 <__libc_init_array+0x24>
 8007ea0:	4e0b      	ldr	r6, [pc, #44]	; (8007ed0 <__libc_init_array+0x40>)
 8007ea2:	4c0c      	ldr	r4, [pc, #48]	; (8007ed4 <__libc_init_array+0x44>)
 8007ea4:	f000 f820 	bl	8007ee8 <_init>
 8007ea8:	1ba4      	subs	r4, r4, r6
 8007eaa:	10a4      	asrs	r4, r4, #2
 8007eac:	2500      	movs	r5, #0
 8007eae:	42a5      	cmp	r5, r4
 8007eb0:	d105      	bne.n	8007ebe <__libc_init_array+0x2e>
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007eb8:	4798      	blx	r3
 8007eba:	3501      	adds	r5, #1
 8007ebc:	e7ee      	b.n	8007e9c <__libc_init_array+0xc>
 8007ebe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ec2:	4798      	blx	r3
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	e7f2      	b.n	8007eae <__libc_init_array+0x1e>
 8007ec8:	080094e0 	.word	0x080094e0
 8007ecc:	080094e0 	.word	0x080094e0
 8007ed0:	080094e0 	.word	0x080094e0
 8007ed4:	080094e4 	.word	0x080094e4

08007ed8 <memset>:
 8007ed8:	4402      	add	r2, r0
 8007eda:	4603      	mov	r3, r0
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d100      	bne.n	8007ee2 <memset+0xa>
 8007ee0:	4770      	bx	lr
 8007ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee6:	e7f9      	b.n	8007edc <memset+0x4>

08007ee8 <_init>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_fini>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr
