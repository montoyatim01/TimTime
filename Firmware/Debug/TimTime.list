
TimTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009444  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000167c  080095d4  080095d4  000195d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac50  0800ac50  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac50  0800ac50  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac50  0800ac50  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ac58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a10  20000068  0800acc0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  0800acc0  00020a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002167a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be9  00000000  00000000  00041712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00045300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027300  00000000  00000000  00046ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c994  00000000  00000000  0006ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e5993  00000000  00000000  0008a74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001700df  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000015e0  00000000  00000000  00170138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006458  00000000  00000000  00171718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095bc 	.word	0x080095bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080095bc 	.word	0x080095bc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <_Z11batteryReadv>:
#include "Battery.h"
#include "Global.h"
#include "stm32l4xx_hal.h"

float batteryRead()
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
    uint16_t averageReading = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	82fb      	strh	r3, [r7, #22]
    //uint8_t bufferPosition = 0;
    uint16_t readBuffer[8];

    HAL_ADC_Start(battADC);
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 fdf0 	bl	8005650 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(battADC, HAL_MAX_DELAY);
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 fe4c 	bl	8005716 <HAL_ADC_PollForConversion>
    for (int i=0; i<8; i++){
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	dc1b      	bgt.n	8000ac0 <_Z11batteryReadv+0x64>
        readBuffer[i] = HAL_ADC_GetValue(battADC);
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <_Z11batteryReadv+0x94>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 feca 	bl	8005826 <HAL_ADC_GetValue>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	f107 0118 	add.w	r1, r7, #24
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f823 2c18 	strh.w	r2, [r3, #-24]
        averageReading += readBuffer[i];
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	f107 0218 	add.w	r2, r7, #24
 8000aac:	4413      	add	r3, r2
 8000aae:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000ab2:	8afb      	ldrh	r3, [r7, #22]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	82fb      	strh	r3, [r7, #22]
    for (int i=0; i<8; i++){
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	3301      	adds	r3, #1
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	e7e0      	b.n	8000a82 <_Z11batteryReadv+0x26>
    }
    batteryRemaining = (battPercent((averageReading / 8)));
 8000ac0:	8afb      	ldrh	r3, [r7, #22]
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f816 	bl	8000af8 <_Z11battPercentt>
 8000acc:	eef0 7a40 	vmov.f32	s15, s0
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_Z11batteryReadv+0x98>)
 8000ad2:	edc3 7a00 	vstr	s15, [r3]
    return (battPercent((averageReading / 8)));
 8000ad6:	8afb      	ldrh	r3, [r7, #22]
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f80b 	bl	8000af8 <_Z11battPercentt>
 8000ae2:	eef0 7a40 	vmov.f32	s15, s0
    
    
}
 8000ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000044 	.word	0x20000044
 8000af4:	200000a4 	.word	0x200000a4

08000af8 <_Z11battPercentt>:


float battPercent(uint16_t analogReading){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	80fb      	strh	r3, [r7, #6]
    if (analogReading >= 2700) {
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	f640 228b 	movw	r2, #2699	; 0xa8b
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d902      	bls.n	8000b12 <_Z11battPercentt+0x1a>
        return 1.0;
 8000b0c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b10:	e331      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2675 && analogReading < 2700) {
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	f640 2272 	movw	r2, #2674	; 0xa72
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d907      	bls.n	8000b2c <_Z11battPercentt+0x34>
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	f640 228b 	movw	r2, #2699	; 0xa8b
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d802      	bhi.n	8000b2c <_Z11battPercentt+0x34>
        return 1.0;
 8000b26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000b2a:	e324      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2650 && analogReading < 2675) {
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	f640 2259 	movw	r2, #2649	; 0xa59
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d92c      	bls.n	8000b90 <_Z11battPercentt+0x98>
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	f640 2272 	movw	r2, #2674	; 0xa72
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d827      	bhi.n	8000b90 <_Z11battPercentt+0x98>
        return ( (0.08*((float)analogReading)) - 115.0 )/100.0;
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b4a:	ee17 0a90 	vmov	r0, s15
 8000b4e:	f7ff fca3 	bl	8000498 <__aeabi_f2d>
 8000b52:	a3d8      	add	r3, pc, #864	; (adr r3, 8000eb4 <_Z11battPercentt+0x3bc>)
 8000b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b58:	f7ff fcf6 	bl	8000548 <__aeabi_dmul>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	a3d5      	add	r3, pc, #852	; (adr r3, 8000ebc <_Z11battPercentt+0x3c4>)
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	f7ff fb35 	bl	80001d8 <__aeabi_dsub>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	4bcb      	ldr	r3, [pc, #812]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000b7c:	f7ff fe0e 	bl	800079c <__aeabi_ddiv>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4610      	mov	r0, r2
 8000b86:	4619      	mov	r1, r3
 8000b88:	f7ff ff18 	bl	80009bc <__aeabi_d2f>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	e2f2      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2625 && analogReading < 2650) {
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	f5b3 6f24 	cmp.w	r3, #2624	; 0xa40
 8000b96:	d92c      	bls.n	8000bf2 <_Z11battPercentt+0xfa>
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	f640 2259 	movw	r2, #2649	; 0xa59
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d827      	bhi.n	8000bf2 <_Z11battPercentt+0xfa>
        return ( (0.12*((float)analogReading)) - 221.0 )/100.0;
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bac:	ee17 0a90 	vmov	r0, s15
 8000bb0:	f7ff fc72 	bl	8000498 <__aeabi_f2d>
 8000bb4:	a3a4      	add	r3, pc, #656	; (adr r3, 8000e48 <_Z11battPercentt+0x350>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fcc5 	bl	8000548 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	a3a2      	add	r3, pc, #648	; (adr r3, 8000e50 <_Z11battPercentt+0x358>)
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fb04 	bl	80001d8 <__aeabi_dsub>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4610      	mov	r0, r2
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 0200 	mov.w	r2, #0
 8000bdc:	4bb2      	ldr	r3, [pc, #712]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000bde:	f7ff fddd 	bl	800079c <__aeabi_ddiv>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4610      	mov	r0, r2
 8000be8:	4619      	mov	r1, r3
 8000bea:	f7ff fee7 	bl	80009bc <__aeabi_d2f>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	e2c1      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2600 && analogReading < 2625) {
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	f640 2227 	movw	r2, #2599	; 0xa27
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d92b      	bls.n	8000c54 <_Z11battPercentt+0x15c>
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	f5b3 6f24 	cmp.w	r3, #2624	; 0xa40
 8000c02:	d827      	bhi.n	8000c54 <_Z11battPercentt+0x15c>
        return ( (0.16*((float)analogReading)) - 326.0 )/100.0;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c0e:	ee17 0a90 	vmov	r0, s15
 8000c12:	f7ff fc41 	bl	8000498 <__aeabi_f2d>
 8000c16:	a390      	add	r3, pc, #576	; (adr r3, 8000e58 <_Z11battPercentt+0x360>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fc94 	bl	8000548 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	a38d      	add	r3, pc, #564	; (adr r3, 8000e60 <_Z11battPercentt+0x368>)
 8000c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2e:	f7ff fad3 	bl	80001d8 <__aeabi_dsub>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	4b9a      	ldr	r3, [pc, #616]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000c40:	f7ff fdac 	bl	800079c <__aeabi_ddiv>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff feb6 	bl	80009bc <__aeabi_d2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	e290      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2575 && analogReading < 2600) {
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	f640 220e 	movw	r2, #2574	; 0xa0e
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d92c      	bls.n	8000cb8 <_Z11battPercentt+0x1c0>
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	f640 2227 	movw	r2, #2599	; 0xa27
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d827      	bhi.n	8000cb8 <_Z11battPercentt+0x1c0>
        return ( (0.24*((float)analogReading)) - 534.0 )/100.0;
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c72:	ee17 0a90 	vmov	r0, s15
 8000c76:	f7ff fc0f 	bl	8000498 <__aeabi_f2d>
 8000c7a:	a37b      	add	r3, pc, #492	; (adr r3, 8000e68 <_Z11battPercentt+0x370>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	f7ff fc62 	bl	8000548 <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4610      	mov	r0, r2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b86      	ldr	r3, [pc, #536]	; (8000eac <_Z11battPercentt+0x3b4>)
 8000c92:	f7ff faa1 	bl	80001d8 <__aeabi_dsub>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	4b81      	ldr	r3, [pc, #516]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000ca4:	f7ff fd7a 	bl	800079c <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fe84 	bl	80009bc <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	e25e      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2540 && analogReading < 2575) {
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	f640 12eb 	movw	r2, #2539	; 0x9eb
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d92c      	bls.n	8000d1c <_Z11battPercentt+0x224>
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	f640 220e 	movw	r2, #2574	; 0xa0e
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d827      	bhi.n	8000d1c <_Z11battPercentt+0x224>
        return ( (0.11428*((float)analogReading)) - 210.28 )/100.0;
 8000ccc:	88fb      	ldrh	r3, [r7, #6]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ee17 0a90 	vmov	r0, s15
 8000cda:	f7ff fbdd 	bl	8000498 <__aeabi_f2d>
 8000cde:	a364      	add	r3, pc, #400	; (adr r3, 8000e70 <_Z11battPercentt+0x378>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fc30 	bl	8000548 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	a361      	add	r3, pc, #388	; (adr r3, 8000e78 <_Z11battPercentt+0x380>)
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f7ff fa6f 	bl	80001d8 <__aeabi_dsub>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	4b68      	ldr	r3, [pc, #416]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000d08:	f7ff fd48 	bl	800079c <__aeabi_ddiv>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fe52 	bl	80009bc <__aeabi_d2f>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	e22c      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2525 && analogReading < 2540) {
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	f640 12dc 	movw	r2, #2524	; 0x9dc
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d92c      	bls.n	8000d80 <_Z11battPercentt+0x288>
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f640 12eb 	movw	r2, #2539	; 0x9eb
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d827      	bhi.n	8000d80 <_Z11battPercentt+0x288>
        return ( (0.4*((float)analogReading)) - 936.0 )/100.0;
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3a:	ee17 0a90 	vmov	r0, s15
 8000d3e:	f7ff fbab 	bl	8000498 <__aeabi_f2d>
 8000d42:	a34f      	add	r3, pc, #316	; (adr r3, 8000e80 <_Z11battPercentt+0x388>)
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	f7ff fbfe 	bl	8000548 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <_Z11battPercentt+0x3b8>)
 8000d5a:	f7ff fa3d 	bl	80001d8 <__aeabi_dsub>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000d6c:	f7ff fd16 	bl	800079c <__aeabi_ddiv>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff fe20 	bl	80009bc <__aeabi_d2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	e1fa      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2500 && analogReading < 2525) {
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d92c      	bls.n	8000de4 <_Z11battPercentt+0x2ec>
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	f640 12dc 	movw	r2, #2524	; 0x9dc
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d827      	bhi.n	8000de4 <_Z11battPercentt+0x2ec>
        return ( (0.36*((float)analogReading)) - 835.0 )/100.0;
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	ee07 3a90 	vmov	s15, r3
 8000d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9e:	ee17 0a90 	vmov	r0, s15
 8000da2:	f7ff fb79 	bl	8000498 <__aeabi_f2d>
 8000da6:	a338      	add	r3, pc, #224	; (adr r3, 8000e88 <_Z11battPercentt+0x390>)
 8000da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dac:	f7ff fbcc 	bl	8000548 <__aeabi_dmul>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	a335      	add	r3, pc, #212	; (adr r3, 8000e90 <_Z11battPercentt+0x398>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fa0b 	bl	80001d8 <__aeabi_dsub>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000dd0:	f7ff fce4 	bl	800079c <__aeabi_ddiv>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f7ff fdee 	bl	80009bc <__aeabi_d2f>
 8000de0:	4603      	mov	r3, r0
 8000de2:	e1c8      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2470 && analogReading < 2500) {
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	f640 12a5 	movw	r2, #2469	; 0x9a5
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d96a      	bls.n	8000ec4 <_Z11battPercentt+0x3cc>
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d865      	bhi.n	8000ec4 <_Z11battPercentt+0x3cc>
        return ( (0.366*((float)analogReading)) - 851.66 )/100.0;
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e02:	ee17 0a90 	vmov	r0, s15
 8000e06:	f7ff fb47 	bl	8000498 <__aeabi_f2d>
 8000e0a:	a323      	add	r3, pc, #140	; (adr r3, 8000e98 <_Z11battPercentt+0x3a0>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fb9a 	bl	8000548 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	a320      	add	r3, pc, #128	; (adr r3, 8000ea0 <_Z11battPercentt+0x3a8>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff f9d9 	bl	80001d8 <__aeabi_dsub>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <_Z11battPercentt+0x3b0>)
 8000e34:	f7ff fcb2 	bl	800079c <__aeabi_ddiv>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fdbc 	bl	80009bc <__aeabi_d2f>
 8000e44:	4603      	mov	r3, r0
 8000e46:	e196      	b.n	8001176 <_Z11battPercentt+0x67e>
 8000e48:	eb851eb8 	.word	0xeb851eb8
 8000e4c:	3fbeb851 	.word	0x3fbeb851
 8000e50:	00000000 	.word	0x00000000
 8000e54:	406ba000 	.word	0x406ba000
 8000e58:	47ae147b 	.word	0x47ae147b
 8000e5c:	3fc47ae1 	.word	0x3fc47ae1
 8000e60:	00000000 	.word	0x00000000
 8000e64:	40746000 	.word	0x40746000
 8000e68:	eb851eb8 	.word	0xeb851eb8
 8000e6c:	3fceb851 	.word	0x3fceb851
 8000e70:	3e963dc5 	.word	0x3e963dc5
 8000e74:	3fbd4174 	.word	0x3fbd4174
 8000e78:	c28f5c29 	.word	0xc28f5c29
 8000e7c:	406a48f5 	.word	0x406a48f5
 8000e80:	9999999a 	.word	0x9999999a
 8000e84:	3fd99999 	.word	0x3fd99999
 8000e88:	70a3d70a 	.word	0x70a3d70a
 8000e8c:	3fd70a3d 	.word	0x3fd70a3d
 8000e90:	00000000 	.word	0x00000000
 8000e94:	408a1800 	.word	0x408a1800
 8000e98:	43958106 	.word	0x43958106
 8000e9c:	3fd76c8b 	.word	0x3fd76c8b
 8000ea0:	ae147ae1 	.word	0xae147ae1
 8000ea4:	408a9d47 	.word	0x408a9d47
 8000ea8:	40590000 	.word	0x40590000
 8000eac:	4080b000 	.word	0x4080b000
 8000eb0:	408d4000 	.word	0x408d4000
 8000eb4:	47ae147b 	.word	0x47ae147b
 8000eb8:	3fb47ae1 	.word	0x3fb47ae1
 8000ebc:	00000000 	.word	0x00000000
 8000ec0:	405cc000 	.word	0x405cc000
    }
    if (analogReading >= 2450 && analogReading < 2470) {
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	f640 1291 	movw	r2, #2449	; 0x991
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d92c      	bls.n	8000f28 <_Z11battPercentt+0x430>
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	f640 12a5 	movw	r2, #2469	; 0x9a5
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d827      	bhi.n	8000f28 <_Z11battPercentt+0x430>
        return ( (1.1*((float)analogReading)) - 2663.0 )/100.0;
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee2:	ee17 0a90 	vmov	r0, s15
 8000ee6:	f7ff fad7 	bl	8000498 <__aeabi_f2d>
 8000eea:	a3b8      	add	r3, pc, #736	; (adr r3, 80011cc <_Z11battPercentt+0x6d4>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff fb2a 	bl	8000548 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	a3b5      	add	r3, pc, #724	; (adr r3, 80011d4 <_Z11battPercentt+0x6dc>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	f7ff f969 	bl	80001d8 <__aeabi_dsub>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 0200 	mov.w	r2, #0
 8000f12:	4bab      	ldr	r3, [pc, #684]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000f14:	f7ff fc42 	bl	800079c <__aeabi_ddiv>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f7ff fd4c 	bl	80009bc <__aeabi_d2f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	e126      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2435 && analogReading < 2450) {
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	f640 1282 	movw	r2, #2434	; 0x982
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d92c      	bls.n	8000f8c <_Z11battPercentt+0x494>
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f640 1291 	movw	r2, #2449	; 0x991
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d827      	bhi.n	8000f8c <_Z11battPercentt+0x494>
        return ( (0.9333*((float)analogReading)) - 2254.66 )/100.0;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f46:	ee17 0a90 	vmov	r0, s15
 8000f4a:	f7ff faa5 	bl	8000498 <__aeabi_f2d>
 8000f4e:	a38e      	add	r3, pc, #568	; (adr r3, 8001188 <_Z11battPercentt+0x690>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff faf8 	bl	8000548 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	a38b      	add	r3, pc, #556	; (adr r3, 8001190 <_Z11battPercentt+0x698>)
 8000f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f66:	f7ff f937 	bl	80001d8 <__aeabi_dsub>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b92      	ldr	r3, [pc, #584]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000f78:	f7ff fc10 	bl	800079c <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fd1a 	bl	80009bc <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	e0f4      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2400 && analogReading < 2435) {
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000f92:	d32c      	bcc.n	8000fee <_Z11battPercentt+0x4f6>
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f640 1282 	movw	r2, #2434	; 0x982
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d827      	bhi.n	8000fee <_Z11battPercentt+0x4f6>
        return ( (0.1714285*((float)analogReading)) - 399.0 )/100.0;
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa8:	ee17 0a90 	vmov	r0, s15
 8000fac:	f7ff fa74 	bl	8000498 <__aeabi_f2d>
 8000fb0:	a379      	add	r3, pc, #484	; (adr r3, 8001198 <_Z11battPercentt+0x6a0>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fac7 	bl	8000548 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	a377      	add	r3, pc, #476	; (adr r3, 80011a0 <_Z11battPercentt+0x6a8>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff f906 	bl	80001d8 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	4b79      	ldr	r3, [pc, #484]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8000fda:	f7ff fbdf 	bl	800079c <__aeabi_ddiv>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fce9 	bl	80009bc <__aeabi_d2f>
 8000fea:	4603      	mov	r3, r0
 8000fec:	e0c3      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2380 && analogReading < 2400) {
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f640 124b 	movw	r2, #2379	; 0x94b
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d92b      	bls.n	8001050 <_Z11battPercentt+0x558>
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000ffe:	d227      	bcs.n	8001050 <_Z11battPercentt+0x558>
        return ( (0.2*((float)analogReading)) - 468.0 )/100.0;
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100a:	ee17 0a90 	vmov	r0, s15
 800100e:	f7ff fa43 	bl	8000498 <__aeabi_f2d>
 8001012:	a365      	add	r3, pc, #404	; (adr r3, 80011a8 <_Z11battPercentt+0x6b0>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa96 	bl	8000548 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <_Z11battPercentt+0x6cc>)
 800102a:	f7ff f8d5 	bl	80001d8 <__aeabi_dsub>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <_Z11battPercentt+0x6c8>)
 800103c:	f7ff fbae 	bl	800079c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fcb8 	bl	80009bc <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	e092      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2344 && analogReading < 2380) {
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	f640 1227 	movw	r2, #2343	; 0x927
 8001056:	4293      	cmp	r3, r2
 8001058:	d92c      	bls.n	80010b4 <_Z11battPercentt+0x5bc>
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	f640 124b 	movw	r2, #2379	; 0x94b
 8001060:	4293      	cmp	r3, r2
 8001062:	d827      	bhi.n	80010b4 <_Z11battPercentt+0x5bc>
        return ( (0.111111*((float)analogReading)) - 256.0 )/100.0;
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106e:	ee17 0a90 	vmov	r0, s15
 8001072:	f7ff fa11 	bl	8000498 <__aeabi_f2d>
 8001076:	a34e      	add	r3, pc, #312	; (adr r3, 80011b0 <_Z11battPercentt+0x6b8>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fa64 	bl	8000548 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <_Z11battPercentt+0x6d0>)
 800108e:	f7ff f8a3 	bl	80001d8 <__aeabi_dsub>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <_Z11battPercentt+0x6c8>)
 80010a0:	f7ff fb7c 	bl	800079c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fc86 	bl	80009bc <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	e060      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2320 && analogReading < 2344) {
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80010ba:	d32d      	bcc.n	8001118 <_Z11battPercentt+0x620>
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	f640 1227 	movw	r2, #2343	; 0x927
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d828      	bhi.n	8001118 <_Z11battPercentt+0x620>
        return ( (0.125*((float)analogReading)) - 289.0 )/100.0;
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff f9e0 	bl	8000498 <__aeabi_f2d>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80010e0:	f7ff fa32 	bl	8000548 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	a332      	add	r3, pc, #200	; (adr r3, 80011b8 <_Z11battPercentt+0x6c0>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f871 	bl	80001d8 <__aeabi_dsub>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <_Z11battPercentt+0x6c8>)
 8001104:	f7ff fb4a 	bl	800079c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fc54 	bl	80009bc <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	e02e      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2300 && analogReading < 2320) {
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	f640 02fb 	movw	r2, #2299	; 0x8fb
 800111e:	4293      	cmp	r3, r2
 8001120:	d906      	bls.n	8001130 <_Z11battPercentt+0x638>
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8001128:	d202      	bcs.n	8001130 <_Z11battPercentt+0x638>
        return 0.0;
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	e022      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 2260 && analogReading < 2300) {
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	f640 02d3 	movw	r2, #2259	; 0x8d3
 8001136:	4293      	cmp	r3, r2
 8001138:	d907      	bls.n	800114a <_Z11battPercentt+0x652>
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001140:	4293      	cmp	r3, r2
 8001142:	d802      	bhi.n	800114a <_Z11battPercentt+0x652>
        return 0.0;
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e015      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading >= 1900 && analogReading < 2260) {
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	f240 726b 	movw	r2, #1899	; 0x76b
 8001150:	4293      	cmp	r3, r2
 8001152:	d907      	bls.n	8001164 <_Z11battPercentt+0x66c>
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	f640 02d3 	movw	r2, #2259	; 0x8d3
 800115a:	4293      	cmp	r3, r2
 800115c:	d802      	bhi.n	8001164 <_Z11battPercentt+0x66c>
        return 0.0;
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	e008      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    if (analogReading < 1900){
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f240 726b 	movw	r2, #1899	; 0x76b
 800116a:	4293      	cmp	r3, r2
 800116c:	d802      	bhi.n	8001174 <_Z11battPercentt+0x67c>
        return 0.0;
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e000      	b.n	8001176 <_Z11battPercentt+0x67e>
    }
    


 8001174:	e001      	b.n	800117a <_Z11battPercentt+0x682>
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f3af 8000 	nop.w
 8001188:	f62b6ae8 	.word	0xf62b6ae8
 800118c:	3feddd97 	.word	0x3feddd97
 8001190:	eb851eb8 	.word	0xeb851eb8
 8001194:	40a19d51 	.word	0x40a19d51
 8001198:	7c8d1959 	.word	0x7c8d1959
 800119c:	3fc5f15e 	.word	0x3fc5f15e
 80011a0:	00000000 	.word	0x00000000
 80011a4:	4078f000 	.word	0x4078f000
 80011a8:	9999999a 	.word	0x9999999a
 80011ac:	3fc99999 	.word	0x3fc99999
 80011b0:	3f39d1b3 	.word	0x3f39d1b3
 80011b4:	3fbc71c5 	.word	0x3fbc71c5
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40721000 	.word	0x40721000
 80011c0:	40590000 	.word	0x40590000
 80011c4:	407d4000 	.word	0x407d4000
 80011c8:	40700000 	.word	0x40700000
 80011cc:	9999999a 	.word	0x9999999a
 80011d0:	3ff19999 	.word	0x3ff19999
 80011d4:	00000000 	.word	0x00000000
 80011d8:	40a4ce00 	.word	0x40a4ce00

080011dc <_Z13updateDisplayh>:

//#include "fonts.h"
const char* foo = "0123456789";
char tcDisplay[11] = {0};
void updateDisplay(uint8_t state)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	d82b      	bhi.n	8001244 <_Z13updateDisplayh+0x68>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <_Z13updateDisplayh+0x18>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001215 	.word	0x08001215
 80011f8:	0800121b 	.word	0x0800121b
 80011fc:	08001221 	.word	0x08001221
 8001200:	08001227 	.word	0x08001227
 8001204:	0800122d 	.word	0x0800122d
 8001208:	08001233 	.word	0x08001233
 800120c:	08001239 	.word	0x08001239
 8001210:	0800123f 	.word	0x0800123f
	{
	case d_off:
		displayOff();
 8001214:	f000 f81c 	bl	8001250 <_Z10displayOffv>
		break;
 8001218:	e015      	b.n	8001246 <_Z13updateDisplayh+0x6a>
	case d_home:
		displayMain();
 800121a:	f000 f827 	bl	800126c <_Z11displayMainv>
		break;
 800121e:	e012      	b.n	8001246 <_Z13updateDisplayh+0x6a>
	case d_menu:
		displayMenu();
 8001220:	f000 f9da 	bl	80015d8 <_Z11displayMenuv>
		break;
 8001224:	e00f      	b.n	8001246 <_Z13updateDisplayh+0x6a>
	case d_lock:
		displayLocked();
 8001226:	f000 f933 	bl	8001490 <_Z13displayLockedv>
		break;
 800122a:	e00c      	b.n	8001246 <_Z13updateDisplayh+0x6a>
	case d_power:
		displayPower();
 800122c:	f000 f9a0 	bl	8001570 <_Z12displayPowerv>
		break;
 8001230:	e009      	b.n	8001246 <_Z13updateDisplayh+0x6a>
	case d_rateWarn:
		displayConfirmationRateChange();
 8001232:	f000 fbeb 	bl	8001a0c <_Z29displayConfirmationRateChangev>
		break;
 8001236:	e006      	b.n	8001246 <_Z13updateDisplayh+0x6a>
	case d_offsetWarn:
		displayConfirmationOffsetChange();
 8001238:	f000 fc68 	bl	8001b0c <_Z31displayConfirmationOffsetChangev>
		break;
 800123c:	e003      	b.n	8001246 <_Z13updateDisplayh+0x6a>
	case d_rejamWarn:
		displayConfirmationRejam();
 800123e:	f000 fcbd 	bl	8001bbc <_Z24displayConfirmationRejamv>
		break;
 8001242:	e000      	b.n	8001246 <_Z13updateDisplayh+0x6a>
	default:
		break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop

08001250 <_Z10displayOffv>:

void displayOff()
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001254:	2000      	movs	r0, #0
 8001256:	f003 f901 	bl	800445c <ssd1306_Fill>
	ssd1306_UpdateScreen(dispI2C);
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <_Z10displayOffv+0x18>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f003 f920 	bl	80044a4 <ssd1306_UpdateScreen>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000048 	.word	0x20000048

0800126c <_Z11displayMainv>:

void displayMain()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	//tcbreakout()
	char offsetStr[3];
	timecodeDisplay();
 8001272:	f000 fda7 	bl	8001dc4 <_Z15timecodeDisplayv>
	ssd1306_SetCursor(4, 24);
 8001276:	2118      	movs	r1, #24
 8001278:	2004      	movs	r0, #4
 800127a:	f003 fa4b 	bl	8004714 <ssd1306_SetCursor>
	//TODO TC DISPLAY STRING
	ssd1306_WriteString(tcDisplay, Font_11x18, White);
 800127e:	4a71      	ldr	r2, [pc, #452]	; (8001444 <_Z11displayMainv+0x1d8>)
 8001280:	2301      	movs	r3, #1
 8001282:	ca06      	ldmia	r2, {r1, r2}
 8001284:	4870      	ldr	r0, [pc, #448]	; (8001448 <_Z11displayMainv+0x1dc>)
 8001286:	f003 fa1f 	bl	80046c8 <ssd1306_WriteString>

	ssd1306_SetCursor(8, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	2008      	movs	r0, #8
 800128e:	f003 fa41 	bl	8004714 <ssd1306_SetCursor>
	switch (frameRate)
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <_Z11displayMainv+0x1e0>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b05      	cmp	r3, #5
 8001298:	d838      	bhi.n	800130c <_Z11displayMainv+0xa0>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <_Z11displayMainv+0x34>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012b9 	.word	0x080012b9
 80012a4:	080012c7 	.word	0x080012c7
 80012a8:	080012d5 	.word	0x080012d5
 80012ac:	080012e3 	.word	0x080012e3
 80012b0:	080012f1 	.word	0x080012f1
 80012b4:	080012ff 	.word	0x080012ff
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 80012b8:	4a65      	ldr	r2, [pc, #404]	; (8001450 <_Z11displayMainv+0x1e4>)
 80012ba:	2301      	movs	r3, #1
 80012bc:	ca06      	ldmia	r2, {r1, r2}
 80012be:	4865      	ldr	r0, [pc, #404]	; (8001454 <_Z11displayMainv+0x1e8>)
 80012c0:	f003 fa02 	bl	80046c8 <ssd1306_WriteString>
		break;
 80012c4:	e022      	b.n	800130c <_Z11displayMainv+0xa0>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 80012c6:	4a62      	ldr	r2, [pc, #392]	; (8001450 <_Z11displayMainv+0x1e4>)
 80012c8:	2301      	movs	r3, #1
 80012ca:	ca06      	ldmia	r2, {r1, r2}
 80012cc:	4862      	ldr	r0, [pc, #392]	; (8001458 <_Z11displayMainv+0x1ec>)
 80012ce:	f003 f9fb 	bl	80046c8 <ssd1306_WriteString>
		break;
 80012d2:	e01b      	b.n	800130c <_Z11displayMainv+0xa0>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 80012d4:	4a5e      	ldr	r2, [pc, #376]	; (8001450 <_Z11displayMainv+0x1e4>)
 80012d6:	2301      	movs	r3, #1
 80012d8:	ca06      	ldmia	r2, {r1, r2}
 80012da:	4860      	ldr	r0, [pc, #384]	; (800145c <_Z11displayMainv+0x1f0>)
 80012dc:	f003 f9f4 	bl	80046c8 <ssd1306_WriteString>
		break;
 80012e0:	e014      	b.n	800130c <_Z11displayMainv+0xa0>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 80012e2:	4a5b      	ldr	r2, [pc, #364]	; (8001450 <_Z11displayMainv+0x1e4>)
 80012e4:	2301      	movs	r3, #1
 80012e6:	ca06      	ldmia	r2, {r1, r2}
 80012e8:	485d      	ldr	r0, [pc, #372]	; (8001460 <_Z11displayMainv+0x1f4>)
 80012ea:	f003 f9ed 	bl	80046c8 <ssd1306_WriteString>
		break;
 80012ee:	e00d      	b.n	800130c <_Z11displayMainv+0xa0>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 80012f0:	4a57      	ldr	r2, [pc, #348]	; (8001450 <_Z11displayMainv+0x1e4>)
 80012f2:	2301      	movs	r3, #1
 80012f4:	ca06      	ldmia	r2, {r1, r2}
 80012f6:	485b      	ldr	r0, [pc, #364]	; (8001464 <_Z11displayMainv+0x1f8>)
 80012f8:	f003 f9e6 	bl	80046c8 <ssd1306_WriteString>
		break;
 80012fc:	e006      	b.n	800130c <_Z11displayMainv+0xa0>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 80012fe:	4a54      	ldr	r2, [pc, #336]	; (8001450 <_Z11displayMainv+0x1e4>)
 8001300:	2301      	movs	r3, #1
 8001302:	ca06      	ldmia	r2, {r1, r2}
 8001304:	4858      	ldr	r0, [pc, #352]	; (8001468 <_Z11displayMainv+0x1fc>)
 8001306:	f003 f9df 	bl	80046c8 <ssd1306_WriteString>
		break;
 800130a:	bf00      	nop
	}

	ssd1306_SetCursor(92, 52);
 800130c:	2134      	movs	r1, #52	; 0x34
 800130e:	205c      	movs	r0, #92	; 0x5c
 8001310:	f003 fa00 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 8001314:	4a4e      	ldr	r2, [pc, #312]	; (8001450 <_Z11displayMainv+0x1e4>)
 8001316:	2301      	movs	r3, #1
 8001318:	ca06      	ldmia	r2, {r1, r2}
 800131a:	4854      	ldr	r0, [pc, #336]	; (800146c <_Z11displayMainv+0x200>)
 800131c:	f003 f9d4 	bl	80046c8 <ssd1306_WriteString>

	
	if (tcJammed)
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <_Z11displayMainv+0x204>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00a      	beq.n	8001340 <_Z11displayMainv+0xd4>
	{
		ssd1306_SetCursor(84, 0);
 800132a:	2100      	movs	r1, #0
 800132c:	2054      	movs	r0, #84	; 0x54
 800132e:	f003 f9f1 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("Jammed", Font_7x10, White);
 8001332:	4a47      	ldr	r2, [pc, #284]	; (8001450 <_Z11displayMainv+0x1e4>)
 8001334:	2301      	movs	r3, #1
 8001336:	ca06      	ldmia	r2, {r1, r2}
 8001338:	484e      	ldr	r0, [pc, #312]	; (8001474 <_Z11displayMainv+0x208>)
 800133a:	f003 f9c5 	bl	80046c8 <ssd1306_WriteString>
 800133e:	e009      	b.n	8001354 <_Z11displayMainv+0xe8>
	}
	else
	{
		ssd1306_SetCursor(90, 0);
 8001340:	2100      	movs	r1, #0
 8001342:	205a      	movs	r0, #90	; 0x5a
 8001344:	f003 f9e6 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("Ready", Font_7x10, White);
 8001348:	4a41      	ldr	r2, [pc, #260]	; (8001450 <_Z11displayMainv+0x1e4>)
 800134a:	2301      	movs	r3, #1
 800134c:	ca06      	ldmia	r2, {r1, r2}
 800134e:	484a      	ldr	r0, [pc, #296]	; (8001478 <_Z11displayMainv+0x20c>)
 8001350:	f003 f9ba 	bl	80046c8 <ssd1306_WriteString>
	}
	if (intOffset != 30)
 8001354:	4b49      	ldr	r3, [pc, #292]	; (800147c <_Z11displayMainv+0x210>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b1e      	cmp	r3, #30
 800135a:	d067      	beq.n	800142c <_Z11displayMainv+0x1c0>
	{
		ssd1306_SetCursor(30, 12);
 800135c:	210c      	movs	r1, #12
 800135e:	201e      	movs	r0, #30
 8001360:	f003 f9d8 	bl	8004714 <ssd1306_SetCursor>
		if (intOffset > 30)
 8001364:	4b45      	ldr	r3, [pc, #276]	; (800147c <_Z11displayMainv+0x210>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b1e      	cmp	r3, #30
 800136a:	d925      	bls.n	80013b8 <_Z11displayMainv+0x14c>
		{
			offsetStr[0] = '+';
 800136c:	232b      	movs	r3, #43	; 0x2b
 800136e:	713b      	strb	r3, [r7, #4]
			offsetStr[1] = foo[(intOffset-30)/10];
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <_Z11displayMainv+0x214>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b41      	ldr	r3, [pc, #260]	; (800147c <_Z11displayMainv+0x210>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3b1e      	subs	r3, #30
 800137a:	4942      	ldr	r1, [pc, #264]	; (8001484 <_Z11displayMainv+0x218>)
 800137c:	fb81 0103 	smull	r0, r1, r1, r3
 8001380:	1089      	asrs	r1, r1, #2
 8001382:	17db      	asrs	r3, r3, #31
 8001384:	1acb      	subs	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	717b      	strb	r3, [r7, #5]
			offsetStr[2] = foo[(intOffset-30)%10];
 800138c:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <_Z11displayMainv+0x214>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	4b3a      	ldr	r3, [pc, #232]	; (800147c <_Z11displayMainv+0x210>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f1a3 021e 	sub.w	r2, r3, #30
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <_Z11displayMainv+0x218>)
 800139a:	fb83 1302 	smull	r1, r3, r3, r2
 800139e:	1099      	asrs	r1, r3, #2
 80013a0:	17d3      	asrs	r3, r2, #31
 80013a2:	1ac9      	subs	r1, r1, r3
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	1ad1      	subs	r1, r2, r3
 80013ae:	460b      	mov	r3, r1
 80013b0:	4403      	add	r3, r0
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	e029      	b.n	800140c <_Z11displayMainv+0x1a0>
		}
		else if (intOffset < 30)
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <_Z11displayMainv+0x210>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b1d      	cmp	r3, #29
 80013be:	d825      	bhi.n	800140c <_Z11displayMainv+0x1a0>
		{
			offsetStr[0] = '-';		
 80013c0:	232d      	movs	r3, #45	; 0x2d
 80013c2:	713b      	strb	r3, [r7, #4]
			offsetStr[1] = foo[(30-intOffset)/10];
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <_Z11displayMainv+0x214>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <_Z11displayMainv+0x210>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f1c3 031e 	rsb	r3, r3, #30
 80013d0:	492c      	ldr	r1, [pc, #176]	; (8001484 <_Z11displayMainv+0x218>)
 80013d2:	fb81 0103 	smull	r0, r1, r1, r3
 80013d6:	1089      	asrs	r1, r1, #2
 80013d8:	17db      	asrs	r3, r3, #31
 80013da:	1acb      	subs	r3, r1, r3
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	717b      	strb	r3, [r7, #5]
			offsetStr[2] = foo[(30-intOffset)%10];
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <_Z11displayMainv+0x214>)
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <_Z11displayMainv+0x210>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f1c3 021e 	rsb	r2, r3, #30
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <_Z11displayMainv+0x218>)
 80013f0:	fb83 1302 	smull	r1, r3, r3, r2
 80013f4:	1099      	asrs	r1, r3, #2
 80013f6:	17d3      	asrs	r3, r2, #31
 80013f8:	1ac9      	subs	r1, r1, r3
 80013fa:	460b      	mov	r3, r1
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	440b      	add	r3, r1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	1ad1      	subs	r1, r2, r3
 8001404:	460b      	mov	r3, r1
 8001406:	4403      	add	r3, r0
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	71bb      	strb	r3, [r7, #6]
		}
		ssd1306_WriteString(offsetStr, Font_7x10, White);
 800140c:	4a10      	ldr	r2, [pc, #64]	; (8001450 <_Z11displayMainv+0x1e4>)
 800140e:	1d38      	adds	r0, r7, #4
 8001410:	2301      	movs	r3, #1
 8001412:	ca06      	ldmia	r2, {r1, r2}
 8001414:	f003 f958 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(48, 12);
 8001418:	210c      	movs	r1, #12
 800141a:	2030      	movs	r0, #48	; 0x30
 800141c:	f003 f97a 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString(" Offset", Font_7x10, White);
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <_Z11displayMainv+0x1e4>)
 8001422:	2301      	movs	r3, #1
 8001424:	ca06      	ldmia	r2, {r1, r2}
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <_Z11displayMainv+0x21c>)
 8001428:	f003 f94e 	bl	80046c8 <ssd1306_WriteString>
	}
	displayBattery();
 800142c:	f000 fc46 	bl	8001cbc <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <_Z11displayMainv+0x220>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 f835 	bl	80044a4 <ssd1306_UpdateScreen>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008
 8001448:	20000084 	.word	0x20000084
 800144c:	20000099 	.word	0x20000099
 8001450:	20000000 	.word	0x20000000
 8001454:	080095e0 	.word	0x080095e0
 8001458:	080095e8 	.word	0x080095e8
 800145c:	080095ec 	.word	0x080095ec
 8001460:	080095f0 	.word	0x080095f0
 8001464:	080095f8 	.word	0x080095f8
 8001468:	08009604 	.word	0x08009604
 800146c:	08009608 	.word	0x08009608
 8001470:	20000098 	.word	0x20000098
 8001474:	08009610 	.word	0x08009610
 8001478:	08009618 	.word	0x08009618
 800147c:	20000014 	.word	0x20000014
 8001480:	20000010 	.word	0x20000010
 8001484:	66666667 	.word	0x66666667
 8001488:	08009620 	.word	0x08009620
 800148c:	20000048 	.word	0x20000048

08001490 <_Z13displayLockedv>:

void displayLocked()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	timecodeDisplay();
 8001496:	f000 fc95 	bl	8001dc4 <_Z15timecodeDisplayv>
	ssd1306_Fill(Black);
 800149a:	2000      	movs	r0, #0
 800149c:	f002 ffde 	bl	800445c <ssd1306_Fill>
	ssd1306_SetCursor(44, 20);
 80014a0:	2114      	movs	r1, #20
 80014a2:	202c      	movs	r0, #44	; 0x2c
 80014a4:	f003 f936 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Locked", Font_7x10, White);
 80014a8:	4a27      	ldr	r2, [pc, #156]	; (8001548 <_Z13displayLockedv+0xb8>)
 80014aa:	2301      	movs	r3, #1
 80014ac:	ca06      	ldmia	r2, {r1, r2}
 80014ae:	4827      	ldr	r0, [pc, #156]	; (800154c <_Z13displayLockedv+0xbc>)
 80014b0:	f003 f90a 	bl	80046c8 <ssd1306_WriteString>
	if (buttonsHeld)	
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <_Z13displayLockedv+0xc0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d011      	beq.n	80014e0 <_Z13displayLockedv+0x50>
	{
		ssd1306_SetCursor(60, 32);
 80014bc:	2120      	movs	r1, #32
 80014be:	203c      	movs	r0, #60	; 0x3c
 80014c0:	f003 f928 	bl	8004714 <ssd1306_SetCursor>
		char lockDisplay = foo[lockCountdown];
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <_Z13displayLockedv+0xc4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <_Z13displayLockedv+0xc8>)
 80014ca:	7812      	ldrb	r2, [r2, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	71fb      	strb	r3, [r7, #7]
		ssd1306_WriteChar(lockDisplay, Font_7x10, White);	//TODO Lock Countdown
 80014d2:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <_Z13displayLockedv+0xb8>)
 80014d4:	79f8      	ldrb	r0, [r7, #7]
 80014d6:	2301      	movs	r3, #1
 80014d8:	ca06      	ldmia	r2, {r1, r2}
 80014da:	f003 f875 	bl	80045c8 <ssd1306_WriteChar>
 80014de:	e013      	b.n	8001508 <_Z13displayLockedv+0x78>
	}
	else
	{
		ssd1306_SetCursor(24, 30);
 80014e0:	211e      	movs	r1, #30
 80014e2:	2018      	movs	r0, #24
 80014e4:	f003 f916 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("Hold < and >", Font_7x10, White);
 80014e8:	4a17      	ldr	r2, [pc, #92]	; (8001548 <_Z13displayLockedv+0xb8>)
 80014ea:	2301      	movs	r3, #1
 80014ec:	ca06      	ldmia	r2, {r1, r2}
 80014ee:	481b      	ldr	r0, [pc, #108]	; (800155c <_Z13displayLockedv+0xcc>)
 80014f0:	f003 f8ea 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(34, 40);
 80014f4:	2128      	movs	r1, #40	; 0x28
 80014f6:	2022      	movs	r0, #34	; 0x22
 80014f8:	f003 f90c 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("to unlock", Font_7x10, White);
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_Z13displayLockedv+0xb8>)
 80014fe:	2301      	movs	r3, #1
 8001500:	ca06      	ldmia	r2, {r1, r2}
 8001502:	4817      	ldr	r0, [pc, #92]	; (8001560 <_Z13displayLockedv+0xd0>)
 8001504:	f003 f8e0 	bl	80046c8 <ssd1306_WriteString>
	}

	ssd1306_SetCursor(2, 6);
 8001508:	2106      	movs	r1, #6
 800150a:	2002      	movs	r0, #2
 800150c:	f003 f902 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString(tcDisplay, Font_7x10, White);
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <_Z13displayLockedv+0xb8>)
 8001512:	2301      	movs	r3, #1
 8001514:	ca06      	ldmia	r2, {r1, r2}
 8001516:	4813      	ldr	r0, [pc, #76]	; (8001564 <_Z13displayLockedv+0xd4>)
 8001518:	f003 f8d6 	bl	80046c8 <ssd1306_WriteString>

	ssd1306_SetCursor(90, 6);
 800151c:	2106      	movs	r1, #6
 800151e:	205a      	movs	r0, #90	; 0x5a
 8001520:	f003 f8f8 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("23.98", Font_7x10, White);
 8001524:	4a08      	ldr	r2, [pc, #32]	; (8001548 <_Z13displayLockedv+0xb8>)
 8001526:	2301      	movs	r3, #1
 8001528:	ca06      	ldmia	r2, {r1, r2}
 800152a:	480f      	ldr	r0, [pc, #60]	; (8001568 <_Z13displayLockedv+0xd8>)
 800152c:	f003 f8cc 	bl	80046c8 <ssd1306_WriteString>
	displayBattery();	
 8001530:	f000 fbc4 	bl	8001cbc <_Z14displayBatteryv>
	ssd1306_UpdateScreen(dispI2C);
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <_Z13displayLockedv+0xdc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f002 ffb3 	bl	80044a4 <ssd1306_UpdateScreen>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000000 	.word	0x20000000
 800154c:	08009628 	.word	0x08009628
 8001550:	200000ae 	.word	0x200000ae
 8001554:	20000010 	.word	0x20000010
 8001558:	200000af 	.word	0x200000af
 800155c:	08009630 	.word	0x08009630
 8001560:	08009640 	.word	0x08009640
 8001564:	20000084 	.word	0x20000084
 8001568:	080095e0 	.word	0x080095e0
 800156c:	20000048 	.word	0x20000048

08001570 <_Z12displayPowerv>:

void displayPower()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001576:	2000      	movs	r0, #0
 8001578:	f002 ff70 	bl	800445c <ssd1306_Fill>
	ssd1306_SetCursor(14, 10);
 800157c:	210a      	movs	r1, #10
 800157e:	200e      	movs	r0, #14
 8001580:	f003 f8c8 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Power Off", Font_11x18, White);
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <_Z12displayPowerv+0x54>)
 8001586:	2301      	movs	r3, #1
 8001588:	ca06      	ldmia	r2, {r1, r2}
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <_Z12displayPowerv+0x58>)
 800158c:	f003 f89c 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(60, 36);
 8001590:	2124      	movs	r1, #36	; 0x24
 8001592:	203c      	movs	r0, #60	; 0x3c
 8001594:	f003 f8be 	bl	8004714 <ssd1306_SetCursor>
	char powerDisplay = foo[powerCountdown];
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <_Z12displayPowerv+0x5c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <_Z12displayPowerv+0x60>)
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteChar(powerDisplay, Font_11x18, White); //TODO Power countdown
 80015a6:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <_Z12displayPowerv+0x54>)
 80015a8:	79f8      	ldrb	r0, [r7, #7]
 80015aa:	2301      	movs	r3, #1
 80015ac:	ca06      	ldmia	r2, {r1, r2}
 80015ae:	f003 f80b 	bl	80045c8 <ssd1306_WriteChar>
	ssd1306_UpdateScreen(dispI2C);
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_Z12displayPowerv+0x64>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 ff74 	bl	80044a4 <ssd1306_UpdateScreen>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000008 	.word	0x20000008
 80015c8:	0800964c 	.word	0x0800964c
 80015cc:	20000010 	.word	0x20000010
 80015d0:	200000c8 	.word	0x200000c8
 80015d4:	20000048 	.word	0x20000048

080015d8 <_Z11displayMenuv>:

void displayMenu()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80015de:	2000      	movs	r0, #0
 80015e0:	f002 ff3c 	bl	800445c <ssd1306_Fill>
	//Frame rate
	//Auto power off
	//Exit
	ssd1306_SetCursor(50, 0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2032      	movs	r0, #50	; 0x32
 80015e8:	f003 f894 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Menu", Font_7x10, White);
 80015ec:	4ab5      	ldr	r2, [pc, #724]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80015ee:	2301      	movs	r3, #1
 80015f0:	ca06      	ldmia	r2, {r1, r2}
 80015f2:	48b5      	ldr	r0, [pc, #724]	; (80018c8 <_Z11displayMenuv+0x2f0>)
 80015f4:	f003 f868 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 12);
 80015f8:	210c      	movs	r1, #12
 80015fa:	200a      	movs	r0, #10
 80015fc:	f003 f88a 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Rate: ", Font_7x10, White);
 8001600:	4ab0      	ldr	r2, [pc, #704]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001602:	2301      	movs	r3, #1
 8001604:	ca06      	ldmia	r2, {r1, r2}
 8001606:	48b1      	ldr	r0, [pc, #708]	; (80018cc <_Z11displayMenuv+0x2f4>)
 8001608:	f003 f85e 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 22);
 800160c:	2116      	movs	r1, #22
 800160e:	200a      	movs	r0, #10
 8001610:	f003 f880 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Offset: ", Font_7x10, White);
 8001614:	4aab      	ldr	r2, [pc, #684]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001616:	2301      	movs	r3, #1
 8001618:	ca06      	ldmia	r2, {r1, r2}
 800161a:	48ad      	ldr	r0, [pc, #692]	; (80018d0 <_Z11displayMenuv+0x2f8>)
 800161c:	f003 f854 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 32);
 8001620:	2120      	movs	r1, #32
 8001622:	200a      	movs	r0, #10
 8001624:	f003 f876 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Re-jam", Font_7x10, White);
 8001628:	4aa6      	ldr	r2, [pc, #664]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 800162a:	2301      	movs	r3, #1
 800162c:	ca06      	ldmia	r2, {r1, r2}
 800162e:	48a9      	ldr	r0, [pc, #676]	; (80018d4 <_Z11displayMenuv+0x2fc>)
 8001630:	f003 f84a 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(10, 42);
 8001634:	212a      	movs	r1, #42	; 0x2a
 8001636:	200a      	movs	r0, #10
 8001638:	f003 f86c 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Auto-Off: ", Font_7x10, White);
 800163c:	4aa1      	ldr	r2, [pc, #644]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 800163e:	2301      	movs	r3, #1
 8001640:	ca06      	ldmia	r2, {r1, r2}
 8001642:	48a5      	ldr	r0, [pc, #660]	; (80018d8 <_Z11displayMenuv+0x300>)
 8001644:	f003 f840 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(50, 52);
 8001648:	2134      	movs	r1, #52	; 0x34
 800164a:	2032      	movs	r0, #50	; 0x32
 800164c:	f003 f862 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Exit", Font_7x10, White);
 8001650:	4a9c      	ldr	r2, [pc, #624]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001652:	2301      	movs	r3, #1
 8001654:	ca06      	ldmia	r2, {r1, r2}
 8001656:	48a1      	ldr	r0, [pc, #644]	; (80018dc <_Z11displayMenuv+0x304>)
 8001658:	f003 f836 	bl	80046c8 <ssd1306_WriteString>

	ssd1306_SetCursor(50, 12);
 800165c:	210c      	movs	r1, #12
 800165e:	2032      	movs	r0, #50	; 0x32
 8001660:	f003 f858 	bl	8004714 <ssd1306_SetCursor>
	uint8_t dispRate;
	uint8_t dispOffset;
	char offsetStr[3];
	if (menuItemSelect){
 8001664:	4b9e      	ldr	r3, [pc, #632]	; (80018e0 <_Z11displayMenuv+0x308>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <_Z11displayMenuv+0xa2>
		dispRate = rateAdjust;
 800166c:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <_Z11displayMenuv+0x30c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	71fb      	strb	r3, [r7, #7]
		dispOffset = offsetAdjust;
 8001672:	4b9d      	ldr	r3, [pc, #628]	; (80018e8 <_Z11displayMenuv+0x310>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	71bb      	strb	r3, [r7, #6]
 8001678:	e005      	b.n	8001686 <_Z11displayMenuv+0xae>
	} else {
		dispRate = frameRate;
 800167a:	4b9c      	ldr	r3, [pc, #624]	; (80018ec <_Z11displayMenuv+0x314>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
		dispOffset = intOffset;
 8001680:	4b9b      	ldr	r3, [pc, #620]	; (80018f0 <_Z11displayMenuv+0x318>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	71bb      	strb	r3, [r7, #6]
	}
	switch (dispRate)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d839      	bhi.n	8001700 <_Z11displayMenuv+0x128>
 800168c:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <_Z11displayMenuv+0xbc>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016bb 	.word	0x080016bb
 800169c:	080016c9 	.word	0x080016c9
 80016a0:	080016d7 	.word	0x080016d7
 80016a4:	080016e5 	.word	0x080016e5
 80016a8:	080016f3 	.word	0x080016f3
	{
	case 0:
		ssd1306_WriteString("23.98", Font_7x10, White);
 80016ac:	4a85      	ldr	r2, [pc, #532]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80016ae:	2301      	movs	r3, #1
 80016b0:	ca06      	ldmia	r2, {r1, r2}
 80016b2:	4890      	ldr	r0, [pc, #576]	; (80018f4 <_Z11displayMenuv+0x31c>)
 80016b4:	f003 f808 	bl	80046c8 <ssd1306_WriteString>
		break;
 80016b8:	e022      	b.n	8001700 <_Z11displayMenuv+0x128>
	case 1:
		ssd1306_WriteString("24", Font_7x10, White);
 80016ba:	4a82      	ldr	r2, [pc, #520]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80016bc:	2301      	movs	r3, #1
 80016be:	ca06      	ldmia	r2, {r1, r2}
 80016c0:	488d      	ldr	r0, [pc, #564]	; (80018f8 <_Z11displayMenuv+0x320>)
 80016c2:	f003 f801 	bl	80046c8 <ssd1306_WriteString>
		break;
 80016c6:	e01b      	b.n	8001700 <_Z11displayMenuv+0x128>
	case 2:
		ssd1306_WriteString("25", Font_7x10, White);
 80016c8:	4a7e      	ldr	r2, [pc, #504]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80016ca:	2301      	movs	r3, #1
 80016cc:	ca06      	ldmia	r2, {r1, r2}
 80016ce:	488b      	ldr	r0, [pc, #556]	; (80018fc <_Z11displayMenuv+0x324>)
 80016d0:	f002 fffa 	bl	80046c8 <ssd1306_WriteString>
		break;
 80016d4:	e014      	b.n	8001700 <_Z11displayMenuv+0x128>
	case 3:
		ssd1306_WriteString("29.97", Font_7x10, White);
 80016d6:	4a7b      	ldr	r2, [pc, #492]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80016d8:	2301      	movs	r3, #1
 80016da:	ca06      	ldmia	r2, {r1, r2}
 80016dc:	4888      	ldr	r0, [pc, #544]	; (8001900 <_Z11displayMenuv+0x328>)
 80016de:	f002 fff3 	bl	80046c8 <ssd1306_WriteString>
		break;
 80016e2:	e00d      	b.n	8001700 <_Z11displayMenuv+0x128>
	case 4:
		ssd1306_WriteString("29.97 DF", Font_7x10, White);
 80016e4:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80016e6:	2301      	movs	r3, #1
 80016e8:	ca06      	ldmia	r2, {r1, r2}
 80016ea:	4886      	ldr	r0, [pc, #536]	; (8001904 <_Z11displayMenuv+0x32c>)
 80016ec:	f002 ffec 	bl	80046c8 <ssd1306_WriteString>
		break;
 80016f0:	e006      	b.n	8001700 <_Z11displayMenuv+0x128>
	case 5:
		ssd1306_WriteString("30", Font_7x10, White);
 80016f2:	4a74      	ldr	r2, [pc, #464]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80016f4:	2301      	movs	r3, #1
 80016f6:	ca06      	ldmia	r2, {r1, r2}
 80016f8:	4883      	ldr	r0, [pc, #524]	; (8001908 <_Z11displayMenuv+0x330>)
 80016fa:	f002 ffe5 	bl	80046c8 <ssd1306_WriteString>
		break;
 80016fe:	bf00      	nop
	}
	ssd1306_SetCursor(58, 22);
 8001700:	2116      	movs	r1, #22
 8001702:	203a      	movs	r0, #58	; 0x3a
 8001704:	f003 f806 	bl	8004714 <ssd1306_SetCursor>
	//Insert offset
	if (dispOffset == 30)
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	2b1e      	cmp	r3, #30
 800170c:	d106      	bne.n	800171c <_Z11displayMenuv+0x144>
	{
		offsetStr[0] = ' ';
 800170e:	2320      	movs	r3, #32
 8001710:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = '0';
 8001712:	2330      	movs	r3, #48	; 0x30
 8001714:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = '0';
 8001716:	2330      	movs	r3, #48	; 0x30
 8001718:	70bb      	strb	r3, [r7, #2]
 800171a:	e04d      	b.n	80017b8 <_Z11displayMenuv+0x1e0>
	}
	else if (dispOffset > 30)
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	2b1e      	cmp	r3, #30
 8001720:	d923      	bls.n	800176a <_Z11displayMenuv+0x192>
	{
		offsetStr[0] = '+';
 8001722:	232b      	movs	r3, #43	; 0x2b
 8001724:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = foo[(dispOffset-30)/10];
 8001726:	4b79      	ldr	r3, [pc, #484]	; (800190c <_Z11displayMenuv+0x334>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	3b1e      	subs	r3, #30
 800172e:	4978      	ldr	r1, [pc, #480]	; (8001910 <_Z11displayMenuv+0x338>)
 8001730:	fb81 0103 	smull	r0, r1, r1, r3
 8001734:	1089      	asrs	r1, r1, #2
 8001736:	17db      	asrs	r3, r3, #31
 8001738:	1acb      	subs	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = foo[(dispOffset-30)%10];
 8001740:	4b72      	ldr	r3, [pc, #456]	; (800190c <_Z11displayMenuv+0x334>)
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	f1a3 021e 	sub.w	r2, r3, #30
 800174a:	4b71      	ldr	r3, [pc, #452]	; (8001910 <_Z11displayMenuv+0x338>)
 800174c:	fb83 1302 	smull	r1, r3, r3, r2
 8001750:	1099      	asrs	r1, r3, #2
 8001752:	17d3      	asrs	r3, r2, #31
 8001754:	1ac9      	subs	r1, r1, r3
 8001756:	460b      	mov	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	1ad1      	subs	r1, r2, r3
 8001760:	460b      	mov	r3, r1
 8001762:	4403      	add	r3, r0
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	70bb      	strb	r3, [r7, #2]
 8001768:	e026      	b.n	80017b8 <_Z11displayMenuv+0x1e0>
	}
	else if (dispOffset < 30)
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	2b1d      	cmp	r3, #29
 800176e:	d823      	bhi.n	80017b8 <_Z11displayMenuv+0x1e0>
	{
		offsetStr[0] = '-';		
 8001770:	232d      	movs	r3, #45	; 0x2d
 8001772:	703b      	strb	r3, [r7, #0]
		offsetStr[1] = foo[(30-dispOffset)/10];
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <_Z11displayMenuv+0x334>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	f1c3 031e 	rsb	r3, r3, #30
 800177e:	4964      	ldr	r1, [pc, #400]	; (8001910 <_Z11displayMenuv+0x338>)
 8001780:	fb81 0103 	smull	r0, r1, r1, r3
 8001784:	1089      	asrs	r1, r1, #2
 8001786:	17db      	asrs	r3, r3, #31
 8001788:	1acb      	subs	r3, r1, r3
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	707b      	strb	r3, [r7, #1]
		offsetStr[2] = foo[(30-dispOffset)%10];
 8001790:	4b5e      	ldr	r3, [pc, #376]	; (800190c <_Z11displayMenuv+0x334>)
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	f1c3 021e 	rsb	r2, r3, #30
 800179a:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <_Z11displayMenuv+0x338>)
 800179c:	fb83 1302 	smull	r1, r3, r3, r2
 80017a0:	1099      	asrs	r1, r3, #2
 80017a2:	17d3      	asrs	r3, r2, #31
 80017a4:	1ac9      	subs	r1, r1, r3
 80017a6:	460b      	mov	r3, r1
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	1ad1      	subs	r1, r2, r3
 80017b0:	460b      	mov	r3, r1
 80017b2:	4403      	add	r3, r0
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	70bb      	strb	r3, [r7, #2]
	}
	
	ssd1306_WriteString(offsetStr, Font_7x10, White);
 80017b8:	4a42      	ldr	r2, [pc, #264]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80017ba:	4638      	mov	r0, r7
 80017bc:	2301      	movs	r3, #1
 80017be:	ca06      	ldmia	r2, {r1, r2}
 80017c0:	f002 ff82 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(78,22);
 80017c4:	2116      	movs	r1, #22
 80017c6:	204e      	movs	r0, #78	; 0x4e
 80017c8:	f002 ffa4 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("     ", Font_7x10, White); 
 80017cc:	4a3d      	ldr	r2, [pc, #244]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80017ce:	2301      	movs	r3, #1
 80017d0:	ca06      	ldmia	r2, {r1, r2}
 80017d2:	4850      	ldr	r0, [pc, #320]	; (8001914 <_Z11displayMenuv+0x33c>)
 80017d4:	f002 ff78 	bl	80046c8 <ssd1306_WriteString>

	ssd1306_SetCursor(75, 42);
 80017d8:	212a      	movs	r1, #42	; 0x2a
 80017da:	204b      	movs	r0, #75	; 0x4b
 80017dc:	f002 ff9a 	bl	8004714 <ssd1306_SetCursor>
	switch (autoOff)
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <_Z11displayMenuv+0x340>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d830      	bhi.n	800184a <_Z11displayMenuv+0x272>
 80017e8:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <_Z11displayMenuv+0x218>)
 80017ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ee:	bf00      	nop
 80017f0:	08001805 	.word	0x08001805
 80017f4:	08001813 	.word	0x08001813
 80017f8:	08001821 	.word	0x08001821
 80017fc:	0800182f 	.word	0x0800182f
 8001800:	0800183d 	.word	0x0800183d
	{
	case 0:
		ssd1306_WriteString("1 hr", Font_7x10, White);
 8001804:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001806:	2301      	movs	r3, #1
 8001808:	ca06      	ldmia	r2, {r1, r2}
 800180a:	4844      	ldr	r0, [pc, #272]	; (800191c <_Z11displayMenuv+0x344>)
 800180c:	f002 ff5c 	bl	80046c8 <ssd1306_WriteString>
		break;
 8001810:	e01b      	b.n	800184a <_Z11displayMenuv+0x272>
	case 1:
		ssd1306_WriteString("2 hr", Font_7x10, White);
 8001812:	4a2c      	ldr	r2, [pc, #176]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001814:	2301      	movs	r3, #1
 8001816:	ca06      	ldmia	r2, {r1, r2}
 8001818:	4841      	ldr	r0, [pc, #260]	; (8001920 <_Z11displayMenuv+0x348>)
 800181a:	f002 ff55 	bl	80046c8 <ssd1306_WriteString>
		break;
 800181e:	e014      	b.n	800184a <_Z11displayMenuv+0x272>
	case 2:
		ssd1306_WriteString("4 hr", Font_7x10, White);
 8001820:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001822:	2301      	movs	r3, #1
 8001824:	ca06      	ldmia	r2, {r1, r2}
 8001826:	483f      	ldr	r0, [pc, #252]	; (8001924 <_Z11displayMenuv+0x34c>)
 8001828:	f002 ff4e 	bl	80046c8 <ssd1306_WriteString>
		break;
 800182c:	e00d      	b.n	800184a <_Z11displayMenuv+0x272>
	case 3:
		ssd1306_WriteString("8 hr", Font_7x10, White);
 800182e:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001830:	2301      	movs	r3, #1
 8001832:	ca06      	ldmia	r2, {r1, r2}
 8001834:	483c      	ldr	r0, [pc, #240]	; (8001928 <_Z11displayMenuv+0x350>)
 8001836:	f002 ff47 	bl	80046c8 <ssd1306_WriteString>
		break;
 800183a:	e006      	b.n	800184a <_Z11displayMenuv+0x272>
	case 4:
		ssd1306_WriteString("12 hr", Font_7x10, White);
 800183c:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 800183e:	2301      	movs	r3, #1
 8001840:	ca06      	ldmia	r2, {r1, r2}
 8001842:	483a      	ldr	r0, [pc, #232]	; (800192c <_Z11displayMenuv+0x354>)
 8001844:	f002 ff40 	bl	80046c8 <ssd1306_WriteString>
		break;
 8001848:	bf00      	nop
	}

	switch (menuItem)
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <_Z11displayMenuv+0x358>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b04      	cmp	r3, #4
 8001850:	f200 80c8 	bhi.w	80019e4 <_Z11displayMenuv+0x40c>
 8001854:	a201      	add	r2, pc, #4	; (adr r2, 800185c <_Z11displayMenuv+0x284>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	08001871 	.word	0x08001871
 8001860:	080018a5 	.word	0x080018a5
 8001864:	08001953 	.word	0x08001953
 8001868:	08001987 	.word	0x08001987
 800186c:	080019bb 	.word	0x080019bb
	{
	case 0:
		if (menuItemSelect)
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <_Z11displayMenuv+0x308>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00a      	beq.n	800188e <_Z11displayMenuv+0x2b6>
		{
			ssd1306_SetCursor(120, 12);
 8001878:	210c      	movs	r1, #12
 800187a:	2078      	movs	r0, #120	; 0x78
 800187c:	f002 ff4a 	bl	8004714 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001882:	2301      	movs	r3, #1
 8001884:	ca06      	ldmia	r2, {r1, r2}
 8001886:	482b      	ldr	r0, [pc, #172]	; (8001934 <_Z11displayMenuv+0x35c>)
 8001888:	f002 ff1e 	bl	80046c8 <ssd1306_WriteString>
		else
		{
			ssd1306_SetCursor(2, 12);
			ssd1306_WriteString(">", Font_7x10, White);
		}
		break;
 800188c:	e0aa      	b.n	80019e4 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 12);
 800188e:	210c      	movs	r1, #12
 8001890:	2002      	movs	r0, #2
 8001892:	f002 ff3f 	bl	8004714 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 8001898:	2301      	movs	r3, #1
 800189a:	ca06      	ldmia	r2, {r1, r2}
 800189c:	4826      	ldr	r0, [pc, #152]	; (8001938 <_Z11displayMenuv+0x360>)
 800189e:	f002 ff13 	bl	80046c8 <ssd1306_WriteString>
		break;
 80018a2:	e09f      	b.n	80019e4 <_Z11displayMenuv+0x40c>
	case 1:
		if (menuItemSelect)
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <_Z11displayMenuv+0x308>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d047      	beq.n	800193c <_Z11displayMenuv+0x364>
		{
			ssd1306_SetCursor(120, 22);
 80018ac:	2116      	movs	r1, #22
 80018ae:	2078      	movs	r0, #120	; 0x78
 80018b0:	f002 ff30 	bl	8004714 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 80018b4:	4a03      	ldr	r2, [pc, #12]	; (80018c4 <_Z11displayMenuv+0x2ec>)
 80018b6:	2301      	movs	r3, #1
 80018b8:	ca06      	ldmia	r2, {r1, r2}
 80018ba:	481e      	ldr	r0, [pc, #120]	; (8001934 <_Z11displayMenuv+0x35c>)
 80018bc:	f002 ff04 	bl	80046c8 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 22);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 80018c0:	e090      	b.n	80019e4 <_Z11displayMenuv+0x40c>
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000
 80018c8:	08009608 	.word	0x08009608
 80018cc:	08009658 	.word	0x08009658
 80018d0:	08009660 	.word	0x08009660
 80018d4:	0800966c 	.word	0x0800966c
 80018d8:	08009674 	.word	0x08009674
 80018dc:	08009680 	.word	0x08009680
 80018e0:	200000d6 	.word	0x200000d6
 80018e4:	200000d4 	.word	0x200000d4
 80018e8:	200000d5 	.word	0x200000d5
 80018ec:	20000099 	.word	0x20000099
 80018f0:	20000014 	.word	0x20000014
 80018f4:	080095e0 	.word	0x080095e0
 80018f8:	080095e8 	.word	0x080095e8
 80018fc:	080095ec 	.word	0x080095ec
 8001900:	080095f0 	.word	0x080095f0
 8001904:	080095f8 	.word	0x080095f8
 8001908:	08009604 	.word	0x08009604
 800190c:	20000010 	.word	0x20000010
 8001910:	66666667 	.word	0x66666667
 8001914:	08009688 	.word	0x08009688
 8001918:	200000a0 	.word	0x200000a0
 800191c:	08009690 	.word	0x08009690
 8001920:	08009698 	.word	0x08009698
 8001924:	080096a0 	.word	0x080096a0
 8001928:	080096a8 	.word	0x080096a8
 800192c:	080096b0 	.word	0x080096b0
 8001930:	200000d7 	.word	0x200000d7
 8001934:	080096b8 	.word	0x080096b8
 8001938:	080096bc 	.word	0x080096bc
			ssd1306_SetCursor(2, 22);
 800193c:	2116      	movs	r1, #22
 800193e:	2002      	movs	r0, #2
 8001940:	f002 fee8 	bl	8004714 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001944:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <_Z11displayMenuv+0x420>)
 8001946:	2301      	movs	r3, #1
 8001948:	ca06      	ldmia	r2, {r1, r2}
 800194a:	482c      	ldr	r0, [pc, #176]	; (80019fc <_Z11displayMenuv+0x424>)
 800194c:	f002 febc 	bl	80046c8 <ssd1306_WriteString>
		break;
 8001950:	e048      	b.n	80019e4 <_Z11displayMenuv+0x40c>
	case 2:
		if (menuItemSelect)
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <_Z11displayMenuv+0x428>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <_Z11displayMenuv+0x398>
		{
			ssd1306_SetCursor(120, 32);
 800195a:	2120      	movs	r1, #32
 800195c:	2078      	movs	r0, #120	; 0x78
 800195e:	f002 fed9 	bl	8004714 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001962:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <_Z11displayMenuv+0x420>)
 8001964:	2301      	movs	r3, #1
 8001966:	ca06      	ldmia	r2, {r1, r2}
 8001968:	4826      	ldr	r0, [pc, #152]	; (8001a04 <_Z11displayMenuv+0x42c>)
 800196a:	f002 fead 	bl	80046c8 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 32);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 800196e:	e039      	b.n	80019e4 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 32);
 8001970:	2120      	movs	r1, #32
 8001972:	2002      	movs	r0, #2
 8001974:	f002 fece 	bl	8004714 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 8001978:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <_Z11displayMenuv+0x420>)
 800197a:	2301      	movs	r3, #1
 800197c:	ca06      	ldmia	r2, {r1, r2}
 800197e:	481f      	ldr	r0, [pc, #124]	; (80019fc <_Z11displayMenuv+0x424>)
 8001980:	f002 fea2 	bl	80046c8 <ssd1306_WriteString>
		break;
 8001984:	e02e      	b.n	80019e4 <_Z11displayMenuv+0x40c>
	case 3:
		if (menuItemSelect)
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <_Z11displayMenuv+0x428>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00a      	beq.n	80019a4 <_Z11displayMenuv+0x3cc>
		{
			ssd1306_SetCursor(120, 42);
 800198e:	212a      	movs	r1, #42	; 0x2a
 8001990:	2078      	movs	r0, #120	; 0x78
 8001992:	f002 febf 	bl	8004714 <ssd1306_SetCursor>
			ssd1306_WriteString("<", Font_7x10, White);
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <_Z11displayMenuv+0x420>)
 8001998:	2301      	movs	r3, #1
 800199a:	ca06      	ldmia	r2, {r1, r2}
 800199c:	4819      	ldr	r0, [pc, #100]	; (8001a04 <_Z11displayMenuv+0x42c>)
 800199e:	f002 fe93 	bl	80046c8 <ssd1306_WriteString>
		{
			ssd1306_SetCursor(2, 42);
			ssd1306_WriteString(">", Font_7x10, White);
		}

		break;
 80019a2:	e01f      	b.n	80019e4 <_Z11displayMenuv+0x40c>
			ssd1306_SetCursor(2, 42);
 80019a4:	212a      	movs	r1, #42	; 0x2a
 80019a6:	2002      	movs	r0, #2
 80019a8:	f002 feb4 	bl	8004714 <ssd1306_SetCursor>
			ssd1306_WriteString(">", Font_7x10, White);
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_Z11displayMenuv+0x420>)
 80019ae:	2301      	movs	r3, #1
 80019b0:	ca06      	ldmia	r2, {r1, r2}
 80019b2:	4812      	ldr	r0, [pc, #72]	; (80019fc <_Z11displayMenuv+0x424>)
 80019b4:	f002 fe88 	bl	80046c8 <ssd1306_WriteString>
		break;
 80019b8:	e014      	b.n	80019e4 <_Z11displayMenuv+0x40c>
	case 4:
		ssd1306_SetCursor(41, 52);
 80019ba:	2134      	movs	r1, #52	; 0x34
 80019bc:	2029      	movs	r0, #41	; 0x29
 80019be:	f002 fea9 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <_Z11displayMenuv+0x420>)
 80019c4:	2301      	movs	r3, #1
 80019c6:	ca06      	ldmia	r2, {r1, r2}
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <_Z11displayMenuv+0x424>)
 80019ca:	f002 fe7d 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(79, 52);
 80019ce:	2134      	movs	r1, #52	; 0x34
 80019d0:	204f      	movs	r0, #79	; 0x4f
 80019d2:	f002 fe9f 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <_Z11displayMenuv+0x420>)
 80019d8:	2301      	movs	r3, #1
 80019da:	ca06      	ldmia	r2, {r1, r2}
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <_Z11displayMenuv+0x42c>)
 80019de:	f002 fe73 	bl	80046c8 <ssd1306_WriteString>
		break;
 80019e2:	bf00      	nop
	}

	ssd1306_UpdateScreen(dispI2C);
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_Z11displayMenuv+0x430>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fd5b 	bl	80044a4 <ssd1306_UpdateScreen>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000000 	.word	0x20000000
 80019fc:	080096bc 	.word	0x080096bc
 8001a00:	200000d6 	.word	0x200000d6
 8001a04:	080096b8 	.word	0x080096b8
 8001a08:	20000048 	.word	0x20000048

08001a0c <_Z29displayConfirmationRateChangev>:

void displayConfirmationRateChange()
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f002 fd23 	bl	800445c <ssd1306_Fill>
	ssd1306_SetCursor(8, 4);
 8001a16:	2104      	movs	r1, #4
 8001a18:	2008      	movs	r0, #8
 8001a1a:	f002 fe7b 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Changing the rate", Font_7x10, White);
 8001a1e:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001a20:	2301      	movs	r3, #1
 8001a22:	ca06      	ldmia	r2, {r1, r2}
 8001a24:	4830      	ldr	r0, [pc, #192]	; (8001ae8 <_Z29displayConfirmationRateChangev+0xdc>)
 8001a26:	f002 fe4f 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(16, 18);
 8001a2a:	2112      	movs	r1, #18
 8001a2c:	2010      	movs	r0, #16
 8001a2e:	f002 fe71 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("will clear jam.", Font_7x10, White);
 8001a32:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001a34:	2301      	movs	r3, #1
 8001a36:	ca06      	ldmia	r2, {r1, r2}
 8001a38:	482c      	ldr	r0, [pc, #176]	; (8001aec <_Z29displayConfirmationRateChangev+0xe0>)
 8001a3a:	f002 fe45 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(32, 32);
 8001a3e:	2120      	movs	r1, #32
 8001a40:	2020      	movs	r0, #32
 8001a42:	f002 fe67 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 8001a46:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001a48:	2301      	movs	r3, #1
 8001a4a:	ca06      	ldmia	r2, {r1, r2}
 8001a4c:	4828      	ldr	r0, [pc, #160]	; (8001af0 <_Z29displayConfirmationRateChangev+0xe4>)
 8001a4e:	f002 fe3b 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 8001a52:	2132      	movs	r1, #50	; 0x32
 8001a54:	201e      	movs	r0, #30
 8001a56:	f002 fe5d 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 8001a5a:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	ca06      	ldmia	r2, {r1, r2}
 8001a60:	4824      	ldr	r0, [pc, #144]	; (8001af4 <_Z29displayConfirmationRateChangev+0xe8>)
 8001a62:	f002 fe31 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 8001a66:	2132      	movs	r1, #50	; 0x32
 8001a68:	2050      	movs	r0, #80	; 0x50
 8001a6a:	f002 fe53 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001a70:	2301      	movs	r3, #1
 8001a72:	ca06      	ldmia	r2, {r1, r2}
 8001a74:	4820      	ldr	r0, [pc, #128]	; (8001af8 <_Z29displayConfirmationRateChangev+0xec>)
 8001a76:	f002 fe27 	bl	80046c8 <ssd1306_WriteString>
	if (highlightYes)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <_Z29displayConfirmationRateChangev+0xf0>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d014      	beq.n	8001aac <_Z29displayConfirmationRateChangev+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 8001a82:	2132      	movs	r1, #50	; 0x32
 8001a84:	2048      	movs	r0, #72	; 0x48
 8001a86:	f002 fe45 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	ca06      	ldmia	r2, {r1, r2}
 8001a90:	481b      	ldr	r0, [pc, #108]	; (8001b00 <_Z29displayConfirmationRateChangev+0xf4>)
 8001a92:	f002 fe19 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8001a96:	2132      	movs	r1, #50	; 0x32
 8001a98:	2066      	movs	r0, #102	; 0x66
 8001a9a:	f002 fe3b 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	ca06      	ldmia	r2, {r1, r2}
 8001aa4:	4817      	ldr	r0, [pc, #92]	; (8001b04 <_Z29displayConfirmationRateChangev+0xf8>)
 8001aa6:	f002 fe0f 	bl	80046c8 <ssd1306_WriteString>
 8001aaa:	e013      	b.n	8001ad4 <_Z29displayConfirmationRateChangev+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 8001aac:	2132      	movs	r1, #50	; 0x32
 8001aae:	2016      	movs	r0, #22
 8001ab0:	f002 fe30 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	ca06      	ldmia	r2, {r1, r2}
 8001aba:	4811      	ldr	r0, [pc, #68]	; (8001b00 <_Z29displayConfirmationRateChangev+0xf4>)
 8001abc:	f002 fe04 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 8001ac0:	2132      	movs	r1, #50	; 0x32
 8001ac2:	202d      	movs	r0, #45	; 0x2d
 8001ac4:	f002 fe26 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <_Z29displayConfirmationRateChangev+0xd8>)
 8001aca:	2301      	movs	r3, #1
 8001acc:	ca06      	ldmia	r2, {r1, r2}
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <_Z29displayConfirmationRateChangev+0xf8>)
 8001ad0:	f002 fdfa 	bl	80046c8 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <_Z29displayConfirmationRateChangev+0xfc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fce3 	bl	80044a4 <ssd1306_UpdateScreen>
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	080096c0 	.word	0x080096c0
 8001aec:	080096d4 	.word	0x080096d4
 8001af0:	080096e4 	.word	0x080096e4
 8001af4:	080096f0 	.word	0x080096f0
 8001af8:	080096f4 	.word	0x080096f4
 8001afc:	200000d8 	.word	0x200000d8
 8001b00:	080096bc 	.word	0x080096bc
 8001b04:	080096b8 	.word	0x080096b8
 8001b08:	20000048 	.word	0x20000048

08001b0c <_Z31displayConfirmationOffsetChangev>:

void displayConfirmationOffsetChange()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f002 fca3 	bl	800445c <ssd1306_Fill>
	ssd1306_SetCursor(10, 10);
 8001b16:	210a      	movs	r1, #10
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f002 fdfb 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("The offset will", Font_7x10, White);
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <_Z31displayConfirmationOffsetChangev+0x90>)
 8001b20:	2301      	movs	r3, #1
 8001b22:	ca06      	ldmia	r2, {r1, r2}
 8001b24:	481e      	ldr	r0, [pc, #120]	; (8001ba0 <_Z31displayConfirmationOffsetChangev+0x94>)
 8001b26:	f002 fdcf 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(14, 22);
 8001b2a:	2116      	movs	r1, #22
 8001b2c:	200e      	movs	r0, #14
 8001b2e:	f002 fdf1 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("take effect on", Font_7x10, White);
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <_Z31displayConfirmationOffsetChangev+0x90>)
 8001b34:	2301      	movs	r3, #1
 8001b36:	ca06      	ldmia	r2, {r1, r2}
 8001b38:	481a      	ldr	r0, [pc, #104]	; (8001ba4 <_Z31displayConfirmationOffsetChangev+0x98>)
 8001b3a:	f002 fdc5 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(36, 34);
 8001b3e:	2122      	movs	r1, #34	; 0x22
 8001b40:	2024      	movs	r0, #36	; 0x24
 8001b42:	f002 fde7 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("next jam.", Font_7x10, White);
 8001b46:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <_Z31displayConfirmationOffsetChangev+0x90>)
 8001b48:	2301      	movs	r3, #1
 8001b4a:	ca06      	ldmia	r2, {r1, r2}
 8001b4c:	4816      	ldr	r0, [pc, #88]	; (8001ba8 <_Z31displayConfirmationOffsetChangev+0x9c>)
 8001b4e:	f002 fdbb 	bl	80046c8 <ssd1306_WriteString>
	//ssd1306_SetCursor(14, 34);
	//ssd1306_WriteString("Continue?", Font_7x10, White);
	//ssd1306_SetCursor(30, 48);
	//ssd1306_WriteString("NO", Font_11x18, White);
	ssd1306_SetCursor(52, 50);
 8001b52:	2132      	movs	r1, #50	; 0x32
 8001b54:	2034      	movs	r0, #52	; 0x34
 8001b56:	f002 fddd 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("OK", Font_7x10, White);
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <_Z31displayConfirmationOffsetChangev+0x90>)
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	ca06      	ldmia	r2, {r1, r2}
 8001b60:	4812      	ldr	r0, [pc, #72]	; (8001bac <_Z31displayConfirmationOffsetChangev+0xa0>)
 8001b62:	f002 fdb1 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(44, 50);
 8001b66:	2132      	movs	r1, #50	; 0x32
 8001b68:	202c      	movs	r0, #44	; 0x2c
 8001b6a:	f002 fdd3 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <_Z31displayConfirmationOffsetChangev+0x90>)
 8001b70:	2301      	movs	r3, #1
 8001b72:	ca06      	ldmia	r2, {r1, r2}
 8001b74:	480e      	ldr	r0, [pc, #56]	; (8001bb0 <_Z31displayConfirmationOffsetChangev+0xa4>)
 8001b76:	f002 fda7 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(66, 50);
 8001b7a:	2132      	movs	r1, #50	; 0x32
 8001b7c:	2042      	movs	r0, #66	; 0x42
 8001b7e:	f002 fdc9 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001b82:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <_Z31displayConfirmationOffsetChangev+0x90>)
 8001b84:	2301      	movs	r3, #1
 8001b86:	ca06      	ldmia	r2, {r1, r2}
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <_Z31displayConfirmationOffsetChangev+0xa8>)
 8001b8a:	f002 fd9d 	bl	80046c8 <ssd1306_WriteString>
	
	ssd1306_UpdateScreen(dispI2C);
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <_Z31displayConfirmationOffsetChangev+0xac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fc86 	bl	80044a4 <ssd1306_UpdateScreen>
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	080096f8 	.word	0x080096f8
 8001ba4:	08009708 	.word	0x08009708
 8001ba8:	08009718 	.word	0x08009718
 8001bac:	08009724 	.word	0x08009724
 8001bb0:	080096bc 	.word	0x080096bc
 8001bb4:	080096b8 	.word	0x080096b8
 8001bb8:	20000048 	.word	0x20000048

08001bbc <_Z24displayConfirmationRejamv>:

void displayConfirmationRejam()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f002 fc4b 	bl	800445c <ssd1306_Fill>
	ssd1306_SetCursor(12, 6);
 8001bc6:	2106      	movs	r1, #6
 8001bc8:	200c      	movs	r0, #12
 8001bca:	f002 fda3 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("This will clear", Font_7x10, White);
 8001bce:	4a31      	ldr	r2, [pc, #196]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	ca06      	ldmia	r2, {r1, r2}
 8001bd4:	4830      	ldr	r0, [pc, #192]	; (8001c98 <_Z24displayConfirmationRejamv+0xdc>)
 8001bd6:	f002 fd77 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(24, 18);
 8001bda:	2112      	movs	r1, #18
 8001bdc:	2018      	movs	r0, #24
 8001bde:	f002 fd99 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("current jam.", Font_7x10, White);
 8001be2:	4a2c      	ldr	r2, [pc, #176]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001be4:	2301      	movs	r3, #1
 8001be6:	ca06      	ldmia	r2, {r1, r2}
 8001be8:	482c      	ldr	r0, [pc, #176]	; (8001c9c <_Z24displayConfirmationRejamv+0xe0>)
 8001bea:	f002 fd6d 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(34, 32);
 8001bee:	2120      	movs	r1, #32
 8001bf0:	2022      	movs	r0, #34	; 0x22
 8001bf2:	f002 fd8f 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("Continue?", Font_7x10, White);
 8001bf6:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	ca06      	ldmia	r2, {r1, r2}
 8001bfc:	4828      	ldr	r0, [pc, #160]	; (8001ca0 <_Z24displayConfirmationRejamv+0xe4>)
 8001bfe:	f002 fd63 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(30, 50);
 8001c02:	2132      	movs	r1, #50	; 0x32
 8001c04:	201e      	movs	r0, #30
 8001c06:	f002 fd85 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("NO", Font_7x10, White);
 8001c0a:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	ca06      	ldmia	r2, {r1, r2}
 8001c10:	4824      	ldr	r0, [pc, #144]	; (8001ca4 <_Z24displayConfirmationRejamv+0xe8>)
 8001c12:	f002 fd59 	bl	80046c8 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 50);
 8001c16:	2132      	movs	r1, #50	; 0x32
 8001c18:	2050      	movs	r0, #80	; 0x50
 8001c1a:	f002 fd7b 	bl	8004714 <ssd1306_SetCursor>
	ssd1306_WriteString("YES", Font_7x10, White);
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001c20:	2301      	movs	r3, #1
 8001c22:	ca06      	ldmia	r2, {r1, r2}
 8001c24:	4820      	ldr	r0, [pc, #128]	; (8001ca8 <_Z24displayConfirmationRejamv+0xec>)
 8001c26:	f002 fd4f 	bl	80046c8 <ssd1306_WriteString>
	if (highlightYes)
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <_Z24displayConfirmationRejamv+0xf0>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d014      	beq.n	8001c5c <_Z24displayConfirmationRejamv+0xa0>
	{
		ssd1306_SetCursor(72, 50);
 8001c32:	2132      	movs	r1, #50	; 0x32
 8001c34:	2048      	movs	r0, #72	; 0x48
 8001c36:	f002 fd6d 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	ca06      	ldmia	r2, {r1, r2}
 8001c40:	481b      	ldr	r0, [pc, #108]	; (8001cb0 <_Z24displayConfirmationRejamv+0xf4>)
 8001c42:	f002 fd41 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(102, 50);
 8001c46:	2132      	movs	r1, #50	; 0x32
 8001c48:	2066      	movs	r0, #102	; 0x66
 8001c4a:	f002 fd63 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001c4e:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001c50:	2301      	movs	r3, #1
 8001c52:	ca06      	ldmia	r2, {r1, r2}
 8001c54:	4817      	ldr	r0, [pc, #92]	; (8001cb4 <_Z24displayConfirmationRejamv+0xf8>)
 8001c56:	f002 fd37 	bl	80046c8 <ssd1306_WriteString>
 8001c5a:	e013      	b.n	8001c84 <_Z24displayConfirmationRejamv+0xc8>
	}
	else
	{
		ssd1306_SetCursor(22, 50);
 8001c5c:	2132      	movs	r1, #50	; 0x32
 8001c5e:	2016      	movs	r0, #22
 8001c60:	f002 fd58 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString(">", Font_7x10, White);
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001c66:	2301      	movs	r3, #1
 8001c68:	ca06      	ldmia	r2, {r1, r2}
 8001c6a:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <_Z24displayConfirmationRejamv+0xf4>)
 8001c6c:	f002 fd2c 	bl	80046c8 <ssd1306_WriteString>
		ssd1306_SetCursor(45, 50);
 8001c70:	2132      	movs	r1, #50	; 0x32
 8001c72:	202d      	movs	r0, #45	; 0x2d
 8001c74:	f002 fd4e 	bl	8004714 <ssd1306_SetCursor>
		ssd1306_WriteString("<", Font_7x10, White);
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <_Z24displayConfirmationRejamv+0xd8>)
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	ca06      	ldmia	r2, {r1, r2}
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <_Z24displayConfirmationRejamv+0xf8>)
 8001c80:	f002 fd22 	bl	80046c8 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen(dispI2C);
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <_Z24displayConfirmationRejamv+0xfc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fc0b 	bl	80044a4 <ssd1306_UpdateScreen>
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000
 8001c98:	08009728 	.word	0x08009728
 8001c9c:	08009738 	.word	0x08009738
 8001ca0:	080096e4 	.word	0x080096e4
 8001ca4:	080096f0 	.word	0x080096f0
 8001ca8:	080096f4 	.word	0x080096f4
 8001cac:	200000d8 	.word	0x200000d8
 8001cb0:	080096bc 	.word	0x080096bc
 8001cb4:	080096b8 	.word	0x080096b8
 8001cb8:	20000048 	.word	0x20000048

08001cbc <_Z14displayBatteryv>:

void displayBattery()
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
	char battDisp[4];
	ssd1306_DrawBattery(batteryRemaining); //TODO BATTERY
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <_Z14displayBatteryv+0xec>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ccc:	f002 fd3a 	bl	8004744 <ssd1306_DrawBattery>
	ssd1306_SetCursor(34, 52);
 8001cd0:	2134      	movs	r1, #52	; 0x34
 8001cd2:	2022      	movs	r0, #34	; 0x22
 8001cd4:	f002 fd1e 	bl	8004714 <ssd1306_SetCursor>
	int battPrint = int(batteryRemaining * 100.0);
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <_Z14displayBatteryv+0xec>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fbdb 	bl	8000498 <__aeabi_f2d>
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <_Z14displayBatteryv+0xf0>)
 8001ce8:	f7fe fc2e 	bl	8000548 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe fe3a 	bl	800096c <__aeabi_d2iz>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	607b      	str	r3, [r7, #4]
	if (battPrint == 100)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d108      	bne.n	8001d14 <_Z14displayBatteryv+0x58>
	{
		battDisp[0] = '1';
 8001d02:	2331      	movs	r3, #49	; 0x31
 8001d04:	703b      	strb	r3, [r7, #0]
		battDisp[1] = '0';
 8001d06:	2330      	movs	r3, #48	; 0x30
 8001d08:	707b      	strb	r3, [r7, #1]
		battDisp[2] = '0';
 8001d0a:	2330      	movs	r3, #48	; 0x30
 8001d0c:	70bb      	strb	r3, [r7, #2]
		battDisp[3] = '%';
 8001d0e:	2325      	movs	r3, #37	; 0x25
 8001d10:	70fb      	strb	r3, [r7, #3]
 8001d12:	e03d      	b.n	8001d90 <_Z14displayBatteryv+0xd4>
	}
	else
	{
		battDisp[0] = ' ';
 8001d14:	2320      	movs	r3, #32
 8001d16:	703b      	strb	r3, [r7, #0]
		battDisp[1] = foo[battPrint / 10];
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <_Z14displayBatteryv+0xf4>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4925      	ldr	r1, [pc, #148]	; (8001db4 <_Z14displayBatteryv+0xf8>)
 8001d20:	fb81 0103 	smull	r0, r1, r1, r3
 8001d24:	1089      	asrs	r1, r1, #2
 8001d26:	17db      	asrs	r3, r3, #31
 8001d28:	1acb      	subs	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	707b      	strb	r3, [r7, #1]
		battDisp[2] = foo[battPrint % 10];
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <_Z14displayBatteryv+0xf4>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <_Z14displayBatteryv+0xf8>)
 8001d38:	fb83 1302 	smull	r1, r3, r3, r2
 8001d3c:	1099      	asrs	r1, r3, #2
 8001d3e:	17d3      	asrs	r3, r2, #31
 8001d40:	1ac9      	subs	r1, r1, r3
 8001d42:	460b      	mov	r3, r1
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	1ad1      	subs	r1, r2, r3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4403      	add	r3, r0
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	70bb      	strb	r3, [r7, #2]
		if (!stat1 && stat2)
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <_Z14displayBatteryv+0xfc>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <_Z14displayBatteryv+0xb4>
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <_Z14displayBatteryv+0x100>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <_Z14displayBatteryv+0xb4>
			battDisp[3] = '^';
 8001d6a:	235e      	movs	r3, #94	; 0x5e
 8001d6c:	70fb      	strb	r3, [r7, #3]
 8001d6e:	e00f      	b.n	8001d90 <_Z14displayBatteryv+0xd4>
		else if (stat1 && !stat2)
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <_Z14displayBatteryv+0xfc>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <_Z14displayBatteryv+0xd0>
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_Z14displayBatteryv+0x100>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f083 0301 	eor.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <_Z14displayBatteryv+0xd0>
			battDisp[3] = '!';
 8001d86:	2321      	movs	r3, #33	; 0x21
 8001d88:	70fb      	strb	r3, [r7, #3]
 8001d8a:	e001      	b.n	8001d90 <_Z14displayBatteryv+0xd4>
		else
			battDisp[3] = '%';
 8001d8c:	2325      	movs	r3, #37	; 0x25
 8001d8e:	70fb      	strb	r3, [r7, #3]
	}
	battDisp[4] = ' ';
 8001d90:	2320      	movs	r3, #32
 8001d92:	713b      	strb	r3, [r7, #4]
	ssd1306_WriteString(battDisp, Font_7x10, White);
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <_Z14displayBatteryv+0x104>)
 8001d96:	4638      	mov	r0, r7
 8001d98:	2301      	movs	r3, #1
 8001d9a:	ca06      	ldmia	r2, {r1, r2}
 8001d9c:	f002 fc94 	bl	80046c8 <ssd1306_WriteString>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200000a4 	.word	0x200000a4
 8001dac:	40590000 	.word	0x40590000
 8001db0:	20000010 	.word	0x20000010
 8001db4:	66666667 	.word	0x66666667
 8001db8:	200000ac 	.word	0x200000ac
 8001dbc:	200000ad 	.word	0x200000ad
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <_Z15timecodeDisplayv>:
void timecodeDisplay()
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	tcDisplay[0] = foo[hr / 10];
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <_Z15timecodeDisplayv+0x124>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a47      	ldr	r2, [pc, #284]	; (8001eec <_Z15timecodeDisplayv+0x128>)
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	4947      	ldr	r1, [pc, #284]	; (8001ef0 <_Z15timecodeDisplayv+0x12c>)
 8001dd2:	fba1 1202 	umull	r1, r2, r1, r2
 8001dd6:	08d2      	lsrs	r2, r2, #3
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	4413      	add	r3, r2
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	4b45      	ldr	r3, [pc, #276]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001de0:	701a      	strb	r2, [r3, #0]
	tcDisplay[1] = foo[hr % 10];
 8001de2:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <_Z15timecodeDisplayv+0x124>)
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <_Z15timecodeDisplayv+0x128>)
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <_Z15timecodeDisplayv+0x12c>)
 8001dec:	fba3 1302 	umull	r1, r3, r3, r2
 8001df0:	08d9      	lsrs	r1, r3, #3
 8001df2:	460b      	mov	r3, r1
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4403      	add	r3, r0
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001e04:	705a      	strb	r2, [r3, #1]
	tcDisplay[2] = ':';
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001e08:	223a      	movs	r2, #58	; 0x3a
 8001e0a:	709a      	strb	r2, [r3, #2]
	tcDisplay[3] = foo[mn / 10];
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <_Z15timecodeDisplayv+0x124>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a39      	ldr	r2, [pc, #228]	; (8001ef8 <_Z15timecodeDisplayv+0x134>)
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	4936      	ldr	r1, [pc, #216]	; (8001ef0 <_Z15timecodeDisplayv+0x12c>)
 8001e16:	fba1 1202 	umull	r1, r2, r1, r2
 8001e1a:	08d2      	lsrs	r2, r2, #3
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	4413      	add	r3, r2
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001e24:	70da      	strb	r2, [r3, #3]
	tcDisplay[4] = foo[mn % 10];
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <_Z15timecodeDisplayv+0x124>)
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <_Z15timecodeDisplayv+0x134>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <_Z15timecodeDisplayv+0x12c>)
 8001e30:	fba3 1302 	umull	r1, r3, r3, r2
 8001e34:	08d9      	lsrs	r1, r3, #3
 8001e36:	460b      	mov	r3, r1
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4403      	add	r3, r0
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001e48:	711a      	strb	r2, [r3, #4]
	tcDisplay[5] = ':';
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001e4c:	223a      	movs	r2, #58	; 0x3a
 8001e4e:	715a      	strb	r2, [r3, #5]
	tcDisplay[6] = foo[sc / 10];
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <_Z15timecodeDisplayv+0x124>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a29      	ldr	r2, [pc, #164]	; (8001efc <_Z15timecodeDisplayv+0x138>)
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	4925      	ldr	r1, [pc, #148]	; (8001ef0 <_Z15timecodeDisplayv+0x12c>)
 8001e5a:	fba1 1202 	umull	r1, r2, r1, r2
 8001e5e:	08d2      	lsrs	r2, r2, #3
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	4413      	add	r3, r2
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001e68:	719a      	strb	r2, [r3, #6]
	tcDisplay[7] = foo[sc % 10];
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <_Z15timecodeDisplayv+0x124>)
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <_Z15timecodeDisplayv+0x138>)
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <_Z15timecodeDisplayv+0x12c>)
 8001e74:	fba3 1302 	umull	r1, r3, r3, r2
 8001e78:	08d9      	lsrs	r1, r3, #3
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4403      	add	r3, r0
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001e8c:	71da      	strb	r2, [r3, #7]
	tcDisplay[8] = (frameRate == 4) ? ';' : ':';
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <_Z15timecodeDisplayv+0x13c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d101      	bne.n	8001e9a <_Z15timecodeDisplayv+0xd6>
 8001e96:	223b      	movs	r2, #59	; 0x3b
 8001e98:	e000      	b.n	8001e9c <_Z15timecodeDisplayv+0xd8>
 8001e9a:	223a      	movs	r2, #58	; 0x3a
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001e9e:	721a      	strb	r2, [r3, #8]
	tcDisplay[9] = foo[fr / 10];
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <_Z15timecodeDisplayv+0x124>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <_Z15timecodeDisplayv+0x140>)
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	4911      	ldr	r1, [pc, #68]	; (8001ef0 <_Z15timecodeDisplayv+0x12c>)
 8001eaa:	fba1 1202 	umull	r1, r2, r1, r2
 8001eae:	08d2      	lsrs	r2, r2, #3
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001eb8:	725a      	strb	r2, [r3, #9]
	tcDisplay[10] = foo[fr % 10];
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <_Z15timecodeDisplayv+0x124>)
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_Z15timecodeDisplayv+0x140>)
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <_Z15timecodeDisplayv+0x12c>)
 8001ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ec8:	08d9      	lsrs	r1, r3, #3
 8001eca:	460b      	mov	r3, r1
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4403      	add	r3, r0
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <_Z15timecodeDisplayv+0x130>)
 8001edc:	729a      	strb	r2, [r3, #10]
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	200000a8 	.word	0x200000a8
 8001ef0:	cccccccd 	.word	0xcccccccd
 8001ef4:	20000084 	.word	0x20000084
 8001ef8:	200000a9 	.word	0x200000a9
 8001efc:	200000aa 	.word	0x200000aa
 8001f00:	20000099 	.word	0x20000099
 8001f04:	200000ab 	.word	0x200000ab

08001f08 <_Z11initDisplayv>:
void initDisplay()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	 if (ssd1306_Init(dispI2C) != 0) {
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <_Z11initDisplayv+0x28>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 f983 	bl	800421c <ssd1306_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <_Z11initDisplayv+0x22>
     Error_Handler();
 8001f26:	f002 f95d 	bl	80041e4 <Error_Handler>
   }
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000048 	.word	0x20000048

08001f34 <_Z8menuLoopv>:
uint8_t offsetAdjust;
bool menuItemSelect = false;
uint8_t menuItem = 0;
bool highlightYes = false;
void menuLoop()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
    bool inMenu = true;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	71fb      	strb	r3, [r7, #7]
    rateAdjust = frameRate;
 8001f3e:	4b88      	ldr	r3, [pc, #544]	; (8002160 <_Z8menuLoopv+0x22c>)
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b88      	ldr	r3, [pc, #544]	; (8002164 <_Z8menuLoopv+0x230>)
 8001f44:	701a      	strb	r2, [r3, #0]
    offsetAdjust = intOffset;
 8001f46:	4b88      	ldr	r3, [pc, #544]	; (8002168 <_Z8menuLoopv+0x234>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <_Z8menuLoopv+0x238>)
 8001f4c:	701a      	strb	r2, [r3, #0]
	 * check if item is exit
	 * timeout for menu inactivity 10 seconds?
	 */
    

    displayTimeout = HAL_GetTick();
 8001f4e:	f003 f841 	bl	8004fd4 <HAL_GetTick>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a86      	ldr	r2, [pc, #536]	; (8002170 <_Z8menuLoopv+0x23c>)
 8001f56:	6013      	str	r3, [r2, #0]
    while (GPIOC->IDR & GPIO_PIN_13)
 8001f58:	4b86      	ldr	r3, [pc, #536]	; (8002174 <_Z8menuLoopv+0x240>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d000      	beq.n	8001f70 <_Z8menuLoopv+0x3c>
 8001f6e:	e7f3      	b.n	8001f58 <_Z8menuLoopv+0x24>
    {
        //While still holding down the menu button
    }
    while (inMenu)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 81d7 	beq.w	8002326 <_Z8menuLoopv+0x3f2>
    {
        updateDisplay(2);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f7ff f92f 	bl	80011dc <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 10000)
 8001f7e:	f003 f829 	bl	8004fd4 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <_Z8menuLoopv+0x23c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	bf8c      	ite	hi
 8001f92:	2301      	movhi	r3, #1
 8001f94:	2300      	movls	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <_Z8menuLoopv+0x6c>
        {
            inMenu = false;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71fb      	strb	r3, [r7, #7]
        }
        if (GPIOB->IDR & GPIO_PIN_9)
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <_Z8menuLoopv+0x244>)
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d065      	beq.n	8002082 <_Z8menuLoopv+0x14e>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8001fb6:	f003 f80d 	bl	8004fd4 <HAL_GetTick>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a6c      	ldr	r2, [pc, #432]	; (8002170 <_Z8menuLoopv+0x23c>)
 8001fbe:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8001fc0:	f003 f808 	bl	8004fd4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <_Z8menuLoopv+0x248>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001fd0:	bf8c      	ite	hi
 8001fd2:	2301      	movhi	r3, #1
 8001fd4:	2300      	movls	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d052      	beq.n	8002082 <_Z8menuLoopv+0x14e>
            {
                if (menuItemSelect)
 8001fdc:	4b68      	ldr	r3, [pc, #416]	; (8002180 <_Z8menuLoopv+0x24c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03c      	beq.n	800205e <_Z8menuLoopv+0x12a>
                { //Menu item selected, scrolling through values
                    switch (menuItem)
 8001fe4:	4b67      	ldr	r3, [pc, #412]	; (8002184 <_Z8menuLoopv+0x250>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d845      	bhi.n	8002078 <_Z8menuLoopv+0x144>
 8001fec:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <_Z8menuLoopv+0xc0>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	08002005 	.word	0x08002005
 8001ff8:	08002023 	.word	0x08002023
 8001ffc:	08002079 	.word	0x08002079
 8002000:	08002041 	.word	0x08002041
                    {
                    case 0: //Rate
                        if (rateAdjust == 0)
 8002004:	4b57      	ldr	r3, [pc, #348]	; (8002164 <_Z8menuLoopv+0x230>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d103      	bne.n	8002014 <_Z8menuLoopv+0xe0>
                            rateAdjust = 5;
 800200c:	4b55      	ldr	r3, [pc, #340]	; (8002164 <_Z8menuLoopv+0x230>)
 800200e:	2205      	movs	r2, #5
 8002010:	701a      	strb	r2, [r3, #0]
                        else
                            rateAdjust--;
                        break;
 8002012:	e031      	b.n	8002078 <_Z8menuLoopv+0x144>
                            rateAdjust--;
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <_Z8menuLoopv+0x230>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3b01      	subs	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <_Z8menuLoopv+0x230>)
 800201e:	701a      	strb	r2, [r3, #0]
                        break;
 8002020:	e02a      	b.n	8002078 <_Z8menuLoopv+0x144>
                    case 1: //Offset
                        if (offsetAdjust == 0)
 8002022:	4b52      	ldr	r3, [pc, #328]	; (800216c <_Z8menuLoopv+0x238>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <_Z8menuLoopv+0xfe>
                            offsetAdjust = 0;
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <_Z8menuLoopv+0x238>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
                        else
                            offsetAdjust--;
                        break;
 8002030:	e022      	b.n	8002078 <_Z8menuLoopv+0x144>
                            offsetAdjust--;
 8002032:	4b4e      	ldr	r3, [pc, #312]	; (800216c <_Z8menuLoopv+0x238>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b4c      	ldr	r3, [pc, #304]	; (800216c <_Z8menuLoopv+0x238>)
 800203c:	701a      	strb	r2, [r3, #0]
                        break;
 800203e:	e01b      	b.n	8002078 <_Z8menuLoopv+0x144>
                    case 2:
                        break;
                    case 3:
                        if (autoOff == 0)
 8002040:	4b51      	ldr	r3, [pc, #324]	; (8002188 <_Z8menuLoopv+0x254>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d103      	bne.n	8002050 <_Z8menuLoopv+0x11c>
                            autoOff = 4;
 8002048:	4b4f      	ldr	r3, [pc, #316]	; (8002188 <_Z8menuLoopv+0x254>)
 800204a:	2204      	movs	r2, #4
 800204c:	701a      	strb	r2, [r3, #0]
                        else
                            autoOff--;
                        break;
 800204e:	e013      	b.n	8002078 <_Z8menuLoopv+0x144>
                            autoOff--;
 8002050:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <_Z8menuLoopv+0x254>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <_Z8menuLoopv+0x254>)
 800205a:	701a      	strb	r2, [r3, #0]
                        break;
 800205c:	e00c      	b.n	8002078 <_Z8menuLoopv+0x144>
                        
                    }
                }
                else
                { //Scrolling through menu
                    menuItem++;
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <_Z8menuLoopv+0x250>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <_Z8menuLoopv+0x250>)
 8002068:	701a      	strb	r2, [r3, #0]
                    if (menuItem > 4)
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <_Z8menuLoopv+0x250>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d902      	bls.n	8002078 <_Z8menuLoopv+0x144>
                        menuItem = 0;
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <_Z8menuLoopv+0x250>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8002078:	f002 ffac 	bl	8004fd4 <HAL_GetTick>
 800207c:	4603      	mov	r3, r0
 800207e:	4a3f      	ldr	r2, [pc, #252]	; (800217c <_Z8menuLoopv+0x248>)
 8002080:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <_Z8menuLoopv+0x244>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d07f      	beq.n	8002198 <_Z8menuLoopv+0x264>
        { //Minus button

            displayTimeout = HAL_GetTick();
 8002098:	f002 ff9c 	bl	8004fd4 <HAL_GetTick>
 800209c:	4603      	mov	r3, r0
 800209e:	4a34      	ldr	r2, [pc, #208]	; (8002170 <_Z8menuLoopv+0x23c>)
 80020a0:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 80020a2:	f002 ff97 	bl	8004fd4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <_Z8menuLoopv+0x248>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80020b2:	bf8c      	ite	hi
 80020b4:	2301      	movhi	r3, #1
 80020b6:	2300      	movls	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d06c      	beq.n	8002198 <_Z8menuLoopv+0x264>
            {
                if (menuItemSelect)
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <_Z8menuLoopv+0x24c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d038      	beq.n	8002138 <_Z8menuLoopv+0x204>
                { //Scrolling through option
                    switch (menuItem)
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <_Z8menuLoopv+0x250>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d85f      	bhi.n	800218e <_Z8menuLoopv+0x25a>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <_Z8menuLoopv+0x1a0>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	08002101 	.word	0x08002101
 80020dc:	0800218f 	.word	0x0800218f
 80020e0:	0800211d 	.word	0x0800211d
                    {
                    case 0:
                        rateAdjust++;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <_Z8menuLoopv+0x230>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <_Z8menuLoopv+0x230>)
 80020ee:	701a      	strb	r2, [r3, #0]
                        if (rateAdjust > 5)
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <_Z8menuLoopv+0x230>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d92e      	bls.n	8002156 <_Z8menuLoopv+0x222>
                            rateAdjust = 0;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <_Z8menuLoopv+0x230>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
                        break;
 80020fe:	e02a      	b.n	8002156 <_Z8menuLoopv+0x222>
                        
                    case 1:
                        offsetAdjust++;
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <_Z8menuLoopv+0x238>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <_Z8menuLoopv+0x238>)
 800210a:	701a      	strb	r2, [r3, #0]
                        if (offsetAdjust > 60)
 800210c:	4b17      	ldr	r3, [pc, #92]	; (800216c <_Z8menuLoopv+0x238>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b3c      	cmp	r3, #60	; 0x3c
 8002112:	d922      	bls.n	800215a <_Z8menuLoopv+0x226>
                            offsetAdjust = 60;
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <_Z8menuLoopv+0x238>)
 8002116:	223c      	movs	r2, #60	; 0x3c
 8002118:	701a      	strb	r2, [r3, #0]
                        break;
 800211a:	e01e      	b.n	800215a <_Z8menuLoopv+0x226>
                    case 2:
                        break;
                    case 3:
                        autoOff++;
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <_Z8menuLoopv+0x254>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <_Z8menuLoopv+0x254>)
 8002126:	701a      	strb	r2, [r3, #0]
                        if (autoOff > 4)
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <_Z8menuLoopv+0x254>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b04      	cmp	r3, #4
 800212e:	d92d      	bls.n	800218c <_Z8menuLoopv+0x258>
                            autoOff = 0;
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <_Z8menuLoopv+0x254>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
                        break;
 8002136:	e029      	b.n	800218c <_Z8menuLoopv+0x258>
                    }
                }
                else
                { //Scrolling through menu
                    if (menuItem == 0)
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <_Z8menuLoopv+0x250>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <_Z8menuLoopv+0x214>
                        menuItem = 4;
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <_Z8menuLoopv+0x250>)
 8002142:	2204      	movs	r2, #4
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e022      	b.n	800218e <_Z8menuLoopv+0x25a>
                    else
                        menuItem--;
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <_Z8menuLoopv+0x250>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	3b01      	subs	r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <_Z8menuLoopv+0x250>)
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e01b      	b.n	800218e <_Z8menuLoopv+0x25a>
                        break;
 8002156:	bf00      	nop
 8002158:	e019      	b.n	800218e <_Z8menuLoopv+0x25a>
                        break;
 800215a:	bf00      	nop
 800215c:	e017      	b.n	800218e <_Z8menuLoopv+0x25a>
 800215e:	bf00      	nop
 8002160:	20000099 	.word	0x20000099
 8002164:	200000d4 	.word	0x200000d4
 8002168:	20000014 	.word	0x20000014
 800216c:	200000d5 	.word	0x200000d5
 8002170:	200000cc 	.word	0x200000cc
 8002174:	48000800 	.word	0x48000800
 8002178:	48000400 	.word	0x48000400
 800217c:	200000d0 	.word	0x200000d0
 8002180:	200000d6 	.word	0x200000d6
 8002184:	200000d7 	.word	0x200000d7
 8002188:	200000a0 	.word	0x200000a0
                        break;
 800218c:	bf00      	nop
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 800218e:	f002 ff21 	bl	8004fd4 <HAL_GetTick>
 8002192:	4603      	mov	r3, r0
 8002194:	4a67      	ldr	r2, [pc, #412]	; (8002334 <_Z8menuLoopv+0x400>)
 8002196:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8002198:	4b67      	ldr	r3, [pc, #412]	; (8002338 <_Z8menuLoopv+0x404>)
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f43f aee0 	beq.w	8001f70 <_Z8menuLoopv+0x3c>
        { //Menu button
            displayTimeout = HAL_GetTick();
 80021b0:	f002 ff10 	bl	8004fd4 <HAL_GetTick>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a61      	ldr	r2, [pc, #388]	; (800233c <_Z8menuLoopv+0x408>)
 80021b8:	6013      	str	r3, [r2, #0]
            if (!(GPIOB->IDR & GPIO_PIN_8))
 80021ba:	4b61      	ldr	r3, [pc, #388]	; (8002340 <_Z8menuLoopv+0x40c>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf0c      	ite	eq
 80021c6:	2301      	moveq	r3, #1
 80021c8:	2300      	movne	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f43f aecf 	beq.w	8001f70 <_Z8menuLoopv+0x3c>
            {

                displayTimeout = HAL_GetTick();
 80021d2:	f002 feff 	bl	8004fd4 <HAL_GetTick>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a58      	ldr	r2, [pc, #352]	; (800233c <_Z8menuLoopv+0x408>)
 80021da:	6013      	str	r3, [r2, #0]
                if (HAL_GetTick() - buttonTime > 350) //Debounce
 80021dc:	f002 fefa 	bl	8004fd4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b54      	ldr	r3, [pc, #336]	; (8002334 <_Z8menuLoopv+0x400>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80021ec:	bf8c      	ite	hi
 80021ee:	2301      	movhi	r3, #1
 80021f0:	2300      	movls	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f43f aebb 	beq.w	8001f70 <_Z8menuLoopv+0x3c>
                {
                    if (!menuItemSelect)
 80021fa:	4b52      	ldr	r3, [pc, #328]	; (8002344 <_Z8menuLoopv+0x410>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d03b      	beq.n	8002280 <_Z8menuLoopv+0x34c>
                    { //if scrolling through menu items
                        switch (menuItem)
 8002208:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <_Z8menuLoopv+0x414>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b04      	cmp	r3, #4
 800220e:	f200 8084 	bhi.w	800231a <_Z8menuLoopv+0x3e6>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <_Z8menuLoopv+0x2e4>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	0800222d 	.word	0x0800222d
 800221c:	08002235 	.word	0x08002235
 8002220:	0800223d 	.word	0x0800223d
 8002224:	08002263 	.word	0x08002263
 8002228:	0800226b 	.word	0x0800226b
                        {
                        case 0: //Rate
                            menuItemSelect = true;
 800222c:	4b45      	ldr	r3, [pc, #276]	; (8002344 <_Z8menuLoopv+0x410>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
                            break;
 8002232:	e072      	b.n	800231a <_Z8menuLoopv+0x3e6>
                        case 1: //Offset
                            menuItemSelect = true;
 8002234:	4b43      	ldr	r3, [pc, #268]	; (8002344 <_Z8menuLoopv+0x410>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
                            //offsetAlert();
                            ///while (GPIOC->IDR & GPIO_PIN_13)
                            //{displayTimeout = HAL_GetTick();}
                            break;
 800223a:	e06e      	b.n	800231a <_Z8menuLoopv+0x3e6>
                        case 2: //Re-jam
                            reJamAlert();
 800223c:	f000 f9c4 	bl	80025c8 <_Z10reJamAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 8002240:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <_Z8menuLoopv+0x404>)
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d060      	beq.n	8002318 <_Z8menuLoopv+0x3e4>
                            {displayTimeout = HAL_GetTick();}
 8002256:	f002 febd 	bl	8004fd4 <HAL_GetTick>
 800225a:	4603      	mov	r3, r0
 800225c:	4a37      	ldr	r2, [pc, #220]	; (800233c <_Z8menuLoopv+0x408>)
 800225e:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 8002260:	e7ee      	b.n	8002240 <_Z8menuLoopv+0x30c>
                            break;
                        case 3: //Auto-Off
                            menuItemSelect = true;
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <_Z8menuLoopv+0x410>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
                            break;
 8002268:	e057      	b.n	800231a <_Z8menuLoopv+0x3e6>
                        case 4: //Exit menu
                            buttonTime = HAL_GetTick();
 800226a:	f002 feb3 	bl	8004fd4 <HAL_GetTick>
 800226e:	4603      	mov	r3, r0
 8002270:	4a30      	ldr	r2, [pc, #192]	; (8002334 <_Z8menuLoopv+0x400>)
 8002272:	6013      	str	r3, [r2, #0]
                            //menuCount = HAL_GetTick();
                            //GPIOH->ODR |= GPIO_PIN_3; //Not sure what this does
                            //Write to EEPROM
                            inMenu = false;
 8002274:	2300      	movs	r3, #0
 8002276:	71fb      	strb	r3, [r7, #7]
                            uptimeMinutes = 0;
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <_Z8menuLoopv+0x418>)
 800227a:	2200      	movs	r2, #0
 800227c:	801a      	strh	r2, [r3, #0]
                            break;
 800227e:	e04c      	b.n	800231a <_Z8menuLoopv+0x3e6>
                        }
                    }
                    else //Exit menu option
                    {
                        switch (menuItem)
 8002280:	4b31      	ldr	r3, [pc, #196]	; (8002348 <_Z8menuLoopv+0x414>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d848      	bhi.n	800231a <_Z8menuLoopv+0x3e6>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <_Z8menuLoopv+0x35c>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022d7 	.word	0x080022d7
 8002298:	08002305 	.word	0x08002305
 800229c:	08002311 	.word	0x08002311
                        {
                        case 0: //Rate
                            menuItemSelect = false;
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <_Z8menuLoopv+0x410>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
                            rateAlert();
 80022a6:	f000 f857 	bl	8002358 <_Z9rateAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 80022aa:	4b23      	ldr	r3, [pc, #140]	; (8002338 <_Z8menuLoopv+0x404>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <_Z8menuLoopv+0x398>
                            {displayTimeout = HAL_GetTick();}
 80022c0:	f002 fe88 	bl	8004fd4 <HAL_GetTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <_Z8menuLoopv+0x408>)
 80022c8:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 80022ca:	e7ee      	b.n	80022aa <_Z8menuLoopv+0x376>
                            rateAdjust = frameRate;
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <_Z8menuLoopv+0x41c>)
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <_Z8menuLoopv+0x420>)
 80022d2:	701a      	strb	r2, [r3, #0]
                            break;
 80022d4:	e021      	b.n	800231a <_Z8menuLoopv+0x3e6>
                        case 1: //Offset
                            offsetAlert();
 80022d6:	f000 f909 	bl	80024ec <_Z11offsetAlertv>
                            while (GPIOC->IDR & GPIO_PIN_13)
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <_Z8menuLoopv+0x404>)
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <_Z8menuLoopv+0x3c8>
                            {displayTimeout = HAL_GetTick();}
 80022f0:	f002 fe70 	bl	8004fd4 <HAL_GetTick>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <_Z8menuLoopv+0x408>)
 80022f8:	6013      	str	r3, [r2, #0]
                            while (GPIOC->IDR & GPIO_PIN_13)
 80022fa:	e7ee      	b.n	80022da <_Z8menuLoopv+0x3a6>
                            menuItemSelect = false;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <_Z8menuLoopv+0x410>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
                            break;
 8002302:	e00a      	b.n	800231a <_Z8menuLoopv+0x3e6>
                        case 2: //Re-Jam
                            reJamAlert();
 8002304:	f000 f960 	bl	80025c8 <_Z10reJamAlertv>
                            menuItemSelect = false;
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <_Z8menuLoopv+0x410>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
                            break;
 800230e:	e004      	b.n	800231a <_Z8menuLoopv+0x3e6>
                        case 3: //Auto-Off
                            menuItemSelect = false;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <_Z8menuLoopv+0x410>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
                            break;
 8002316:	e000      	b.n	800231a <_Z8menuLoopv+0x3e6>
                            break;
 8002318:	bf00      	nop
                        }
                    }
                    buttonTime = HAL_GetTick(); //Debounce timer
 800231a:	f002 fe5b 	bl	8004fd4 <HAL_GetTick>
 800231e:	4603      	mov	r3, r0
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <_Z8menuLoopv+0x400>)
 8002322:	6013      	str	r3, [r2, #0]
    while (inMenu)
 8002324:	e624      	b.n	8001f70 <_Z8menuLoopv+0x3c>
                }
            }
        }
    }
    updateDisplay(0x0);
 8002326:	2000      	movs	r0, #0
 8002328:	f7fe ff58 	bl	80011dc <_Z13updateDisplayh>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200000d0 	.word	0x200000d0
 8002338:	48000800 	.word	0x48000800
 800233c:	200000cc 	.word	0x200000cc
 8002340:	48000400 	.word	0x48000400
 8002344:	200000d6 	.word	0x200000d6
 8002348:	200000d7 	.word	0x200000d7
 800234c:	200000a2 	.word	0x200000a2
 8002350:	20000099 	.word	0x20000099
 8002354:	200000d4 	.word	0x200000d4

08002358 <_Z9rateAlertv>:
        break;
    }
}

void rateAlert()
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
    bool inLoop = true;
 800235e:	2301      	movs	r3, #1
 8002360:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <_Z9rateAlertv+0x178>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x5);
 8002368:	2005      	movs	r0, #5
 800236a:	f7fe ff37 	bl	80011dc <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 800236e:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <_Z9rateAlertv+0x17c>)
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf14      	ite	ne
 800237a:	2301      	movne	r3, #1
 800237c:	2300      	moveq	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d000      	beq.n	8002386 <_Z9rateAlertv+0x2e>
 8002384:	e7f3      	b.n	800236e <_Z9rateAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 809c 	beq.w	80024c6 <_Z9rateAlertv+0x16e>
    {
        updateDisplay(0x5);
 800238e:	2005      	movs	r0, #5
 8002390:	f7fe ff24 	bl	80011dc <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8002394:	f002 fe1e 	bl	8004fd4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <_Z9rateAlertv+0x180>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bf8c      	ite	hi
 80023a8:	2301      	movhi	r3, #1
 80023aa:	2300      	movls	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <_Z9rateAlertv+0x64>
        {
            highlightYes = false;
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <_Z9rateAlertv+0x178>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 80023b8:	2300      	movs	r3, #0
 80023ba:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 80023bc:	4b47      	ldr	r3, [pc, #284]	; (80024dc <_Z9rateAlertv+0x184>)
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01e      	beq.n	8002410 <_Z9rateAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 80023d2:	f002 fdff 	bl	8004fd4 <HAL_GetTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <_Z9rateAlertv+0x180>)
 80023da:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 80023dc:	f002 fdfa 	bl	8004fd4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <_Z9rateAlertv+0x188>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80023ec:	bf8c      	ite	hi
 80023ee:	2301      	movhi	r3, #1
 80023f0:	2300      	movls	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <_Z9rateAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <_Z9rateAlertv+0x178>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f083 0301 	eor.w	r3, r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <_Z9rateAlertv+0x178>)
 8002404:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8002406:	f002 fde5 	bl	8004fd4 <HAL_GetTick>
 800240a:	4603      	mov	r3, r0
 800240c:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <_Z9rateAlertv+0x188>)
 800240e:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <_Z9rateAlertv+0x184>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d01e      	beq.n	8002464 <_Z9rateAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 8002426:	f002 fdd5 	bl	8004fd4 <HAL_GetTick>
 800242a:	4603      	mov	r3, r0
 800242c:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <_Z9rateAlertv+0x180>)
 800242e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002430:	f002 fdd0 	bl	8004fd4 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	4b2a      	ldr	r3, [pc, #168]	; (80024e0 <_Z9rateAlertv+0x188>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002440:	bf8c      	ite	hi
 8002442:	2301      	movhi	r3, #1
 8002444:	2300      	movls	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <_Z9rateAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 800244c:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <_Z9rateAlertv+0x178>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <_Z9rateAlertv+0x178>)
 8002458:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 800245a:	f002 fdbb 	bl	8004fd4 <HAL_GetTick>
 800245e:	4603      	mov	r3, r0
 8002460:	4a1f      	ldr	r2, [pc, #124]	; (80024e0 <_Z9rateAlertv+0x188>)
 8002462:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <_Z9rateAlertv+0x17c>)
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d085      	beq.n	8002386 <_Z9rateAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 800247a:	f002 fdab 	bl	8004fd4 <HAL_GetTick>
 800247e:	4603      	mov	r3, r0
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <_Z9rateAlertv+0x180>)
 8002482:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002484:	f002 fda6 	bl	8004fd4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <_Z9rateAlertv+0x188>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002494:	bf8c      	ite	hi
 8002496:	2301      	movhi	r3, #1
 8002498:	2300      	movls	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	f43f af72 	beq.w	8002386 <_Z9rateAlertv+0x2e>
            {
                if (highlightYes)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <_Z9rateAlertv+0x178>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <_Z9rateAlertv+0x16a>
                {
                    frameRate = rateAdjust;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <_Z9rateAlertv+0x18c>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <_Z9rateAlertv+0x190>)
 80024b0:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 80024b2:	f000 fa19 	bl	80028e8 <_Z13resetTimecodev>
                    highlightYes = false;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <_Z9rateAlertv+0x178>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
                    inLoop = false;
 80024bc:	2300      	movs	r3, #0
 80024be:	71fb      	strb	r3, [r7, #7]
                    break;
 80024c0:	e001      	b.n	80024c6 <_Z9rateAlertv+0x16e>
                }
                inLoop = false;
 80024c2:	2300      	movs	r3, #0
 80024c4:	71fb      	strb	r3, [r7, #7]
                break;
                buttonTime = HAL_GetTick(); //Debounce timer
            }
        }
    }
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200000d8 	.word	0x200000d8
 80024d4:	48000800 	.word	0x48000800
 80024d8:	200000cc 	.word	0x200000cc
 80024dc:	48000400 	.word	0x48000400
 80024e0:	200000d0 	.word	0x200000d0
 80024e4:	200000d4 	.word	0x200000d4
 80024e8:	20000099 	.word	0x20000099

080024ec <_Z11offsetAlertv>:

void offsetAlert()
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
    bool inLoop = true;
 80024f2:	2301      	movs	r3, #1
 80024f4:	71fb      	strb	r3, [r7, #7]
    updateDisplay(0x6);
 80024f6:	2006      	movs	r0, #6
 80024f8:	f7fe fe70 	bl	80011dc <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <_Z11offsetAlertv+0xc4>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf14      	ite	ne
 8002508:	2301      	movne	r3, #1
 800250a:	2300      	moveq	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d000      	beq.n	8002514 <_Z11offsetAlertv+0x28>
 8002512:	e7f3      	b.n	80024fc <_Z11offsetAlertv+0x10>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d046      	beq.n	80025a8 <_Z11offsetAlertv+0xbc>
    {
        updateDisplay(0x6);
 800251a:	2006      	movs	r0, #6
 800251c:	f7fe fe5e 	bl	80011dc <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 8000)
 8002520:	f002 fd58 	bl	8004fd4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <_Z11offsetAlertv+0xc8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002530:	bf8c      	ite	hi
 8002532:	2301      	movhi	r3, #1
 8002534:	2300      	movls	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d004      	beq.n	8002546 <_Z11offsetAlertv+0x5a>
        {
            highlightYes = false;
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <_Z11offsetAlertv+0xcc>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8002542:	2300      	movs	r3, #0
 8002544:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <_Z11offsetAlertv+0xc4>)
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0db      	beq.n	8002514 <_Z11offsetAlertv+0x28>
        { //Menu button
            displayTimeout = HAL_GetTick();
 800255c:	f002 fd3a 	bl	8004fd4 <HAL_GetTick>
 8002560:	4603      	mov	r3, r0
 8002562:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <_Z11offsetAlertv+0xc8>)
 8002564:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 8002566:	f002 fd35 	bl	8004fd4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <_Z11offsetAlertv+0xd0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002576:	bf8c      	ite	hi
 8002578:	2301      	movhi	r3, #1
 800257a:	2300      	movls	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0c8      	beq.n	8002514 <_Z11offsetAlertv+0x28>
            {
                //Add/subtract offset to current frame?
                //Set offset for future jams?
                intOffset = offsetAdjust;
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <_Z11offsetAlertv+0xd4>)
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <_Z11offsetAlertv+0xd8>)
 8002588:	701a      	strb	r2, [r3, #0]
                highlightYes = !highlightYes;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <_Z11offsetAlertv+0xcc>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	f083 0301 	eor.w	r3, r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_Z11offsetAlertv+0xcc>)
 8002596:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8002598:	f002 fd1c 	bl	8004fd4 <HAL_GetTick>
 800259c:	4603      	mov	r3, r0
 800259e:	4a07      	ldr	r2, [pc, #28]	; (80025bc <_Z11offsetAlertv+0xd0>)
 80025a0:	6013      	str	r3, [r2, #0]
                inLoop = false;
 80025a2:	2300      	movs	r3, #0
 80025a4:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 80025a6:	e7b5      	b.n	8002514 <_Z11offsetAlertv+0x28>
            }
        }
    }
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	48000800 	.word	0x48000800
 80025b4:	200000cc 	.word	0x200000cc
 80025b8:	200000d8 	.word	0x200000d8
 80025bc:	200000d0 	.word	0x200000d0
 80025c0:	200000d5 	.word	0x200000d5
 80025c4:	20000014 	.word	0x20000014

080025c8 <_Z10reJamAlertv>:

void reJamAlert()
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
    bool inLoop = true;
 80025ce:	2301      	movs	r3, #1
 80025d0:	71fb      	strb	r3, [r7, #7]
    highlightYes = false;
 80025d2:	4b5e      	ldr	r3, [pc, #376]	; (800274c <_Z10reJamAlertv+0x184>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
    updateDisplay(0x7);
 80025d8:	2007      	movs	r0, #7
 80025da:	f7fe fdff 	bl	80011dc <_Z13updateDisplayh>
    while (GPIOC->IDR & GPIO_PIN_13)
 80025de:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <_Z10reJamAlertv+0x188>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf14      	ite	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	2300      	moveq	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d000      	beq.n	80025f6 <_Z10reJamAlertv+0x2e>
 80025f4:	e7f3      	b.n	80025de <_Z10reJamAlertv+0x16>
    {
        //While still holding down the menu button
    }
    while (inLoop)
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a3 	beq.w	8002744 <_Z10reJamAlertv+0x17c>
    {
        updateDisplay(0x7);
 80025fe:	2007      	movs	r0, #7
 8002600:	f7fe fdec 	bl	80011dc <_Z13updateDisplayh>
        if (HAL_GetTick() - displayTimeout > 5000)
 8002604:	f002 fce6 	bl	8004fd4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	4b52      	ldr	r3, [pc, #328]	; (8002754 <_Z10reJamAlertv+0x18c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	bf8c      	ite	hi
 8002618:	2301      	movhi	r3, #1
 800261a:	2300      	movls	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <_Z10reJamAlertv+0x64>
        {
            highlightYes = false;
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <_Z10reJamAlertv+0x184>)
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
            inLoop = false;
 8002628:	2300      	movs	r3, #0
 800262a:	71fb      	strb	r3, [r7, #7]
        }

        if (GPIOB->IDR & GPIO_PIN_9)
 800262c:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <_Z10reJamAlertv+0x190>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01e      	beq.n	8002680 <_Z10reJamAlertv+0xb8>
        { //Plus button
            displayTimeout = HAL_GetTick();
 8002642:	f002 fcc7 	bl	8004fd4 <HAL_GetTick>
 8002646:	4603      	mov	r3, r0
 8002648:	4a42      	ldr	r2, [pc, #264]	; (8002754 <_Z10reJamAlertv+0x18c>)
 800264a:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 800264c:	f002 fcc2 	bl	8004fd4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	4b42      	ldr	r3, [pc, #264]	; (800275c <_Z10reJamAlertv+0x194>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800265c:	bf8c      	ite	hi
 800265e:	2301      	movhi	r3, #1
 8002660:	2300      	movls	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <_Z10reJamAlertv+0xb8>
            {
                highlightYes = !highlightYes;
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <_Z10reJamAlertv+0x184>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	f083 0301 	eor.w	r3, r3, #1
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <_Z10reJamAlertv+0x184>)
 8002674:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 8002676:	f002 fcad 	bl	8004fd4 <HAL_GetTick>
 800267a:	4603      	mov	r3, r0
 800267c:	4a37      	ldr	r2, [pc, #220]	; (800275c <_Z10reJamAlertv+0x194>)
 800267e:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOB->IDR & GPIO_PIN_8)
 8002680:	4b35      	ldr	r3, [pc, #212]	; (8002758 <_Z10reJamAlertv+0x190>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01e      	beq.n	80026d4 <_Z10reJamAlertv+0x10c>
        { //Minus button
            displayTimeout = HAL_GetTick();
 8002696:	f002 fc9d 	bl	8004fd4 <HAL_GetTick>
 800269a:	4603      	mov	r3, r0
 800269c:	4a2d      	ldr	r2, [pc, #180]	; (8002754 <_Z10reJamAlertv+0x18c>)
 800269e:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 80026a0:	f002 fc98 	bl	8004fd4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <_Z10reJamAlertv+0x194>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80026b0:	bf8c      	ite	hi
 80026b2:	2301      	movhi	r3, #1
 80026b4:	2300      	movls	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <_Z10reJamAlertv+0x10c>
            {
                highlightYes = !highlightYes;
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <_Z10reJamAlertv+0x184>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	f083 0301 	eor.w	r3, r3, #1
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <_Z10reJamAlertv+0x184>)
 80026c8:	701a      	strb	r2, [r3, #0]
                buttonTime = HAL_GetTick(); //Debounce timer
 80026ca:	f002 fc83 	bl	8004fd4 <HAL_GetTick>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4a22      	ldr	r2, [pc, #136]	; (800275c <_Z10reJamAlertv+0x194>)
 80026d2:	6013      	str	r3, [r2, #0]
            }
        }

        if (GPIOC->IDR & GPIO_PIN_13)
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <_Z10reJamAlertv+0x188>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d085      	beq.n	80025f6 <_Z10reJamAlertv+0x2e>
        { //Menu button
            displayTimeout = HAL_GetTick();
 80026ea:	f002 fc73 	bl	8004fd4 <HAL_GetTick>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4a18      	ldr	r2, [pc, #96]	; (8002754 <_Z10reJamAlertv+0x18c>)
 80026f2:	6013      	str	r3, [r2, #0]
            if (HAL_GetTick() - buttonTime > 350) //Debounce
 80026f4:	f002 fc6e 	bl	8004fd4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <_Z10reJamAlertv+0x194>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002704:	bf8c      	ite	hi
 8002706:	2301      	movhi	r3, #1
 8002708:	2300      	movls	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	f43f af72 	beq.w	80025f6 <_Z10reJamAlertv+0x2e>
            {
                if (highlightYes)
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <_Z10reJamAlertv+0x184>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <_Z10reJamAlertv+0x16c>
                {
                    frameRate = rateAdjust;
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <_Z10reJamAlertv+0x198>)
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <_Z10reJamAlertv+0x19c>)
 8002720:	701a      	strb	r2, [r3, #0]
                    resetTimecode();
 8002722:	f000 f8e1 	bl	80028e8 <_Z13resetTimecodev>
                    highlightYes = !highlightYes;
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <_Z10reJamAlertv+0x184>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <_Z10reJamAlertv+0x184>)
 8002732:	701a      	strb	r2, [r3, #0]
                }
                buttonTime = HAL_GetTick(); //Debounce timer
 8002734:	f002 fc4e 	bl	8004fd4 <HAL_GetTick>
 8002738:	4603      	mov	r3, r0
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <_Z10reJamAlertv+0x194>)
 800273c:	6013      	str	r3, [r2, #0]
                inLoop = false;
 800273e:	2300      	movs	r3, #0
 8002740:	71fb      	strb	r3, [r7, #7]
    while (inLoop)
 8002742:	e758      	b.n	80025f6 <_Z10reJamAlertv+0x2e>
            }
        }
    }
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200000d8 	.word	0x200000d8
 8002750:	48000800 	.word	0x48000800
 8002754:	200000cc 	.word	0x200000cc
 8002758:	48000400 	.word	0x48000400
 800275c:	200000d0 	.word	0x200000d0
 8002760:	200000d4 	.word	0x200000d4
 8002764:	20000099 	.word	0x20000099

08002768 <_Z12initTimecodev>:

/* Init Timecode
* Get the current frame count based on the data read in from the timer
*TODO: Add in the user variables
*/
bool initTimecode(){
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
  int hr = int(tcIN[1] & 0x0F) + (int(tcIN[0] & 0x03)*10);
 800276e:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <_Z12initTimecodev+0x15c>)
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f003 010f 	and.w	r1, r3, #15
 8002778:	4b52      	ldr	r3, [pc, #328]	; (80028c4 <_Z12initTimecodev+0x15c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f003 0203 	and.w	r2, r3, #3
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	440b      	add	r3, r1
 800278c:	60fb      	str	r3, [r7, #12]
  int mn = int(tcIN[3] & 0x0F) + (int(tcIN[2] & 0x07)*10);
 800278e:	4b4d      	ldr	r3, [pc, #308]	; (80028c4 <_Z12initTimecodev+0x15c>)
 8002790:	78db      	ldrb	r3, [r3, #3]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f003 010f 	and.w	r1, r3, #15
 8002798:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <_Z12initTimecodev+0x15c>)
 800279a:	789b      	ldrb	r3, [r3, #2]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 0207 	and.w	r2, r3, #7
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	440b      	add	r3, r1
 80027ac:	60bb      	str	r3, [r7, #8]
  int sc = int(tcIN[5] & 0x0F) + (int(tcIN[4] & 0x07)*10);
 80027ae:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <_Z12initTimecodev+0x15c>)
 80027b0:	795b      	ldrb	r3, [r3, #5]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f003 010f 	and.w	r1, r3, #15
 80027b8:	4b42      	ldr	r3, [pc, #264]	; (80028c4 <_Z12initTimecodev+0x15c>)
 80027ba:	791b      	ldrb	r3, [r3, #4]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 0207 	and.w	r2, r3, #7
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	440b      	add	r3, r1
 80027cc:	607b      	str	r3, [r7, #4]
  int fr = int(tcIN[7] & 0x0F) + (int(tcIN[6] & 0x03)*10);
 80027ce:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <_Z12initTimecodev+0x15c>)
 80027d0:	79db      	ldrb	r3, [r3, #7]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f003 010f 	and.w	r1, r3, #15
 80027d8:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <_Z12initTimecodev+0x15c>)
 80027da:	799b      	ldrb	r3, [r3, #6]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 0203 	and.w	r2, r3, #3
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	440b      	add	r3, r1
 80027ec:	603b      	str	r3, [r7, #0]
  clockFrame = (hr * 60 * 60 * frameRateDivisor[frameRate]) + (mn * 60 * frameRateDivisor[frameRate]) + (sc * frameRateDivisor[frameRate]) + fr;
 80027ee:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <_Z12initTimecodev+0x160>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <_Z12initTimecodev+0x164>)
 80027f6:	5c9b      	ldrb	r3, [r3, r2]
 80027f8:	461a      	mov	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	fb03 f302 	mul.w	r3, r3, r2
 8002800:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002804:	fb02 f103 	mul.w	r1, r2, r3
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <_Z12initTimecodev+0x160>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <_Z12initTimecodev+0x164>)
 8002810:	5c9b      	ldrb	r3, [r3, r2]
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	fb03 f202 	mul.w	r2, r3, r2
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	18ca      	adds	r2, r1, r3
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <_Z12initTimecodev+0x160>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <_Z12initTimecodev+0x164>)
 800282c:	5c5b      	ldrb	r3, [r3, r1]
 800282e:	4619      	mov	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	fb03 f301 	mul.w	r3, r3, r1
 8002836:	441a      	add	r2, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <_Z12initTimecodev+0x168>)
 8002840:	601a      	str	r2, [r3, #0]
  //__HAL_TIM_SET_AUTORELOAD(outTIM,frameRateARR[frameRate]);
  if (intOffset > 30)
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <_Z12initTimecodev+0x16c>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b1e      	cmp	r3, #30
 8002848:	d909      	bls.n	800285e <_Z12initTimecodev+0xf6>
  {
    clockFrame += (intOffset - 30);
 800284a:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <_Z12initTimecodev+0x16c>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <_Z12initTimecodev+0x168>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4413      	add	r3, r2
 8002856:	3b1e      	subs	r3, #30
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <_Z12initTimecodev+0x168>)
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e00c      	b.n	8002878 <_Z12initTimecodev+0x110>
  }
  else if (intOffset < 30)
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <_Z12initTimecodev+0x16c>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b1d      	cmp	r3, #29
 8002864:	d808      	bhi.n	8002878 <_Z12initTimecodev+0x110>
  {
    clockFrame -= (30-intOffset);
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <_Z12initTimecodev+0x16c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <_Z12initTimecodev+0x168>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4413      	add	r3, r2
 8002872:	3b1e      	subs	r3, #30
 8002874:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <_Z12initTimecodev+0x168>)
 8002876:	6013      	str	r3, [r2, #0]
  }
  countTIM->Instance->ARR = frameRateARR[frameRate];
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <_Z12initTimecodev+0x160>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <_Z12initTimecodev+0x170>)
 8002880:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <_Z12initTimecodev+0x174>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
  countTIM->Init.Period = frameRateARR[frameRate];
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <_Z12initTimecodev+0x160>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <_Z12initTimecodev+0x170>)
 8002894:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002898:	4b10      	ldr	r3, [pc, #64]	; (80028dc <_Z12initTimecodev+0x174>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(countTIM);
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <_Z12initTimecodev+0x174>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 f802 	bl	80088ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(outTIM);
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <_Z12initTimecodev+0x178>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 fffd 	bl	80088ac <HAL_TIM_Base_Start_IT>
  tcJammed = true;
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <_Z12initTimecodev+0x17c>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
}
 80028b8:	bf00      	nop
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000090 	.word	0x20000090
 80028c8:	20000099 	.word	0x20000099
 80028cc:	20000030 	.word	0x20000030
 80028d0:	2000009c 	.word	0x2000009c
 80028d4:	20000014 	.word	0x20000014
 80028d8:	20000038 	.word	0x20000038
 80028dc:	20000054 	.word	0x20000054
 80028e0:	20000050 	.word	0x20000050
 80028e4:	20000098 	.word	0x20000098

080028e8 <_Z13resetTimecodev>:

/* Reset Timecode
* Simple function to reset all timers and variables back to
* pre-jam state
*/
bool resetTimecode(){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
    clockFrame = 0;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <_Z13resetTimecodev+0x38>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(countTIM);
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <_Z13resetTimecodev+0x3c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f006 f82c 	bl	8008954 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(outTIM);
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <_Z13resetTimecodev+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f006 f827 	bl	8008954 <HAL_TIM_Base_Stop_IT>
    //countTIM->Instance->ARR = frameRateARR[frameRate];
    //countTIM->Init.Period = frameRateARR[frameRate];
    //__HAL_TIM_SET_AUTORELOAD(&outTIM,frameRateARR[frameRate]);
    HAL_TIM_IC_Start_IT(inTIM, TIM_CHANNEL_3);
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <_Z13resetTimecodev+0x44>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2108      	movs	r1, #8
 800290c:	4618      	mov	r0, r3
 800290e:	f006 f8a7 	bl	8008a60 <HAL_TIM_IC_Start_IT>
    tcJammed = false;
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <_Z13resetTimecodev+0x48>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
    //timer2 input yes
    //timer6 output no
}
 8002918:	bf00      	nop
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000009c 	.word	0x2000009c
 8002924:	20000054 	.word	0x20000054
 8002928:	20000050 	.word	0x20000050
 800292c:	2000004c 	.word	0x2000004c
 8002930:	20000098 	.word	0x20000098

08002934 <_Z9calibratev>:
* 
* For higher accuracy, the compensation runs at a factor of 10 times
* the frame rate divisor.
* IE 23.98 is 1001/24000, so it runs every 240,000 frames.
*/
void calibrate(){
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
  int32_t calibrationArray[6];
	calibrationArray[0] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 800293a:	f240 431c 	movw	r3, #1052	; 0x41c
 800293e:	603b      	str	r3, [r7, #0]
	calibrationArray[1] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8002940:	f240 431a 	movw	r3, #1050	; 0x41a
 8002944:	607b      	str	r3, [r7, #4]
	calibrationArray[2] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8002946:	f240 431a 	movw	r3, #1050	; 0x41a
 800294a:	60bb      	str	r3, [r7, #8]
	calibrationArray[3] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 800294c:	f240 431c 	movw	r3, #1052	; 0x41c
 8002950:	60fb      	str	r3, [r7, #12]
  calibrationArray[4] = 1201200000 - (int32_t(	(double(calibration)/20.0) * 1001));
 8002952:	f240 431c 	movw	r3, #1052	; 0x41c
 8002956:	613b      	str	r3, [r7, #16]
	calibrationArray[5] = 1200000000 - (int32_t(	(double(calibration)/20.0) * 1000));
 8002958:	f240 431a 	movw	r3, #1050	; 0x41a
 800295c:	617b      	str	r3, [r7, #20]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <_Z10frameCheckv>:
*
*
*/

void frameCheck()
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  switch(frameRate)
 8002970:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <_Z10frameCheckv+0x188>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b05      	cmp	r3, #5
 8002976:	f200 80b8 	bhi.w	8002aea <_Z10frameCheckv+0x17e>
 800297a:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <_Z10frameCheckv+0x14>)
 800297c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002980:	08002999 	.word	0x08002999
 8002984:	080029b7 	.word	0x080029b7
 8002988:	080029d5 	.word	0x080029d5
 800298c:	080029f1 	.word	0x080029f1
 8002990:	08002a0d 	.word	0x08002a0d
 8002994:	08002ab9 	.word	0x08002ab9
  {
    case 0: //23.98
      if (clockFrame == 2073600)
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <_Z10frameCheckv+0x18c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a57      	ldr	r2, [pc, #348]	; (8002afc <_Z10frameCheckv+0x190>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8093 	beq.w	8002ad4 <_Z10frameCheckv+0x168>
        clockFrame = 0;
 80029ae:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <_Z10frameCheckv+0x18c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
      break;
 80029b4:	e08e      	b.n	8002ad4 <_Z10frameCheckv+0x168>
    case 1: //24
      if (clockFrame == 2073600)
 80029b6:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <_Z10frameCheckv+0x18c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a50      	ldr	r2, [pc, #320]	; (8002afc <_Z10frameCheckv+0x190>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8086 	beq.w	8002ad8 <_Z10frameCheckv+0x16c>
        clockFrame = 0;
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <_Z10frameCheckv+0x18c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
      break;
 80029d2:	e081      	b.n	8002ad8 <_Z10frameCheckv+0x16c>
    case 2: //25
      if (clockFrame == 2160000)
 80029d4:	4b48      	ldr	r3, [pc, #288]	; (8002af8 <_Z10frameCheckv+0x18c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <_Z10frameCheckv+0x194>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d079      	beq.n	8002adc <_Z10frameCheckv+0x170>
        clockFrame = 0;
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <_Z10frameCheckv+0x18c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
      break;
 80029ee:	e075      	b.n	8002adc <_Z10frameCheckv+0x170>
    case 3: //29.97
      if (clockFrame == 2592000)
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <_Z10frameCheckv+0x18c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a43      	ldr	r2, [pc, #268]	; (8002b04 <_Z10frameCheckv+0x198>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d06d      	beq.n	8002ae0 <_Z10frameCheckv+0x174>
        clockFrame = 0;
 8002a04:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
      break;
 8002a0a:	e069      	b.n	8002ae0 <_Z10frameCheckv+0x174>
    case 4: //29.97 DF
      if (clockFrame == 2592000)
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a3c      	ldr	r2, [pc, #240]	; (8002b04 <_Z10frameCheckv+0x198>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <_Z10frameCheckv+0xba>
        clockFrame = 0;
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
      if (clockFrame % 30 == 29 && (clockFrame / 30) % 60 == 59 && ((((clockFrame / 30) / 60) % 60)+1) % 10 != 0 )
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <_Z10frameCheckv+0x19c>)
 8002a2c:	fba3 2301 	umull	r2, r3, r3, r1
 8002a30:	091a      	lsrs	r2, r3, #4
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	1aca      	subs	r2, r1, r3
 8002a3c:	2a1d      	cmp	r2, #29
 8002a3e:	d12d      	bne.n	8002a9c <_Z10frameCheckv+0x130>
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a30      	ldr	r2, [pc, #192]	; (8002b08 <_Z10frameCheckv+0x19c>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0919      	lsrs	r1, r3, #4
 8002a4c:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <_Z10frameCheckv+0x19c>)
 8002a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a52:	095a      	lsrs	r2, r3, #5
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	1aca      	subs	r2, r1, r3
 8002a5e:	2a3b      	cmp	r2, #59	; 0x3b
 8002a60:	d11c      	bne.n	8002a9c <_Z10frameCheckv+0x130>
 8002a62:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <_Z10frameCheckv+0x1a0>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	0a99      	lsrs	r1, r3, #10
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <_Z10frameCheckv+0x19c>)
 8002a70:	fba3 2301 	umull	r2, r3, r3, r1
 8002a74:	095a      	lsrs	r2, r3, #5
 8002a76:	4613      	mov	r3, r2
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	1aca      	subs	r2, r1, r3
 8002a80:	1c51      	adds	r1, r2, #1
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <_Z10frameCheckv+0x1a4>)
 8002a84:	fba3 2301 	umull	r2, r3, r3, r1
 8002a88:	08da      	lsrs	r2, r3, #3
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	1aca      	subs	r2, r1, r3
 8002a94:	2a00      	cmp	r2, #0
 8002a96:	d001      	beq.n	8002a9c <_Z10frameCheckv+0x130>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <_Z10frameCheckv+0x132>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d020      	beq.n	8002ae4 <_Z10frameCheckv+0x178>
        {
          clockFrame++; 
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002aaa:	6013      	str	r3, [r2, #0]
          clockFrame++;
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002ab4:	6013      	str	r3, [r2, #0]
        }
      break;
 8002ab6:	e015      	b.n	8002ae4 <_Z10frameCheckv+0x178>
    case 5: //30
      if (clockFrame == 2592000)
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <_Z10frameCheckv+0x198>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <_Z10frameCheckv+0x17c>
        clockFrame = 0;
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <_Z10frameCheckv+0x18c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
      break;
 8002ad2:	e009      	b.n	8002ae8 <_Z10frameCheckv+0x17c>
      break;
 8002ad4:	bf00      	nop
 8002ad6:	e008      	b.n	8002aea <_Z10frameCheckv+0x17e>
      break;
 8002ad8:	bf00      	nop
 8002ada:	e006      	b.n	8002aea <_Z10frameCheckv+0x17e>
      break;
 8002adc:	bf00      	nop
 8002ade:	e004      	b.n	8002aea <_Z10frameCheckv+0x17e>
      break;
 8002ae0:	bf00      	nop
 8002ae2:	e002      	b.n	8002aea <_Z10frameCheckv+0x17e>
      break;
 8002ae4:	bf00      	nop
 8002ae6:	e000      	b.n	8002aea <_Z10frameCheckv+0x17e>
      break;
 8002ae8:	bf00      	nop
  }
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	20000099 	.word	0x20000099
 8002af8:	2000009c 	.word	0x2000009c
 8002afc:	001fa400 	.word	0x001fa400
 8002b00:	0020f580 	.word	0x0020f580
 8002b04:	00278d00 	.word	0x00278d00
 8002b08:	88888889 	.word	0x88888889
 8002b0c:	91a2b3c5 	.word	0x91a2b3c5
 8002b10:	cccccccd 	.word	0xcccccccd

08002b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b1a:	f002 f9f2 	bl	8004f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b1e:	f000 fcc3 	bl	80034a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b22:	f000 ffe5 	bl	8003af0 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8002b26:	f000 fd5d 	bl	80035e4 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 8002b2a:	f000 fdc9 	bl	80036c0 <_ZL12MX_DAC1_Initv>
  MX_I2C1_Init();
 8002b2e:	f000 fe03 	bl	8003738 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 8002b32:	f000 fe4f 	bl	80037d4 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 8002b36:	f000 fe9f 	bl	8003878 <_ZL12MX_TIM2_Initv>
  MX_TIM6_Init();
 8002b3a:	f000 feff 	bl	800393c <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8002b3e:	f000 ff3d 	bl	80039bc <_ZL12MX_TIM7_Initv>
  MX_TIM16_Init();
 8002b42:	f000 ff7b 	bl	8003a3c <_ZL13MX_TIM16_Initv>
  MX_USB_PCD_Init();
 8002b46:	f000 ffa5 	bl	8003a94 <_ZL15MX_USB_PCD_Initv>
  /* USER CODE BEGIN 2 */
  DAC1->DHR12R2 = 2048; //Set analog out for TXCO VCO
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <main+0xc8>)
 8002b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b50:	615a      	str	r2, [r3, #20]

  /*Configure GPIO pin : PC13 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b52:	463b      	mov	r3, r7
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b60:	2301      	movs	r3, #1
 8002b62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b74:	f003 fd58 	bl	8006628 <HAL_GPIO_Init>

/*if(GPIOA -> IDR & GPIO_PIN_9 || GPIOA -> IDR & GPIO_PIN_10){  //Stat 1 & 2
  powerUpMode = 2;
}*/

if(GPIOA -> IDR & GPIO_PIN_0){  //Power button
 8002b78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d02b      	beq.n	8002be8 <main+0xd4>
  uint32_t powerupTime = HAL_GetTick();
 8002b90:	f002 fa20 	bl	8004fd4 <HAL_GetTick>
 8002b94:	61b8      	str	r0, [r7, #24]
  while (GPIOA -> IDR & GPIO_PIN_0){
 8002b96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01c      	beq.n	8002be8 <main+0xd4>
    if (HAL_GetTick() - powerupTime > 2000){
 8002bae:	f002 fa11 	bl	8004fd4 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bbc:	bf8c      	ite	hi
 8002bbe:	2301      	movhi	r3, #1
 8002bc0:	2300      	movls	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0e6      	beq.n	8002b96 <main+0x82>
      powerUpMode = 1;
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <main+0xcc>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
      GPIOB -> ODR |= GPIO_PIN_12;
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <main+0xd0>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <main+0xd0>)
 8002bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bd8:	6153      	str	r3, [r2, #20]
  while (GPIOA -> IDR & GPIO_PIN_0){
 8002bda:	e7dc      	b.n	8002b96 <main+0x82>
 8002bdc:	40007400 	.word	0x40007400
 8002be0:	20000652 	.word	0x20000652
 8002be4:	48000400 	.word	0x48000400
  }
}



if (powerUpMode == 0){
 8002be8:	4baf      	ldr	r3, [pc, #700]	; (8002ea8 <main+0x394>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <main+0xe8>
HAL_Delay(500);
 8002bf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bf4:	f002 f9fa 	bl	8004fec <HAL_Delay>

    HAL_PWR_EnterSTANDBYMode();
 8002bf8:	f004 fc28 	bl	800744c <HAL_PWR_EnterSTANDBYMode>
}

else {

}
HAL_Delay(250);
 8002bfc:	20fa      	movs	r0, #250	; 0xfa
 8002bfe:	f002 f9f5 	bl	8004fec <HAL_Delay>
calibrate();
 8002c02:	f7ff fe97 	bl	8002934 <_Z9calibratev>
  //HAL_Delay(1000);
  //GPIOB -> ODR |= GPIO_PIN_12;  //LED
 // HAL_Delay(1000);

  //GPIOA -> ODR |= GPIO_PIN_8; //Power enable
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3); //Input timer
 8002c06:	2108      	movs	r1, #8
 8002c08:	48a8      	ldr	r0, [pc, #672]	; (8002eac <main+0x398>)
 8002c0a:	f005 ff29 	bl	8008a60 <HAL_TIM_IC_Start_IT>
  //HAL_TIM_Base_Start(&htim7);
  //HAL_TIM_Base_Start_IT(&htim16);
  //HAL_TIM_Base_Start_IT(&htim6);
    tcWrite[8] = 0b11111100;  //Sync pattern
 8002c0e:	4ba8      	ldr	r3, [pc, #672]	; (8002eb0 <main+0x39c>)
 8002c10:	22fc      	movs	r2, #252	; 0xfc
 8002c12:	721a      	strb	r2, [r3, #8]
  tcWrite[9] = 0b10111111;  //Sync pattern
 8002c14:	4ba6      	ldr	r3, [pc, #664]	; (8002eb0 <main+0x39c>)
 8002c16:	22bf      	movs	r2, #191	; 0xbf
 8002c18:	725a      	strb	r2, [r3, #9]




initDisplay();
 8002c1a:	f7ff f975 	bl	8001f08 <_Z11initDisplayv>
 updateDisplay(0x1);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7fe fadc 	bl	80011dc <_Z13updateDisplayh>
 displayTimer = HAL_GetTick();
 8002c24:	f002 f9d6 	bl	8004fd4 <HAL_GetTick>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4aa2      	ldr	r2, [pc, #648]	; (8002eb4 <main+0x3a0>)
 8002c2c:	6013      	str	r3, [r2, #0]
 batteryCheck = HAL_GetTick();
 8002c2e:	f002 f9d1 	bl	8004fd4 <HAL_GetTick>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4aa0      	ldr	r2, [pc, #640]	; (8002eb8 <main+0x3a4>)
 8002c36:	6013      	str	r3, [r2, #0]
 batteryRead();
 8002c38:	f7fd ff10 	bl	8000a5c <_Z11batteryReadv>
 batteryCheck = batteryCheck - 29900;
 8002c3c:	4b9e      	ldr	r3, [pc, #632]	; (8002eb8 <main+0x3a4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f5a3 43e9 	sub.w	r3, r3, #29824	; 0x7480
 8002c44:	3b4c      	subs	r3, #76	; 0x4c
 8002c46:	4a9c      	ldr	r2, [pc, #624]	; (8002eb8 <main+0x3a4>)
 8002c48:	6013      	str	r3, [r2, #0]
batteryRead();
 8002c4a:	f7fd ff07 	bl	8000a5c <_Z11batteryReadv>
    * Only update display every 4th cycle?
    * Run tests on optimal update range
    * Timecode output is top priority
    *
    */
if (HAL_GetTick() - batteryCheck > 30000){
 8002c4e:	f002 f9c1 	bl	8004fd4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b98      	ldr	r3, [pc, #608]	; (8002eb8 <main+0x3a4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f247 5230 	movw	r2, #30000	; 0x7530
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	bf8c      	ite	hi
 8002c62:	2301      	movhi	r3, #1
 8002c64:	2300      	movls	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <main+0x166>
  batteryCheck = HAL_GetTick();
 8002c6c:	f002 f9b2 	bl	8004fd4 <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4a91      	ldr	r2, [pc, #580]	; (8002eb8 <main+0x3a4>)
 8002c74:	6013      	str	r3, [r2, #0]
  batteryRead();
 8002c76:	f7fd fef1 	bl	8000a5c <_Z11batteryReadv>
}
   if (!isLocked && displayOn){
 8002c7a:	4b90      	ldr	r3, [pc, #576]	; (8002ebc <main+0x3a8>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d025      	beq.n	8002cd4 <main+0x1c0>
 8002c88:	4b8d      	ldr	r3, [pc, #564]	; (8002ec0 <main+0x3ac>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d021      	beq.n	8002cd4 <main+0x1c0>
     if (HAL_GetTick() - displayTimer > 5000){
 8002c90:	f002 f9a0 	bl	8004fd4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b87      	ldr	r3, [pc, #540]	; (8002eb4 <main+0x3a0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf8c      	ite	hi
 8002ca4:	2301      	movhi	r3, #1
 8002ca6:	2300      	movls	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <main+0x1ac>
       isLocked = true;
 8002cae:	4b83      	ldr	r3, [pc, #524]	; (8002ebc <main+0x3a8>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
       displayOn = false;
 8002cb4:	4b82      	ldr	r3, [pc, #520]	; (8002ec0 <main+0x3ac>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
       updateDisplay(0x0);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fe fa8e 	bl	80011dc <_Z13updateDisplayh>
     }
     if (displayLoopCounter == 120){
 8002cc0:	4b80      	ldr	r3, [pc, #512]	; (8002ec4 <main+0x3b0>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b78      	cmp	r3, #120	; 0x78
 8002cc6:	d105      	bne.n	8002cd4 <main+0x1c0>
      updateDisplay(0x1);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7fe fa87 	bl	80011dc <_Z13updateDisplayh>
      displayLoopCounter = 0;
 8002cce:	4b7d      	ldr	r3, [pc, #500]	; (8002ec4 <main+0x3b0>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
    }
   }

   if (isLocked && displayOn){
 8002cd4:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <main+0x3a8>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d022      	beq.n	8002d22 <main+0x20e>
 8002cdc:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <main+0x3ac>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d01e      	beq.n	8002d22 <main+0x20e>
     if (HAL_GetTick() - displayTimer > 5000){
 8002ce4:	f002 f976 	bl	8004fd4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <main+0x3a0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	bf8c      	ite	hi
 8002cf8:	2301      	movhi	r3, #1
 8002cfa:	2300      	movls	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <main+0x1fa>
       displayOn = false;
 8002d02:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <main+0x3ac>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
       updateDisplay(0x0);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7fe fa67 	bl	80011dc <_Z13updateDisplayh>
     }
     if (displayLoopCounter == 120){
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <main+0x3b0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b78      	cmp	r3, #120	; 0x78
 8002d14:	d105      	bne.n	8002d22 <main+0x20e>
      updateDisplay(0x3);
 8002d16:	2003      	movs	r0, #3
 8002d18:	f7fe fa60 	bl	80011dc <_Z13updateDisplayh>
      displayLoopCounter = 0;
 8002d1c:	4b69      	ldr	r3, [pc, #420]	; (8002ec4 <main+0x3b0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
    }
   }
   //Add in code to turn on display with button press?

   
  displayLoopCounter++;
 8002d22:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <main+0x3b0>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <main+0x3b0>)
 8002d2c:	701a      	strb	r2, [r3, #0]
frameCheck();
 8002d2e:	f7ff fe1d 	bl	800296c <_Z10frameCheckv>
	  stat1 = GPIOA -> IDR & GPIO_PIN_9;
 8002d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4b60      	ldr	r3, [pc, #384]	; (8002ec8 <main+0x3b4>)
 8002d48:	701a      	strb	r2, [r3, #0]
    stat2 = GPIOA -> IDR & GPIO_PIN_10;
 8002d4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <main+0x3b8>)
 8002d60:	701a      	strb	r2, [r3, #0]
	    //PA4 STat2
	    //PA5 Stat1
    //if (clockFrame == 2073600) clockFrame = 0;
    clockFrameOutput = clockFrame + 1;
 8002d62:	4b5b      	ldr	r3, [pc, #364]	; (8002ed0 <main+0x3bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a5a      	ldr	r2, [pc, #360]	; (8002ed4 <main+0x3c0>)
 8002d6a:	6013      	str	r3, [r2, #0]
	    tcWrite[0] = ((clockFrameOutput % frameRateDivisor[frameRate]) % 10);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <main+0x3c0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a59      	ldr	r2, [pc, #356]	; (8002ed8 <main+0x3c4>)
 8002d72:	7812      	ldrb	r2, [r2, #0]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4a59      	ldr	r2, [pc, #356]	; (8002edc <main+0x3c8>)
 8002d78:	5c52      	ldrb	r2, [r2, r1]
 8002d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d7e:	fb02 f201 	mul.w	r2, r2, r1
 8002d82:	1a99      	subs	r1, r3, r2
 8002d84:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <main+0x3cc>)
 8002d86:	fba3 2301 	umull	r2, r3, r3, r1
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	1aca      	subs	r2, r1, r3
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <main+0x39c>)
 8002d9a:	701a      	strb	r2, [r3, #0]
	    tcWrite[0] |= (tcIN[7] & 0xF0);
 8002d9c:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <main+0x3d0>)
 8002d9e:	79db      	ldrb	r3, [r3, #7]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002da6:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <main+0x39c>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b25a      	sxtb	r2, r3
 8002dac:	b24b      	sxtb	r3, r1
 8002dae:	4313      	orrs	r3, r2
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <main+0x39c>)
 8002db6:	701a      	strb	r2, [r3, #0]

	    tcWrite[1] = (clockFrameOutput % frameRateDivisor[frameRate]) / 10;
 8002db8:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <main+0x3c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a46      	ldr	r2, [pc, #280]	; (8002ed8 <main+0x3c4>)
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4a46      	ldr	r2, [pc, #280]	; (8002edc <main+0x3c8>)
 8002dc4:	5c52      	ldrb	r2, [r2, r1]
 8002dc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8002dca:	fb02 f201 	mul.w	r2, r2, r1
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	4a43      	ldr	r2, [pc, #268]	; (8002ee0 <main+0x3cc>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <main+0x39c>)
 8002ddc:	705a      	strb	r2, [r3, #1]
	    tcWrite[1] |= (tcIN[6] & 0xF0);
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <main+0x3d0>)
 8002de0:	799b      	ldrb	r3, [r3, #6]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002de8:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <main+0x39c>)
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	b25a      	sxtb	r2, r3
 8002dee:	b24b      	sxtb	r3, r1
 8002df0:	4313      	orrs	r3, r2
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <main+0x39c>)
 8002df8:	705a      	strb	r2, [r3, #1]

	    tcWrite[2] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) % 10;
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <main+0x3c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a36      	ldr	r2, [pc, #216]	; (8002ed8 <main+0x3c4>)
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4a35      	ldr	r2, [pc, #212]	; (8002edc <main+0x3c8>)
 8002e06:	5c52      	ldrb	r2, [r2, r1]
 8002e08:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e0c:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <main+0x3d4>)
 8002e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e12:	095a      	lsrs	r2, r3, #5
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	1aca      	subs	r2, r1, r3
 8002e1e:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <main+0x3cc>)
 8002e20:	fba3 1302 	umull	r1, r3, r3, r2
 8002e24:	08d9      	lsrs	r1, r3, #3
 8002e26:	460b      	mov	r3, r1
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	1ad1      	subs	r1, r2, r3
 8002e30:	b2ca      	uxtb	r2, r1
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <main+0x39c>)
 8002e34:	709a      	strb	r2, [r3, #2]
	    tcWrite[2] |= (tcIN[5] & 0xF0);
 8002e36:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <main+0x3d0>)
 8002e38:	795b      	ldrb	r3, [r3, #5]
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <main+0x39c>)
 8002e42:	789b      	ldrb	r3, [r3, #2]
 8002e44:	b25a      	sxtb	r2, r3
 8002e46:	b24b      	sxtb	r3, r1
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b25b      	sxtb	r3, r3
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <main+0x39c>)
 8002e50:	709a      	strb	r2, [r3, #2]

	    tcWrite[3] = ((clockFrameOutput / frameRateDivisor[frameRate]) % 60) / 10;
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <main+0x3c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <main+0x3c4>)
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <main+0x3c8>)
 8002e5e:	5c52      	ldrb	r2, [r2, r1]
 8002e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e64:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <main+0x3d4>)
 8002e66:	fba3 2301 	umull	r2, r3, r3, r1
 8002e6a:	095a      	lsrs	r2, r3, #5
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	1aca      	subs	r2, r1, r3
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <main+0x3cc>)
 8002e78:	fba3 2302 	umull	r2, r3, r3, r2
 8002e7c:	08db      	lsrs	r3, r3, #3
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <main+0x39c>)
 8002e82:	70da      	strb	r2, [r3, #3]
	    tcWrite[3] |= (tcIN[4] & 0xF0);
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <main+0x3d0>)
 8002e86:	791b      	ldrb	r3, [r3, #4]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <main+0x39c>)
 8002e90:	78db      	ldrb	r3, [r3, #3]
 8002e92:	b25a      	sxtb	r2, r3
 8002e94:	b24b      	sxtb	r3, r1
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <main+0x39c>)
 8002e9e:	70da      	strb	r2, [r3, #3]

	    tcWrite[4] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) % 10;
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <main+0x3c0>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	e022      	b.n	8002eec <main+0x3d8>
 8002ea6:	bf00      	nop
 8002ea8:	20000652 	.word	0x20000652
 8002eac:	200001ec 	.word	0x200001ec
 8002eb0:	20000624 	.word	0x20000624
 8002eb4:	20000648 	.word	0x20000648
 8002eb8:	20000668 	.word	0x20000668
 8002ebc:	20000650 	.word	0x20000650
 8002ec0:	20000058 	.word	0x20000058
 8002ec4:	20000647 	.word	0x20000647
 8002ec8:	200000ac 	.word	0x200000ac
 8002ecc:	200000ad 	.word	0x200000ad
 8002ed0:	2000009c 	.word	0x2000009c
 8002ed4:	20000610 	.word	0x20000610
 8002ed8:	20000099 	.word	0x20000099
 8002edc:	20000030 	.word	0x20000030
 8002ee0:	cccccccd 	.word	0xcccccccd
 8002ee4:	20000090 	.word	0x20000090
 8002ee8:	88888889 	.word	0x88888889
 8002eec:	4baa      	ldr	r3, [pc, #680]	; (8003198 <main+0x684>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4baa      	ldr	r3, [pc, #680]	; (800319c <main+0x688>)
 8002ef4:	5c5b      	ldrb	r3, [r3, r1]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	460b      	mov	r3, r1
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a5b      	subs	r3, r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fbb2 f1f3 	udiv	r1, r2, r3
 8002f04:	4ba6      	ldr	r3, [pc, #664]	; (80031a0 <main+0x68c>)
 8002f06:	fba3 2301 	umull	r2, r3, r3, r1
 8002f0a:	095a      	lsrs	r2, r3, #5
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	1aca      	subs	r2, r1, r3
 8002f16:	4ba3      	ldr	r3, [pc, #652]	; (80031a4 <main+0x690>)
 8002f18:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1c:	08d9      	lsrs	r1, r3, #3
 8002f1e:	460b      	mov	r3, r1
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	1ad1      	subs	r1, r2, r3
 8002f28:	b2ca      	uxtb	r2, r1
 8002f2a:	4b9f      	ldr	r3, [pc, #636]	; (80031a8 <main+0x694>)
 8002f2c:	711a      	strb	r2, [r3, #4]
	    tcWrite[4] |= (tcIN[3] & 0xF0);
 8002f2e:	4b9f      	ldr	r3, [pc, #636]	; (80031ac <main+0x698>)
 8002f30:	78db      	ldrb	r3, [r3, #3]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002f38:	4b9b      	ldr	r3, [pc, #620]	; (80031a8 <main+0x694>)
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	b25a      	sxtb	r2, r3
 8002f3e:	b24b      	sxtb	r3, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b98      	ldr	r3, [pc, #608]	; (80031a8 <main+0x694>)
 8002f48:	711a      	strb	r2, [r3, #4]

	    tcWrite[5] = ((clockFrameOutput / (frameRateDivisor[frameRate] * 60)) % 60) / 10;
 8002f4a:	4b99      	ldr	r3, [pc, #612]	; (80031b0 <main+0x69c>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b92      	ldr	r3, [pc, #584]	; (8003198 <main+0x684>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	4b91      	ldr	r3, [pc, #580]	; (800319c <main+0x688>)
 8002f56:	5c5b      	ldrb	r3, [r3, r1]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a5b      	subs	r3, r3, r1
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	fbb2 f1f3 	udiv	r1, r2, r3
 8002f66:	4b8e      	ldr	r3, [pc, #568]	; (80031a0 <main+0x68c>)
 8002f68:	fba3 2301 	umull	r2, r3, r3, r1
 8002f6c:	095a      	lsrs	r2, r3, #5
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	1aca      	subs	r2, r1, r3
 8002f78:	4b8a      	ldr	r3, [pc, #552]	; (80031a4 <main+0x690>)
 8002f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7e:	08db      	lsrs	r3, r3, #3
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <main+0x694>)
 8002f84:	715a      	strb	r2, [r3, #5]
	    tcWrite[5] |= (tcIN[2] & 0xF0);
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <main+0x698>)
 8002f88:	789b      	ldrb	r3, [r3, #2]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002f90:	4b85      	ldr	r3, [pc, #532]	; (80031a8 <main+0x694>)
 8002f92:	795b      	ldrb	r3, [r3, #5]
 8002f94:	b25a      	sxtb	r2, r3
 8002f96:	b24b      	sxtb	r3, r1
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <main+0x694>)
 8002fa0:	715a      	strb	r2, [r3, #5]

	    tcWrite[6] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) % 10;
 8002fa2:	4b83      	ldr	r3, [pc, #524]	; (80031b0 <main+0x69c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7c      	ldr	r2, [pc, #496]	; (8003198 <main+0x684>)
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4a7b      	ldr	r2, [pc, #492]	; (800319c <main+0x688>)
 8002fae:	5c52      	ldrb	r2, [r2, r1]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002fb6:	fb02 f201 	mul.w	r2, r2, r1
 8002fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fbe:	4b79      	ldr	r3, [pc, #484]	; (80031a4 <main+0x690>)
 8002fc0:	fba3 2301 	umull	r2, r3, r3, r1
 8002fc4:	08da      	lsrs	r2, r3, #3
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	1aca      	subs	r2, r1, r3
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	4b75      	ldr	r3, [pc, #468]	; (80031a8 <main+0x694>)
 8002fd4:	719a      	strb	r2, [r3, #6]
	    tcWrite[6] |= (tcIN[1] & 0xF0);
 8002fd6:	4b75      	ldr	r3, [pc, #468]	; (80031ac <main+0x698>)
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8002fe0:	4b71      	ldr	r3, [pc, #452]	; (80031a8 <main+0x694>)
 8002fe2:	799b      	ldrb	r3, [r3, #6]
 8002fe4:	b25a      	sxtb	r2, r3
 8002fe6:	b24b      	sxtb	r3, r1
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	b25b      	sxtb	r3, r3
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b6e      	ldr	r3, [pc, #440]	; (80031a8 <main+0x694>)
 8002ff0:	719a      	strb	r2, [r3, #6]

	    tcWrite[7] = (clockFrameOutput / (frameRateDivisor[frameRate] * 60 * 60)) / 10;
 8002ff2:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <main+0x69c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a68      	ldr	r2, [pc, #416]	; (8003198 <main+0x684>)
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4a67      	ldr	r2, [pc, #412]	; (800319c <main+0x688>)
 8002ffe:	5c52      	ldrb	r2, [r2, r1]
 8003000:	4611      	mov	r1, r2
 8003002:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003006:	fb02 f201 	mul.w	r2, r2, r1
 800300a:	fbb3 f3f2 	udiv	r3, r3, r2
 800300e:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <main+0x690>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	08db      	lsrs	r3, r3, #3
 8003016:	b2da      	uxtb	r2, r3
 8003018:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <main+0x694>)
 800301a:	71da      	strb	r2, [r3, #7]
	    tcWrite[7] |= (tcIN[0] & 0xF0);
 800301c:	4b63      	ldr	r3, [pc, #396]	; (80031ac <main+0x698>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003026:	4b60      	ldr	r3, [pc, #384]	; (80031a8 <main+0x694>)
 8003028:	79db      	ldrb	r3, [r3, #7]
 800302a:	b25a      	sxtb	r2, r3
 800302c:	b24b      	sxtb	r3, r1
 800302e:	4313      	orrs	r3, r2
 8003030:	b25b      	sxtb	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b5c      	ldr	r3, [pc, #368]	; (80031a8 <main+0x694>)
 8003036:	71da      	strb	r2, [r3, #7]

	    hr = (clockFrameOutput / frameRateDivisor[frameRate]) / 3600;
 8003038:	4b5d      	ldr	r3, [pc, #372]	; (80031b0 <main+0x69c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a56      	ldr	r2, [pc, #344]	; (8003198 <main+0x684>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	4611      	mov	r1, r2
 8003042:	4a56      	ldr	r2, [pc, #344]	; (800319c <main+0x688>)
 8003044:	5c52      	ldrb	r2, [r2, r1]
 8003046:	fbb3 f3f2 	udiv	r3, r3, r2
 800304a:	4a5a      	ldr	r2, [pc, #360]	; (80031b4 <main+0x6a0>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	0adb      	lsrs	r3, r3, #11
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b58      	ldr	r3, [pc, #352]	; (80031b8 <main+0x6a4>)
 8003056:	701a      	strb	r2, [r3, #0]
		mn = ((clockFrameOutput / frameRateDivisor[frameRate]) / 60 ) % 60;
 8003058:	4b55      	ldr	r3, [pc, #340]	; (80031b0 <main+0x69c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <main+0x684>)
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	4611      	mov	r1, r2
 8003062:	4a4e      	ldr	r2, [pc, #312]	; (800319c <main+0x688>)
 8003064:	5c52      	ldrb	r2, [r2, r1]
 8003066:	fbb3 f3f2 	udiv	r3, r3, r2
 800306a:	4a4d      	ldr	r2, [pc, #308]	; (80031a0 <main+0x68c>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	0959      	lsrs	r1, r3, #5
 8003072:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <main+0x68c>)
 8003074:	fba3 2301 	umull	r2, r3, r3, r1
 8003078:	095a      	lsrs	r2, r3, #5
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	1aca      	subs	r2, r1, r3
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <main+0x6a8>)
 8003088:	701a      	strb	r2, [r3, #0]
		sc = (clockFrameOutput / frameRateDivisor[frameRate]) % 60;
 800308a:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <main+0x69c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a42      	ldr	r2, [pc, #264]	; (8003198 <main+0x684>)
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	4611      	mov	r1, r2
 8003094:	4a41      	ldr	r2, [pc, #260]	; (800319c <main+0x688>)
 8003096:	5c52      	ldrb	r2, [r2, r1]
 8003098:	fbb3 f1f2 	udiv	r1, r3, r2
 800309c:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <main+0x68c>)
 800309e:	fba3 2301 	umull	r2, r3, r3, r1
 80030a2:	095a      	lsrs	r2, r3, #5
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	1aca      	subs	r2, r1, r3
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <main+0x6ac>)
 80030b2:	701a      	strb	r2, [r3, #0]
		fr = clockFrameOutput % frameRateDivisor[frameRate];
 80030b4:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <main+0x69c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a37      	ldr	r2, [pc, #220]	; (8003198 <main+0x684>)
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	4611      	mov	r1, r2
 80030be:	4a37      	ldr	r2, [pc, #220]	; (800319c <main+0x688>)
 80030c0:	5c52      	ldrb	r2, [r2, r1]
 80030c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80030c6:	fb02 f201 	mul.w	r2, r2, r1
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b3d      	ldr	r3, [pc, #244]	; (80031c4 <main+0x6b0>)
 80030d0:	701a      	strb	r2, [r3, #0]


	    	    int oneBits = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
	    for (int i=0; i<10; i++){
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	2b09      	cmp	r3, #9
 80030de:	dc1b      	bgt.n	8003118 <main+0x604>
	    	for (int b=0; b<8; b++){
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b07      	cmp	r3, #7
 80030e8:	dc12      	bgt.n	8003110 <main+0x5fc>
	    		if (bitRead(tcWrite[i],b) == 1){
 80030ea:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <main+0x694>)
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	fa42 f303 	asr.w	r3, r2, r3
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <main+0x5f4>
	    			oneBits++;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	3301      	adds	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
	    	for (int b=0; b<8; b++){
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3301      	adds	r3, #1
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e7e9      	b.n	80030e4 <main+0x5d0>
	    for (int i=0; i<10; i++){
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	3301      	adds	r3, #1
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	e7e0      	b.n	80030da <main+0x5c6>
	    		}
	    	}
	    }
	    if (oneBits % 2 > 0){
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	bfb8      	it	lt
 8003122:	425b      	neglt	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	dd07      	ble.n	8003138 <main+0x624>
	    	((tcWrite[7]) |= (1UL << (3)));
 8003128:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <main+0x694>)
 800312a:	79db      	ldrb	r3, [r3, #7]
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <main+0x694>)
 8003134:	71da      	strb	r2, [r3, #7]
 8003136:	e006      	b.n	8003146 <main+0x632>
	    } else {
	    	((tcWrite[7]) &= ~(1UL << (3)));
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <main+0x694>)
 800313a:	79db      	ldrb	r3, [r3, #7]
 800313c:	f023 0308 	bic.w	r3, r3, #8
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <main+0x694>)
 8003144:	71da      	strb	r2, [r3, #7]


	  

//button handlers
if(GPIOC -> IDR & GPIO_PIN_13){	//Menu button
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <main+0x6b4>)
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05d      	beq.n	8003218 <main+0x704>
    }
    else {
      displayTimer = HAL_GetTick();
displayOn = true;
    }*/
    displayTimer = HAL_GetTick();
 800315c:	f001 ff3a 	bl	8004fd4 <HAL_GetTick>
 8003160:	4603      	mov	r3, r0
 8003162:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <main+0x6b8>)
 8003164:	6013      	str	r3, [r2, #0]
displayOn = true;
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <main+0x6bc>)
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
menuButton = true;
 800316c:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <main+0x6c0>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
if(HAL_GetTick() - menuButtonTime > 1000 && !isLocked){
 8003172:	f001 ff2f 	bl	8004fd4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <main+0x6c4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003182:	d92d      	bls.n	80031e0 <main+0x6cc>
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <main+0x6c8>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	f083 0301 	eor.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d026      	beq.n	80031e0 <main+0x6cc>
 8003192:	2301      	movs	r3, #1
 8003194:	e025      	b.n	80031e2 <main+0x6ce>
 8003196:	bf00      	nop
 8003198:	20000099 	.word	0x20000099
 800319c:	20000030 	.word	0x20000030
 80031a0:	88888889 	.word	0x88888889
 80031a4:	cccccccd 	.word	0xcccccccd
 80031a8:	20000624 	.word	0x20000624
 80031ac:	20000090 	.word	0x20000090
 80031b0:	20000610 	.word	0x20000610
 80031b4:	91a2b3c5 	.word	0x91a2b3c5
 80031b8:	200000a8 	.word	0x200000a8
 80031bc:	200000a9 	.word	0x200000a9
 80031c0:	200000aa 	.word	0x200000aa
 80031c4:	200000ab 	.word	0x200000ab
 80031c8:	48000800 	.word	0x48000800
 80031cc:	20000648 	.word	0x20000648
 80031d0:	20000058 	.word	0x20000058
 80031d4:	20000660 	.word	0x20000660
 80031d8:	20000664 	.word	0x20000664
 80031dc:	20000650 	.word	0x20000650
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d020      	beq.n	8003228 <main+0x714>
  menuItem = 0;
 80031e6:	4b9b      	ldr	r3, [pc, #620]	; (8003454 <main+0x940>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
  menuItemSelect = false;
 80031ec:	4b9a      	ldr	r3, [pc, #616]	; (8003458 <main+0x944>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
  updateDisplay(d_menu);
 80031f2:	2002      	movs	r0, #2
 80031f4:	f7fd fff2 	bl	80011dc <_Z13updateDisplayh>
  menuLoop();
 80031f8:	f7fe fe9c 	bl	8001f34 <_Z8menuLoopv>
  displayTimer = HAL_GetTick();
 80031fc:	f001 feea 	bl	8004fd4 <HAL_GetTick>
 8003200:	4603      	mov	r3, r0
 8003202:	4a96      	ldr	r2, [pc, #600]	; (800345c <main+0x948>)
 8003204:	6013      	str	r3, [r2, #0]
  updateDisplay(0x1);
 8003206:	2001      	movs	r0, #1
 8003208:	f7fd ffe8 	bl	80011dc <_Z13updateDisplayh>
  menuButtonTime = HAL_GetTick();
 800320c:	f001 fee2 	bl	8004fd4 <HAL_GetTick>
 8003210:	4603      	mov	r3, r0
 8003212:	4a93      	ldr	r2, [pc, #588]	; (8003460 <main+0x94c>)
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e007      	b.n	8003228 <main+0x714>

}
	    }
      else {
        menuButton = false;
 8003218:	4b92      	ldr	r3, [pc, #584]	; (8003464 <main+0x950>)
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
        menuButtonTime = HAL_GetTick();
 800321e:	f001 fed9 	bl	8004fd4 <HAL_GetTick>
 8003222:	4603      	mov	r3, r0
 8003224:	4a8e      	ldr	r2, [pc, #568]	; (8003460 <main+0x94c>)
 8003226:	6013      	str	r3, [r2, #0]
      }

if(GPIOB -> IDR & GPIO_PIN_8){	//Up button
 8003228:	4b8f      	ldr	r3, [pc, #572]	; (8003468 <main+0x954>)
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d013      	beq.n	8003266 <main+0x752>
displayTimer = HAL_GetTick();
 800323e:	f001 fec9 	bl	8004fd4 <HAL_GetTick>
 8003242:	4603      	mov	r3, r0
 8003244:	4a85      	ldr	r2, [pc, #532]	; (800345c <main+0x948>)
 8003246:	6013      	str	r3, [r2, #0]
displayOn = true;
 8003248:	4b88      	ldr	r3, [pc, #544]	; (800346c <main+0x958>)
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
upButton = true;
 800324e:	4b88      	ldr	r3, [pc, #544]	; (8003470 <main+0x95c>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
if (HAL_GetTick() - upButtonTime > 2000){
 8003254:	f001 febe 	bl	8004fd4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	4b86      	ldr	r3, [pc, #536]	; (8003474 <main+0x960>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003264:	e007      	b.n	8003276 <main+0x762>
  //User Bits
}

	    }
      else {
        upButton = false;
 8003266:	4b82      	ldr	r3, [pc, #520]	; (8003470 <main+0x95c>)
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
        upButtonTime = HAL_GetTick();
 800326c:	f001 feb2 	bl	8004fd4 <HAL_GetTick>
 8003270:	4603      	mov	r3, r0
 8003272:	4a80      	ldr	r2, [pc, #512]	; (8003474 <main+0x960>)
 8003274:	6013      	str	r3, [r2, #0]
      }
if(GPIOB -> IDR & GPIO_PIN_9){	//Down button
 8003276:	4b7c      	ldr	r3, [pc, #496]	; (8003468 <main+0x954>)
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <main+0x78a>
displayTimer = HAL_GetTick();
 800328c:	f001 fea2 	bl	8004fd4 <HAL_GetTick>
 8003290:	4603      	mov	r3, r0
 8003292:	4a72      	ldr	r2, [pc, #456]	; (800345c <main+0x948>)
 8003294:	6013      	str	r3, [r2, #0]
displayOn = true;
 8003296:	4b75      	ldr	r3, [pc, #468]	; (800346c <main+0x958>)
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e007      	b.n	80032ae <main+0x79a>

	    }
      else{
        downButton = false;
 800329e:	4b76      	ldr	r3, [pc, #472]	; (8003478 <main+0x964>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
        downButtonTime = HAL_GetTick();
 80032a4:	f001 fe96 	bl	8004fd4 <HAL_GetTick>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4a74      	ldr	r2, [pc, #464]	; (800347c <main+0x968>)
 80032ac:	6013      	str	r3, [r2, #0]
      }

if(GPIOA -> IDR & GPIO_PIN_0){  //Power button
 80032ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d048      	beq.n	8003358 <main+0x844>
  if (!isLocked){
 80032c6:	4b6e      	ldr	r3, [pc, #440]	; (8003480 <main+0x96c>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	f083 0301 	eor.w	r3, r3, #1
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d041      	beq.n	8003358 <main+0x844>
  updateDisplay(0x4);
 80032d4:	2004      	movs	r0, #4
 80032d6:	f7fd ff81 	bl	80011dc <_Z13updateDisplayh>
  uint32_t currentTime = HAL_GetTick();
 80032da:	f001 fe7b 	bl	8004fd4 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]
  while (GPIOA -> IDR & GPIO_PIN_0){
 80032e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf14      	ite	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	2300      	moveq	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02f      	beq.n	8003358 <main+0x844>
    powerCountdown =3 - ((HAL_GetTick() - currentTime)/1000);
 80032f8:	f001 fe6c 	bl	8004fd4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	4a60      	ldr	r2, [pc, #384]	; (8003484 <main+0x970>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f1c3 0303 	rsb	r3, r3, #3
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b5d      	ldr	r3, [pc, #372]	; (8003488 <main+0x974>)
 8003314:	701a      	strb	r2, [r3, #0]
    if (!powerOff){updateDisplay(0x4);}
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <main+0x978>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <main+0x816>
 8003324:	2004      	movs	r0, #4
 8003326:	f7fd ff59 	bl	80011dc <_Z13updateDisplayh>
    if (HAL_GetTick() - currentTime > 4000){
 800332a:	f001 fe53 	bl	8004fd4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003338:	bf8c      	ite	hi
 800333a:	2301      	movhi	r3, #1
 800333c:	2300      	movls	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0cd      	beq.n	80032e0 <main+0x7cc>
      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8003344:	2001      	movs	r0, #1
 8003346:	f004 f861 	bl	800740c <HAL_PWR_EnableWakeUpPin>
      powerOff = true;
 800334a:	4b50      	ldr	r3, [pc, #320]	; (800348c <main+0x978>)
 800334c:	2201      	movs	r2, #1
 800334e:	701a      	strb	r2, [r3, #0]
      updateDisplay(0x0);
 8003350:	2000      	movs	r0, #0
 8003352:	f7fd ff43 	bl	80011dc <_Z13updateDisplayh>
  while (GPIOA -> IDR & GPIO_PIN_0){
 8003356:	e7c3      	b.n	80032e0 <main+0x7cc>
    }
  }
}
  
}
if(powerOff){
 8003358:	4b4c      	ldr	r3, [pc, #304]	; (800348c <main+0x978>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00b      	beq.n	8003378 <main+0x864>
    //updateDisplay(0x0);
    HAL_Delay(2000);
 8003360:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003364:	f001 fe42 	bl	8004fec <HAL_Delay>
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003368:	4b49      	ldr	r3, [pc, #292]	; (8003490 <main+0x97c>)
 800336a:	221f      	movs	r2, #31
 800336c:	619a      	str	r2, [r3, #24]
    HAL_PWR_EnterSTANDBYMode();
 800336e:	f004 f86d 	bl	800744c <HAL_PWR_EnterSTANDBYMode>
    powerUpMode = 0;
 8003372:	4b48      	ldr	r3, [pc, #288]	; (8003494 <main+0x980>)
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
    
}

if(isLocked && GPIOB -> IDR & GPIO_PIN_9 && GPIOB -> IDR & GPIO_PIN_8){//Both
 8003378:	4b41      	ldr	r3, [pc, #260]	; (8003480 <main+0x96c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <main+0x888>
 8003380:	4b39      	ldr	r3, [pc, #228]	; (8003468 <main+0x954>)
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <main+0x888>
 800338c:	4b36      	ldr	r3, [pc, #216]	; (8003468 <main+0x954>)
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <main+0x888>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <main+0x88a>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d04d      	beq.n	800343e <main+0x92a>
  if (!upButton && !downButton){
 80033a2:	4b33      	ldr	r3, [pc, #204]	; (8003470 <main+0x95c>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	f083 0301 	eor.w	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
  
  }
  upButton = true;
 80033ae:	4b30      	ldr	r3, [pc, #192]	; (8003470 <main+0x95c>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]
  downButton = true;
 80033b4:	4b30      	ldr	r3, [pc, #192]	; (8003478 <main+0x964>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
  buttonsHeld = true;
 80033ba:	4b37      	ldr	r3, [pc, #220]	; (8003498 <main+0x984>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
         buttonsHeld = false;
	    	while (!isLocked && (GPIOB -> IDR & GPIO_PIN_9 || GPIOB -> IDR & GPIO_PIN_8)){
	    		updateDisplay(0x01);
	    		displayTimer = HAL_GetTick();
	    	}*/
        lockCountdown = 3 - ((HAL_GetTick() - lockTimer)/1000);
 80033c0:	f001 fe08 	bl	8004fd4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b35      	ldr	r3, [pc, #212]	; (800349c <main+0x988>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <main+0x970>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f1c3 0303 	rsb	r3, r3, #3
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <main+0x98c>)
 80033de:	701a      	strb	r2, [r3, #0]
        updateDisplay(0x03);
 80033e0:	2003      	movs	r0, #3
 80033e2:	f7fd fefb 	bl	80011dc <_Z13updateDisplayh>
        if(HAL_GetTick() - upButtonTime > 3000 && HAL_GetTick() - downButtonTime > 3000){
 80033e6:	f001 fdf5 	bl	8004fd4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b21      	ldr	r3, [pc, #132]	; (8003474 <main+0x960>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d90b      	bls.n	8003412 <main+0x8fe>
 80033fa:	f001 fdeb 	bl	8004fd4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <main+0x968>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <main+0x8fe>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <main+0x900>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f43f ac1a 	beq.w	8002c4e <main+0x13a>
          isLocked = false;
 800341a:	4b19      	ldr	r3, [pc, #100]	; (8003480 <main+0x96c>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
	    			displayTimer = HAL_GetTick();
 8003420:	f001 fdd8 	bl	8004fd4 <HAL_GetTick>
 8003424:	4603      	mov	r3, r0
 8003426:	4a0d      	ldr	r2, [pc, #52]	; (800345c <main+0x948>)
 8003428:	6013      	str	r3, [r2, #0]
            buttonsHeld = false;
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <main+0x984>)
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
            uptimeMinutes = 0;
 8003430:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <main+0x990>)
 8003432:	2200      	movs	r2, #0
 8003434:	801a      	strh	r2, [r3, #0]
          updateDisplay(0x0);
 8003436:	2000      	movs	r0, #0
 8003438:	f7fd fed0 	bl	80011dc <_Z13updateDisplayh>
 800343c:	e407      	b.n	8002c4e <main+0x13a>

        

}
else {
  buttonsHeld = false;
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <main+0x984>)
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
  lockTimer = HAL_GetTick();
 8003444:	f001 fdc6 	bl	8004fd4 <HAL_GetTick>
 8003448:	4603      	mov	r3, r0
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <main+0x988>)
 800344c:	6013      	str	r3, [r2, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800344e:	f7ff bbfe 	b.w	8002c4e <main+0x13a>
 8003452:	bf00      	nop
 8003454:	200000d7 	.word	0x200000d7
 8003458:	200000d6 	.word	0x200000d6
 800345c:	20000648 	.word	0x20000648
 8003460:	20000664 	.word	0x20000664
 8003464:	20000660 	.word	0x20000660
 8003468:	48000400 	.word	0x48000400
 800346c:	20000058 	.word	0x20000058
 8003470:	20000653 	.word	0x20000653
 8003474:	20000654 	.word	0x20000654
 8003478:	20000658 	.word	0x20000658
 800347c:	2000065c 	.word	0x2000065c
 8003480:	20000650 	.word	0x20000650
 8003484:	10624dd3 	.word	0x10624dd3
 8003488:	200000c8 	.word	0x200000c8
 800348c:	20000651 	.word	0x20000651
 8003490:	40007000 	.word	0x40007000
 8003494:	20000652 	.word	0x20000652
 8003498:	200000ae 	.word	0x200000ae
 800349c:	2000064c 	.word	0x2000064c
 80034a0:	200000af 	.word	0x200000af
 80034a4:	200000a2 	.word	0x200000a2

080034a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b0ae      	sub	sp, #184	; 0xb8
 80034ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034b2:	2244      	movs	r2, #68	; 0x44
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f006 f878 	bl	80095ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034cc:	463b      	mov	r3, r7
 80034ce:	2260      	movs	r2, #96	; 0x60
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f006 f86a 	bl	80095ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034d8:	2301      	movs	r3, #1
 80034da:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80034dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034e2:	2302      	movs	r3, #2
 80034e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034e8:	2303      	movs	r3, #3
 80034ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 2;
 80034ee:	2302      	movs	r3, #2
 80034f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 10;
 80034f4:	230a      	movs	r3, #10
 80034f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80034fa:	2307      	movs	r3, #7
 80034fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003500:	2302      	movs	r3, #2
 8003502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003506:	2304      	movs	r3, #4
 8003508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800350c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003510:	4618      	mov	r0, r3
 8003512:	f004 f819 	bl	8007548 <HAL_RCC_OscConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf14      	ite	ne
 800351c:	2301      	movne	r3, #1
 800351e:	2300      	moveq	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003526:	f000 fe5d 	bl	80041e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800352a:	230f      	movs	r3, #15
 800352c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800352e:	2303      	movs	r3, #3
 8003530:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003532:	2300      	movs	r3, #0
 8003534:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003536:	2300      	movs	r3, #0
 8003538:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800353a:	2300      	movs	r3, #0
 800353c:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800353e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003542:	2101      	movs	r1, #1
 8003544:	4618      	mov	r0, r3
 8003546:	f004 fc1f 	bl	8007d88 <HAL_RCC_ClockConfig>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800355a:	f000 fe43 	bl	80041e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 800355e:	f246 03c0 	movw	r3, #24768	; 0x60c0
 8003562:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003564:	2300      	movs	r3, #0
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003568:	2300      	movs	r3, #0
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800356c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003570:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003572:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003576:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003578:	2303      	movs	r3, #3
 800357a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800357c:	2302      	movs	r3, #2
 800357e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8003580:	230a      	movs	r3, #10
 8003582:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003584:	2307      	movs	r3, #7
 8003586:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003588:	2302      	movs	r3, #2
 800358a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800358c:	2302      	movs	r3, #2
 800358e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8003590:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8003594:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003596:	463b      	mov	r3, r7
 8003598:	4618      	mov	r0, r3
 800359a:	f004 fdf7 	bl	800818c <HAL_RCCEx_PeriphCLKConfig>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80035ae:	f000 fe19 	bl	80041e4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80035b2:	2200      	movs	r2, #0
 80035b4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80035b8:	2000      	movs	r0, #0
 80035ba:	f004 fcc7 	bl	8007f4c <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80035be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035c2:	f003 ff6b 	bl	800749c <HAL_PWREx_ControlVoltageScaling>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <SystemClock_Config+0x132>
  {
    Error_Handler();
 80035d6:	f000 fe05 	bl	80041e4 <Error_Handler>
  }
}
 80035da:	bf00      	nop
 80035dc:	37b8      	adds	r7, #184	; 0xb8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035ea:	463b      	mov	r3, r7
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
 80035f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 80035fc:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <_ZL12MX_ADC1_Initv+0xd4>)
 80035fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003600:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003602:	2200      	movs	r2, #0
 8003604:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003618:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 800361a:	2204      	movs	r2, #4
 800361c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800361e:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003620:	2200      	movs	r2, #0
 8003622:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003624:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003626:	2200      	movs	r2, #0
 8003628:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 800362c:	2201      	movs	r2, #1
 800362e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003630:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003638:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 800363a:	2200      	movs	r2, #0
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003640:	2200      	movs	r2, #0
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 800364e:	2200      	movs	r2, #0
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800365a:	4816      	ldr	r0, [pc, #88]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 800365c:	f001 feb2 	bl	80053c4 <HAL_ADC_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf14      	ite	ne
 8003666:	2301      	movne	r3, #1
 8003668:	2300      	moveq	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <_ZL12MX_ADC1_Initv+0x90>
  {
    Error_Handler();
 8003670:	f000 fdb8 	bl	80041e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <_ZL12MX_ADC1_Initv+0xd8>)
 8003676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003678:	2306      	movs	r3, #6
 800367a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800367c:	2300      	movs	r3, #0
 800367e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003680:	237f      	movs	r3, #127	; 0x7f
 8003682:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003684:	2304      	movs	r3, #4
 8003686:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800368c:	463b      	mov	r3, r7
 800368e:	4619      	mov	r1, r3
 8003690:	4808      	ldr	r0, [pc, #32]	; (80036b4 <_ZL12MX_ADC1_Initv+0xd0>)
 8003692:	f002 f8d5 	bl	8005840 <HAL_ADC_ConfigChannel>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 80036a6:	f000 fd9d 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200000dc 	.word	0x200000dc
 80036b8:	50040000 	.word	0x50040000
 80036bc:	21800100 	.word	0x21800100

080036c0 <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	2224      	movs	r2, #36	; 0x24
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f005 ff6d 	bl	80095ac <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80036d2:	4b17      	ldr	r3, [pc, #92]	; (8003730 <_ZL12MX_DAC1_Initv+0x70>)
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <_ZL12MX_DAC1_Initv+0x74>)
 80036d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80036d8:	4815      	ldr	r0, [pc, #84]	; (8003730 <_ZL12MX_DAC1_Initv+0x70>)
 80036da:	f002 fdfa 	bl	80062d2 <HAL_DAC_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 80036ee:	f000 fd79 	bl	80041e4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	2210      	movs	r2, #16
 800370a:	4619      	mov	r1, r3
 800370c:	4808      	ldr	r0, [pc, #32]	; (8003730 <_ZL12MX_DAC1_Initv+0x70>)
 800370e:	f002 fe66 	bl	80063de <HAL_DAC_ConfigChannel>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 8003722:	f000 fd5f 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003726:	bf00      	nop
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000140 	.word	0x20000140
 8003734:	40007400 	.word	0x40007400

08003738 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <_ZL12MX_I2C1_Initv+0x94>)
 8003740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <_ZL12MX_I2C1_Initv+0x98>)
 8003746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 8003750:	2201      	movs	r2, #1
 8003752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003754:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 8003762:	2200      	movs	r2, #0
 8003764:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 8003768:	2200      	movs	r2, #0
 800376a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 800376e:	2200      	movs	r2, #0
 8003770:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003772:	4815      	ldr	r0, [pc, #84]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 8003774:	f003 f8ea 	bl	800694c <HAL_I2C_Init>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	bf14      	ite	ne
 800377e:	2301      	movne	r3, #1
 8003780:	2300      	moveq	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8003788:	f000 fd2c 	bl	80041e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800378c:	2100      	movs	r1, #0
 800378e:	480e      	ldr	r0, [pc, #56]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 8003790:	f003 fc48 	bl	8007024 <HAL_I2CEx_ConfigAnalogFilter>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80037a4:	f000 fd1e 	bl	80041e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037a8:	2100      	movs	r1, #0
 80037aa:	4807      	ldr	r0, [pc, #28]	; (80037c8 <_ZL12MX_I2C1_Initv+0x90>)
 80037ac:	f003 fc85 	bl	80070ba <HAL_I2CEx_ConfigDigitalFilter>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf14      	ite	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	2300      	moveq	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80037c0:	f000 fd10 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000154 	.word	0x20000154
 80037cc:	40005400 	.word	0x40005400
 80037d0:	00506682 	.word	0x00506682

080037d4 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 80037da:	4a25      	ldr	r2, [pc, #148]	; (8003870 <_ZL12MX_I2C2_Initv+0x9c>)
 80037dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010030D;
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <_ZL12MX_I2C2_Initv+0xa0>)
 80037e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80037e4:	4b21      	ldr	r3, [pc, #132]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 80037fe:	2200      	movs	r2, #0
 8003800:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 8003804:	2200      	movs	r2, #0
 8003806:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 800380a:	2200      	movs	r2, #0
 800380c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800380e:	4817      	ldr	r0, [pc, #92]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 8003810:	f003 f89c 	bl	800694c <HAL_I2C_Init>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8003824:	f000 fcde 	bl	80041e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003828:	2100      	movs	r1, #0
 800382a:	4810      	ldr	r0, [pc, #64]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 800382c:	f003 fbfa 	bl	8007024 <HAL_I2CEx_ConfigAnalogFilter>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8003840:	f000 fcd0 	bl	80041e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003844:	2100      	movs	r1, #0
 8003846:	4809      	ldr	r0, [pc, #36]	; (800386c <_ZL12MX_I2C2_Initv+0x98>)
 8003848:	f003 fc37 	bl	80070ba <HAL_I2CEx_ConfigDigitalFilter>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 800385c:	f000 fcc2 	bl	80041e4 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8003860:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003864:	f003 fc76 	bl	8007154 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003868:	bf00      	nop
 800386a:	bd80      	pop	{r7, pc}
 800386c:	200001a0 	.word	0x200001a0
 8003870:	40005800 	.word	0x40005800
 8003874:	0010030d 	.word	0x0010030d

08003878 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800387e:	f107 0314 	add.w	r3, r7, #20
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003896:	4b28      	ldr	r3, [pc, #160]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 8003898:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800389c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24-1;
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 80038a0:	2217      	movs	r2, #23
 80038a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80038be:	481e      	ldr	r0, [pc, #120]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 80038c0:	f005 f877 	bl	80089b2 <HAL_TIM_IC_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf14      	ite	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	2300      	moveq	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 80038d4:	f000 fc86 	bl	80041e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	4619      	mov	r1, r3
 80038e6:	4814      	ldr	r0, [pc, #80]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 80038e8:	f005 fd48 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80038fc:	f000 fc72 	bl	80041e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003900:	230a      	movs	r3, #10
 8003902:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003904:	2301      	movs	r3, #1
 8003906:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	2208      	movs	r2, #8
 8003914:	4619      	mov	r1, r3
 8003916:	4808      	ldr	r0, [pc, #32]	; (8003938 <_ZL12MX_TIM2_Initv+0xc0>)
 8003918:	f005 fae7 	bl	8008eea <HAL_TIM_IC_ConfigChannel>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	bf14      	ite	ne
 8003922:	2301      	movne	r3, #1
 8003924:	2300      	moveq	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 800392c:	f000 fc5a 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003930:	bf00      	nop
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200001ec 	.word	0x200001ec

0800393c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <_ZL12MX_TIM6_Initv+0x78>)
 800394e:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <_ZL12MX_TIM6_Initv+0x7c>)
 8003950:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8003952:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <_ZL12MX_TIM6_Initv+0x78>)
 8003954:	2217      	movs	r2, #23
 8003956:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003958:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <_ZL12MX_TIM6_Initv+0x78>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <_ZL12MX_TIM6_Initv+0x78>)
 8003960:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003964:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <_ZL12MX_TIM6_Initv+0x78>)
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800396c:	4811      	ldr	r0, [pc, #68]	; (80039b4 <_ZL12MX_TIM6_Initv+0x78>)
 800396e:	f004 ff45 	bl	80087fc <HAL_TIM_Base_Init>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003982:	f000 fc2f 	bl	80041e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4808      	ldr	r0, [pc, #32]	; (80039b4 <_ZL12MX_TIM6_Initv+0x78>)
 8003994:	f005 fcf2 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80039a8:	f000 fc1c 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000238 	.word	0x20000238
 80039b8:	40001000 	.word	0x40001000

080039bc <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <_ZL12MX_TIM7_Initv+0x78>)
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <_ZL12MX_TIM7_Initv+0x7c>)
 80039d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 19;
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <_ZL12MX_TIM7_Initv+0x78>)
 80039d4:	2213      	movs	r2, #19
 80039d6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d8:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <_ZL12MX_TIM7_Initv+0x78>)
 80039da:	2200      	movs	r2, #0
 80039dc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50049;
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <_ZL12MX_TIM7_Initv+0x78>)
 80039e0:	f24c 3281 	movw	r2, #50049	; 0xc381
 80039e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <_ZL12MX_TIM7_Initv+0x78>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039ec:	4811      	ldr	r0, [pc, #68]	; (8003a34 <_ZL12MX_TIM7_Initv+0x78>)
 80039ee:	f004 ff05 	bl	80087fc <HAL_TIM_Base_Init>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 8003a02:	f000 fbef 	bl	80041e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	4619      	mov	r1, r3
 8003a12:	4808      	ldr	r0, [pc, #32]	; (8003a34 <_ZL12MX_TIM7_Initv+0x78>)
 8003a14:	f005 fcb2 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8003a28:	f000 fbdc 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000284 	.word	0x20000284
 8003a38:	40001400 	.word	0x40001400

08003a3c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <_ZL13MX_TIM16_Initv+0x50>)
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <_ZL13MX_TIM16_Initv+0x54>)
 8003a44:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <_ZL13MX_TIM16_Initv+0x50>)
 8003a48:	2203      	movs	r2, #3
 8003a4a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <_ZL13MX_TIM16_Initv+0x50>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3128-1;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <_ZL13MX_TIM16_Initv+0x50>)
 8003a54:	f640 4237 	movw	r2, #3127	; 0xc37
 8003a58:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <_ZL13MX_TIM16_Initv+0x50>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <_ZL13MX_TIM16_Initv+0x50>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <_ZL13MX_TIM16_Initv+0x50>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003a6c:	4807      	ldr	r0, [pc, #28]	; (8003a8c <_ZL13MX_TIM16_Initv+0x50>)
 8003a6e:	f004 fec5 	bl	80087fc <HAL_TIM_Base_Init>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 8003a82:	f000 fbaf 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200002d0 	.word	0x200002d0
 8003a90:	40014400 	.word	0x40014400

08003a94 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003a9a:	4a14      	ldr	r2, [pc, #80]	; (8003aec <_ZL15MX_USB_PCD_Initv+0x58>)
 8003a9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003a9e:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003aac:	2202      	movs	r2, #2
 8003aae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003ac8:	4807      	ldr	r0, [pc, #28]	; (8003ae8 <_ZL15MX_USB_PCD_Initv+0x54>)
 8003aca:	f003 fb63 	bl	8007194 <HAL_PCD_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8003ade:	f000 fb81 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2000031c 	.word	0x2000031c
 8003aec:	40006800 	.word	0x40006800

08003af0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	60da      	str	r2, [r3, #12]
 8003b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	4a40      	ldr	r2, [pc, #256]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b12:	4b3e      	ldr	r3, [pc, #248]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	4a3a      	ldr	r2, [pc, #232]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b2a:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b36:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b42:	4b32      	ldr	r3, [pc, #200]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5a:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <_ZL12MX_GPIO_Initv+0x11c>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8003b66:	2200      	movs	r2, #0
 8003b68:	f241 0102 	movw	r1, #4098	; 0x1002
 8003b6c:	4828      	ldr	r0, [pc, #160]	; (8003c10 <_ZL12MX_GPIO_Initv+0x120>)
 8003b6e:	f002 fed5 	bl	800691c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	4619      	mov	r1, r3
 8003b86:	4823      	ldr	r0, [pc, #140]	; (8003c14 <_ZL12MX_GPIO_Initv+0x124>)
 8003b88:	f002 fd4e 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = TC_OUT_Pin|LED_STATUS_Pin;
 8003b8c:	f241 0302 	movw	r3, #4098	; 0x1002
 8003b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b92:	2301      	movs	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9e:	f107 0314 	add.w	r3, r7, #20
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	481a      	ldr	r0, [pc, #104]	; (8003c10 <_ZL12MX_GPIO_Initv+0x120>)
 8003ba6:	f002 fd3f 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : OSC_Pin */
  GPIO_InitStruct.Pin = OSC_Pin;
 8003baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OSC_GPIO_Port, &GPIO_InitStruct);
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bca:	f002 fd2d 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin;
 8003bce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	f107 0314 	add.w	r3, r7, #20
 8003be0:	4619      	mov	r1, r3
 8003be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be6:	f002 fd1f 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_B_Pin;
 8003bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf8:	f107 0314 	add.w	r3, r7, #20
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4804      	ldr	r0, [pc, #16]	; (8003c10 <_ZL12MX_GPIO_Initv+0x120>)
 8003c00:	f002 fd12 	bl	8006628 <HAL_GPIO_Init>

}
 8003c04:	bf00      	nop
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	48000400 	.word	0x48000400
 8003c14:	48000800 	.word	0x48000800

08003c18 <HAL_TIM_IC_CaptureCallback>:
    HAL_NVIC_SystemReset();
  
}*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
    //if ( GPIO_Pin == GPIO_PIN_8)
	if (htim->Instance == TIM2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c28:	f040 80f4 	bne.w	8003e14 <HAL_TIM_IC_CaptureCallback+0x1fc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c2c:	b672      	cpsid	i
}
 8003c2e:	bf00      	nop
		__disable_irq();
/* 
    Credit for this loop to read out the timecode:
    https://forum.arduino.cc/t/smpte-jam-sync/529740/4
*/
    	edgeTimeDiff = __HAL_TIM_GetCounter(htim);          // Get time difference between this and last edge
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	4a7a      	ldr	r2, [pc, #488]	; (8003e20 <HAL_TIM_IC_CaptureCallback+0x208>)
 8003c38:	6013      	str	r3, [r2, #0]

    	__HAL_TIM_SetCounter(htim,0);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
    	                                    // Store time of this edge



    	  if ((edgeTimeDiff < uMin1) or (edgeTimeDiff > uMax0)) { // Drop out now if edge time not withing bounds
 8003c42:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <HAL_TIM_IC_CaptureCallback+0x208>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b81      	cmp	r3, #129	; 0x81
 8003c48:	d904      	bls.n	8003c54 <HAL_TIM_IC_CaptureCallback+0x3c>
 8003c4a:	4b75      	ldr	r3, [pc, #468]	; (8003e20 <HAL_TIM_IC_CaptureCallback+0x208>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f5b3 7f23 	cmp.w	r3, #652	; 0x28c
 8003c52:	d301      	bcc.n	8003c58 <HAL_TIM_IC_CaptureCallback+0x40>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_TIM_IC_CaptureCallback+0x42>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <HAL_TIM_IC_CaptureCallback+0x62>
    	    bitSet(tcFlags, tcFrameError);
 8003c5e:	4b71      	ldr	r3, [pc, #452]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4b6e      	ldr	r3, [pc, #440]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003c6c:	701a      	strb	r2, [r3, #0]
    	    jamCount = 0;
 8003c6e:	4b6e      	ldr	r3, [pc, #440]	; (8003e28 <HAL_TIM_IC_CaptureCallback+0x210>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c74:	b662      	cpsie	i
}
 8003c76:	bf00      	nop
    	    __enable_irq();
    	    //Offset++;
    	    return;
 8003c78:	e0ce      	b.n	8003e18 <HAL_TIM_IC_CaptureCallback+0x200>
    	  }

    	  if (edgeTimeDiff > uMax1)                               // A zero bit arrived
 8003c7a:	4b69      	ldr	r3, [pc, #420]	; (8003e20 <HAL_TIM_IC_CaptureCallback+0x208>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8003c82:	bf8c      	ite	hi
 8003c84:	2301      	movhi	r3, #1
 8003c86:	2300      	movls	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d020      	beq.n	8003cd0 <HAL_TIM_IC_CaptureCallback+0xb8>
    	  {
    	    if (bitRead(tcFlags, tcHalfOne) == 1){                // But we are expecting a 1 edge
 8003c8e:	4b65      	ldr	r3, [pc, #404]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	111b      	asrs	r3, r3, #4
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_TIM_IC_CaptureCallback+0xae>
    	      bitClear(tcFlags, tcHalfOne);
 8003ca8:	4b5e      	ldr	r3, [pc, #376]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	4b5b      	ldr	r3, [pc, #364]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003cb6:	701a      	strb	r2, [r3, #0]
    	      clearBuffer(tc, sizeof(tc)); //TODO WHAT DOES?
 8003cb8:	210a      	movs	r1, #10
 8003cba:	485c      	ldr	r0, [pc, #368]	; (8003e2c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003cbc:	f000 f8be 	bl	8003e3c <_Z11clearBufferPhh>
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc0:	b662      	cpsie	i
}
 8003cc2:	bf00      	nop
    	      __enable_irq();
    	      return;
 8003cc4:	e0a8      	b.n	8003e18 <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // 0 bit
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 8003cc6:	210a      	movs	r1, #10
 8003cc8:	4858      	ldr	r0, [pc, #352]	; (8003e2c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003cca:	f000 f8d3 	bl	8003e74 <_Z10shiftRightPhh>
 8003cce:	e029      	b.n	8003d24 <HAL_TIM_IC_CaptureCallback+0x10c>
    	    // Shift replaces top bit with zero so nothing else to do
    	    //bitClear(tc[0], 7);                                   // Reset the 1 bit in the buffer
    	  }
    	  else                                                    // Not zero so must be a 1 bit
    	  { // 1 bit
    	    if (bitRead(tcFlags, tcHalfOne) == 0){                // First edge of a 1 bit
 8003cd0:	4b54      	ldr	r3, [pc, #336]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_TIM_IC_CaptureCallback+0xe6>
    	      bitSet(tcFlags, tcHalfOne);                         // Flag we have the first half
 8003ce8:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f043 0310 	orr.w	r3, r3, #16
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b4b      	ldr	r3, [pc, #300]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003cf6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cf8:	b662      	cpsie	i
}
 8003cfa:	bf00      	nop
    	      __enable_irq();
    	      return;
 8003cfc:	e08c      	b.n	8003e18 <HAL_TIM_IC_CaptureCallback+0x200>
    	    }
    	    // Second edge of a 1 bit
    	    bitClear(tcFlags, tcHalfOne);                         // Clear half 1 flag
 8003cfe:	4b49      	ldr	r3, [pc, #292]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f023 0310 	bic.w	r3, r3, #16
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b46      	ldr	r3, [pc, #280]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d0c:	701a      	strb	r2, [r3, #0]
    	    shiftRight(tc, sizeof(tc));                           // Rotate buffer right
 8003d0e:	210a      	movs	r1, #10
 8003d10:	4846      	ldr	r0, [pc, #280]	; (8003e2c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003d12:	f000 f8af 	bl	8003e74 <_Z10shiftRightPhh>
    	    bitSet(tc[0], 7);                                     // Set the 1 bit in the buffer
 8003d16:	4b45      	ldr	r3, [pc, #276]	; (8003e2c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003d22:	701a      	strb	r2, [r3, #0]
    	  }
    	  // Congratulations, we have managed to read a valid 0 or 1 bit into buffer
    	  if (uint16_t( (tc[0] << 8) | (tc[1] & 0xff) ) == sync){                        // Last 2 bytes read = sync?
 8003d24:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	4a3e      	ldr	r2, [pc, #248]	; (8003e30 <HAL_TIM_IC_CaptureCallback+0x218>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d16b      	bne.n	8003e14 <HAL_TIM_IC_CaptureCallback+0x1fc>
    	    bitClear(tcFlags, tcFrameError);                      // Clear framing error
 8003d3c:	4b39      	ldr	r3, [pc, #228]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f023 0302 	bic.w	r3, r3, #2
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d4a:	701a      	strb	r2, [r3, #0]
    	    bitClear(tcFlags, tcOverrun);                         // Clear overrun error
 8003d4c:	4b35      	ldr	r3, [pc, #212]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f023 0304 	bic.w	r3, r3, #4
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	4b32      	ldr	r3, [pc, #200]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d5a:	701a      	strb	r2, [r3, #0]
    	    if (bitRead(tcFlags, tcForceUpdate) == 1){
 8003d5c:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	10db      	asrs	r3, r3, #3
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <HAL_TIM_IC_CaptureCallback+0x16e>
    	      bitClear(tcFlags, tcValid);                         // Signal last TC read
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4b28      	ldr	r3, [pc, #160]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d84:	701a      	strb	r2, [r3, #0]
    	    }
    	    if (bitRead(tcFlags, tcValid) == 1){                  // Last TC not read
 8003d86:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_TIM_IC_CaptureCallback+0x196>
    	      bitSet(tcFlags, tcOverrun);                         // Flag overrun error
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003dac:	701a      	strb	r2, [r3, #0]
    	     // __enable_irq();
    	     // return;                                             // Do nothing else
    	    }
    	    //if (jamEnable){
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b07      	cmp	r3, #7
 8003db6:	d80a      	bhi.n	8003dce <HAL_TIM_IC_CaptureCallback+0x1b6>
    	    		tcIN[x] = tc[x + 2];
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	1c9a      	adds	r2, r3, #2
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	491b      	ldr	r1, [pc, #108]	; (8003e2c <HAL_TIM_IC_CaptureCallback+0x214>)
 8003dc0:	5c89      	ldrb	r1, [r1, r2]
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003dc4:	54d1      	strb	r1, [r2, r3]
    	    	for (uint8_t x = 0; x < sizeof(tcIN); x++){            // Copy buffer without sync word
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e7f1      	b.n	8003db2 <HAL_TIM_IC_CaptureCallback+0x19a>
    	    	}
    	    //}
    	    bitSet(tcFlags, tcValid);                             // Signal valid TC
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8003ddc:	701a      	strb	r2, [r3, #0]
    	    jamCount++;
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_TIM_IC_CaptureCallback+0x210>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_TIM_IC_CaptureCallback+0x210>)
 8003dea:	701a      	strb	r2, [r3, #0]
    	    if (jamCount > 23){
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <HAL_TIM_IC_CaptureCallback+0x210>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b17      	cmp	r3, #23
 8003df4:	bf8c      	ite	hi
 8003df6:	2301      	movhi	r3, #1
 8003df8:	2300      	movls	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIM_IC_CaptureCallback+0x1f8>
    	    	//jamEnable = false;
    	    	jamCount = 0;
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_TIM_IC_CaptureCallback+0x210>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
    	    	tcJammed = true;
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_TIM_IC_CaptureCallback+0x220>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
initTimecode();
 8003e0c:	f7fe fcac 	bl	8002768 <_Z12initTimecodev>
  __ASM volatile ("cpsie i" : : : "memory");
 8003e10:	b662      	cpsie	i
}
 8003e12:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003e14:	b662      	cpsie	i
}
 8003e16:	bf00      	nop
    	    //}
    	  }

    }
	__enable_irq();
}
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000620 	.word	0x20000620
 8003e24:	2000061f 	.word	0x2000061f
 8003e28:	2000061e 	.word	0x2000061e
 8003e2c:	20000614 	.word	0x20000614
 8003e30:	ffffbffc 	.word	0xffffbffc
 8003e34:	20000090 	.word	0x20000090
 8003e38:	20000098 	.word	0x20000098

08003e3c <_Z11clearBufferPhh>:

void clearBuffer(uint8_t theArray[], uint8_t theArraySize){
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	429a      	cmp	r2, r3
 8003e54:	da08      	bge.n	8003e68 <_Z11clearBufferPhh+0x2c>
    theArray[x] = 0;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
  for (uint8_t x = 0; x < theArraySize - 1; x++){
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	3301      	adds	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	e7f1      	b.n	8003e4c <_Z11clearBufferPhh+0x10>
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <_Z10shiftRightPhh>:

void shiftRight(uint8_t theArray[], uint8_t theArraySize){
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  uint8_t x;
  for (x = theArraySize; x > 0; x--){
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d024      	beq.n	8003ed4 <_Z10shiftRightPhh+0x60>
    uint8_t xBit = bitRead(theArray[x - 1], 0);
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	73bb      	strb	r3, [r7, #14]
    theArray[x] = theArray[x] >> 1;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	1059      	asrs	r1, r3, #1
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	b2ca      	uxtb	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    theArray[x] = theArray[x] | (xBit << 7);
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b25a      	sxtb	r2, r3
 8003eb8:	7bbb      	ldrb	r3, [r7, #14]
 8003eba:	01db      	lsls	r3, r3, #7
 8003ebc:	b25b      	sxtb	r3, r3
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b259      	sxtb	r1, r3
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	b2ca      	uxtb	r2, r1
 8003eca:	701a      	strb	r2, [r3, #0]
  for (x = theArraySize; x > 0; x--){
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
 8003ed2:	e7d7      	b.n	8003e84 <_Z10shiftRightPhh+0x10>
  }
  theArray[x] = theArray[x] >> 1;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	1059      	asrs	r1, r3, #1
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	b2ca      	uxtb	r2, r1
 8003ee6:	701a      	strb	r2, [r3, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
			  }
		  }
		ledCount++;
	}*/
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4aa1      	ldr	r2, [pc, #644]	; (8004184 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	f040 80bf 	bne.w	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
  {
	  switch (writeState){
 8003f06:	4ba0      	ldr	r3, [pc, #640]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b07      	cmp	r3, #7
 8003f0c:	f200 80ba 	bhi.w	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f39 	.word	0x08003f39
 8003f1c:	08003fe7 	.word	0x08003fe7
 8003f20:	08004021 	.word	0x08004021
 8003f24:	08004029 	.word	0x08004029
 8003f28:	08004031 	.word	0x08004031
 8003f2c:	08004039 	.word	0x08004039
 8003f30:	08004041 	.word	0x08004041
 8003f34:	0800407b 	.word	0x0800407b
	  case 0x00:

		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8003f38:	4b94      	ldr	r3, [pc, #592]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	bf0c      	ite	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	2300      	movne	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <HAL_TIM_PeriodElapsedCallback+0x6a>
			  (GPIOB->ODR) &= ~(1UL << (1));
 8003f50:	4b8e      	ldr	r3, [pc, #568]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4a8d      	ldr	r2, [pc, #564]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003f56:	f023 0302 	bic.w	r3, r3, #2
 8003f5a:	6153      	str	r3, [r2, #20]
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_PeriodElapsedCallback+0x76>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4a8a      	ldr	r2, [pc, #552]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	6153      	str	r3, [r2, #20]
		  }

		  if (((tcWriteBuf[byteNumber] >> bitNumber) & 0x01) == 1){
 8003f6a:	4b89      	ldr	r3, [pc, #548]	; (8004190 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a89      	ldr	r2, [pc, #548]	; (8004194 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa42 f303 	asr.w	r3, r2, r3
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_TIM_PeriodElapsedCallback+0x98>
			  writeState = 0x01;
 8003f84:	4b80      	ldr	r3, [pc, #512]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e002      	b.n	8003f92 <HAL_TIM_PeriodElapsedCallback+0x9e>
		  } else {
			  writeState = 0x02;
 8003f8c:	4b7e      	ldr	r3, [pc, #504]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]
		  }
		  bitNumber++;
 8003f92:	4b81      	ldr	r3, [pc, #516]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3301      	adds	r3, #1
 8003f98:	4a7f      	ldr	r2, [pc, #508]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003f9a:	6013      	str	r3, [r2, #0]
		  if (bitNumber == 8){
 8003f9c:	4b7e      	ldr	r3, [pc, #504]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d16e      	bne.n	8004082 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  bitNumber = 0;
 8003fa4:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
			  byteNumber++;
 8003faa:	4b79      	ldr	r3, [pc, #484]	; (8004190 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4a77      	ldr	r2, [pc, #476]	; (8004190 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003fb2:	6013      	str	r3, [r2, #0]
			  if (byteNumber == 10){
 8003fb4:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b0a      	cmp	r3, #10
 8003fba:	d162      	bne.n	8004082 <HAL_TIM_PeriodElapsedCallback+0x18e>
				  byteNumber = 0;
 8003fbc:	4b74      	ldr	r3, [pc, #464]	; (8004190 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

				  for (int i=0; i<10; i++){
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	dc5a      	bgt.n	8004082 <HAL_TIM_PeriodElapsedCallback+0x18e>
			  tcWriteBuf[i] = tcWrite[i];
 8003fcc:	4a73      	ldr	r2, [pc, #460]	; (800419c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	7819      	ldrb	r1, [r3, #0]
 8003fd4:	4a6f      	ldr	r2, [pc, #444]	; (8004194 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	460a      	mov	r2, r1
 8003fdc:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<10; i++){
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e7ef      	b.n	8003fc6 <HAL_TIM_PeriodElapsedCallback+0xd2>
			  }
		  }
		  break;

	  case 0x01:
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8003fe6:	4b69      	ldr	r3, [pc, #420]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <HAL_TIM_PeriodElapsedCallback+0x118>
			  (GPIOB->ODR) &= ~(1UL << (1));
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	4a62      	ldr	r2, [pc, #392]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004004:	f023 0302 	bic.w	r3, r3, #2
 8004008:	6153      	str	r3, [r2, #20]
 800400a:	e005      	b.n	8004018 <HAL_TIM_PeriodElapsedCallback+0x124>
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
 800400c:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	4a5e      	ldr	r2, [pc, #376]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004012:	f043 0302 	orr.w	r3, r3, #2
 8004016:	6153      	str	r3, [r2, #20]
		  }
		  writeState = 0x00;
 8004018:	4b5b      	ldr	r3, [pc, #364]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
		  break;
 800401e:	e031      	b.n	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x02:
		  writeState = 0x00;
 8004020:	4b59      	ldr	r3, [pc, #356]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
		  break;
 8004026:	e02d      	b.n	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x03:
		  writeState = 0x04;
 8004028:	4b57      	ldr	r3, [pc, #348]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800402a:	2204      	movs	r2, #4
 800402c:	701a      	strb	r2, [r3, #0]
		  break;
 800402e:	e029      	b.n	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x04:
		  writeState = 0x01;
 8004030:	4b55      	ldr	r3, [pc, #340]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
		  break;
 8004036:	e025      	b.n	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x05:
		  writeState = 0x06;
 8004038:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800403a:	2206      	movs	r2, #6
 800403c:	701a      	strb	r2, [r3, #0]

		  break;
 800403e:	e021      	b.n	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x06:
		  writeState = 0x07;
 8004040:	4b51      	ldr	r3, [pc, #324]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8004042:	2207      	movs	r2, #7
 8004044:	701a      	strb	r2, [r3, #0]
		  if (( (GPIOB->ODR >> 1) & 0x01) == 1){
 8004046:	4b51      	ldr	r3, [pc, #324]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d006      	beq.n	800406c <HAL_TIM_PeriodElapsedCallback+0x178>
			  (GPIOB->ODR) &= ~(1UL << (1));
 800405e:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4a4a      	ldr	r2, [pc, #296]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004064:	f023 0302 	bic.w	r3, r3, #2
 8004068:	6153      	str	r3, [r2, #20]
		  } else {
			  (GPIOB->ODR) |= (1UL << (1));
		  }
		  break;
 800406a:	e00b      	b.n	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
			  (GPIOB->ODR) |= (1UL << (1));
 800406c:	4b47      	ldr	r3, [pc, #284]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	4a46      	ldr	r2, [pc, #280]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004072:	f043 0302 	orr.w	r3, r3, #2
 8004076:	6153      	str	r3, [r2, #20]
		  break;
 8004078:	e004      	b.n	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
	  case 0x07:
		  writeState = 0x01;
 800407a:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
		  break;
 8004080:	e000      	b.n	8004084 <HAL_TIM_PeriodElapsedCallback+0x190>
		  break;
 8004082:	bf00      	nop
	  }

  }
  if (htim == &htim7){  //Triggers once per frame
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a46      	ldr	r2, [pc, #280]	; (80041a0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004088:	4293      	cmp	r3, r2
 800408a:	f040 80a3 	bne.w	80041d4 <HAL_TIM_PeriodElapsedCallback+0x2e0>
  __ASM volatile ("cpsid i" : : : "memory");
 800408e:	b672      	cpsid	i
}
 8004090:	bf00      	nop
	  __disable_irq();
	  clockFrame++;
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	4a42      	ldr	r2, [pc, #264]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800409a:	6013      	str	r3, [r2, #0]
	  if (compensate){    //If coming back from compensation
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d017      	beq.n	80040d6 <HAL_TIM_PeriodElapsedCallback+0x1e2>
		  //reset to proper ARR
		  __HAL_TIM_SET_AUTORELOAD(&htim7,frameRateARR[frameRate]);
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	4b40      	ldr	r3, [pc, #256]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80040ae:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80040b2:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80040b8:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	4b3c      	ldr	r3, [pc, #240]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80040c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80040c8:	60da      	str	r2, [r3, #12]
		  //TIM7->ARR = 50049;
		  compensate = false;
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
		  compensationCounter = 0;
 80040d0:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	801a      	strh	r2, [r3, #0]
	  }
    //If it's time to compensate
	  if (compensationCounter == calibrationInterval[frameRate]){
 80040d6:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	4b33      	ldr	r3, [pc, #204]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	4619      	mov	r1, r3
 80040e4:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80040e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d024      	beq.n	8004142 <HAL_TIM_PeriodElapsedCallback+0x24e>
		  __HAL_TIM_SET_AUTORELOAD(&htim7, (frameRateARR[frameRate] + calibrationArray[frameRate]));
 80040f8:	4b2c      	ldr	r3, [pc, #176]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004100:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004104:	461a      	mov	r2, r3
 8004106:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4619      	mov	r1, r3
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800410e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004112:	441a      	add	r2, r3
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004122:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004126:	461a      	mov	r2, r3
 8004128:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	4619      	mov	r1, r3
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8004130:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004134:	4413      	add	r3, r2
 8004136:	461a      	mov	r2, r3
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800413a:	60da      	str	r2, [r3, #12]
		  compensate = true;
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]

	  }
compensationCounter++;
 8004142:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	3301      	adds	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800414e:	801a      	strh	r2, [r3, #0]

    if (clockFrame % frameRateDivisor[frameRate] == 0){
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004156:	7812      	ldrb	r2, [r2, #0]
 8004158:	4611      	mov	r1, r2
 800415a:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800415c:	5c52      	ldrb	r2, [r2, r1]
 800415e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004162:	fb02 f201 	mul.w	r2, r2, r1
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d026      	beq.n	80041c4 <HAL_TIM_PeriodElapsedCallback+0x2d0>
		  (GPIOB->ODR) |= (1UL << (12));
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4a04      	ldr	r2, [pc, #16]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x298>)
 800417c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004180:	6153      	str	r3, [r2, #20]
 8004182:	e025      	b.n	80041d0 <HAL_TIM_PeriodElapsedCallback+0x2dc>
 8004184:	200002d0 	.word	0x200002d0
 8004188:	2000063a 	.word	0x2000063a
 800418c:	48000400 	.word	0x48000400
 8004190:	2000063c 	.word	0x2000063c
 8004194:	20000630 	.word	0x20000630
 8004198:	20000640 	.word	0x20000640
 800419c:	20000624 	.word	0x20000624
 80041a0:	20000284 	.word	0x20000284
 80041a4:	2000009c 	.word	0x2000009c
 80041a8:	20000646 	.word	0x20000646
 80041ac:	20000099 	.word	0x20000099
 80041b0:	20000038 	.word	0x20000038
 80041b4:	20000644 	.word	0x20000644
 80041b8:	20000018 	.word	0x20000018
 80041bc:	200000b0 	.word	0x200000b0
 80041c0:	20000030 	.word	0x20000030
	  } else {
			  (GPIOB->ODR) &= ~(1UL << (12));
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80041ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 80041d0:	b662      	cpsie	i
}
 80041d2:	bf00      	nop
	  }

	  __enable_irq();
  }
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	48000400 	.word	0x48000400

080041e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80041e8:	b672      	cpsid	i
}
 80041ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041ec:	e7fe      	b.n	80041ec <Error_Handler+0x8>

080041ee <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af04      	add	r7, sp, #16
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80041fa:	230a      	movs	r3, #10
 80041fc:	9302      	str	r3, [sp, #8]
 80041fe:	2301      	movs	r3, #1
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	1cfb      	adds	r3, r7, #3
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2301      	movs	r3, #1
 8004208:	2200      	movs	r2, #0
 800420a:	2178      	movs	r1, #120	; 0x78
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f002 fc2d 	bl	8006a6c <HAL_I2C_Mem_Write>
 8004212:	4603      	mov	r3, r0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8004224:	2064      	movs	r0, #100	; 0x64
 8004226:	f000 fee1 	bl	8004fec <HAL_Delay>
    int status = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800422e:	21ae      	movs	r1, #174	; 0xae
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ffdc 	bl	80041ee <ssd1306_WriteCommand>
 8004236:	4603      	mov	r3, r0
 8004238:	461a      	mov	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8004240:	2120      	movs	r1, #32
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff ffd3 	bl	80041ee <ssd1306_WriteCommand>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4413      	add	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004252:	2110      	movs	r1, #16
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ffca 	bl	80041ee <ssd1306_WriteCommand>
 800425a:	4603      	mov	r3, r0
 800425c:	461a      	mov	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8004264:	21b0      	movs	r1, #176	; 0xb0
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff ffc1 	bl	80041ee <ssd1306_WriteCommand>
 800426c:	4603      	mov	r3, r0
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8004276:	21c8      	movs	r1, #200	; 0xc8
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ffb8 	bl	80041ee <ssd1306_WriteCommand>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8004288:	2100      	movs	r1, #0
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ffaf 	bl	80041ee <ssd1306_WriteCommand>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800429a:	2110      	movs	r1, #16
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ffa6 	bl	80041ee <ssd1306_WriteCommand>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80042ac:	2140      	movs	r1, #64	; 0x40
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff9d 	bl	80041ee <ssd1306_WriteCommand>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 80042be:	2181      	movs	r1, #129	; 0x81
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff94 	bl	80041ee <ssd1306_WriteCommand>
 80042c6:	4603      	mov	r3, r0
 80042c8:	461a      	mov	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80042d0:	21ff      	movs	r1, #255	; 0xff
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff ff8b 	bl	80041ee <ssd1306_WriteCommand>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80042e2:	21a1      	movs	r1, #161	; 0xa1
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff82 	bl	80041ee <ssd1306_WriteCommand>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80042f4:	21a6      	movs	r1, #166	; 0xa6
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff ff79 	bl	80041ee <ssd1306_WriteCommand>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8004306:	21a8      	movs	r1, #168	; 0xa8
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff70 	bl	80041ee <ssd1306_WriteCommand>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x3F);
 8004318:	213f      	movs	r1, #63	; 0x3f
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff ff67 	bl	80041ee <ssd1306_WriteCommand>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800432a:	21a4      	movs	r1, #164	; 0xa4
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff ff5e 	bl	80041ee <ssd1306_WriteCommand>
 8004332:	4603      	mov	r3, r0
 8004334:	461a      	mov	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 800433c:	21d3      	movs	r1, #211	; 0xd3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ff55 	bl	80041ee <ssd1306_WriteCommand>
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 800434e:	2100      	movs	r1, #0
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff ff4c 	bl	80041ee <ssd1306_WriteCommand>
 8004356:	4603      	mov	r3, r0
 8004358:	461a      	mov	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8004360:	21d5      	movs	r1, #213	; 0xd5
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff ff43 	bl	80041ee <ssd1306_WriteCommand>
 8004368:	4603      	mov	r3, r0
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8004372:	21f0      	movs	r1, #240	; 0xf0
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff3a 	bl	80041ee <ssd1306_WriteCommand>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8004384:	21d9      	movs	r1, #217	; 0xd9
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff ff31 	bl	80041ee <ssd1306_WriteCommand>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8004396:	2122      	movs	r1, #34	; 0x22
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff28 	bl	80041ee <ssd1306_WriteCommand>
 800439e:	4603      	mov	r3, r0
 80043a0:	461a      	mov	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80043a8:	21da      	movs	r1, #218	; 0xda
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff ff1f 	bl	80041ee <ssd1306_WriteCommand>
 80043b0:	4603      	mov	r3, r0
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x12);
 80043ba:	2112      	movs	r1, #18
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ff16 	bl	80041ee <ssd1306_WriteCommand>
 80043c2:	4603      	mov	r3, r0
 80043c4:	461a      	mov	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 80043cc:	21db      	movs	r1, #219	; 0xdb
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff ff0d 	bl	80041ee <ssd1306_WriteCommand>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 80043de:	2120      	movs	r1, #32
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ff04 	bl	80041ee <ssd1306_WriteCommand>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 80043f0:	218d      	movs	r1, #141	; 0x8d
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fefb 	bl	80041ee <ssd1306_WriteCommand>
 80043f8:	4603      	mov	r3, r0
 80043fa:	461a      	mov	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8004402:	2114      	movs	r1, #20
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff fef2 	bl	80041ee <ssd1306_WriteCommand>
 800440a:	4603      	mov	r3, r0
 800440c:	461a      	mov	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8004414:	21af      	movs	r1, #175	; 0xaf
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fee9 	bl	80041ee <ssd1306_WriteCommand>
 800441c:	4603      	mov	r3, r0
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <ssd1306_Init+0x214>
        return 1;
 800442c:	2301      	movs	r3, #1
 800442e:	e00f      	b.n	8004450 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8004430:	2000      	movs	r0, #0
 8004432:	f000 f813 	bl	800445c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f834 	bl	80044a4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <ssd1306_Init+0x23c>)
 800443e:	2200      	movs	r2, #0
 8004440:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <ssd1306_Init+0x23c>)
 8004444:	2200      	movs	r2, #0
 8004446:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <ssd1306_Init+0x23c>)
 800444a:	2201      	movs	r2, #1
 800444c:	715a      	strb	r2, [r3, #5]

    return 0;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000a6c 	.word	0x20000a6c

0800445c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e00d      	b.n	8004488 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <ssd1306_Fill+0x1a>
 8004472:	2100      	movs	r1, #0
 8004474:	e000      	b.n	8004478 <ssd1306_Fill+0x1c>
 8004476:	21ff      	movs	r1, #255	; 0xff
 8004478:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <ssd1306_Fill+0x44>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	460a      	mov	r2, r1
 8004480:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d3ed      	bcc.n	800446c <ssd1306_Fill+0x10>
    }
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	2000066c 	.word	0x2000066c

080044a4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af04      	add	r7, sp, #16
 80044aa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]
 80044b0:	e020      	b.n	80044f4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	3b50      	subs	r3, #80	; 0x50
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fe97 	bl	80041ee <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 80044c0:	2100      	movs	r1, #0
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fe93 	bl	80041ee <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 80044c8:	2110      	movs	r1, #16
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff fe8f 	bl	80041ee <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	01db      	lsls	r3, r3, #7
 80044d4:	4a0b      	ldr	r2, [pc, #44]	; (8004504 <ssd1306_UpdateScreen+0x60>)
 80044d6:	4413      	add	r3, r2
 80044d8:	2264      	movs	r2, #100	; 0x64
 80044da:	9202      	str	r2, [sp, #8]
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	9201      	str	r2, [sp, #4]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2301      	movs	r3, #1
 80044e4:	2240      	movs	r2, #64	; 0x40
 80044e6:	2178      	movs	r1, #120	; 0x78
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f002 fabf 	bl	8006a6c <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	3301      	adds	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b07      	cmp	r3, #7
 80044f8:	d9db      	bls.n	80044b2 <ssd1306_UpdateScreen+0xe>
    }
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	2000066c 	.word	0x2000066c

08004508 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
 8004512:	460b      	mov	r3, r1
 8004514:	71bb      	strb	r3, [r7, #6]
 8004516:	4613      	mov	r3, r2
 8004518:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	2b00      	cmp	r3, #0
 8004520:	db48      	blt.n	80045b4 <ssd1306_DrawPixel+0xac>
 8004522:	79bb      	ldrb	r3, [r7, #6]
 8004524:	2b3f      	cmp	r3, #63	; 0x3f
 8004526:	d845      	bhi.n	80045b4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <ssd1306_DrawPixel+0xb8>)
 800452a:	791b      	ldrb	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d006      	beq.n	800453e <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8004530:	797b      	ldrb	r3, [r7, #5]
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 800453e:	797b      	ldrb	r3, [r7, #5]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d11a      	bne.n	800457a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004544:	79fa      	ldrb	r2, [r7, #7]
 8004546:	79bb      	ldrb	r3, [r7, #6]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	b2d8      	uxtb	r0, r3
 800454c:	4603      	mov	r3, r0
 800454e:	01db      	lsls	r3, r3, #7
 8004550:	4413      	add	r3, r2
 8004552:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <ssd1306_DrawPixel+0xbc>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	b25a      	sxtb	r2, r3
 8004558:	79bb      	ldrb	r3, [r7, #6]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	b25b      	sxtb	r3, r3
 8004566:	4313      	orrs	r3, r2
 8004568:	b259      	sxtb	r1, r3
 800456a:	79fa      	ldrb	r2, [r7, #7]
 800456c:	4603      	mov	r3, r0
 800456e:	01db      	lsls	r3, r3, #7
 8004570:	4413      	add	r3, r2
 8004572:	b2c9      	uxtb	r1, r1
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <ssd1306_DrawPixel+0xbc>)
 8004576:	54d1      	strb	r1, [r2, r3]
 8004578:	e01d      	b.n	80045b6 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800457a:	79fa      	ldrb	r2, [r7, #7]
 800457c:	79bb      	ldrb	r3, [r7, #6]
 800457e:	08db      	lsrs	r3, r3, #3
 8004580:	b2d8      	uxtb	r0, r3
 8004582:	4603      	mov	r3, r0
 8004584:	01db      	lsls	r3, r3, #7
 8004586:	4413      	add	r3, r2
 8004588:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <ssd1306_DrawPixel+0xbc>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	b25a      	sxtb	r2, r3
 800458e:	79bb      	ldrb	r3, [r7, #6]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	2101      	movs	r1, #1
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	b25b      	sxtb	r3, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	b25b      	sxtb	r3, r3
 80045a0:	4013      	ands	r3, r2
 80045a2:	b259      	sxtb	r1, r3
 80045a4:	79fa      	ldrb	r2, [r7, #7]
 80045a6:	4603      	mov	r3, r0
 80045a8:	01db      	lsls	r3, r3, #7
 80045aa:	4413      	add	r3, r2
 80045ac:	b2c9      	uxtb	r1, r1
 80045ae:	4a05      	ldr	r2, [pc, #20]	; (80045c4 <ssd1306_DrawPixel+0xbc>)
 80045b0:	54d1      	strb	r1, [r2, r3]
 80045b2:	e000      	b.n	80045b6 <ssd1306_DrawPixel+0xae>
        return;
 80045b4:	bf00      	nop
    }
}
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	20000a6c 	.word	0x20000a6c
 80045c4:	2000066c 	.word	0x2000066c

080045c8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80045c8:	b590      	push	{r4, r7, lr}
 80045ca:	b089      	sub	sp, #36	; 0x24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4604      	mov	r4, r0
 80045d0:	1d38      	adds	r0, r7, #4
 80045d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80045d6:	461a      	mov	r2, r3
 80045d8:	4623      	mov	r3, r4
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	4613      	mov	r3, r2
 80045de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80045e0:	4b38      	ldr	r3, [pc, #224]	; (80046c4 <ssd1306_WriteChar+0xfc>)
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	793b      	ldrb	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	2b7f      	cmp	r3, #127	; 0x7f
 80045ec:	dc06      	bgt.n	80045fc <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80045ee:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <ssd1306_WriteChar+0xfc>)
 80045f0:	885b      	ldrh	r3, [r3, #2]
 80045f2:	461a      	mov	r2, r3
 80045f4:	797b      	ldrb	r3, [r7, #5]
 80045f6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80045f8:	2b3f      	cmp	r3, #63	; 0x3f
 80045fa:	dd01      	ble.n	8004600 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e05d      	b.n	80046bc <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e04c      	b.n	80046a0 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	3b20      	subs	r3, #32
 800460c:	7979      	ldrb	r1, [r7, #5]
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4619      	mov	r1, r3
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	440b      	add	r3, r1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8004620:	2300      	movs	r3, #0
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	e034      	b.n	8004690 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d012      	beq.n	800465c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <ssd1306_WriteChar+0xfc>)
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	4413      	add	r3, r2
 8004642:	b2d8      	uxtb	r0, r3
 8004644:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <ssd1306_WriteChar+0xfc>)
 8004646:	885b      	ldrh	r3, [r3, #2]
 8004648:	b2da      	uxtb	r2, r3
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	4413      	add	r3, r2
 8004650:	b2db      	uxtb	r3, r3
 8004652:	7bba      	ldrb	r2, [r7, #14]
 8004654:	4619      	mov	r1, r3
 8004656:	f7ff ff57 	bl	8004508 <ssd1306_DrawPixel>
 800465a:	e016      	b.n	800468a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <ssd1306_WriteChar+0xfc>)
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	4413      	add	r3, r2
 8004668:	b2d8      	uxtb	r0, r3
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <ssd1306_WriteChar+0xfc>)
 800466c:	885b      	ldrh	r3, [r3, #2]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4413      	add	r3, r2
 8004676:	b2d9      	uxtb	r1, r3
 8004678:	7bbb      	ldrb	r3, [r7, #14]
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	f7ff ff3f 	bl	8004508 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	3301      	adds	r3, #1
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	793b      	ldrb	r3, [r7, #4]
 8004692:	461a      	mov	r2, r3
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	4293      	cmp	r3, r2
 8004698:	d3c5      	bcc.n	8004626 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3301      	adds	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	797b      	ldrb	r3, [r7, #5]
 80046a2:	461a      	mov	r2, r3
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d3ad      	bcc.n	8004606 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <ssd1306_WriteChar+0xfc>)
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	793b      	ldrb	r3, [r7, #4]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <ssd1306_WriteChar+0xfc>)
 80046b8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3724      	adds	r7, #36	; 0x24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}
 80046c4:	20000a6c 	.word	0x20000a6c

080046c8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	1d38      	adds	r0, r7, #4
 80046d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80046d6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 80046d8:	e012      	b.n	8004700 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	7818      	ldrb	r0, [r3, #0]
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	1d3a      	adds	r2, r7, #4
 80046e2:	ca06      	ldmia	r2, {r1, r2}
 80046e4:	f7ff ff70 	bl	80045c8 <ssd1306_WriteChar>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d002      	beq.n	80046fa <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	e008      	b.n	800470c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3301      	adds	r3, #1
 80046fe:	60fb      	str	r3, [r7, #12]
    while (*str)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e8      	bne.n	80046da <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	781b      	ldrb	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	460a      	mov	r2, r1
 800471e:	71fb      	strb	r3, [r7, #7]
 8004720:	4613      	mov	r3, r2
 8004722:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	b29a      	uxth	r2, r3
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <ssd1306_SetCursor+0x2c>)
 800472a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800472c:	79bb      	ldrb	r3, [r7, #6]
 800472e:	b29a      	uxth	r2, r3
 8004730:	4b03      	ldr	r3, [pc, #12]	; (8004740 <ssd1306_SetCursor+0x2c>)
 8004732:	805a      	strh	r2, [r3, #2]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000a6c 	.word	0x20000a6c

08004744 <ssd1306_DrawBattery>:

void ssd1306_DrawBattery(float remaining)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	ed87 0a01 	vstr	s0, [r7, #4]
	int xOffset = 4;
 800474e:	2304      	movs	r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
	//clear section
	for (int x=0; x<26; x++){
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
 8004756:	e02d      	b.n	80047b4 <ssd1306_DrawBattery+0x70>
		for (int y=50; y<64; y++){
 8004758:	2332      	movs	r3, #50	; 0x32
 800475a:	623b      	str	r3, [r7, #32]
 800475c:	e024      	b.n	80047a8 <ssd1306_DrawBattery+0x64>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	da00      	bge.n	8004766 <ssd1306_DrawBattery+0x22>
 8004764:	3307      	adds	r3, #7
 8004766:	10db      	asrs	r3, r3, #3
 8004768:	461a      	mov	r2, r3
 800476a:	01d1      	lsls	r1, r2, #7
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	440b      	add	r3, r1
 8004770:	4994      	ldr	r1, [pc, #592]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	b259      	sxtb	r1, r3
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	4258      	negs	r0, r3
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	f000 0007 	and.w	r0, r0, #7
 8004782:	bf58      	it	pl
 8004784:	4243      	negpl	r3, r0
 8004786:	2001      	movs	r0, #1
 8004788:	fa00 f303 	lsl.w	r3, r0, r3
 800478c:	b25b      	sxtb	r3, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	b25b      	sxtb	r3, r3
 8004792:	400b      	ands	r3, r1
 8004794:	b259      	sxtb	r1, r3
 8004796:	01d2      	lsls	r2, r2, #7
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	4413      	add	r3, r2
 800479c:	b2c9      	uxtb	r1, r1
 800479e:	4a89      	ldr	r2, [pc, #548]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 80047a0:	54d1      	strb	r1, [r2, r3]
		for (int y=50; y<64; y++){
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	3301      	adds	r3, #1
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	2b3f      	cmp	r3, #63	; 0x3f
 80047ac:	ddd7      	ble.n	800475e <ssd1306_DrawBattery+0x1a>
	for (int x=0; x<26; x++){
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	3301      	adds	r3, #1
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	2b19      	cmp	r3, #25
 80047b8:	ddce      	ble.n	8004758 <ssd1306_DrawBattery+0x14>
		}
	}
	//draw outline
	for (int x=2+xOffset; x<24+xOffset; x++)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3302      	adds	r3, #2
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e01c      	b.n	80047fc <ssd1306_DrawBattery+0xb8>
	{
		SSD1306_Buffer[x + (52 / 8) * SSD1306_WIDTH] |= 1 << (52 % 8);
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80047c8:	4a7e      	ldr	r2, [pc, #504]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 80047ca:	5cd2      	ldrb	r2, [r2, r3]
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80047d2:	f042 0210 	orr.w	r2, r2, #16
 80047d6:	b2d1      	uxtb	r1, r2
 80047d8:	4a7a      	ldr	r2, [pc, #488]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 80047da:	54d1      	strb	r1, [r2, r3]
		SSD1306_Buffer[x + (61 / 8) * SSD1306_WIDTH] |= 1 << (61 % 8);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80047e2:	4a78      	ldr	r2, [pc, #480]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 80047e4:	5cd2      	ldrb	r2, [r2, r3]
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80047ec:	f042 0220 	orr.w	r2, r2, #32
 80047f0:	b2d1      	uxtb	r1, r2
 80047f2:	4a74      	ldr	r2, [pc, #464]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 80047f4:	54d1      	strb	r1, [r2, r3]
	for (int x=2+xOffset; x<24+xOffset; x++)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3301      	adds	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3317      	adds	r3, #23
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	429a      	cmp	r2, r3
 8004804:	dddd      	ble.n	80047c2 <ssd1306_DrawBattery+0x7e>
	}
	for (int y=52; y<62; y++)
 8004806:	2334      	movs	r3, #52	; 0x34
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e072      	b.n	80048f2 <ssd1306_DrawBattery+0x1ae>
	{
		SSD1306_Buffer[2+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1c99      	adds	r1, r3, #2
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	da00      	bge.n	8004818 <ssd1306_DrawBattery+0xd4>
 8004816:	3307      	adds	r3, #7
 8004818:	10db      	asrs	r3, r3, #3
 800481a:	461a      	mov	r2, r3
 800481c:	01d3      	lsls	r3, r2, #7
 800481e:	440b      	add	r3, r1
 8004820:	4968      	ldr	r1, [pc, #416]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	b259      	sxtb	r1, r3
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	4258      	negs	r0, r3
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	f000 0007 	and.w	r0, r0, #7
 8004832:	bf58      	it	pl
 8004834:	4243      	negpl	r3, r0
 8004836:	2001      	movs	r0, #1
 8004838:	fa00 f303 	lsl.w	r3, r0, r3
 800483c:	b25b      	sxtb	r3, r3
 800483e:	430b      	orrs	r3, r1
 8004840:	b258      	sxtb	r0, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1c99      	adds	r1, r3, #2
 8004846:	01d3      	lsls	r3, r2, #7
 8004848:	440b      	add	r3, r1
 800484a:	b2c1      	uxtb	r1, r0
 800484c:	4a5d      	ldr	r2, [pc, #372]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 800484e:	54d1      	strb	r1, [r2, r3]
		SSD1306_Buffer[23+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f103 0117 	add.w	r1, r3, #23
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	da00      	bge.n	800485e <ssd1306_DrawBattery+0x11a>
 800485c:	3307      	adds	r3, #7
 800485e:	10db      	asrs	r3, r3, #3
 8004860:	461a      	mov	r2, r3
 8004862:	01d3      	lsls	r3, r2, #7
 8004864:	440b      	add	r3, r1
 8004866:	4957      	ldr	r1, [pc, #348]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 8004868:	5ccb      	ldrb	r3, [r1, r3]
 800486a:	b259      	sxtb	r1, r3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4258      	negs	r0, r3
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	f000 0007 	and.w	r0, r0, #7
 8004878:	bf58      	it	pl
 800487a:	4243      	negpl	r3, r0
 800487c:	2001      	movs	r0, #1
 800487e:	fa00 f303 	lsl.w	r3, r0, r3
 8004882:	b25b      	sxtb	r3, r3
 8004884:	430b      	orrs	r3, r1
 8004886:	b258      	sxtb	r0, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f103 0117 	add.w	r1, r3, #23
 800488e:	01d3      	lsls	r3, r2, #7
 8004890:	440b      	add	r3, r1
 8004892:	b2c1      	uxtb	r1, r0
 8004894:	4a4b      	ldr	r2, [pc, #300]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 8004896:	54d1      	strb	r1, [r2, r3]
		if (y < 61 && y > 52){
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b3c      	cmp	r3, #60	; 0x3c
 800489c:	dc26      	bgt.n	80048ec <ssd1306_DrawBattery+0x1a8>
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b34      	cmp	r3, #52	; 0x34
 80048a2:	dd23      	ble.n	80048ec <ssd1306_DrawBattery+0x1a8>
			SSD1306_Buffer[25+xOffset + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f103 0119 	add.w	r1, r3, #25
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	da00      	bge.n	80048b2 <ssd1306_DrawBattery+0x16e>
 80048b0:	3307      	adds	r3, #7
 80048b2:	10db      	asrs	r3, r3, #3
 80048b4:	461a      	mov	r2, r3
 80048b6:	01d3      	lsls	r3, r2, #7
 80048b8:	440b      	add	r3, r1
 80048ba:	4942      	ldr	r1, [pc, #264]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 80048bc:	5ccb      	ldrb	r3, [r1, r3]
 80048be:	b259      	sxtb	r1, r3
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	4258      	negs	r0, r3
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	f000 0007 	and.w	r0, r0, #7
 80048cc:	bf58      	it	pl
 80048ce:	4243      	negpl	r3, r0
 80048d0:	2001      	movs	r0, #1
 80048d2:	fa00 f303 	lsl.w	r3, r0, r3
 80048d6:	b25b      	sxtb	r3, r3
 80048d8:	430b      	orrs	r3, r1
 80048da:	b258      	sxtb	r0, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f103 0119 	add.w	r1, r3, #25
 80048e2:	01d3      	lsls	r3, r2, #7
 80048e4:	440b      	add	r3, r1
 80048e6:	b2c1      	uxtb	r1, r0
 80048e8:	4a36      	ldr	r2, [pc, #216]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 80048ea:	54d1      	strb	r1, [r2, r3]
	for (int y=52; y<62; y++)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	3301      	adds	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b3d      	cmp	r3, #61	; 0x3d
 80048f6:	dd89      	ble.n	800480c <ssd1306_DrawBattery+0xc8>
		}
	}
	SSD1306_Buffer[24+xOffset + (53 / 8) * SSD1306_WIDTH] |= 1 << (53 % 8);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 7346 	add.w	r3, r3, #792	; 0x318
 80048fe:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 8004900:	5cd2      	ldrb	r2, [r2, r3]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8004908:	f042 0220 	orr.w	r2, r2, #32
 800490c:	b2d1      	uxtb	r1, r2
 800490e:	4a2d      	ldr	r2, [pc, #180]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 8004910:	54d1      	strb	r1, [r2, r3]
	SSD1306_Buffer[24+xOffset + (60 / 8) * SSD1306_WIDTH] |= 1 << (60 % 8);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 800491a:	5cd2      	ldrb	r2, [r2, r3]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8004922:	f042 0210 	orr.w	r2, r2, #16
 8004926:	b2d1      	uxtb	r1, r2
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 800492a:	54d1      	strb	r1, [r2, r3]

	//Draw remaining
	int slices = (int)(20.0 * remaining);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7fb fdb3 	bl	8000498 <__aeabi_f2d>
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <ssd1306_DrawBattery+0x284>)
 8004938:	f7fb fe06 	bl	8000548 <__aeabi_dmul>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	f7fc f812 	bl	800096c <__aeabi_d2iz>
 8004948:	4603      	mov	r3, r0
 800494a:	60bb      	str	r3, [r7, #8]
	for (int x=3+xOffset; x<(4+xOffset+slices); x++)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3303      	adds	r3, #3
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e02b      	b.n	80049ac <ssd1306_DrawBattery+0x268>
	{
		for (int y=53; y<61; y++)
 8004954:	2335      	movs	r3, #53	; 0x35
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e022      	b.n	80049a0 <ssd1306_DrawBattery+0x25c>
			{
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da00      	bge.n	8004962 <ssd1306_DrawBattery+0x21e>
 8004960:	3307      	adds	r3, #7
 8004962:	10db      	asrs	r3, r3, #3
 8004964:	461a      	mov	r2, r3
 8004966:	01d1      	lsls	r1, r2, #7
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	440b      	add	r3, r1
 800496c:	4915      	ldr	r1, [pc, #84]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	b259      	sxtb	r1, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4258      	negs	r0, r3
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	f000 0007 	and.w	r0, r0, #7
 800497e:	bf58      	it	pl
 8004980:	4243      	negpl	r3, r0
 8004982:	2001      	movs	r0, #1
 8004984:	fa00 f303 	lsl.w	r3, r0, r3
 8004988:	b25b      	sxtb	r3, r3
 800498a:	430b      	orrs	r3, r1
 800498c:	b259      	sxtb	r1, r3
 800498e:	01d2      	lsls	r2, r2, #7
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	4413      	add	r3, r2
 8004994:	b2c9      	uxtb	r1, r1
 8004996:	4a0b      	ldr	r2, [pc, #44]	; (80049c4 <ssd1306_DrawBattery+0x280>)
 8004998:	54d1      	strb	r1, [r2, r3]
		for (int y=53; y<61; y++)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	3301      	adds	r3, #1
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b3c      	cmp	r3, #60	; 0x3c
 80049a4:	ddd9      	ble.n	800495a <ssd1306_DrawBattery+0x216>
	for (int x=3+xOffset; x<(4+xOffset+slices); x++)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4413      	add	r3, r2
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	dbcc      	blt.n	8004954 <ssd1306_DrawBattery+0x210>
			}
	}
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	3728      	adds	r7, #40	; 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	2000066c 	.word	0x2000066c
 80049c8:	40340000 	.word	0x40340000

080049cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d2:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <HAL_MspInit+0x4c>)
 80049d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d6:	4a10      	ldr	r2, [pc, #64]	; (8004a18 <HAL_MspInit+0x4c>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6613      	str	r3, [r2, #96]	; 0x60
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <HAL_MspInit+0x4c>)
 80049e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	607b      	str	r3, [r7, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_MspInit+0x4c>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <HAL_MspInit+0x4c>)
 80049f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f4:	6593      	str	r3, [r2, #88]	; 0x58
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_MspInit+0x4c>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8004a02:	2200      	movs	r2, #0
 8004a04:	2101      	movs	r1, #1
 8004a06:	f06f 0003 	mvn.w	r0, #3
 8004a0a:	f001 fc2c 	bl	8006266 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000

08004a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08a      	sub	sp, #40	; 0x28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	60da      	str	r2, [r3, #12]
 8004a32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <HAL_ADC_MspInit+0x74>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d124      	bne.n	8004a88 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004a3e:	4b15      	ldr	r3, [pc, #84]	; (8004a94 <HAL_ADC_MspInit+0x78>)
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_ADC_MspInit+0x78>)
 8004a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_ADC_MspInit+0x78>)
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_ADC_MspInit+0x78>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <HAL_ADC_MspInit+0x78>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <HAL_ADC_MspInit+0x78>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = BATT_CHECK_Pin;
 8004a6e:	2308      	movs	r3, #8
 8004a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004a72:	230b      	movs	r3, #11
 8004a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_CHECK_GPIO_Port, &GPIO_InitStruct);
 8004a7a:	f107 0314 	add.w	r3, r7, #20
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a84:	f001 fdd0 	bl	8006628 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a88:	bf00      	nop
 8004a8a:	3728      	adds	r7, #40	; 0x28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	50040000 	.word	0x50040000
 8004a94:	40021000 	.word	0x40021000

08004a98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_DAC_MspInit+0x84>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d12c      	bne.n	8004b14 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004aba:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <HAL_DAC_MspInit+0x88>)
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_DAC_MspInit+0x88>)
 8004ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac6:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <HAL_DAC_MspInit+0x88>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ad2:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <HAL_DAC_MspInit+0x88>)
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <HAL_DAC_MspInit+0x88>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <HAL_DAC_MspInit+0x88>)
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = TCVC_Pin;
 8004aea:	2320      	movs	r3, #32
 8004aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aee:	2303      	movs	r3, #3
 8004af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TCVC_GPIO_Port, &GPIO_InitStruct);
 8004af6:	f107 0314 	add.w	r3, r7, #20
 8004afa:	4619      	mov	r1, r3
 8004afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b00:	f001 fd92 	bl	8006628 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 8004b04:	2200      	movs	r2, #0
 8004b06:	2108      	movs	r1, #8
 8004b08:	2036      	movs	r0, #54	; 0x36
 8004b0a:	f001 fbac 	bl	8006266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b0e:	2036      	movs	r0, #54	; 0x36
 8004b10:	f001 fbc5 	bl	800629e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004b14:	bf00      	nop
 8004b16:	3728      	adds	r7, #40	; 0x28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40007400 	.word	0x40007400
 8004b20:	40021000 	.word	0x40021000

08004b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08c      	sub	sp, #48	; 0x30
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2c:	f107 031c 	add.w	r3, r7, #28
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2e      	ldr	r2, [pc, #184]	; (8004bfc <HAL_I2C_MspInit+0xd8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d128      	bne.n	8004b98 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b46:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	4a2d      	ldr	r2, [pc, #180]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004b4c:	f043 0302 	orr.w	r3, r3, #2
 8004b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b52:	4b2b      	ldr	r3, [pc, #172]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MEM_SCL_Pin|MEM_SDA_Pin;
 8004b5e:	23c0      	movs	r3, #192	; 0xc0
 8004b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b62:	2312      	movs	r3, #18
 8004b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b66:	2301      	movs	r3, #1
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b6e:	2304      	movs	r3, #4
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b72:	f107 031c 	add.w	r3, r7, #28
 8004b76:	4619      	mov	r1, r3
 8004b78:	4822      	ldr	r0, [pc, #136]	; (8004c04 <HAL_I2C_MspInit+0xe0>)
 8004b7a:	f001 fd55 	bl	8006628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b88:	6593      	str	r3, [r2, #88]	; 0x58
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b96:	e02d      	b.n	8004bf4 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1a      	ldr	r2, [pc, #104]	; (8004c08 <HAL_I2C_MspInit+0xe4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d128      	bne.n	8004bf4 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba2:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bae:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MON_SCL_Pin|MON_SDA_Pin;
 8004bba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bc0:	2312      	movs	r3, #18
 8004bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004bcc:	2304      	movs	r3, #4
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd0:	f107 031c 	add.w	r3, r7, #28
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	480b      	ldr	r0, [pc, #44]	; (8004c04 <HAL_I2C_MspInit+0xe0>)
 8004bd8:	f001 fd26 	bl	8006628 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004be2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004be6:	6593      	str	r3, [r2, #88]	; 0x58
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_I2C_MspInit+0xdc>)
 8004bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	3730      	adds	r7, #48	; 0x30
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40005400 	.word	0x40005400
 8004c00:	40021000 	.word	0x40021000
 8004c04:	48000400 	.word	0x48000400
 8004c08:	40005800 	.word	0x40005800

08004c0c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d130      	bne.n	8004c90 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c2e:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <HAL_TIM_IC_MspInit+0x8c>)
 8004c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c32:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <HAL_TIM_IC_MspInit+0x8c>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6593      	str	r3, [r2, #88]	; 0x58
 8004c3a:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <HAL_TIM_IC_MspInit+0x8c>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <HAL_TIM_IC_MspInit+0x8c>)
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <HAL_TIM_IC_MspInit+0x8c>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <HAL_TIM_IC_MspInit+0x8c>)
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TC_IN_Pin;
 8004c5e:	2304      	movs	r3, #4
 8004c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TC_IN_GPIO_Port, &GPIO_InitStruct);
 8004c72:	f107 0314 	add.w	r3, r7, #20
 8004c76:	4619      	mov	r1, r3
 8004c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c7c:	f001 fcd4 	bl	8006628 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8004c80:	2200      	movs	r2, #0
 8004c82:	2102      	movs	r1, #2
 8004c84:	201c      	movs	r0, #28
 8004c86:	f001 faee 	bl	8006266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c8a:	201c      	movs	r0, #28
 8004c8c:	f001 fb07 	bl	800629e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004c90:	bf00      	nop
 8004c92:	3728      	adds	r7, #40	; 0x28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40021000 	.word	0x40021000

08004c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <HAL_TIM_Base_MspInit+0xac>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d114      	bne.n	8004cd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004cae:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004cb4:	f043 0310 	orr.w	r3, r3, #16
 8004cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 8, 0);
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2108      	movs	r1, #8
 8004cca:	2036      	movs	r0, #54	; 0x36
 8004ccc:	f001 facb 	bl	8006266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004cd0:	2036      	movs	r0, #54	; 0x36
 8004cd2:	f001 fae4 	bl	800629e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004cd6:	e032      	b.n	8004d3e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1c      	ldr	r2, [pc, #112]	; (8004d50 <HAL_TIM_Base_MspInit+0xb4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d114      	bne.n	8004d0c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004ce2:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce6:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004ce8:	f043 0320 	orr.w	r3, r3, #32
 8004cec:	6593      	str	r3, [r2, #88]	; 0x58
 8004cee:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	2037      	movs	r0, #55	; 0x37
 8004d00:	f001 fab1 	bl	8006266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004d04:	2037      	movs	r0, #55	; 0x37
 8004d06:	f001 faca 	bl	800629e <HAL_NVIC_EnableIRQ>
}
 8004d0a:	e018      	b.n	8004d3e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <HAL_TIM_Base_MspInit+0xb8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d113      	bne.n	8004d3e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004d16:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1a:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d20:	6613      	str	r3, [r2, #96]	; 0x60
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_TIM_Base_MspInit+0xb0>)
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 7, 0);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2107      	movs	r1, #7
 8004d32:	2019      	movs	r0, #25
 8004d34:	f001 fa97 	bl	8006266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d38:	2019      	movs	r0, #25
 8004d3a:	f001 fab0 	bl	800629e <HAL_NVIC_EnableIRQ>
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40001000 	.word	0x40001000
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40001400 	.word	0x40001400
 8004d54:	40014400 	.word	0x40014400

08004d58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <HAL_PCD_MspInit+0x38>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10b      	bne.n	8004d82 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <HAL_PCD_MspInit+0x3c>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <HAL_PCD_MspInit+0x3c>)
 8004d70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d74:	6593      	str	r3, [r2, #88]	; 0x58
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_PCD_MspInit+0x3c>)
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40006800 	.word	0x40006800
 8004d94:	40021000 	.word	0x40021000

08004d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d9c:	e7fe      	b.n	8004d9c <NMI_Handler+0x4>

08004d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004da2:	e7fe      	b.n	8004da2 <HardFault_Handler+0x4>

08004da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004da8:	e7fe      	b.n	8004da8 <MemManage_Handler+0x4>

08004daa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004daa:	b480      	push	{r7}
 8004dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dae:	e7fe      	b.n	8004dae <BusFault_Handler+0x4>

08004db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004db4:	e7fe      	b.n	8004db4 <UsageFault_Handler+0x4>

08004db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004db6:	b480      	push	{r7}
 8004db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dd6:	bf00      	nop
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004de4:	f000 f8e2 	bl	8004fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004de8:	bf00      	nop
 8004dea:	bd80      	pop	{r7, pc}

08004dec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004df2:	f003 ff5b 	bl	8008cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200002d0 	.word	0x200002d0

08004e00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <TIM2_IRQHandler+0x10>)
 8004e06:	f003 ff51 	bl	8008cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	200001ec 	.word	0x200001ec

08004e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e18:	4803      	ldr	r0, [pc, #12]	; (8004e28 <TIM6_DAC_IRQHandler+0x14>)
 8004e1a:	f003 ff47 	bl	8008cac <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004e1e:	4803      	ldr	r0, [pc, #12]	; (8004e2c <TIM6_DAC_IRQHandler+0x18>)
 8004e20:	f001 fa79 	bl	8006316 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e24:	bf00      	nop
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000238 	.word	0x20000238
 8004e2c:	20000140 	.word	0x20000140

08004e30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004e34:	4802      	ldr	r0, [pc, #8]	; (8004e40 <TIM7_IRQHandler+0x10>)
 8004e36:	f003 ff39 	bl	8008cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000284 	.word	0x20000284

08004e44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <SystemInit+0x64>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <SystemInit+0x64>)
 8004e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <SystemInit+0x68>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a13      	ldr	r2, [pc, #76]	; (8004eac <SystemInit+0x68>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004e64:	4b11      	ldr	r3, [pc, #68]	; (8004eac <SystemInit+0x68>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004e6a:	4b10      	ldr	r3, [pc, #64]	; (8004eac <SystemInit+0x68>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <SystemInit+0x68>)
 8004e70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004e74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004e78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <SystemInit+0x68>)
 8004e7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e82:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <SystemInit+0x68>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <SystemInit+0x68>)
 8004e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <SystemInit+0x68>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <SystemInit+0x64>)
 8004e96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e9a:	609a      	str	r2, [r3, #8]
#endif
}
 8004e9c:	bf00      	nop
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	e000ed00 	.word	0xe000ed00
 8004eac:	40021000 	.word	0x40021000

08004eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004eb4:	f7ff ffc6 	bl	8004e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004eb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004eba:	e003      	b.n	8004ec4 <LoopCopyDataInit>

08004ebc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004ebe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004ec0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004ec2:	3104      	adds	r1, #4

08004ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004ec4:	480a      	ldr	r0, [pc, #40]	; (8004ef0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004ec8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004eca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004ecc:	d3f6      	bcc.n	8004ebc <CopyDataInit>
	ldr	r2, =_sbss
 8004ece:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ed0:	e002      	b.n	8004ed8 <LoopFillZerobss>

08004ed2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ed2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ed4:	f842 3b04 	str.w	r3, [r2], #4

08004ed8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <LoopForever+0x16>)
	cmp	r2, r3
 8004eda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004edc:	d3f9      	bcc.n	8004ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ede:	f004 fb41 	bl	8009564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ee2:	f7fd fe17 	bl	8002b14 <main>

08004ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8004ee6:	e7fe      	b.n	8004ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ee8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004eec:	0800ac58 	.word	0x0800ac58
	ldr	r0, =_sdata
 8004ef0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004ef4:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8004ef8:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8004efc:	20000a78 	.word	0x20000a78

08004f00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f00:	e7fe      	b.n	8004f00 <ADC1_IRQHandler>

08004f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	f001 f99f 	bl	8006250 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f12:	2000      	movs	r0, #0
 8004f14:	f000 f80e 	bl	8004f34 <HAL_InitTick>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	71fb      	strb	r3, [r7, #7]
 8004f22:	e001      	b.n	8004f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f24:	f7ff fd52 	bl	80049cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f28:	79fb      	ldrb	r3, [r7, #7]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <HAL_InitTick+0x6c>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d023      	beq.n	8004f90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004f48:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <HAL_InitTick+0x70>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <HAL_InitTick+0x6c>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	4619      	mov	r1, r3
 8004f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 f9ab 	bl	80062ba <HAL_SYSTICK_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10f      	bne.n	8004f8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b0f      	cmp	r3, #15
 8004f6e:	d809      	bhi.n	8004f84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f70:	2200      	movs	r2, #0
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f78:	f001 f975 	bl	8006266 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f7c:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <HAL_InitTick+0x74>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e007      	b.n	8004f94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e004      	b.n	8004f94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73fb      	strb	r3, [r7, #15]
 8004f8e:	e001      	b.n	8004f94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000064 	.word	0x20000064
 8004fa4:	2000005c 	.word	0x2000005c
 8004fa8:	20000060 	.word	0x20000060

08004fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_IncTick+0x20>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_IncTick+0x24>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4413      	add	r3, r2
 8004fbc:	4a04      	ldr	r2, [pc, #16]	; (8004fd0 <HAL_IncTick+0x24>)
 8004fbe:	6013      	str	r3, [r2, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	20000064 	.word	0x20000064
 8004fd0:	20000a74 	.word	0x20000a74

08004fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fd8:	4b03      	ldr	r3, [pc, #12]	; (8004fe8 <HAL_GetTick+0x14>)
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	20000a74 	.word	0x20000a74

08004fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff ffee 	bl	8004fd4 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005004:	d005      	beq.n	8005012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <HAL_Delay+0x44>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005012:	bf00      	nop
 8005014:	f7ff ffde 	bl	8004fd4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	429a      	cmp	r2, r3
 8005022:	d8f7      	bhi.n	8005014 <HAL_Delay+0x28>
  {
  }
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000064 	.word	0x20000064

08005034 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	609a      	str	r2, [r3, #8]
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3360      	adds	r3, #96	; 0x60
 80050ae:	461a      	mov	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <LL_ADC_SetOffset+0x44>)
 80050be:	4013      	ands	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	03fff000 	.word	0x03fff000

080050e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3360      	adds	r3, #96	; 0x60
 80050f2:	461a      	mov	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3360      	adds	r3, #96	; 0x60
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	431a      	orrs	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3330      	adds	r3, #48	; 0x30
 800517c:	461a      	mov	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	f003 030c 	and.w	r3, r3, #12
 8005188:	4413      	add	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	211f      	movs	r1, #31
 8005198:	fa01 f303 	lsl.w	r3, r1, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	401a      	ands	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0e9b      	lsrs	r3, r3, #26
 80051a4:	f003 011f 	and.w	r1, r3, #31
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	431a      	orrs	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3314      	adds	r3, #20
 80051d4:	461a      	mov	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	0e5b      	lsrs	r3, r3, #25
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	4413      	add	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	0d1b      	lsrs	r3, r3, #20
 80051ec:	f003 031f 	and.w	r3, r3, #31
 80051f0:	2107      	movs	r1, #7
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	43db      	mvns	r3, r3
 80051f8:	401a      	ands	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	0d1b      	lsrs	r3, r3, #20
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	431a      	orrs	r2, r3
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005234:	43db      	mvns	r3, r3
 8005236:	401a      	ands	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f003 0318 	and.w	r3, r3, #24
 800523e:	4908      	ldr	r1, [pc, #32]	; (8005260 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005240:	40d9      	lsrs	r1, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	400b      	ands	r3, r1
 8005246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524a:	431a      	orrs	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	0007ffff 	.word	0x0007ffff

08005264 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6093      	str	r3, [r2, #8]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529c:	d101      	bne.n	80052a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80052c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ec:	d101      	bne.n	80052f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005314:	f043 0201 	orr.w	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <LL_ADC_IsEnabled+0x18>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <LL_ADC_IsEnabled+0x1a>
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800535e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005362:	f043 0204 	orr.w	r2, r3, #4
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b04      	cmp	r3, #4
 8005388:	d101      	bne.n	800538e <LL_ADC_REG_IsConversionOngoing+0x18>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d101      	bne.n	80053b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e12a      	b.n	8005634 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d109      	bne.n	8005400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fb15 	bl	8004a1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ff3f 	bl	8005288 <LL_ADC_IsDeepPowerDownEnabled>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff ff25 	bl	8005264 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff ff5a 	bl	80052d8 <LL_ADC_IsInternalRegulatorEnabled>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d113      	bne.n	8005452 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff ff3e 	bl	80052b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005434:	4b81      	ldr	r3, [pc, #516]	; (800563c <HAL_ADC_Init+0x278>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	099b      	lsrs	r3, r3, #6
 800543a:	4a81      	ldr	r2, [pc, #516]	; (8005640 <HAL_ADC_Init+0x27c>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	099b      	lsrs	r3, r3, #6
 8005442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005444:	e002      	b.n	800544c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	3b01      	subs	r3, #1
 800544a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1f9      	bne.n	8005446 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff3e 	bl	80052d8 <LL_ADC_IsInternalRegulatorEnabled>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10d      	bne.n	800547e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	f043 0210 	orr.w	r2, r3, #16
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	f043 0201 	orr.w	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff ff77 	bl	8005376 <LL_ADC_REG_IsConversionOngoing>
 8005488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b00      	cmp	r3, #0
 8005494:	f040 80c5 	bne.w	8005622 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f040 80c1 	bne.w	8005622 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80054a8:	f043 0202 	orr.w	r2, r3, #2
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff ff37 	bl	8005328 <LL_ADC_IsEnabled>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054c0:	4860      	ldr	r0, [pc, #384]	; (8005644 <HAL_ADC_Init+0x280>)
 80054c2:	f7ff ff31 	bl	8005328 <LL_ADC_IsEnabled>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d105      	bne.n	80054d8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4619      	mov	r1, r3
 80054d2:	485d      	ldr	r0, [pc, #372]	; (8005648 <HAL_ADC_Init+0x284>)
 80054d4:	f7ff fdae 	bl	8005034 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	7e5b      	ldrb	r3, [r3, #25]
 80054dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80054e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80054ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d106      	bne.n	8005514 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	3b01      	subs	r3, #1
 800550c:	045b      	lsls	r3, r3, #17
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	4b45      	ldr	r3, [pc, #276]	; (800564c <HAL_ADC_Init+0x288>)
 8005538:	4013      	ands	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	69b9      	ldr	r1, [r7, #24]
 8005540:	430b      	orrs	r3, r1
 8005542:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff ff14 	bl	8005376 <LL_ADC_REG_IsConversionOngoing>
 800554e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ff21 	bl	800539c <LL_ADC_INJ_IsConversionOngoing>
 800555a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d13d      	bne.n	80055de <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d13a      	bne.n	80055de <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800556c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005574:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005576:	4313      	orrs	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005584:	f023 0302 	bic.w	r3, r3, #2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	430b      	orrs	r3, r1
 8005590:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005598:	2b01      	cmp	r3, #1
 800559a:	d118      	bne.n	80055ce <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055a6:	f023 0304 	bic.w	r3, r3, #4
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055b2:	4311      	orrs	r1, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055be:	430a      	orrs	r2, r1
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	611a      	str	r2, [r3, #16]
 80055cc:	e007      	b.n	80055de <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0201 	bic.w	r2, r2, #1
 80055dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d10c      	bne.n	8005600 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	f023 010f 	bic.w	r1, r3, #15
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	1e5a      	subs	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
 80055fe:	e007      	b.n	8005610 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 020f 	bic.w	r2, r2, #15
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f023 0303 	bic.w	r3, r3, #3
 8005618:	f043 0201 	orr.w	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	655a      	str	r2, [r3, #84]	; 0x54
 8005620:	e007      	b.n	8005632 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f043 0210 	orr.w	r2, r3, #16
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005632:	7ffb      	ldrb	r3, [r7, #31]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	2000005c 	.word	0x2000005c
 8005640:	053e2d63 	.word	0x053e2d63
 8005644:	50040000 	.word	0x50040000
 8005648:	50040300 	.word	0x50040300
 800564c:	fff0c007 	.word	0xfff0c007

08005650 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fe8a 	bl	8005376 <LL_ADC_REG_IsConversionOngoing>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d14f      	bne.n	8005708 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800566e:	2b01      	cmp	r3, #1
 8005670:	d101      	bne.n	8005676 <HAL_ADC_Start+0x26>
 8005672:	2302      	movs	r3, #2
 8005674:	e04b      	b.n	800570e <HAL_ADC_Start+0xbe>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fcbc 	bl	8005ffc <ADC_Enable>
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d137      	bne.n	80056fe <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ae:	d106      	bne.n	80056be <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	f023 0206 	bic.w	r2, r3, #6
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	659a      	str	r2, [r3, #88]	; 0x58
 80056bc:	e002      	b.n	80056c4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	221c      	movs	r2, #28
 80056ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fe29 	bl	800534e <LL_ADC_REG_StartConversion>
 80056fc:	e006      	b.n	800570c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005706:	e001      	b.n	800570c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005708:	2302      	movs	r3, #2
 800570a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d102      	bne.n	800572e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005728:	2308      	movs	r3, #8
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e010      	b.n	8005750 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e068      	b.n	800581e <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800574c:	2304      	movs	r3, #4
 800574e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005750:	f7ff fc40 	bl	8004fd4 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005756:	e01a      	b.n	800578e <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800575e:	d016      	beq.n	800578e <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005760:	f7ff fc38 	bl	8004fd4 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <HAL_ADC_PollForConversion+0x60>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	f043 0204 	orr.w	r2, r3, #4
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e047      	b.n	800581e <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0dd      	beq.n	8005758 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fcca 	bl	8005146 <LL_ADC_REG_IsTriggerSourceSWStart>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01c      	beq.n	80057f2 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	7e5b      	ldrb	r3, [r3, #25]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d118      	bne.n	80057f2 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d111      	bne.n	80057f2 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ea:	f043 0201 	orr.w	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d104      	bne.n	800580a <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2208      	movs	r2, #8
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	e008      	b.n	800581c <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d103      	bne.n	800581c <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	220c      	movs	r2, #12
 800581a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b0b6      	sub	sp, #216	; 0xd8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x22>
 800585e:	2302      	movs	r3, #2
 8005860:	e3b8      	b.n	8005fd4 <HAL_ADC_ConfigChannel+0x794>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fd81 	bl	8005376 <LL_ADC_REG_IsConversionOngoing>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 839d 	bne.w	8005fb6 <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b05      	cmp	r3, #5
 8005882:	d824      	bhi.n	80058ce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	3b02      	subs	r3, #2
 800588a:	2b03      	cmp	r3, #3
 800588c:	d81b      	bhi.n	80058c6 <HAL_ADC_ConfigChannel+0x86>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <HAL_ADC_ConfigChannel+0x54>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058a5 	.word	0x080058a5
 8005898:	080058ad 	.word	0x080058ad
 800589c:	080058b5 	.word	0x080058b5
 80058a0:	080058bd 	.word	0x080058bd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	220c      	movs	r2, #12
 80058a8:	605a      	str	r2, [r3, #4]
          break;
 80058aa:	e011      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2212      	movs	r2, #18
 80058b0:	605a      	str	r2, [r3, #4]
          break;
 80058b2:	e00d      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2218      	movs	r2, #24
 80058b8:	605a      	str	r2, [r3, #4]
          break;
 80058ba:	e009      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058c2:	605a      	str	r2, [r3, #4]
          break;
 80058c4:	e004      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2206      	movs	r2, #6
 80058ca:	605a      	str	r2, [r3, #4]
          break;
 80058cc:	e000      	b.n	80058d0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80058ce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	461a      	mov	r2, r3
 80058de:	f7ff fc45 	bl	800516c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7ff fd45 	bl	8005376 <LL_ADC_REG_IsConversionOngoing>
 80058ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fd51 	bl	800539c <LL_ADC_INJ_IsConversionOngoing>
 80058fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80058fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 81a6 	bne.w	8005c54 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 81a1 	bne.w	8005c54 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	461a      	mov	r2, r3
 8005920:	f7ff fc50 	bl	80051c4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	08db      	lsrs	r3, r3, #3
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d00a      	beq.n	800595c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6919      	ldr	r1, [r3, #16]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005956:	f7ff fba1 	bl	800509c <LL_ADC_SetOffset>
 800595a:	e17b      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2100      	movs	r1, #0
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff fbbe 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005968:	4603      	mov	r3, r0
 800596a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <HAL_ADC_ConfigChannel+0x148>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fbb3 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 800597e:	4603      	mov	r3, r0
 8005980:	0e9b      	lsrs	r3, r3, #26
 8005982:	f003 021f 	and.w	r2, r3, #31
 8005986:	e01e      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x186>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fba8 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005994:	4603      	mov	r3, r0
 8005996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80059a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80059ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80059b6:	2320      	movs	r3, #32
 80059b8:	e004      	b.n	80059c4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80059ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059be:	fab3 f383 	clz	r3, r3
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d105      	bne.n	80059de <HAL_ADC_ConfigChannel+0x19e>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	0e9b      	lsrs	r3, r3, #26
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	e018      	b.n	8005a10 <HAL_ADC_ConfigChannel+0x1d0>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059ea:	fa93 f3a3 	rbit	r3, r3
 80059ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80059f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80059fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005a02:	2320      	movs	r3, #32
 8005a04:	e004      	b.n	8005a10 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a0a:	fab3 f383 	clz	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d106      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fb77 	bl	8005110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2101      	movs	r1, #1
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fb5b 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <HAL_ADC_ConfigChannel+0x20e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fb50 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005a44:	4603      	mov	r3, r0
 8005a46:	0e9b      	lsrs	r3, r3, #26
 8005a48:	f003 021f 	and.w	r2, r3, #31
 8005a4c:	e01e      	b.n	8005a8c <HAL_ADC_ConfigChannel+0x24c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2101      	movs	r1, #1
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fb45 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a64:	fa93 f3a3 	rbit	r3, r3
 8005a68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005a6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005a74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	e004      	b.n	8005a8a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a84:	fab3 f383 	clz	r3, r3
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <HAL_ADC_ConfigChannel+0x264>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	0e9b      	lsrs	r3, r3, #26
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	e018      	b.n	8005ad6 <HAL_ADC_ConfigChannel+0x296>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ab0:	fa93 f3a3 	rbit	r3, r3
 8005ab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005ac8:	2320      	movs	r3, #32
 8005aca:	e004      	b.n	8005ad6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ad0:	fab3 f383 	clz	r3, r3
 8005ad4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d106      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fb14 	bl	8005110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2102      	movs	r1, #2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff faf8 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x2d4>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2102      	movs	r1, #2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff faed 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	0e9b      	lsrs	r3, r3, #26
 8005b0e:	f003 021f 	and.w	r2, r3, #31
 8005b12:	e01e      	b.n	8005b52 <HAL_ADC_ConfigChannel+0x312>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2102      	movs	r1, #2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fae2 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b2a:	fa93 f3a3 	rbit	r3, r3
 8005b2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8005b42:	2320      	movs	r3, #32
 8005b44:	e004      	b.n	8005b50 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b4a:	fab3 f383 	clz	r3, r3
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d105      	bne.n	8005b6a <HAL_ADC_ConfigChannel+0x32a>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	0e9b      	lsrs	r3, r3, #26
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	e016      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x358>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b76:	fa93 f3a3 	rbit	r3, r3
 8005b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005b82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8005b8a:	2320      	movs	r3, #32
 8005b8c:	e004      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d106      	bne.n	8005baa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fab3 	bl	8005110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2103      	movs	r1, #3
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fa97 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <HAL_ADC_ConfigChannel+0x396>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2103      	movs	r1, #3
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fa8c 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	0e9b      	lsrs	r3, r3, #26
 8005bd0:	f003 021f 	and.w	r2, r3, #31
 8005bd4:	e017      	b.n	8005c06 <HAL_ADC_ConfigChannel+0x3c6>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2103      	movs	r1, #3
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fa81 	bl	80050e4 <LL_ADC_GetOffsetChannel>
 8005be2:	4603      	mov	r3, r0
 8005be4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be8:	fa93 f3a3 	rbit	r3, r3
 8005bec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	e003      	b.n	8005c04 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bfe:	fab3 f383 	clz	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d105      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x3de>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	0e9b      	lsrs	r3, r3, #26
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	e011      	b.n	8005c42 <HAL_ADC_ConfigChannel+0x402>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c26:	fa93 f3a3 	rbit	r3, r3
 8005c2a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8005c36:	2320      	movs	r3, #32
 8005c38:	e003      	b.n	8005c42 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3c:	fab3 f383 	clz	r3, r3
 8005c40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d106      	bne.n	8005c54 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2103      	movs	r1, #3
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fa5e 	bl	8005110 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fb65 	bl	8005328 <LL_ADC_IsEnabled>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 813f 	bne.w	8005ee4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f7ff fad2 	bl	800521c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4a8e      	ldr	r2, [pc, #568]	; (8005eb8 <HAL_ADC_ConfigChannel+0x678>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f040 8130 	bne.w	8005ee4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10b      	bne.n	8005cac <HAL_ADC_ConfigChannel+0x46c>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	0e9b      	lsrs	r3, r3, #26
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2b09      	cmp	r3, #9
 8005ca2:	bf94      	ite	ls
 8005ca4:	2301      	movls	r3, #1
 8005ca6:	2300      	movhi	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e019      	b.n	8005ce0 <HAL_ADC_ConfigChannel+0x4a0>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb4:	fa93 f3a3 	rbit	r3, r3
 8005cb8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cbc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	e003      	b.n	8005cd0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cca:	fab3 f383 	clz	r3, r3
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	2b09      	cmp	r3, #9
 8005cd8:	bf94      	ite	ls
 8005cda:	2301      	movls	r3, #1
 8005cdc:	2300      	movhi	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d079      	beq.n	8005dd8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d107      	bne.n	8005d00 <HAL_ADC_ConfigChannel+0x4c0>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	0e9b      	lsrs	r3, r3, #26
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	069b      	lsls	r3, r3, #26
 8005cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cfe:	e015      	b.n	8005d2c <HAL_ADC_ConfigChannel+0x4ec>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d08:	fa93 f3a3 	rbit	r3, r3
 8005d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d10:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005d18:	2320      	movs	r3, #32
 8005d1a:	e003      	b.n	8005d24 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1e:	fab3 f383 	clz	r3, r3
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	3301      	adds	r3, #1
 8005d26:	069b      	lsls	r3, r3, #26
 8005d28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <HAL_ADC_ConfigChannel+0x50c>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	0e9b      	lsrs	r3, r3, #26
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	2101      	movs	r1, #1
 8005d46:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4a:	e017      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x53c>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d54:	fa93 f3a3 	rbit	r3, r3
 8005d58:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005d64:	2320      	movs	r3, #32
 8005d66:	e003      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6a:	fab3 f383 	clz	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	3301      	adds	r3, #1
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2101      	movs	r1, #1
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	ea42 0103 	orr.w	r1, r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <HAL_ADC_ConfigChannel+0x562>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	0e9b      	lsrs	r3, r3, #26
 8005d92:	3301      	adds	r3, #1
 8005d94:	f003 021f 	and.w	r2, r3, #31
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	051b      	lsls	r3, r3, #20
 8005da0:	e018      	b.n	8005dd4 <HAL_ADC_ConfigChannel+0x594>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	fa93 f3a3 	rbit	r3, r3
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005dba:	2320      	movs	r3, #32
 8005dbc:	e003      	b.n	8005dc6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc0:	fab3 f383 	clz	r3, r3
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	f003 021f 	and.w	r2, r3, #31
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	e080      	b.n	8005eda <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d107      	bne.n	8005df4 <HAL_ADC_ConfigChannel+0x5b4>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	0e9b      	lsrs	r3, r3, #26
 8005dea:	3301      	adds	r3, #1
 8005dec:	069b      	lsls	r3, r3, #26
 8005dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005df2:	e015      	b.n	8005e20 <HAL_ADC_ConfigChannel+0x5e0>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	fa93 f3a3 	rbit	r3, r3
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	e003      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	fab3 f383 	clz	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	3301      	adds	r3, #1
 8005e1a:	069b      	lsls	r3, r3, #26
 8005e1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d109      	bne.n	8005e40 <HAL_ADC_ConfigChannel+0x600>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	0e9b      	lsrs	r3, r3, #26
 8005e32:	3301      	adds	r3, #1
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2101      	movs	r1, #1
 8005e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3e:	e017      	b.n	8005e70 <HAL_ADC_ConfigChannel+0x630>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	fa93 f3a3 	rbit	r3, r3
 8005e4c:	61fb      	str	r3, [r7, #28]
  return result;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005e58:	2320      	movs	r3, #32
 8005e5a:	e003      	b.n	8005e64 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	fab3 f383 	clz	r3, r3
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	3301      	adds	r3, #1
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	ea42 0103 	orr.w	r1, r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10d      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x65c>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	0e9b      	lsrs	r3, r3, #26
 8005e86:	3301      	adds	r3, #1
 8005e88:	f003 021f 	and.w	r2, r3, #31
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4413      	add	r3, r2
 8005e92:	3b1e      	subs	r3, #30
 8005e94:	051b      	lsls	r3, r3, #20
 8005e96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e9a:	e01d      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x698>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	fa93 f3a3 	rbit	r3, r3
 8005ea8:	613b      	str	r3, [r7, #16]
  return result;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005eb4:	2320      	movs	r3, #32
 8005eb6:	e005      	b.n	8005ec4 <HAL_ADC_ConfigChannel+0x684>
 8005eb8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	fab3 f383 	clz	r3, r3
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	f003 021f 	and.w	r2, r3, #31
 8005eca:	4613      	mov	r3, r2
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	4413      	add	r3, r2
 8005ed0:	3b1e      	subs	r3, #30
 8005ed2:	051b      	lsls	r3, r3, #20
 8005ed4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	6892      	ldr	r2, [r2, #8]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	f7ff f970 	bl	80051c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4b3c      	ldr	r3, [pc, #240]	; (8005fdc <HAL_ADC_ConfigChannel+0x79c>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d06b      	beq.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ef0:	483b      	ldr	r0, [pc, #236]	; (8005fe0 <HAL_ADC_ConfigChannel+0x7a0>)
 8005ef2:	f7ff f8c5 	bl	8005080 <LL_ADC_GetCommonPathInternalCh>
 8005ef6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a39      	ldr	r2, [pc, #228]	; (8005fe4 <HAL_ADC_ConfigChannel+0x7a4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d126      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d120      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a34      	ldr	r2, [pc, #208]	; (8005fe8 <HAL_ADC_ConfigChannel+0x7a8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d156      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f22:	4619      	mov	r1, r3
 8005f24:	482e      	ldr	r0, [pc, #184]	; (8005fe0 <HAL_ADC_ConfigChannel+0x7a0>)
 8005f26:	f7ff f898 	bl	800505a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005f2a:	4b30      	ldr	r3, [pc, #192]	; (8005fec <HAL_ADC_ConfigChannel+0x7ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	099b      	lsrs	r3, r3, #6
 8005f30:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <HAL_ADC_ConfigChannel+0x7b0>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	099a      	lsrs	r2, r3, #6
 8005f38:	4613      	mov	r3, r2
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f42:	e002      	b.n	8005f4a <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f9      	bne.n	8005f44 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f50:	e03a      	b.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <HAL_ADC_ConfigChannel+0x7b4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d113      	bne.n	8005f84 <HAL_ADC_ConfigChannel+0x744>
 8005f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10d      	bne.n	8005f84 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <HAL_ADC_ConfigChannel+0x7a8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d12a      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4818      	ldr	r0, [pc, #96]	; (8005fe0 <HAL_ADC_ConfigChannel+0x7a0>)
 8005f7e:	f7ff f86c 	bl	800505a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f82:	e021      	b.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <HAL_ADC_ConfigChannel+0x7b8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d11c      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d116      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <HAL_ADC_ConfigChannel+0x7a8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d111      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fac:	4619      	mov	r1, r3
 8005fae:	480c      	ldr	r0, [pc, #48]	; (8005fe0 <HAL_ADC_ConfigChannel+0x7a0>)
 8005fb0:	f7ff f853 	bl	800505a <LL_ADC_SetCommonPathInternalCh>
 8005fb4:	e008      	b.n	8005fc8 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	f043 0220 	orr.w	r2, r3, #32
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005fd0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	37d8      	adds	r7, #216	; 0xd8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	80080000 	.word	0x80080000
 8005fe0:	50040300 	.word	0x50040300
 8005fe4:	c7520000 	.word	0xc7520000
 8005fe8:	50040000 	.word	0x50040000
 8005fec:	2000005c 	.word	0x2000005c
 8005ff0:	053e2d63 	.word	0x053e2d63
 8005ff4:	cb840000 	.word	0xcb840000
 8005ff8:	80000001 	.word	0x80000001

08005ffc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff f98d 	bl	8005328 <LL_ADC_IsEnabled>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d146      	bne.n	80060a2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	4b24      	ldr	r3, [pc, #144]	; (80060ac <ADC_Enable+0xb0>)
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006026:	f043 0210 	orr.w	r2, r3, #16
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	f043 0201 	orr.w	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e032      	b.n	80060a4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f7ff f95c 	bl	8005300 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006048:	f7fe ffc4 	bl	8004fd4 <HAL_GetTick>
 800604c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800604e:	e021      	b.n	8006094 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff f967 	bl	8005328 <LL_ADC_IsEnabled>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff f94b 	bl	8005300 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800606a:	f7fe ffb3 	bl	8004fd4 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d90d      	bls.n	8006094 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	f043 0210 	orr.w	r2, r3, #16
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006088:	f043 0201 	orr.w	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e007      	b.n	80060a4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d1d6      	bne.n	8006050 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	8000003f 	.word	0x8000003f

080060b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <__NVIC_SetPriorityGrouping+0x44>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060cc:	4013      	ands	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060e2:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <__NVIC_SetPriorityGrouping+0x44>)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	60d3      	str	r3, [r2, #12]
}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	e000ed00 	.word	0xe000ed00

080060f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <__NVIC_GetPriorityGrouping+0x18>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	0a1b      	lsrs	r3, r3, #8
 8006102:	f003 0307 	and.w	r3, r3, #7
}
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006122:	2b00      	cmp	r3, #0
 8006124:	db0b      	blt.n	800613e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	f003 021f 	and.w	r2, r3, #31
 800612c:	4907      	ldr	r1, [pc, #28]	; (800614c <__NVIC_EnableIRQ+0x38>)
 800612e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	2001      	movs	r0, #1
 8006136:	fa00 f202 	lsl.w	r2, r0, r2
 800613a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	e000e100 	.word	0xe000e100

08006150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800615c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006160:	2b00      	cmp	r3, #0
 8006162:	db0a      	blt.n	800617a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	b2da      	uxtb	r2, r3
 8006168:	490c      	ldr	r1, [pc, #48]	; (800619c <__NVIC_SetPriority+0x4c>)
 800616a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616e:	0112      	lsls	r2, r2, #4
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	440b      	add	r3, r1
 8006174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006178:	e00a      	b.n	8006190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	4908      	ldr	r1, [pc, #32]	; (80061a0 <__NVIC_SetPriority+0x50>)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	3b04      	subs	r3, #4
 8006188:	0112      	lsls	r2, r2, #4
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	440b      	add	r3, r1
 800618e:	761a      	strb	r2, [r3, #24]
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	e000e100 	.word	0xe000e100
 80061a0:	e000ed00 	.word	0xe000ed00

080061a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b089      	sub	sp, #36	; 0x24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f1c3 0307 	rsb	r3, r3, #7
 80061be:	2b04      	cmp	r3, #4
 80061c0:	bf28      	it	cs
 80061c2:	2304      	movcs	r3, #4
 80061c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3304      	adds	r3, #4
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d902      	bls.n	80061d4 <NVIC_EncodePriority+0x30>
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	3b03      	subs	r3, #3
 80061d2:	e000      	b.n	80061d6 <NVIC_EncodePriority+0x32>
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	43da      	mvns	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	401a      	ands	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	fa01 f303 	lsl.w	r3, r1, r3
 80061f6:	43d9      	mvns	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061fc:	4313      	orrs	r3, r2
         );
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3724      	adds	r7, #36	; 0x24
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3b01      	subs	r3, #1
 8006218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800621c:	d301      	bcc.n	8006222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800621e:	2301      	movs	r3, #1
 8006220:	e00f      	b.n	8006242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006222:	4a0a      	ldr	r2, [pc, #40]	; (800624c <SysTick_Config+0x40>)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3b01      	subs	r3, #1
 8006228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800622a:	210f      	movs	r1, #15
 800622c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006230:	f7ff ff8e 	bl	8006150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <SysTick_Config+0x40>)
 8006236:	2200      	movs	r2, #0
 8006238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800623a:	4b04      	ldr	r3, [pc, #16]	; (800624c <SysTick_Config+0x40>)
 800623c:	2207      	movs	r2, #7
 800623e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	e000e010 	.word	0xe000e010

08006250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7ff ff29 	bl	80060b0 <__NVIC_SetPriorityGrouping>
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b086      	sub	sp, #24
 800626a:	af00      	add	r7, sp, #0
 800626c:	4603      	mov	r3, r0
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006278:	f7ff ff3e 	bl	80060f8 <__NVIC_GetPriorityGrouping>
 800627c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	6978      	ldr	r0, [r7, #20]
 8006284:	f7ff ff8e 	bl	80061a4 <NVIC_EncodePriority>
 8006288:	4602      	mov	r2, r0
 800628a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800628e:	4611      	mov	r1, r2
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff ff5d 	bl	8006150 <__NVIC_SetPriority>
}
 8006296:	bf00      	nop
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	4603      	mov	r3, r0
 80062a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff ff31 	bl	8006114 <__NVIC_EnableIRQ>
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff ffa2 	bl	800620c <SysTick_Config>
 80062c8:	4603      	mov	r3, r0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e014      	b.n	800630e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	791b      	ldrb	r3, [r3, #4]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d105      	bne.n	80062fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fe fbcf 	bl	8004a98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2202      	movs	r2, #2
 80062fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632c:	d120      	bne.n	8006370 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633c:	d118      	bne.n	8006370 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2204      	movs	r2, #4
 8006342:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f043 0201 	orr.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006368:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f82d 	bl	80063ca <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800637a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637e:	d120      	bne.n	80063c2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800638a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800638e:	d118      	bne.n	80063c2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2204      	movs	r2, #4
 8006394:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f043 0202 	orr.w	r2, r3, #2
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80063ba:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f928 	bl	8006612 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b088      	sub	sp, #32
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	795b      	ldrb	r3, [r3, #5]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_DAC_ConfigChannel+0x1c>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e107      	b.n	800660a <HAL_DAC_ConfigChannel+0x22c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2202      	movs	r2, #2
 8006404:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b04      	cmp	r3, #4
 800640c:	d174      	bne.n	80064f8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800640e:	f7fe fde1 	bl	8004fd4 <HAL_GetTick>
 8006412:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d134      	bne.n	8006484 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800641a:	e011      	b.n	8006440 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800641c:	f7fe fdda 	bl	8004fd4 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	d90a      	bls.n	8006440 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f043 0208 	orr.w	r2, r3, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2203      	movs	r2, #3
 800643a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e0e4      	b.n	800660a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e6      	bne.n	800641c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800644e:	2001      	movs	r0, #1
 8006450:	f7fe fdcc 	bl	8004fec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	6992      	ldr	r2, [r2, #24]
 800645c:	641a      	str	r2, [r3, #64]	; 0x40
 800645e:	e01e      	b.n	800649e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006460:	f7fe fdb8 	bl	8004fd4 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b01      	cmp	r3, #1
 800646c:	d90a      	bls.n	8006484 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f043 0208 	orr.w	r2, r3, #8
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2203      	movs	r2, #3
 800647e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e0c2      	b.n	800660a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648a:	2b00      	cmp	r3, #0
 800648c:	dbe8      	blt.n	8006460 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800648e:	2001      	movs	r0, #1
 8006490:	f7fe fdac 	bl	8004fec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	6992      	ldr	r2, [r2, #24]
 800649c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80064ae:	fa01 f303 	lsl.w	r3, r1, r3
 80064b2:	43db      	mvns	r3, r3
 80064b4:	ea02 0103 	and.w	r1, r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	409a      	lsls	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	21ff      	movs	r1, #255	; 0xff
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	43db      	mvns	r3, r3
 80064e0:	ea02 0103 	and.w	r1, r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	409a      	lsls	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d11d      	bne.n	800653c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	221f      	movs	r2, #31
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4313      	orrs	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f003 0310 	and.w	r3, r3, #16
 800654a:	2207      	movs	r2, #7
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	43db      	mvns	r3, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4013      	ands	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	431a      	orrs	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43da      	mvns	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	400a      	ands	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	43db      	mvns	r3, r3
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	4013      	ands	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6819      	ldr	r1, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f003 0310 	and.w	r3, r3, #16
 80065ec:	22c0      	movs	r2, #192	; 0xc0
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	43da      	mvns	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	400a      	ands	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006636:	e154      	b.n	80068e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	2101      	movs	r1, #1
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	4013      	ands	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8146 	beq.w	80068dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d00b      	beq.n	8006670 <HAL_GPIO_Init+0x48>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d007      	beq.n	8006670 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006664:	2b11      	cmp	r3, #17
 8006666:	d003      	beq.n	8006670 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b12      	cmp	r3, #18
 800666e:	d130      	bne.n	80066d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	2203      	movs	r2, #3
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4013      	ands	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066a6:	2201      	movs	r2, #1
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	43db      	mvns	r3, r3
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4013      	ands	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	091b      	lsrs	r3, r3, #4
 80066bc:	f003 0201 	and.w	r2, r3, #1
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	2203      	movs	r2, #3
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	43db      	mvns	r3, r3
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4013      	ands	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d003      	beq.n	8006712 <HAL_GPIO_Init+0xea>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b12      	cmp	r3, #18
 8006710:	d123      	bne.n	800675a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	08da      	lsrs	r2, r3, #3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3208      	adds	r2, #8
 800671a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	220f      	movs	r2, #15
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43db      	mvns	r3, r3
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4013      	ands	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	08da      	lsrs	r2, r3, #3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3208      	adds	r2, #8
 8006754:	6939      	ldr	r1, [r7, #16]
 8006756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	2203      	movs	r2, #3
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43db      	mvns	r3, r3
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4013      	ands	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f003 0203 	and.w	r2, r3, #3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 80a0 	beq.w	80068dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800679c:	4b58      	ldr	r3, [pc, #352]	; (8006900 <HAL_GPIO_Init+0x2d8>)
 800679e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a0:	4a57      	ldr	r2, [pc, #348]	; (8006900 <HAL_GPIO_Init+0x2d8>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6613      	str	r3, [r2, #96]	; 0x60
 80067a8:	4b55      	ldr	r3, [pc, #340]	; (8006900 <HAL_GPIO_Init+0x2d8>)
 80067aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80067b4:	4a53      	ldr	r2, [pc, #332]	; (8006904 <HAL_GPIO_Init+0x2dc>)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	089b      	lsrs	r3, r3, #2
 80067ba:	3302      	adds	r3, #2
 80067bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	220f      	movs	r2, #15
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43db      	mvns	r3, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80067de:	d019      	beq.n	8006814 <HAL_GPIO_Init+0x1ec>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a49      	ldr	r2, [pc, #292]	; (8006908 <HAL_GPIO_Init+0x2e0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d013      	beq.n	8006810 <HAL_GPIO_Init+0x1e8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a48      	ldr	r2, [pc, #288]	; (800690c <HAL_GPIO_Init+0x2e4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00d      	beq.n	800680c <HAL_GPIO_Init+0x1e4>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a47      	ldr	r2, [pc, #284]	; (8006910 <HAL_GPIO_Init+0x2e8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <HAL_GPIO_Init+0x1e0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a46      	ldr	r2, [pc, #280]	; (8006914 <HAL_GPIO_Init+0x2ec>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d101      	bne.n	8006804 <HAL_GPIO_Init+0x1dc>
 8006800:	2304      	movs	r3, #4
 8006802:	e008      	b.n	8006816 <HAL_GPIO_Init+0x1ee>
 8006804:	2307      	movs	r3, #7
 8006806:	e006      	b.n	8006816 <HAL_GPIO_Init+0x1ee>
 8006808:	2303      	movs	r3, #3
 800680a:	e004      	b.n	8006816 <HAL_GPIO_Init+0x1ee>
 800680c:	2302      	movs	r3, #2
 800680e:	e002      	b.n	8006816 <HAL_GPIO_Init+0x1ee>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <HAL_GPIO_Init+0x1ee>
 8006814:	2300      	movs	r3, #0
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	f002 0203 	and.w	r2, r2, #3
 800681c:	0092      	lsls	r2, r2, #2
 800681e:	4093      	lsls	r3, r2
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006826:	4937      	ldr	r1, [pc, #220]	; (8006904 <HAL_GPIO_Init+0x2dc>)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	089b      	lsrs	r3, r3, #2
 800682c:	3302      	adds	r3, #2
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006834:	4b38      	ldr	r3, [pc, #224]	; (8006918 <HAL_GPIO_Init+0x2f0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	43db      	mvns	r3, r3
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4013      	ands	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006858:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <HAL_GPIO_Init+0x2f0>)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800685e:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <HAL_GPIO_Init+0x2f0>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	43db      	mvns	r3, r3
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4013      	ands	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006882:	4a25      	ldr	r2, [pc, #148]	; (8006918 <HAL_GPIO_Init+0x2f0>)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006888:	4b23      	ldr	r3, [pc, #140]	; (8006918 <HAL_GPIO_Init+0x2f0>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	43db      	mvns	r3, r3
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4013      	ands	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80068ac:	4a1a      	ldr	r2, [pc, #104]	; (8006918 <HAL_GPIO_Init+0x2f0>)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80068b2:	4b19      	ldr	r3, [pc, #100]	; (8006918 <HAL_GPIO_Init+0x2f0>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	43db      	mvns	r3, r3
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4013      	ands	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80068d6:	4a10      	ldr	r2, [pc, #64]	; (8006918 <HAL_GPIO_Init+0x2f0>)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	3301      	adds	r3, #1
 80068e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f47f aea3 	bne.w	8006638 <HAL_GPIO_Init+0x10>
  }
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40021000 	.word	0x40021000
 8006904:	40010000 	.word	0x40010000
 8006908:	48000400 	.word	0x48000400
 800690c:	48000800 	.word	0x48000800
 8006910:	48000c00 	.word	0x48000c00
 8006914:	48001000 	.word	0x48001000
 8006918:	40010400 	.word	0x40010400

0800691c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	807b      	strh	r3, [r7, #2]
 8006928:	4613      	mov	r3, r2
 800692a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800692c:	787b      	ldrb	r3, [r7, #1]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006932:	887a      	ldrh	r2, [r7, #2]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006938:	e002      	b.n	8006940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800693a:	887a      	ldrh	r2, [r7, #2]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e081      	b.n	8006a62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fe f8d6 	bl	8004b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2224      	movs	r2, #36	; 0x24
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800699c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d107      	bne.n	80069c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c2:	609a      	str	r2, [r3, #8]
 80069c4:	e006      	b.n	80069d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80069d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d104      	bne.n	80069e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80069f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	ea42 0103 	orr.w	r1, r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	021a      	lsls	r2, r3, #8
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69d9      	ldr	r1, [r3, #28]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0201 	orr.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	817b      	strh	r3, [r7, #10]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	813b      	strh	r3, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	f040 80f9 	bne.w	8006c86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_I2C_Mem_Write+0x34>
 8006a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0ed      	b.n	8006c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_I2C_Mem_Write+0x4e>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e0e6      	b.n	8006c88 <HAL_I2C_Mem_Write+0x21c>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ac2:	f7fe fa87 	bl	8004fd4 <HAL_GetTick>
 8006ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2319      	movs	r3, #25
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f955 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0d1      	b.n	8006c88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2221      	movs	r2, #33	; 0x21
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2240      	movs	r2, #64	; 0x40
 8006af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a3a      	ldr	r2, [r7, #32]
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b0c:	88f8      	ldrh	r0, [r7, #6]
 8006b0e:	893a      	ldrh	r2, [r7, #8]
 8006b10:	8979      	ldrh	r1, [r7, #10]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f8b9 	bl	8006c94 <I2C_RequestMemoryWrite>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0a9      	b.n	8006c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2bff      	cmp	r3, #255	; 0xff
 8006b3c:	d90e      	bls.n	8006b5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	22ff      	movs	r2, #255	; 0xff
 8006b42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	8979      	ldrh	r1, [r7, #10]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fa37 	bl	8006fc8 <I2C_TransferConfig>
 8006b5a:	e00f      	b.n	8006b7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	8979      	ldrh	r1, [r7, #10]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fa26 	bl	8006fc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f93f 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e07b      	b.n	8006c88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	781a      	ldrb	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d034      	beq.n	8006c34 <HAL_I2C_Mem_Write+0x1c8>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d130      	bne.n	8006c34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2180      	movs	r1, #128	; 0x80
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 f8d1 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e04d      	b.n	8006c88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2bff      	cmp	r3, #255	; 0xff
 8006bf4:	d90e      	bls.n	8006c14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	22ff      	movs	r2, #255	; 0xff
 8006bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	8979      	ldrh	r1, [r7, #10]
 8006c04:	2300      	movs	r3, #0
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f9db 	bl	8006fc8 <I2C_TransferConfig>
 8006c12:	e00f      	b.n	8006c34 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	8979      	ldrh	r1, [r7, #10]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f9ca 	bl	8006fc8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d19e      	bne.n	8006b7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f91e 	bl	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e01a      	b.n	8006c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2220      	movs	r2, #32
 8006c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6859      	ldr	r1, [r3, #4]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <HAL_I2C_Mem_Write+0x224>)
 8006c66:	400b      	ands	r3, r1
 8006c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	e000      	b.n	8006c88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c86:	2302      	movs	r3, #2
  }
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	fe00e800 	.word	0xfe00e800

08006c94 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	817b      	strh	r3, [r7, #10]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	813b      	strh	r3, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	8979      	ldrh	r1, [r7, #10]
 8006cb4:	4b20      	ldr	r3, [pc, #128]	; (8006d38 <I2C_RequestMemoryWrite+0xa4>)
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f983 	bl	8006fc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	69b9      	ldr	r1, [r7, #24]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f89c 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e02c      	b.n	8006d30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d105      	bne.n	8006ce8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cdc:	893b      	ldrh	r3, [r7, #8]
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	629a      	str	r2, [r3, #40]	; 0x28
 8006ce6:	e015      	b.n	8006d14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ce8:	893b      	ldrh	r3, [r7, #8]
 8006cea:	0a1b      	lsrs	r3, r3, #8
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f882 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e012      	b.n	8006d30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d0a:	893b      	ldrh	r3, [r7, #8]
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2180      	movs	r1, #128	; 0x80
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 f830 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	80002000 	.word	0x80002000

08006d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d103      	bne.n	8006d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2200      	movs	r2, #0
 8006d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d007      	beq.n	8006d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	619a      	str	r2, [r3, #24]
  }
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d94:	e022      	b.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d9c:	d01e      	beq.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9e:	f7fe f919 	bl	8004fd4 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d302      	bcc.n	8006db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d113      	bne.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e00f      	b.n	8006dfc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4013      	ands	r3, r2
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d0cd      	beq.n	8006d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e10:	e02c      	b.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f870 	bl	8006efc <I2C_IsAcknowledgeFailed>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e02a      	b.n	8006e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e2c:	d01e      	beq.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2e:	f7fe f8d1 	bl	8004fd4 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d302      	bcc.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d113      	bne.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	f043 0220 	orr.w	r2, r3, #32
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e007      	b.n	8006e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d1cb      	bne.n	8006e12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e90:	e028      	b.n	8006ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f830 	bl	8006efc <I2C_IsAcknowledgeFailed>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e026      	b.n	8006ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fe f895 	bl	8004fd4 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d113      	bne.n	8006ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e007      	b.n	8006ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d1cf      	bne.n	8006e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 0310 	and.w	r3, r3, #16
 8006f12:	2b10      	cmp	r3, #16
 8006f14:	d151      	bne.n	8006fba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f16:	e022      	b.n	8006f5e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f1e:	d01e      	beq.n	8006f5e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f20:	f7fe f858 	bl	8004fd4 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d302      	bcc.n	8006f36 <I2C_IsAcknowledgeFailed+0x3a>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d113      	bne.n	8006f5e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	f043 0220 	orr.w	r2, r3, #32
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e02e      	b.n	8006fbc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d1d5      	bne.n	8006f18 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2210      	movs	r2, #16
 8006f72:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f7ff fedd 	bl	8006d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6859      	ldr	r1, [r3, #4]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <I2C_IsAcknowledgeFailed+0xc8>)
 8006f8e:	400b      	ands	r3, r1
 8006f90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f96:	f043 0204 	orr.w	r2, r3, #4
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	fe00e800 	.word	0xfe00e800

08006fc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	607b      	str	r3, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	817b      	strh	r3, [r7, #10]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	0d5b      	lsrs	r3, r3, #21
 8006fe4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006fe8:	4b0d      	ldr	r3, [pc, #52]	; (8007020 <I2C_TransferConfig+0x58>)
 8006fea:	430b      	orrs	r3, r1
 8006fec:	43db      	mvns	r3, r3
 8006fee:	ea02 0103 	and.w	r1, r2, r3
 8006ff2:	897b      	ldrh	r3, [r7, #10]
 8006ff4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ff8:	7a7b      	ldrb	r3, [r7, #9]
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	431a      	orrs	r2, r3
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	431a      	orrs	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007012:	bf00      	nop
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	03ff63ff 	.word	0x03ff63ff

08007024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b20      	cmp	r3, #32
 8007038:	d138      	bne.n	80070ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007044:	2302      	movs	r3, #2
 8007046:	e032      	b.n	80070ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2224      	movs	r2, #36	; 0x24
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0201 	bic.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007076:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6819      	ldr	r1, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0201 	orr.w	r2, r2, #1
 8007096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	e000      	b.n	80070ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070ac:	2302      	movs	r3, #2
  }
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d139      	bne.n	8007144 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d101      	bne.n	80070de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070da:	2302      	movs	r3, #2
 80070dc:	e033      	b.n	8007146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2224      	movs	r2, #36	; 0x24
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800710c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
	...

08007154 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800715c:	4b0b      	ldr	r3, [pc, #44]	; (800718c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800715e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	6613      	str	r3, [r2, #96]	; 0x60
 8007168:	4b08      	ldr	r3, [pc, #32]	; (800718c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800716a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8007174:	4b06      	ldr	r3, [pc, #24]	; (8007190 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	4905      	ldr	r1, [pc, #20]	; (8007190 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4313      	orrs	r3, r2
 800717e:	604b      	str	r3, [r1, #4]
}
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40021000 	.word	0x40021000
 8007190:	40010000 	.word	0x40010000

08007194 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007196:	b08b      	sub	sp, #44	; 0x2c
 8007198:	af06      	add	r7, sp, #24
 800719a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e104      	b.n	80073b0 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fd fdcc 	bl	8004d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2203      	movs	r2, #3
 80071c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f002 f96a 	bl	80094a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	687e      	ldr	r6, [r7, #4]
 80071da:	466d      	mov	r5, sp
 80071dc:	f106 0410 	add.w	r4, r6, #16
 80071e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	1d33      	adds	r3, r6, #4
 80071ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071ec:	6838      	ldr	r0, [r7, #0]
 80071ee:	f002 f949 	bl	8009484 <USB_CoreInit>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e0d5      	b.n	80073b0 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2100      	movs	r1, #0
 800720a:	4618      	mov	r0, r3
 800720c:	f002 f966 	bl	80094dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]
 8007214:	e04c      	b.n	80072b0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	440b      	add	r3, r1
 8007226:	3301      	adds	r3, #1
 8007228:	2201      	movs	r2, #1
 800722a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	440b      	add	r3, r1
 800723c:	7bfa      	ldrb	r2, [r7, #15]
 800723e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007240:	7bfa      	ldrb	r2, [r7, #15]
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	b298      	uxth	r0, r3
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	440b      	add	r3, r1
 8007252:	3336      	adds	r3, #54	; 0x36
 8007254:	4602      	mov	r2, r0
 8007256:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	440b      	add	r3, r1
 8007268:	3303      	adds	r3, #3
 800726a:	2200      	movs	r2, #0
 800726c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800726e:	7bfa      	ldrb	r2, [r7, #15]
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	440b      	add	r3, r1
 800727c:	3338      	adds	r3, #56	; 0x38
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007282:	7bfa      	ldrb	r2, [r7, #15]
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	440b      	add	r3, r1
 8007290:	333c      	adds	r3, #60	; 0x3c
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007296:	7bfa      	ldrb	r2, [r7, #15]
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	440b      	add	r3, r1
 80072a4:	3340      	adds	r3, #64	; 0x40
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	3301      	adds	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
 80072b0:	7bfa      	ldrb	r2, [r7, #15]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3ad      	bcc.n	8007216 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]
 80072be:	e044      	b.n	800734a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	440b      	add	r3, r1
 80072ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80072d6:	7bfa      	ldrb	r2, [r7, #15]
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	440b      	add	r3, r1
 80072e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072e8:	7bfa      	ldrb	r2, [r7, #15]
 80072ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	440b      	add	r3, r1
 80072fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80072fe:	2200      	movs	r2, #0
 8007300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007302:	7bfa      	ldrb	r2, [r7, #15]
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	440b      	add	r3, r1
 8007310:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007318:	7bfa      	ldrb	r2, [r7, #15]
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	440b      	add	r3, r1
 8007326:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800732e:	7bfa      	ldrb	r2, [r7, #15]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	440b      	add	r3, r1
 800733c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	3301      	adds	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
 800734a:	7bfa      	ldrb	r2, [r7, #15]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d3b5      	bcc.n	80072c0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	687e      	ldr	r6, [r7, #4]
 800735c:	466d      	mov	r5, sp
 800735e:	f106 0410 	add.w	r4, r6, #16
 8007362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	1d33      	adds	r3, r6, #4
 800736c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800736e:	6838      	ldr	r0, [r7, #0]
 8007370:	f002 f8c1 	bl	80094f6 <USB_DevInit>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e014      	b.n	80073b0 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d102      	bne.n	80073a4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f80a 	bl	80073b8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f002 f8c5 	bl	8009538 <USB_DevDisconnect>

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f043 0302 	orr.w	r3, r3, #2
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f003 031f 	and.w	r3, r3, #31
 800741e:	43db      	mvns	r3, r3
 8007420:	401a      	ands	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	4908      	ldr	r1, [pc, #32]	; (8007448 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	4904      	ldr	r1, [pc, #16]	; (8007448 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8007438:	4313      	orrs	r3, r2
 800743a:	608b      	str	r3, [r1, #8]


}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	40007000 	.word	0x40007000

0800744c <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8007450:	4b09      	ldr	r3, [pc, #36]	; (8007478 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f023 0307 	bic.w	r3, r3, #7
 8007458:	4a07      	ldr	r2, [pc, #28]	; (8007478 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800745a:	f043 0303 	orr.w	r3, r3, #3
 800745e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	4a05      	ldr	r2, [pc, #20]	; (800747c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8007466:	f043 0304 	orr.w	r3, r3, #4
 800746a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800746c:	bf30      	wfi
}
 800746e:	bf00      	nop
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40007000 	.word	0x40007000
 800747c:	e000ed00 	.word	0xe000ed00

08007480 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <HAL_PWREx_GetVoltageRange+0x18>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800748c:	4618      	mov	r0, r3
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	40007000 	.word	0x40007000

0800749c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074aa:	d130      	bne.n	800750e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80074ac:	4b23      	ldr	r3, [pc, #140]	; (800753c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074b8:	d038      	beq.n	800752c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074ba:	4b20      	ldr	r3, [pc, #128]	; (800753c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074ca:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2232      	movs	r2, #50	; 0x32
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
 80074d4:	4a1b      	ldr	r2, [pc, #108]	; (8007544 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80074d6:	fba2 2303 	umull	r2, r3, r2, r3
 80074da:	0c9b      	lsrs	r3, r3, #18
 80074dc:	3301      	adds	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074e0:	e002      	b.n	80074e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074e8:	4b14      	ldr	r3, [pc, #80]	; (800753c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f4:	d102      	bne.n	80074fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f2      	bne.n	80074e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074fc:	4b0f      	ldr	r3, [pc, #60]	; (800753c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007508:	d110      	bne.n	800752c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e00f      	b.n	800752e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751a:	d007      	beq.n	800752c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800751c:	4b07      	ldr	r3, [pc, #28]	; (800753c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007524:	4a05      	ldr	r2, [pc, #20]	; (800753c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800752a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40007000 	.word	0x40007000
 8007540:	2000005c 	.word	0x2000005c
 8007544:	431bde83 	.word	0x431bde83

08007548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b088      	sub	sp, #32
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d102      	bne.n	800755c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f000 bc11 	b.w	8007d7e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800755c:	4ba0      	ldr	r3, [pc, #640]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 030c 	and.w	r3, r3, #12
 8007564:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007566:	4b9e      	ldr	r3, [pc, #632]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80e4 	beq.w	8007746 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <HAL_RCC_OscConfig+0x4c>
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	2b0c      	cmp	r3, #12
 8007588:	f040 808b 	bne.w	80076a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b01      	cmp	r3, #1
 8007590:	f040 8087 	bne.w	80076a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007594:	4b92      	ldr	r3, [pc, #584]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_RCC_OscConfig+0x64>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e3e8      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1a      	ldr	r2, [r3, #32]
 80075b0:	4b8b      	ldr	r3, [pc, #556]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <HAL_RCC_OscConfig+0x7e>
 80075bc:	4b88      	ldr	r3, [pc, #544]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075c4:	e005      	b.n	80075d2 <HAL_RCC_OscConfig+0x8a>
 80075c6:	4b86      	ldr	r3, [pc, #536]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80075c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075cc:	091b      	lsrs	r3, r3, #4
 80075ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d223      	bcs.n	800761e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fd76 	bl	80080cc <RCC_SetFlashLatencyFromMSIRange>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e3c9      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075ea:	4b7d      	ldr	r3, [pc, #500]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a7c      	ldr	r2, [pc, #496]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80075f0:	f043 0308 	orr.w	r3, r3, #8
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	4b7a      	ldr	r3, [pc, #488]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	4977      	ldr	r1, [pc, #476]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007608:	4b75      	ldr	r3, [pc, #468]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	4972      	ldr	r1, [pc, #456]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007618:	4313      	orrs	r3, r2
 800761a:	604b      	str	r3, [r1, #4]
 800761c:	e025      	b.n	800766a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800761e:	4b70      	ldr	r3, [pc, #448]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a6f      	ldr	r2, [pc, #444]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007624:	f043 0308 	orr.w	r3, r3, #8
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	4b6d      	ldr	r3, [pc, #436]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	496a      	ldr	r1, [pc, #424]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007638:	4313      	orrs	r3, r2
 800763a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800763c:	4b68      	ldr	r3, [pc, #416]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	4965      	ldr	r1, [pc, #404]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 800764c:	4313      	orrs	r3, r2
 800764e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fd36 	bl	80080cc <RCC_SetFlashLatencyFromMSIRange>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e389      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800766a:	f000 fca3 	bl	8007fb4 <HAL_RCC_GetSysClockFreq>
 800766e:	4602      	mov	r2, r0
 8007670:	4b5b      	ldr	r3, [pc, #364]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	091b      	lsrs	r3, r3, #4
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	495a      	ldr	r1, [pc, #360]	; (80077e4 <HAL_RCC_OscConfig+0x29c>)
 800767c:	5ccb      	ldrb	r3, [r1, r3]
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	fa22 f303 	lsr.w	r3, r2, r3
 8007686:	4a58      	ldr	r2, [pc, #352]	; (80077e8 <HAL_RCC_OscConfig+0x2a0>)
 8007688:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800768a:	4b58      	ldr	r3, [pc, #352]	; (80077ec <HAL_RCC_OscConfig+0x2a4>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f7fd fc50 	bl	8004f34 <HAL_InitTick>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d052      	beq.n	8007744 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	e36d      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d032      	beq.n	8007710 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80076aa:	4b4d      	ldr	r3, [pc, #308]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4c      	ldr	r2, [pc, #304]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80076b6:	f7fd fc8d 	bl	8004fd4 <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076be:	f7fd fc89 	bl	8004fd4 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e356      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076d0:	4b43      	ldr	r3, [pc, #268]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d0f0      	beq.n	80076be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076dc:	4b40      	ldr	r3, [pc, #256]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a3f      	ldr	r2, [pc, #252]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80076e2:	f043 0308 	orr.w	r3, r3, #8
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	4b3d      	ldr	r3, [pc, #244]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	493a      	ldr	r1, [pc, #232]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076fa:	4b39      	ldr	r3, [pc, #228]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	4935      	ldr	r1, [pc, #212]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 800770a:	4313      	orrs	r3, r2
 800770c:	604b      	str	r3, [r1, #4]
 800770e:	e01a      	b.n	8007746 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007710:	4b33      	ldr	r3, [pc, #204]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a32      	ldr	r2, [pc, #200]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007716:	f023 0301 	bic.w	r3, r3, #1
 800771a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800771c:	f7fd fc5a 	bl	8004fd4 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007724:	f7fd fc56 	bl	8004fd4 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e323      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007736:	4b2a      	ldr	r3, [pc, #168]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0x1dc>
 8007742:	e000      	b.n	8007746 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007744:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d073      	beq.n	800783a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d005      	beq.n	8007764 <HAL_RCC_OscConfig+0x21c>
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2b0c      	cmp	r3, #12
 800775c:	d10e      	bne.n	800777c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b03      	cmp	r3, #3
 8007762:	d10b      	bne.n	800777c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007764:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d063      	beq.n	8007838 <HAL_RCC_OscConfig+0x2f0>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d15f      	bne.n	8007838 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e300      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007784:	d106      	bne.n	8007794 <HAL_RCC_OscConfig+0x24c>
 8007786:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a15      	ldr	r2, [pc, #84]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 800778c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	e01d      	b.n	80077d0 <HAL_RCC_OscConfig+0x288>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800779c:	d10c      	bne.n	80077b8 <HAL_RCC_OscConfig+0x270>
 800779e:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a0f      	ldr	r2, [pc, #60]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80077a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a0c      	ldr	r2, [pc, #48]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80077b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	e00b      	b.n	80077d0 <HAL_RCC_OscConfig+0x288>
 80077b8:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a08      	ldr	r2, [pc, #32]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80077be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	4b06      	ldr	r3, [pc, #24]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a05      	ldr	r2, [pc, #20]	; (80077e0 <HAL_RCC_OscConfig+0x298>)
 80077ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01b      	beq.n	8007810 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d8:	f7fd fbfc 	bl	8004fd4 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077de:	e010      	b.n	8007802 <HAL_RCC_OscConfig+0x2ba>
 80077e0:	40021000 	.word	0x40021000
 80077e4:	0800ac10 	.word	0x0800ac10
 80077e8:	2000005c 	.word	0x2000005c
 80077ec:	20000060 	.word	0x20000060
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077f0:	f7fd fbf0 	bl	8004fd4 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	; 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e2bd      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007802:	4baf      	ldr	r3, [pc, #700]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0x2a8>
 800780e:	e014      	b.n	800783a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007810:	f7fd fbe0 	bl	8004fd4 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007818:	f7fd fbdc 	bl	8004fd4 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	; 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e2a9      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800782a:	4ba5      	ldr	r3, [pc, #660]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0x2d0>
 8007836:	e000      	b.n	800783a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d060      	beq.n	8007908 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	2b04      	cmp	r3, #4
 800784a:	d005      	beq.n	8007858 <HAL_RCC_OscConfig+0x310>
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	2b0c      	cmp	r3, #12
 8007850:	d119      	bne.n	8007886 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d116      	bne.n	8007886 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007858:	4b99      	ldr	r3, [pc, #612]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <HAL_RCC_OscConfig+0x328>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e286      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007870:	4b93      	ldr	r3, [pc, #588]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	061b      	lsls	r3, r3, #24
 800787e:	4990      	ldr	r1, [pc, #576]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007880:	4313      	orrs	r3, r2
 8007882:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007884:	e040      	b.n	8007908 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d023      	beq.n	80078d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800788e:	4b8c      	ldr	r3, [pc, #560]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a8b      	ldr	r2, [pc, #556]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789a:	f7fd fb9b 	bl	8004fd4 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078a2:	f7fd fb97 	bl	8004fd4 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e264      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078b4:	4b82      	ldr	r3, [pc, #520]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0f0      	beq.n	80078a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c0:	4b7f      	ldr	r3, [pc, #508]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	061b      	lsls	r3, r3, #24
 80078ce:	497c      	ldr	r1, [pc, #496]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]
 80078d4:	e018      	b.n	8007908 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078d6:	4b7a      	ldr	r3, [pc, #488]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a79      	ldr	r2, [pc, #484]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80078dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e2:	f7fd fb77 	bl	8004fd4 <HAL_GetTick>
 80078e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078e8:	e008      	b.n	80078fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078ea:	f7fd fb73 	bl	8004fd4 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e240      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078fc:	4b70      	ldr	r3, [pc, #448]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f0      	bne.n	80078ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b00      	cmp	r3, #0
 8007912:	d03c      	beq.n	800798e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01c      	beq.n	8007956 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800791c:	4b68      	ldr	r3, [pc, #416]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 800791e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007922:	4a67      	ldr	r2, [pc, #412]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792c:	f7fd fb52 	bl	8004fd4 <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007934:	f7fd fb4e 	bl	8004fd4 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e21b      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007946:	4b5e      	ldr	r3, [pc, #376]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0ef      	beq.n	8007934 <HAL_RCC_OscConfig+0x3ec>
 8007954:	e01b      	b.n	800798e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007956:	4b5a      	ldr	r3, [pc, #360]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800795c:	4a58      	ldr	r2, [pc, #352]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007966:	f7fd fb35 	bl	8004fd4 <HAL_GetTick>
 800796a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800796c:	e008      	b.n	8007980 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800796e:	f7fd fb31 	bl	8004fd4 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e1fe      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007980:	4b4f      	ldr	r3, [pc, #316]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1ef      	bne.n	800796e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0304 	and.w	r3, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 80a6 	beq.w	8007ae8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800799c:	2300      	movs	r3, #0
 800799e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80079a0:	4b47      	ldr	r3, [pc, #284]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10d      	bne.n	80079c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ac:	4b44      	ldr	r3, [pc, #272]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80079ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b0:	4a43      	ldr	r2, [pc, #268]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80079b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b6:	6593      	str	r3, [r2, #88]	; 0x58
 80079b8:	4b41      	ldr	r3, [pc, #260]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 80079ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079c4:	2301      	movs	r3, #1
 80079c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079c8:	4b3e      	ldr	r3, [pc, #248]	; (8007ac4 <HAL_RCC_OscConfig+0x57c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d118      	bne.n	8007a06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079d4:	4b3b      	ldr	r3, [pc, #236]	; (8007ac4 <HAL_RCC_OscConfig+0x57c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a3a      	ldr	r2, [pc, #232]	; (8007ac4 <HAL_RCC_OscConfig+0x57c>)
 80079da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079e0:	f7fd faf8 	bl	8004fd4 <HAL_GetTick>
 80079e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e8:	f7fd faf4 	bl	8004fd4 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e1c1      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079fa:	4b32      	ldr	r3, [pc, #200]	; (8007ac4 <HAL_RCC_OscConfig+0x57c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f0      	beq.n	80079e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d108      	bne.n	8007a20 <HAL_RCC_OscConfig+0x4d8>
 8007a0e:	4b2c      	ldr	r3, [pc, #176]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a14:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a16:	f043 0301 	orr.w	r3, r3, #1
 8007a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a1e:	e024      	b.n	8007a6a <HAL_RCC_OscConfig+0x522>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b05      	cmp	r3, #5
 8007a26:	d110      	bne.n	8007a4a <HAL_RCC_OscConfig+0x502>
 8007a28:	4b25      	ldr	r3, [pc, #148]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2e:	4a24      	ldr	r2, [pc, #144]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a30:	f043 0304 	orr.w	r3, r3, #4
 8007a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a38:	4b21      	ldr	r3, [pc, #132]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a40:	f043 0301 	orr.w	r3, r3, #1
 8007a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a48:	e00f      	b.n	8007a6a <HAL_RCC_OscConfig+0x522>
 8007a4a:	4b1d      	ldr	r3, [pc, #116]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a50:	4a1b      	ldr	r2, [pc, #108]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a52:	f023 0301 	bic.w	r3, r3, #1
 8007a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007a5a:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a60:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a62:	f023 0304 	bic.w	r3, r3, #4
 8007a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d016      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a72:	f7fd faaf 	bl	8004fd4 <HAL_GetTick>
 8007a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a78:	e00a      	b.n	8007a90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7a:	f7fd faab 	bl	8004fd4 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e176      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a90:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <HAL_RCC_OscConfig+0x578>)
 8007a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0ed      	beq.n	8007a7a <HAL_RCC_OscConfig+0x532>
 8007a9e:	e01a      	b.n	8007ad6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa0:	f7fd fa98 	bl	8004fd4 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007aa6:	e00f      	b.n	8007ac8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aa8:	f7fd fa94 	bl	8004fd4 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d906      	bls.n	8007ac8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e15f      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
 8007abe:	bf00      	nop
 8007ac0:	40021000 	.word	0x40021000
 8007ac4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ac8:	4baa      	ldr	r3, [pc, #680]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e8      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d105      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007adc:	4ba5      	ldr	r3, [pc, #660]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae0:	4aa4      	ldr	r2, [pc, #656]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d03c      	beq.n	8007b6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01c      	beq.n	8007b36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007afc:	4b9d      	ldr	r3, [pc, #628]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b02:	4a9c      	ldr	r2, [pc, #624]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007b04:	f043 0301 	orr.w	r3, r3, #1
 8007b08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0c:	f7fd fa62 	bl	8004fd4 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b14:	f7fd fa5e 	bl	8004fd4 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e12b      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b26:	4b93      	ldr	r3, [pc, #588]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0ef      	beq.n	8007b14 <HAL_RCC_OscConfig+0x5cc>
 8007b34:	e01b      	b.n	8007b6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b36:	4b8f      	ldr	r3, [pc, #572]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b3c:	4a8d      	ldr	r2, [pc, #564]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007b3e:	f023 0301 	bic.w	r3, r3, #1
 8007b42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b46:	f7fd fa45 	bl	8004fd4 <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b4e:	f7fd fa41 	bl	8004fd4 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e10e      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b60:	4b84      	ldr	r3, [pc, #528]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1ef      	bne.n	8007b4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8102 	beq.w	8007d7c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	f040 80c5 	bne.w	8007d0c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007b82:	4b7c      	ldr	r3, [pc, #496]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f003 0203 	and.w	r2, r3, #3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d12c      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d123      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d11b      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d113      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd2:	085b      	lsrs	r3, r3, #1
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d109      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	3b01      	subs	r3, #1
 8007bea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d067      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b0c      	cmp	r3, #12
 8007bf4:	d062      	beq.n	8007cbc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007bf6:	4b5f      	ldr	r3, [pc, #380]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e0bb      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007c06:	4b5b      	ldr	r3, [pc, #364]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a5a      	ldr	r2, [pc, #360]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c12:	f7fd f9df 	bl	8004fd4 <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c1a:	f7fd f9db 	bl	8004fd4 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e0a8      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c2c:	4b51      	ldr	r3, [pc, #324]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1f0      	bne.n	8007c1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c38:	4b4e      	ldr	r3, [pc, #312]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	4b4e      	ldr	r3, [pc, #312]	; (8007d78 <HAL_RCC_OscConfig+0x830>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007c48:	3a01      	subs	r2, #1
 8007c4a:	0112      	lsls	r2, r2, #4
 8007c4c:	4311      	orrs	r1, r2
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c52:	0212      	lsls	r2, r2, #8
 8007c54:	4311      	orrs	r1, r2
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007c5a:	0852      	lsrs	r2, r2, #1
 8007c5c:	3a01      	subs	r2, #1
 8007c5e:	0552      	lsls	r2, r2, #21
 8007c60:	4311      	orrs	r1, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007c66:	0852      	lsrs	r2, r2, #1
 8007c68:	3a01      	subs	r2, #1
 8007c6a:	0652      	lsls	r2, r2, #25
 8007c6c:	4311      	orrs	r1, r2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c72:	06d2      	lsls	r2, r2, #27
 8007c74:	430a      	orrs	r2, r1
 8007c76:	493f      	ldr	r1, [pc, #252]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007c7c:	4b3d      	ldr	r3, [pc, #244]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a3c      	ldr	r2, [pc, #240]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c88:	4b3a      	ldr	r3, [pc, #232]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4a39      	ldr	r2, [pc, #228]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007c94:	f7fd f99e 	bl	8004fd4 <HAL_GetTick>
 8007c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c9c:	f7fd f99a 	bl	8004fd4 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e067      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cae:	4b31      	ldr	r3, [pc, #196]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f0      	beq.n	8007c9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007cba:	e05f      	b.n	8007d7c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e05e      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cc0:	4b2c      	ldr	r3, [pc, #176]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d157      	bne.n	8007d7c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ccc:	4b29      	ldr	r3, [pc, #164]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a28      	ldr	r2, [pc, #160]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007cd8:	4b26      	ldr	r3, [pc, #152]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	4a25      	ldr	r2, [pc, #148]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ce2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ce4:	f7fd f976 	bl	8004fd4 <HAL_GetTick>
 8007ce8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cec:	f7fd f972 	bl	8004fd4 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e03f      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0f0      	beq.n	8007cec <HAL_RCC_OscConfig+0x7a4>
 8007d0a:	e037      	b.n	8007d7c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b0c      	cmp	r3, #12
 8007d10:	d02d      	beq.n	8007d6e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d12:	4b18      	ldr	r3, [pc, #96]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d1c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d1e:	4b15      	ldr	r3, [pc, #84]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d105      	bne.n	8007d36 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007d2a:	4b12      	ldr	r3, [pc, #72]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	4a11      	ldr	r2, [pc, #68]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d30:	f023 0303 	bic.w	r3, r3, #3
 8007d34:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007d36:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	4a0e      	ldr	r2, [pc, #56]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d3c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d44:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d46:	f7fd f945 	bl	8004fd4 <HAL_GetTick>
 8007d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d4c:	e008      	b.n	8007d60 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d4e:	f7fd f941 	bl	8004fd4 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e00e      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <HAL_RCC_OscConfig+0x82c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f0      	bne.n	8007d4e <HAL_RCC_OscConfig+0x806>
 8007d6c:	e006      	b.n	8007d7c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e005      	b.n	8007d7e <HAL_RCC_OscConfig+0x836>
 8007d72:	bf00      	nop
 8007d74:	40021000 	.word	0x40021000
 8007d78:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3720      	adds	r7, #32
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop

08007d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0c8      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d9c:	4b66      	ldr	r3, [pc, #408]	; (8007f38 <HAL_RCC_ClockConfig+0x1b0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d910      	bls.n	8007dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007daa:	4b63      	ldr	r3, [pc, #396]	; (8007f38 <HAL_RCC_ClockConfig+0x1b0>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f023 0207 	bic.w	r2, r3, #7
 8007db2:	4961      	ldr	r1, [pc, #388]	; (8007f38 <HAL_RCC_ClockConfig+0x1b0>)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dba:	4b5f      	ldr	r3, [pc, #380]	; (8007f38 <HAL_RCC_ClockConfig+0x1b0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d001      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e0b0      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d04c      	beq.n	8007e72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d107      	bne.n	8007df0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007de0:	4b56      	ldr	r3, [pc, #344]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d121      	bne.n	8007e30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e09e      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d107      	bne.n	8007e08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007df8:	4b50      	ldr	r3, [pc, #320]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d115      	bne.n	8007e30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e092      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d107      	bne.n	8007e20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e10:	4b4a      	ldr	r3, [pc, #296]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d109      	bne.n	8007e30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e086      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e20:	4b46      	ldr	r3, [pc, #280]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e07e      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e30:	4b42      	ldr	r3, [pc, #264]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f023 0203 	bic.w	r2, r3, #3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	493f      	ldr	r1, [pc, #252]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e42:	f7fd f8c7 	bl	8004fd4 <HAL_GetTick>
 8007e46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e48:	e00a      	b.n	8007e60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e4a:	f7fd f8c3 	bl	8004fd4 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d901      	bls.n	8007e60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e066      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e60:	4b36      	ldr	r3, [pc, #216]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f003 020c 	and.w	r2, r3, #12
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d1eb      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d008      	beq.n	8007e90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e7e:	4b2f      	ldr	r3, [pc, #188]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	492c      	ldr	r1, [pc, #176]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e90:	4b29      	ldr	r3, [pc, #164]	; (8007f38 <HAL_RCC_ClockConfig+0x1b0>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d210      	bcs.n	8007ec0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9e:	4b26      	ldr	r3, [pc, #152]	; (8007f38 <HAL_RCC_ClockConfig+0x1b0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f023 0207 	bic.w	r2, r3, #7
 8007ea6:	4924      	ldr	r1, [pc, #144]	; (8007f38 <HAL_RCC_ClockConfig+0x1b0>)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eae:	4b22      	ldr	r3, [pc, #136]	; (8007f38 <HAL_RCC_ClockConfig+0x1b0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e036      	b.n	8007f2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ecc:	4b1b      	ldr	r3, [pc, #108]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	4918      	ldr	r1, [pc, #96]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0308 	and.w	r3, r3, #8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eea:	4b14      	ldr	r3, [pc, #80]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	4910      	ldr	r1, [pc, #64]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007efe:	f000 f859 	bl	8007fb4 <HAL_RCC_GetSysClockFreq>
 8007f02:	4602      	mov	r2, r0
 8007f04:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <HAL_RCC_ClockConfig+0x1b4>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	091b      	lsrs	r3, r3, #4
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	490c      	ldr	r1, [pc, #48]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007f10:	5ccb      	ldrb	r3, [r1, r3]
 8007f12:	f003 031f 	and.w	r3, r3, #31
 8007f16:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1a:	4a0a      	ldr	r2, [pc, #40]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <HAL_RCC_ClockConfig+0x1c0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fd f806 	bl	8004f34 <HAL_InitTick>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40022000 	.word	0x40022000
 8007f3c:	40021000 	.word	0x40021000
 8007f40:	0800ac10 	.word	0x0800ac10
 8007f44:	2000005c 	.word	0x2000005c
 8007f48:	20000060 	.word	0x20000060

08007f4c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	; 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <HAL_RCC_MCOConfig+0x64>)
 8007f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f5c:	4a14      	ldr	r2, [pc, #80]	; (8007fb0 <HAL_RCC_MCOConfig+0x64>)
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f64:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <HAL_RCC_MCOConfig+0x64>)
 8007f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8007f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f76:	2302      	movs	r3, #2
 8007f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007f82:	2300      	movs	r3, #0
 8007f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007f86:	f107 0314 	add.w	r3, r7, #20
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f90:	f7fe fb4a 	bl	8006628 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8007f94:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <HAL_RCC_MCOConfig+0x64>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	430b      	orrs	r3, r1
 8007fa2:	4903      	ldr	r1, [pc, #12]	; (8007fb0 <HAL_RCC_MCOConfig+0x64>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	608b      	str	r3, [r1, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	3728      	adds	r7, #40	; 0x28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40021000 	.word	0x40021000

08007fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b089      	sub	sp, #36	; 0x24
 8007fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fc2:	4b3e      	ldr	r3, [pc, #248]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 030c 	and.w	r3, r3, #12
 8007fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fcc:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b0c      	cmp	r3, #12
 8007fe0:	d121      	bne.n	8008026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d11e      	bne.n	8008026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007fe8:	4b34      	ldr	r3, [pc, #208]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0308 	and.w	r3, r3, #8
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d107      	bne.n	8008004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ff4:	4b31      	ldr	r3, [pc, #196]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	f003 030f 	and.w	r3, r3, #15
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	e005      	b.n	8008010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008004:	4b2d      	ldr	r3, [pc, #180]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	091b      	lsrs	r3, r3, #4
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008010:	4a2b      	ldr	r2, [pc, #172]	; (80080c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10d      	bne.n	800803c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008024:	e00a      	b.n	800803c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b04      	cmp	r3, #4
 800802a:	d102      	bne.n	8008032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800802c:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800802e:	61bb      	str	r3, [r7, #24]
 8008030:	e004      	b.n	800803c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b08      	cmp	r3, #8
 8008036:	d101      	bne.n	800803c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008038:	4b23      	ldr	r3, [pc, #140]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800803a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2b0c      	cmp	r3, #12
 8008040:	d134      	bne.n	80080ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008042:	4b1e      	ldr	r3, [pc, #120]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d003      	beq.n	800805a <HAL_RCC_GetSysClockFreq+0xa6>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d003      	beq.n	8008060 <HAL_RCC_GetSysClockFreq+0xac>
 8008058:	e005      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800805a:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800805c:	617b      	str	r3, [r7, #20]
      break;
 800805e:	e005      	b.n	800806c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008060:	4b19      	ldr	r3, [pc, #100]	; (80080c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008062:	617b      	str	r3, [r7, #20]
      break;
 8008064:	e002      	b.n	800806c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	617b      	str	r3, [r7, #20]
      break;
 800806a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800806c:	4b13      	ldr	r3, [pc, #76]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	091b      	lsrs	r3, r3, #4
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	3301      	adds	r3, #1
 8008078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800807a:	4b10      	ldr	r3, [pc, #64]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	fb02 f203 	mul.w	r2, r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008092:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <HAL_RCC_GetSysClockFreq+0x108>)
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	0e5b      	lsrs	r3, r3, #25
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	3301      	adds	r3, #1
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80080ac:	69bb      	ldr	r3, [r7, #24]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3724      	adds	r7, #36	; 0x24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	40021000 	.word	0x40021000
 80080c0:	0800ac20 	.word	0x0800ac20
 80080c4:	00f42400 	.word	0x00f42400
 80080c8:	0124f800 	.word	0x0124f800

080080cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80080d4:	2300      	movs	r3, #0
 80080d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80080d8:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80080e4:	f7ff f9cc 	bl	8007480 <HAL_PWREx_GetVoltageRange>
 80080e8:	6178      	str	r0, [r7, #20]
 80080ea:	e014      	b.n	8008116 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80080ec:	4b25      	ldr	r3, [pc, #148]	; (8008184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f0:	4a24      	ldr	r2, [pc, #144]	; (8008184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f6:	6593      	str	r3, [r2, #88]	; 0x58
 80080f8:	4b22      	ldr	r3, [pc, #136]	; (8008184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80080fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008104:	f7ff f9bc 	bl	8007480 <HAL_PWREx_GetVoltageRange>
 8008108:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800810a:	4b1e      	ldr	r3, [pc, #120]	; (8008184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800810c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810e:	4a1d      	ldr	r2, [pc, #116]	; (8008184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008114:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800811c:	d10b      	bne.n	8008136 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b80      	cmp	r3, #128	; 0x80
 8008122:	d919      	bls.n	8008158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2ba0      	cmp	r3, #160	; 0xa0
 8008128:	d902      	bls.n	8008130 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800812a:	2302      	movs	r3, #2
 800812c:	613b      	str	r3, [r7, #16]
 800812e:	e013      	b.n	8008158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008130:	2301      	movs	r3, #1
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	e010      	b.n	8008158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b80      	cmp	r3, #128	; 0x80
 800813a:	d902      	bls.n	8008142 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800813c:	2303      	movs	r3, #3
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	e00a      	b.n	8008158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b80      	cmp	r3, #128	; 0x80
 8008146:	d102      	bne.n	800814e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008148:	2302      	movs	r3, #2
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	e004      	b.n	8008158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b70      	cmp	r3, #112	; 0x70
 8008152:	d101      	bne.n	8008158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008154:	2301      	movs	r3, #1
 8008156:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008158:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f023 0207 	bic.w	r2, r3, #7
 8008160:	4909      	ldr	r1, [pc, #36]	; (8008188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008168:	4b07      	ldr	r3, [pc, #28]	; (8008188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	429a      	cmp	r2, r3
 8008174:	d001      	beq.n	800817a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40021000 	.word	0x40021000
 8008188:	40022000 	.word	0x40022000

0800818c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008194:	2300      	movs	r3, #0
 8008196:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008198:	2300      	movs	r3, #0
 800819a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d031      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081b0:	d01a      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80081b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081b6:	d814      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d009      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80081bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081c0:	d10f      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80081c2:	4b5d      	ldr	r3, [pc, #372]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	4a5c      	ldr	r2, [pc, #368]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081ce:	e00c      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3304      	adds	r3, #4
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fa1e 	bl	8008618 <RCCEx_PLLSAI1_Config>
 80081dc:	4603      	mov	r3, r0
 80081de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80081e0:	e003      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	74fb      	strb	r3, [r7, #19]
      break;
 80081e6:	e000      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80081e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ea:	7cfb      	ldrb	r3, [r7, #19]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10b      	bne.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081f0:	4b51      	ldr	r3, [pc, #324]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80081f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	494e      	ldr	r1, [pc, #312]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008200:	4313      	orrs	r3, r2
 8008202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008206:	e001      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008208:	7cfb      	ldrb	r3, [r7, #19]
 800820a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 809e 	beq.w	8008356 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800821a:	2300      	movs	r3, #0
 800821c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800821e:	4b46      	ldr	r3, [pc, #280]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00d      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008234:	4b40      	ldr	r3, [pc, #256]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008238:	4a3f      	ldr	r2, [pc, #252]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800823a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800823e:	6593      	str	r3, [r2, #88]	; 0x58
 8008240:	4b3d      	ldr	r3, [pc, #244]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008248:	60bb      	str	r3, [r7, #8]
 800824a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800824c:	2301      	movs	r3, #1
 800824e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008250:	4b3a      	ldr	r3, [pc, #232]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a39      	ldr	r2, [pc, #228]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800825a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800825c:	f7fc feba 	bl	8004fd4 <HAL_GetTick>
 8008260:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008262:	e009      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008264:	f7fc feb6 	bl	8004fd4 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d902      	bls.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	74fb      	strb	r3, [r7, #19]
        break;
 8008276:	e005      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008278:	4b30      	ldr	r3, [pc, #192]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0ef      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008284:	7cfb      	ldrb	r3, [r7, #19]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d15a      	bne.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800828a:	4b2b      	ldr	r3, [pc, #172]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008294:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01e      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d019      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082a6:	4b24      	ldr	r3, [pc, #144]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082b2:	4b21      	ldr	r3, [pc, #132]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b8:	4a1f      	ldr	r2, [pc, #124]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082c2:	4b1d      	ldr	r3, [pc, #116]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c8:	4a1b      	ldr	r2, [pc, #108]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082d2:	4a19      	ldr	r2, [pc, #100]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d016      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e4:	f7fc fe76 	bl	8004fd4 <HAL_GetTick>
 80082e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ea:	e00b      	b.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ec:	f7fc fe72 	bl	8004fd4 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d902      	bls.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	74fb      	strb	r3, [r7, #19]
            break;
 8008302:	e006      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008304:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0ec      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008312:	7cfb      	ldrb	r3, [r7, #19]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10b      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008318:	4b07      	ldr	r3, [pc, #28]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800831a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008326:	4904      	ldr	r1, [pc, #16]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008328:	4313      	orrs	r3, r2
 800832a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800832e:	e009      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008330:	7cfb      	ldrb	r3, [r7, #19]
 8008332:	74bb      	strb	r3, [r7, #18]
 8008334:	e006      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008336:	bf00      	nop
 8008338:	40021000 	.word	0x40021000
 800833c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008340:	7cfb      	ldrb	r3, [r7, #19]
 8008342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008344:	7c7b      	ldrb	r3, [r7, #17]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d105      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800834a:	4bb2      	ldr	r3, [pc, #712]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800834c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834e:	4ab1      	ldr	r2, [pc, #708]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008354:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008362:	4bac      	ldr	r3, [pc, #688]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008368:	f023 0203 	bic.w	r2, r3, #3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	49a8      	ldr	r1, [pc, #672]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008384:	4ba3      	ldr	r3, [pc, #652]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838a:	f023 020c 	bic.w	r2, r3, #12
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	49a0      	ldr	r1, [pc, #640]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008394:	4313      	orrs	r3, r2
 8008396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083a6:	4b9b      	ldr	r3, [pc, #620]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	4997      	ldr	r1, [pc, #604]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0320 	and.w	r3, r3, #32
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083c8:	4b92      	ldr	r3, [pc, #584]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d6:	498f      	ldr	r1, [pc, #572]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083ea:	4b8a      	ldr	r3, [pc, #552]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f8:	4986      	ldr	r1, [pc, #536]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800840c:	4b81      	ldr	r3, [pc, #516]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	497e      	ldr	r1, [pc, #504]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800842e:	4b79      	ldr	r3, [pc, #484]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	4975      	ldr	r1, [pc, #468]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008450:	4b70      	ldr	r3, [pc, #448]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	496d      	ldr	r1, [pc, #436]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008472:	4b68      	ldr	r3, [pc, #416]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	4964      	ldr	r1, [pc, #400]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d028      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008494:	4b5f      	ldr	r3, [pc, #380]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a2:	495c      	ldr	r1, [pc, #368]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b2:	d106      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084b4:	4b57      	ldr	r3, [pc, #348]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4a56      	ldr	r2, [pc, #344]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084be:	60d3      	str	r3, [r2, #12]
 80084c0:	e011      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084ca:	d10c      	bne.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3304      	adds	r3, #4
 80084d0:	2101      	movs	r1, #1
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f8a0 	bl	8008618 <RCCEx_PLLSAI1_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80084dc:	7cfb      	ldrb	r3, [r7, #19]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80084e2:	7cfb      	ldrb	r3, [r7, #19]
 80084e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d028      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084f2:	4b48      	ldr	r3, [pc, #288]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008500:	4944      	ldr	r1, [pc, #272]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008502:	4313      	orrs	r3, r2
 8008504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008510:	d106      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008512:	4b40      	ldr	r3, [pc, #256]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	4a3f      	ldr	r2, [pc, #252]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800851c:	60d3      	str	r3, [r2, #12]
 800851e:	e011      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008528:	d10c      	bne.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3304      	adds	r3, #4
 800852e:	2101      	movs	r1, #1
 8008530:	4618      	mov	r0, r3
 8008532:	f000 f871 	bl	8008618 <RCCEx_PLLSAI1_Config>
 8008536:	4603      	mov	r3, r0
 8008538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800853a:	7cfb      	ldrb	r3, [r7, #19]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8008540:	7cfb      	ldrb	r3, [r7, #19]
 8008542:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d028      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008550:	4b30      	ldr	r3, [pc, #192]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855e:	492d      	ldr	r1, [pc, #180]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008560:	4313      	orrs	r3, r2
 8008562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800856a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800856e:	d106      	bne.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008570:	4b28      	ldr	r3, [pc, #160]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	4a27      	ldr	r2, [pc, #156]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800857a:	60d3      	str	r3, [r2, #12]
 800857c:	e011      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008586:	d10c      	bne.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3304      	adds	r3, #4
 800858c:	2101      	movs	r1, #1
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f842 	bl	8008618 <RCCEx_PLLSAI1_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008598:	7cfb      	ldrb	r3, [r7, #19]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 800859e:	7cfb      	ldrb	r3, [r7, #19]
 80085a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d01c      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085ae:	4b19      	ldr	r3, [pc, #100]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085bc:	4915      	ldr	r1, [pc, #84]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085cc:	d10c      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3304      	adds	r3, #4
 80085d2:	2102      	movs	r1, #2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 f81f 	bl	8008618 <RCCEx_PLLSAI1_Config>
 80085da:	4603      	mov	r3, r0
 80085dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085de:	7cfb      	ldrb	r3, [r7, #19]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80085e4:	7cfb      	ldrb	r3, [r7, #19]
 80085e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00a      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	4904      	ldr	r1, [pc, #16]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008604:	4313      	orrs	r3, r2
 8008606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800860a:	7cbb      	ldrb	r3, [r7, #18]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40021000 	.word	0x40021000

08008618 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008626:	4b74      	ldr	r3, [pc, #464]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d018      	beq.n	8008664 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008632:	4b71      	ldr	r3, [pc, #452]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f003 0203 	and.w	r2, r3, #3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d10d      	bne.n	800865e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
       ||
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800864a:	4b6b      	ldr	r3, [pc, #428]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	091b      	lsrs	r3, r3, #4
 8008650:	f003 0307 	and.w	r3, r3, #7
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
       ||
 800865a:	429a      	cmp	r2, r3
 800865c:	d047      	beq.n	80086ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	73fb      	strb	r3, [r7, #15]
 8008662:	e044      	b.n	80086ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b03      	cmp	r3, #3
 800866a:	d018      	beq.n	800869e <RCCEx_PLLSAI1_Config+0x86>
 800866c:	2b03      	cmp	r3, #3
 800866e:	d825      	bhi.n	80086bc <RCCEx_PLLSAI1_Config+0xa4>
 8008670:	2b01      	cmp	r3, #1
 8008672:	d002      	beq.n	800867a <RCCEx_PLLSAI1_Config+0x62>
 8008674:	2b02      	cmp	r3, #2
 8008676:	d009      	beq.n	800868c <RCCEx_PLLSAI1_Config+0x74>
 8008678:	e020      	b.n	80086bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800867a:	4b5f      	ldr	r3, [pc, #380]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d11d      	bne.n	80086c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800868a:	e01a      	b.n	80086c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800868c:	4b5a      	ldr	r3, [pc, #360]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008694:	2b00      	cmp	r3, #0
 8008696:	d116      	bne.n	80086c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800869c:	e013      	b.n	80086c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800869e:	4b56      	ldr	r3, [pc, #344]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10f      	bne.n	80086ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80086aa:	4b53      	ldr	r3, [pc, #332]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d109      	bne.n	80086ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086ba:	e006      	b.n	80086ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	e004      	b.n	80086cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80086c2:	bf00      	nop
 80086c4:	e002      	b.n	80086cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80086c6:	bf00      	nop
 80086c8:	e000      	b.n	80086cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80086ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10d      	bne.n	80086ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80086d2:	4b49      	ldr	r3, [pc, #292]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6819      	ldr	r1, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	430b      	orrs	r3, r1
 80086e8:	4943      	ldr	r1, [pc, #268]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d17c      	bne.n	80087ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80086f4:	4b40      	ldr	r3, [pc, #256]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a3f      	ldr	r2, [pc, #252]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008700:	f7fc fc68 	bl	8004fd4 <HAL_GetTick>
 8008704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008706:	e009      	b.n	800871c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008708:	f7fc fc64 	bl	8004fd4 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d902      	bls.n	800871c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	73fb      	strb	r3, [r7, #15]
        break;
 800871a:	e005      	b.n	8008728 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800871c:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1ef      	bne.n	8008708 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d15f      	bne.n	80087ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d110      	bne.n	8008756 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008734:	4b30      	ldr	r3, [pc, #192]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800873c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6892      	ldr	r2, [r2, #8]
 8008744:	0211      	lsls	r1, r2, #8
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	68d2      	ldr	r2, [r2, #12]
 800874a:	06d2      	lsls	r2, r2, #27
 800874c:	430a      	orrs	r2, r1
 800874e:	492a      	ldr	r1, [pc, #168]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008750:	4313      	orrs	r3, r2
 8008752:	610b      	str	r3, [r1, #16]
 8008754:	e027      	b.n	80087a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d112      	bne.n	8008782 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800875c:	4b26      	ldr	r3, [pc, #152]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008764:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	6892      	ldr	r2, [r2, #8]
 800876c:	0211      	lsls	r1, r2, #8
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6912      	ldr	r2, [r2, #16]
 8008772:	0852      	lsrs	r2, r2, #1
 8008774:	3a01      	subs	r2, #1
 8008776:	0552      	lsls	r2, r2, #21
 8008778:	430a      	orrs	r2, r1
 800877a:	491f      	ldr	r1, [pc, #124]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800877c:	4313      	orrs	r3, r2
 800877e:	610b      	str	r3, [r1, #16]
 8008780:	e011      	b.n	80087a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008782:	4b1d      	ldr	r3, [pc, #116]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800878a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	6892      	ldr	r2, [r2, #8]
 8008792:	0211      	lsls	r1, r2, #8
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6952      	ldr	r2, [r2, #20]
 8008798:	0852      	lsrs	r2, r2, #1
 800879a:	3a01      	subs	r2, #1
 800879c:	0652      	lsls	r2, r2, #25
 800879e:	430a      	orrs	r2, r1
 80087a0:	4915      	ldr	r1, [pc, #84]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a13      	ldr	r2, [pc, #76]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b2:	f7fc fc0f 	bl	8004fd4 <HAL_GetTick>
 80087b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087b8:	e009      	b.n	80087ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087ba:	f7fc fc0b 	bl	8004fd4 <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d902      	bls.n	80087ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	73fb      	strb	r3, [r7, #15]
          break;
 80087cc:	e005      	b.n	80087da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80087ce:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0ef      	beq.n	80087ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d106      	bne.n	80087ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80087e0:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	4903      	ldr	r1, [pc, #12]	; (80087f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	40021000 	.word	0x40021000

080087fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e049      	b.n	80088a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fc fa3a 	bl	8004c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3304      	adds	r3, #4
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f000 fc08 	bl	8009050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d001      	beq.n	80088c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e03b      	b.n	800893c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0201 	orr.w	r2, r2, #1
 80088da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a19      	ldr	r2, [pc, #100]	; (8008948 <HAL_TIM_Base_Start_IT+0x9c>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d009      	beq.n	80088fa <HAL_TIM_Base_Start_IT+0x4e>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ee:	d004      	beq.n	80088fa <HAL_TIM_Base_Start_IT+0x4e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a15      	ldr	r2, [pc, #84]	; (800894c <HAL_TIM_Base_Start_IT+0xa0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d115      	bne.n	8008926 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	4b13      	ldr	r3, [pc, #76]	; (8008950 <HAL_TIM_Base_Start_IT+0xa4>)
 8008902:	4013      	ands	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2b06      	cmp	r3, #6
 800890a:	d015      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x8c>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008912:	d011      	beq.n	8008938 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0201 	orr.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008924:	e008      	b.n	8008938 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0201 	orr.w	r2, r2, #1
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	e000      	b.n	800893a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3714      	adds	r7, #20
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	40012c00 	.word	0x40012c00
 800894c:	40014000 	.word	0x40014000
 8008950:	00010007 	.word	0x00010007

08008954 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0201 	bic.w	r2, r2, #1
 800896a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6a1a      	ldr	r2, [r3, #32]
 8008972:	f241 1311 	movw	r3, #4369	; 0x1111
 8008976:	4013      	ands	r3, r2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10f      	bne.n	800899c <HAL_TIM_Base_Stop_IT+0x48>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	f240 4344 	movw	r3, #1092	; 0x444
 8008986:	4013      	ands	r3, r2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d107      	bne.n	800899c <HAL_TIM_Base_Stop_IT+0x48>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e049      	b.n	8008a58 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d106      	bne.n	80089de <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7fc f917 	bl	8004c0c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2202      	movs	r2, #2
 80089e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f000 fb2d 	bl	8009050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d104      	bne.n	8008a7a <HAL_TIM_IC_Start_IT+0x1a>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	e023      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x62>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIM_IC_Start_IT+0x2a>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	e01b      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x62>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b08      	cmp	r3, #8
 8008a8e:	d104      	bne.n	8008a9a <HAL_TIM_IC_Start_IT+0x3a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	e013      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x62>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b0c      	cmp	r3, #12
 8008a9e:	d104      	bne.n	8008aaa <HAL_TIM_IC_Start_IT+0x4a>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	e00b      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x62>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2b10      	cmp	r3, #16
 8008aae:	d104      	bne.n	8008aba <HAL_TIM_IC_Start_IT+0x5a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	e003      	b.n	8008ac2 <HAL_TIM_IC_Start_IT+0x62>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <HAL_TIM_IC_Start_IT+0x74>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	e013      	b.n	8008afc <HAL_TIM_IC_Start_IT+0x9c>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d104      	bne.n	8008ae4 <HAL_TIM_IC_Start_IT+0x84>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	e00b      	b.n	8008afc <HAL_TIM_IC_Start_IT+0x9c>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b08      	cmp	r3, #8
 8008ae8:	d104      	bne.n	8008af4 <HAL_TIM_IC_Start_IT+0x94>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	e003      	b.n	8008afc <HAL_TIM_IC_Start_IT+0x9c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d102      	bne.n	8008b0a <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d001      	beq.n	8008b0e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e0c4      	b.n	8008c98 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d104      	bne.n	8008b1e <HAL_TIM_IC_Start_IT+0xbe>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b1c:	e023      	b.n	8008b66 <HAL_TIM_IC_Start_IT+0x106>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d104      	bne.n	8008b2e <HAL_TIM_IC_Start_IT+0xce>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b2c:	e01b      	b.n	8008b66 <HAL_TIM_IC_Start_IT+0x106>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d104      	bne.n	8008b3e <HAL_TIM_IC_Start_IT+0xde>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b3c:	e013      	b.n	8008b66 <HAL_TIM_IC_Start_IT+0x106>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2b0c      	cmp	r3, #12
 8008b42:	d104      	bne.n	8008b4e <HAL_TIM_IC_Start_IT+0xee>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2202      	movs	r2, #2
 8008b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b4c:	e00b      	b.n	8008b66 <HAL_TIM_IC_Start_IT+0x106>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b10      	cmp	r3, #16
 8008b52:	d104      	bne.n	8008b5e <HAL_TIM_IC_Start_IT+0xfe>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b5c:	e003      	b.n	8008b66 <HAL_TIM_IC_Start_IT+0x106>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2202      	movs	r2, #2
 8008b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <HAL_TIM_IC_Start_IT+0x116>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b74:	e013      	b.n	8008b9e <HAL_TIM_IC_Start_IT+0x13e>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_IC_Start_IT+0x126>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b84:	e00b      	b.n	8008b9e <HAL_TIM_IC_Start_IT+0x13e>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d104      	bne.n	8008b96 <HAL_TIM_IC_Start_IT+0x136>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b94:	e003      	b.n	8008b9e <HAL_TIM_IC_Start_IT+0x13e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b0c      	cmp	r3, #12
 8008ba2:	d841      	bhi.n	8008c28 <HAL_TIM_IC_Start_IT+0x1c8>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <HAL_TIM_IC_Start_IT+0x14c>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008be1 	.word	0x08008be1
 8008bb0:	08008c29 	.word	0x08008c29
 8008bb4:	08008c29 	.word	0x08008c29
 8008bb8:	08008c29 	.word	0x08008c29
 8008bbc:	08008bf3 	.word	0x08008bf3
 8008bc0:	08008c29 	.word	0x08008c29
 8008bc4:	08008c29 	.word	0x08008c29
 8008bc8:	08008c29 	.word	0x08008c29
 8008bcc:	08008c05 	.word	0x08008c05
 8008bd0:	08008c29 	.word	0x08008c29
 8008bd4:	08008c29 	.word	0x08008c29
 8008bd8:	08008c29 	.word	0x08008c29
 8008bdc:	08008c17 	.word	0x08008c17
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0202 	orr.w	r2, r2, #2
 8008bee:	60da      	str	r2, [r3, #12]
      break;
 8008bf0:	e01b      	b.n	8008c2a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0204 	orr.w	r2, r2, #4
 8008c00:	60da      	str	r2, [r3, #12]
      break;
 8008c02:	e012      	b.n	8008c2a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0208 	orr.w	r2, r2, #8
 8008c12:	60da      	str	r2, [r3, #12]
      break;
 8008c14:	e009      	b.n	8008c2a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f042 0210 	orr.w	r2, r2, #16
 8008c24:	60da      	str	r2, [r3, #12]
      break;
 8008c26:	e000      	b.n	8008c2a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8008c28:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 fb7c 	bl	8009330 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a18      	ldr	r2, [pc, #96]	; (8008ca0 <HAL_TIM_IC_Start_IT+0x240>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d009      	beq.n	8008c56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4a:	d004      	beq.n	8008c56 <HAL_TIM_IC_Start_IT+0x1f6>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a14      	ldr	r2, [pc, #80]	; (8008ca4 <HAL_TIM_IC_Start_IT+0x244>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d115      	bne.n	8008c82 <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	4b12      	ldr	r3, [pc, #72]	; (8008ca8 <HAL_TIM_IC_Start_IT+0x248>)
 8008c5e:	4013      	ands	r3, r2
 8008c60:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b06      	cmp	r3, #6
 8008c66:	d015      	beq.n	8008c94 <HAL_TIM_IC_Start_IT+0x234>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c6e:	d011      	beq.n	8008c94 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0201 	orr.w	r2, r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c80:	e008      	b.n	8008c94 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e000      	b.n	8008c96 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	40012c00 	.word	0x40012c00
 8008ca4:	40014000 	.word	0x40014000
 8008ca8:	00010007 	.word	0x00010007

08008cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f003 0302 	and.w	r3, r3, #2
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d122      	bne.n	8008d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f003 0302 	and.w	r3, r3, #2
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d11b      	bne.n	8008d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f06f 0202 	mvn.w	r2, #2
 8008cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7fa ff92 	bl	8003c18 <HAL_TIM_IC_CaptureCallback>
 8008cf4:	e005      	b.n	8008d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f98b 	bl	8009012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f992 	bl	8009026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d122      	bne.n	8008d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d11b      	bne.n	8008d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f06f 0204 	mvn.w	r2, #4
 8008d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2202      	movs	r2, #2
 8008d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fa ff68 	bl	8003c18 <HAL_TIM_IC_CaptureCallback>
 8008d48:	e005      	b.n	8008d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f961 	bl	8009012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f968 	bl	8009026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	d122      	bne.n	8008db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	f003 0308 	and.w	r3, r3, #8
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d11b      	bne.n	8008db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f06f 0208 	mvn.w	r2, #8
 8008d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2204      	movs	r2, #4
 8008d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7fa ff3e 	bl	8003c18 <HAL_TIM_IC_CaptureCallback>
 8008d9c:	e005      	b.n	8008daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f937 	bl	8009012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f93e 	bl	8009026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d122      	bne.n	8008e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	2b10      	cmp	r3, #16
 8008dca:	d11b      	bne.n	8008e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f06f 0210 	mvn.w	r2, #16
 8008dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2208      	movs	r2, #8
 8008dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7fa ff14 	bl	8003c18 <HAL_TIM_IC_CaptureCallback>
 8008df0:	e005      	b.n	8008dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f90d 	bl	8009012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f914 	bl	8009026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d10e      	bne.n	8008e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d107      	bne.n	8008e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f06f 0201 	mvn.w	r2, #1
 8008e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7fb f862 	bl	8003ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3a:	2b80      	cmp	r3, #128	; 0x80
 8008e3c:	d10e      	bne.n	8008e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e48:	2b80      	cmp	r3, #128	; 0x80
 8008e4a:	d107      	bne.n	8008e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fb00 	bl	800945c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6a:	d10e      	bne.n	8008e8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e76:	2b80      	cmp	r3, #128	; 0x80
 8008e78:	d107      	bne.n	8008e8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 faf3 	bl	8009470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e94:	2b40      	cmp	r3, #64	; 0x40
 8008e96:	d10e      	bne.n	8008eb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea2:	2b40      	cmp	r3, #64	; 0x40
 8008ea4:	d107      	bne.n	8008eb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f8c2 	bl	800903a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	d10e      	bne.n	8008ee2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b20      	cmp	r3, #32
 8008ed0:	d107      	bne.n	8008ee2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f06f 0220 	mvn.w	r2, #32
 8008eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fab3 	bl	8009448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d101      	bne.n	8008f04 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008f00:	2302      	movs	r3, #2
 8008f02:	e082      	b.n	800900a <HAL_TIM_IC_ConfigChannel+0x120>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d11b      	bne.n	8008f4a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	6819      	ldr	r1, [r3, #0]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f000 f8f9 	bl	8009118 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 020c 	bic.w	r2, r2, #12
 8008f34:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6999      	ldr	r1, [r3, #24]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	689a      	ldr	r2, [r3, #8]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	619a      	str	r2, [r3, #24]
 8008f48:	e05a      	b.n	8009000 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	d11c      	bne.n	8008f8a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	6819      	ldr	r1, [r3, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f000 f930 	bl	80091c4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	699a      	ldr	r2, [r3, #24]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008f72:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6999      	ldr	r1, [r3, #24]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	021a      	lsls	r2, r3, #8
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	430a      	orrs	r2, r1
 8008f86:	619a      	str	r2, [r3, #24]
 8008f88:	e03a      	b.n	8009000 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d11b      	bne.n	8008fc8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6819      	ldr	r1, [r3, #0]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f000 f94d 	bl	800923e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	69da      	ldr	r2, [r3, #28]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 020c 	bic.w	r2, r2, #12
 8008fb2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69d9      	ldr	r1, [r3, #28]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	61da      	str	r2, [r3, #28]
 8008fc6:	e01b      	b.n	8009000 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	6819      	ldr	r1, [r3, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f000 f96d 	bl	80092b6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	69da      	ldr	r2, [r3, #28]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008fea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69d9      	ldr	r1, [r3, #28]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	021a      	lsls	r2, r3, #8
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800902e:	bf00      	nop
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a2a      	ldr	r2, [pc, #168]	; (800910c <TIM_Base_SetConfig+0xbc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d003      	beq.n	8009070 <TIM_Base_SetConfig+0x20>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906e:	d108      	bne.n	8009082 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a21      	ldr	r2, [pc, #132]	; (800910c <TIM_Base_SetConfig+0xbc>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d00b      	beq.n	80090a2 <TIM_Base_SetConfig+0x52>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009090:	d007      	beq.n	80090a2 <TIM_Base_SetConfig+0x52>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a1e      	ldr	r2, [pc, #120]	; (8009110 <TIM_Base_SetConfig+0xc0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d003      	beq.n	80090a2 <TIM_Base_SetConfig+0x52>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <TIM_Base_SetConfig+0xc4>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d108      	bne.n	80090b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	4313      	orrs	r3, r2
 80090c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a0c      	ldr	r2, [pc, #48]	; (800910c <TIM_Base_SetConfig+0xbc>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d007      	beq.n	80090f0 <TIM_Base_SetConfig+0xa0>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a0b      	ldr	r2, [pc, #44]	; (8009110 <TIM_Base_SetConfig+0xc0>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d003      	beq.n	80090f0 <TIM_Base_SetConfig+0xa0>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a0a      	ldr	r2, [pc, #40]	; (8009114 <TIM_Base_SetConfig+0xc4>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d103      	bne.n	80090f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	691a      	ldr	r2, [r3, #16]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	615a      	str	r2, [r3, #20]
}
 80090fe:	bf00      	nop
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	40012c00 	.word	0x40012c00
 8009110:	40014000 	.word	0x40014000
 8009114:	40014400 	.word	0x40014400

08009118 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	f023 0201 	bic.w	r2, r3, #1
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4a1e      	ldr	r2, [pc, #120]	; (80091bc <TIM_TI1_SetConfig+0xa4>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d007      	beq.n	8009156 <TIM_TI1_SetConfig+0x3e>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800914c:	d003      	beq.n	8009156 <TIM_TI1_SetConfig+0x3e>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4a1b      	ldr	r2, [pc, #108]	; (80091c0 <TIM_TI1_SetConfig+0xa8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d101      	bne.n	800915a <TIM_TI1_SetConfig+0x42>
 8009156:	2301      	movs	r3, #1
 8009158:	e000      	b.n	800915c <TIM_TI1_SetConfig+0x44>
 800915a:	2300      	movs	r3, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d008      	beq.n	8009172 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f023 0303 	bic.w	r3, r3, #3
 8009166:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4313      	orrs	r3, r2
 800916e:	617b      	str	r3, [r7, #20]
 8009170:	e003      	b.n	800917a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f043 0301 	orr.w	r3, r3, #1
 8009178:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	011b      	lsls	r3, r3, #4
 8009186:	b2db      	uxtb	r3, r3
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f023 030a 	bic.w	r3, r3, #10
 8009194:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f003 030a 	and.w	r3, r3, #10
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40014000 	.word	0x40014000

080091c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	f023 0210 	bic.w	r2, r3, #16
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009202:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	031b      	lsls	r3, r3, #12
 8009208:	b29b      	uxth	r3, r3
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009216:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	4313      	orrs	r3, r2
 8009224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	621a      	str	r2, [r3, #32]
}
 8009232:	bf00      	nop
 8009234:	371c      	adds	r7, #28
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800923e:	b480      	push	{r7}
 8009240:	b087      	sub	sp, #28
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	607a      	str	r2, [r7, #4]
 800924a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f023 0303 	bic.w	r3, r3, #3
 800926a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4313      	orrs	r3, r2
 8009272:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800927a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	b2db      	uxtb	r3, r3
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	4313      	orrs	r3, r2
 8009286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800928e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	4313      	orrs	r3, r2
 800929c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	621a      	str	r2, [r3, #32]
}
 80092aa:	bf00      	nop
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b087      	sub	sp, #28
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
 80092c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	031b      	lsls	r3, r3, #12
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	4313      	orrs	r3, r2
 8009300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009308:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	031b      	lsls	r3, r3, #12
 800930e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	621a      	str	r2, [r3, #32]
}
 8009324:	bf00      	nop
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 031f 	and.w	r3, r3, #31
 8009342:	2201      	movs	r2, #1
 8009344:	fa02 f303 	lsl.w	r3, r2, r3
 8009348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6a1a      	ldr	r2, [r3, #32]
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	43db      	mvns	r3, r3
 8009352:	401a      	ands	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a1a      	ldr	r2, [r3, #32]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 031f 	and.w	r3, r3, #31
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	fa01 f303 	lsl.w	r3, r1, r3
 8009368:	431a      	orrs	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	621a      	str	r2, [r3, #32]
}
 800936e:	bf00      	nop
 8009370:	371c      	adds	r7, #28
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
	...

0800937c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009390:	2302      	movs	r3, #2
 8009392:	e04f      	b.n	8009434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a21      	ldr	r2, [pc, #132]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d108      	bne.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a14      	ldr	r2, [pc, #80]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d009      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d004      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a10      	ldr	r2, [pc, #64]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d10c      	bne.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	4313      	orrs	r3, r2
 8009418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40012c00 	.word	0x40012c00
 8009444:	40014000 	.word	0x40014000

08009448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009484:	b084      	sub	sp, #16
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	f107 0014 	add.w	r0, r7, #20
 8009492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	b004      	add	sp, #16
 80094a4:	4770      	bx	lr

080094a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80094ae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80094b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	43db      	mvns	r3, r3
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	4013      	ands	r3, r2
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80094f6:	b084      	sub	sp, #16
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	f107 0014 	add.w	r0, r7, #20
 8009504:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	b004      	add	sp, #16
 8009536:	4770      	bx	lr

08009538 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009546:	b29b      	uxth	r3, r3
 8009548:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800954c:	b29a      	uxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <__libc_init_array>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	4d0d      	ldr	r5, [pc, #52]	; (800959c <__libc_init_array+0x38>)
 8009568:	4c0d      	ldr	r4, [pc, #52]	; (80095a0 <__libc_init_array+0x3c>)
 800956a:	1b64      	subs	r4, r4, r5
 800956c:	10a4      	asrs	r4, r4, #2
 800956e:	2600      	movs	r6, #0
 8009570:	42a6      	cmp	r6, r4
 8009572:	d109      	bne.n	8009588 <__libc_init_array+0x24>
 8009574:	4d0b      	ldr	r5, [pc, #44]	; (80095a4 <__libc_init_array+0x40>)
 8009576:	4c0c      	ldr	r4, [pc, #48]	; (80095a8 <__libc_init_array+0x44>)
 8009578:	f000 f820 	bl	80095bc <_init>
 800957c:	1b64      	subs	r4, r4, r5
 800957e:	10a4      	asrs	r4, r4, #2
 8009580:	2600      	movs	r6, #0
 8009582:	42a6      	cmp	r6, r4
 8009584:	d105      	bne.n	8009592 <__libc_init_array+0x2e>
 8009586:	bd70      	pop	{r4, r5, r6, pc}
 8009588:	f855 3b04 	ldr.w	r3, [r5], #4
 800958c:	4798      	blx	r3
 800958e:	3601      	adds	r6, #1
 8009590:	e7ee      	b.n	8009570 <__libc_init_array+0xc>
 8009592:	f855 3b04 	ldr.w	r3, [r5], #4
 8009596:	4798      	blx	r3
 8009598:	3601      	adds	r6, #1
 800959a:	e7f2      	b.n	8009582 <__libc_init_array+0x1e>
 800959c:	0800ac50 	.word	0x0800ac50
 80095a0:	0800ac50 	.word	0x0800ac50
 80095a4:	0800ac50 	.word	0x0800ac50
 80095a8:	0800ac54 	.word	0x0800ac54

080095ac <memset>:
 80095ac:	4402      	add	r2, r0
 80095ae:	4603      	mov	r3, r0
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d100      	bne.n	80095b6 <memset+0xa>
 80095b4:	4770      	bx	lr
 80095b6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ba:	e7f9      	b.n	80095b0 <memset+0x4>

080095bc <_init>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	bf00      	nop
 80095c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c2:	bc08      	pop	{r3}
 80095c4:	469e      	mov	lr, r3
 80095c6:	4770      	bx	lr

080095c8 <_fini>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr
